
DAQ_H7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f918  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800fbb8  0800fbb8  00010bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010070  08010070  000121dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010070  08010070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010078  08010078  000121dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010078  08010078  00011078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801007c  0801007c  0001107c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  24000000  08010080  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f44  240001dc  0801025c  000121dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005120  0801025c  00013120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000309e2  00000000  00000000  0001220a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ba1  00000000  00000000  00042bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002370  00000000  00000000  00048790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b85  00000000  00000000  0004ab00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047ae3  00000000  00000000  0004c685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032620  00000000  00000000  00094168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ba151  00000000  00000000  000c6788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002808d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a664  00000000  00000000  0028091c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0028af80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fba0 	.word	0x0800fba0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800fba0 	.word	0x0800fba0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <MX_ADC3_Init+0xd4>)
 80007c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000884 <MX_ADC3_Init+0xd8>)
 80007c8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000880 <MX_ADC3_Init+0xd4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <MX_ADC3_Init+0xd4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <MX_ADC3_Init+0xd4>)
 80007d8:	2204      	movs	r2, #4
 80007da:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007dc:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <MX_ADC3_Init+0xd4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007e2:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <MX_ADC3_Init+0xd4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007e8:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <MX_ADC3_Init+0xd4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007ee:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <MX_ADC3_Init+0xd4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_ADC3_Init+0xd4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_ADC3_Init+0xd4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_ADC3_Init+0xd4>)
 8000802:	2200      	movs	r2, #0
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_ADC3_Init+0xd4>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_ADC3_Init+0xd4>)
 800080e:	2200      	movs	r2, #0
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_ADC3_Init+0xd4>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_ADC3_Init+0xd4>)
 800081c:	2201      	movs	r2, #1
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <MX_ADC3_Init+0xd4>)
 8000822:	f001 fb5d 	bl	8001ee0 <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 800082c:	f000 fd0c 	bl	8001248 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_ADC3_Init+0xd4>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000836:	4812      	ldr	r0, [pc, #72]	@ (8000880 <MX_ADC3_Init+0xd4>)
 8000838:	f001 fb52 	bl	8001ee0 <HAL_ADC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000842:	f000 fd01 	bl	8001248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_ADC3_Init+0xdc>)
 8000848:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084a:	2306      	movs	r3, #6
 800084c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000852:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000856:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000858:	2304      	movs	r3, #4
 800085a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_ADC3_Init+0xd4>)
 800086a:	f001 fcdb 	bl	8002224 <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000874:	f000 fce8 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	240001f8 	.word	0x240001f8
 8000884:	58026000 	.word	0x58026000
 8000888:	04300002 	.word	0x04300002

0800088c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0bc      	sub	sp, #240	@ 0xf0
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a4:	f107 0318 	add.w	r3, r7, #24
 80008a8:	22c0      	movs	r2, #192	@ 0xc0
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f00d fb45 	bl	800df3c <memset>
  if(adcHandle->Instance==ADC3)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a52      	ldr	r2, [pc, #328]	@ (8000a00 <HAL_ADC_MspInit+0x174>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	f040 809d 	bne.w	80009f8 <HAL_ADC_MspInit+0x16c>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008c2:	f04f 0300 	mov.w	r3, #0
 80008c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80008ca:	2304      	movs	r3, #4
 80008cc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80008ce:	230a      	movs	r3, #10
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008de:	23c0      	movs	r3, #192	@ 0xc0
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008e2:	2320      	movs	r3, #32
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	4618      	mov	r0, r3
 80008f6:	f005 fd85 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000900:	f000 fca2 	bl	8001248 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000904:	4b3f      	ldr	r3, [pc, #252]	@ (8000a04 <HAL_ADC_MspInit+0x178>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a04 <HAL_ADC_MspInit+0x178>)
 800090c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000914:	4b3b      	ldr	r3, [pc, #236]	@ (8000a04 <HAL_ADC_MspInit+0x178>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000922:	4b38      	ldr	r3, [pc, #224]	@ (8000a04 <HAL_ADC_MspInit+0x178>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a36      	ldr	r2, [pc, #216]	@ (8000a04 <HAL_ADC_MspInit+0x178>)
 800092a:	f043 0320 	orr.w	r3, r3, #32
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b34      	ldr	r3, [pc, #208]	@ (8000a04 <HAL_ADC_MspInit+0x178>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0320 	and.w	r3, r3, #32
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <HAL_ADC_MspInit+0x178>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	4a2f      	ldr	r2, [pc, #188]	@ (8000a04 <HAL_ADC_MspInit+0x178>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000950:	4b2c      	ldr	r3, [pc, #176]	@ (8000a04 <HAL_ADC_MspInit+0x178>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    PF7     ------> ADC3_INP3
    PF9     ------> ADC3_INP2
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800095e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000962:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000972:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000976:	4619      	mov	r1, r3
 8000978:	4823      	ldr	r0, [pc, #140]	@ (8000a08 <HAL_ADC_MspInit+0x17c>)
 800097a:	f004 f9f1 	bl	8004d60 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800097e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000982:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000986:	f001 f909 	bl	8001b9c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800098a:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800098e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000992:	f001 f903 	bl	8001b9c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 8000998:	4a1d      	ldr	r2, [pc, #116]	@ (8000a10 <HAL_ADC_MspInit+0x184>)
 800099a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 800099e:	2273      	movs	r2, #115	@ 0x73
 80009a0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 80009b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 80009b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009bc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 80009c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009c4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 80009c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009cc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 80009d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009d4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80009dc:	480b      	ldr	r0, [pc, #44]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 80009de:	f002 f999 	bl	8002d14 <HAL_DMA_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_ADC_MspInit+0x160>
    {
      Error_Handler();
 80009e8:	f000 fc2e 	bl	8001248 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 80009f0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80009f2:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <HAL_ADC_MspInit+0x180>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009f8:	bf00      	nop
 80009fa:	37f0      	adds	r7, #240	@ 0xf0
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	58026000 	.word	0x58026000
 8000a04:	58024400 	.word	0x58024400
 8000a08:	58021400 	.word	0x58021400
 8000a0c:	2400025c 	.word	0x2400025c
 8000a10:	40020010 	.word	0x40020010

08000a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <MX_DMA_Init+0x3c>)
 8000a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a20:	4a0b      	ldr	r2, [pc, #44]	@ (8000a50 <MX_DMA_Init+0x3c>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_DMA_Init+0x3c>)
 8000a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2105      	movs	r1, #5
 8000a3c:	200b      	movs	r0, #11
 8000a3e:	f002 f934 	bl	8002caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a42:	200b      	movs	r0, #11
 8000a44:	f002 f94b 	bl	8002cde <HAL_NVIC_EnableIRQ>

}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	58024400 	.word	0x58024400

08000a54 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a58:	4b2e      	ldr	r3, [pc, #184]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b18 <MX_FDCAN1_Init+0xc4>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a64:	4b2b      	ldr	r3, [pc, #172]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a70:	4b28      	ldr	r3, [pc, #160]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a76:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000a7c:	4b25      	ldr	r3, [pc, #148]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a7e:	2210      	movs	r2, #16
 8000a80:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a82:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000a88:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a90:	2202      	movs	r2, #2
 8000a92:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000aac:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000ade:	2204      	movs	r2, #4
 8000ae0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000af4:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000afc:	2204      	movs	r2, #4
 8000afe:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <MX_FDCAN1_Init+0xc0>)
 8000b02:	f003 fdc9 	bl	8004698 <HAL_FDCAN_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b0c:	f000 fb9c 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	240002d4 	.word	0x240002d4
 8000b18:	4000a000 	.word	0x4000a000

08000b1c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b20:	4b2e      	ldr	r3, [pc, #184]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b22:	4a2f      	ldr	r2, [pc, #188]	@ (8000be0 <MX_FDCAN2_Init+0xc4>)
 8000b24:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b26:	4b2d      	ldr	r3, [pc, #180]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000b32:	4b2a      	ldr	r3, [pc, #168]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b38:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b3e:	4b27      	ldr	r3, [pc, #156]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000b44:	4b25      	ldr	r3, [pc, #148]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b46:	2210      	movs	r2, #16
 8000b48:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b4a:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000b50:	4b22      	ldr	r3, [pc, #136]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000b56:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b58:	2202      	movs	r2, #2
 8000b5a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b98:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <MX_FDCAN2_Init+0xc0>)
 8000bca:	f003 fd65 	bl	8004698 <HAL_FDCAN_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000bd4:	f000 fb38 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	24000374 	.word	0x24000374
 8000be0:	4000a400 	.word	0x4000a400

08000be4 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0bc      	sub	sp, #240	@ 0xf0
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	22c0      	movs	r2, #192	@ 0xc0
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00d f999 	bl	800df3c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a57      	ldr	r2, [pc, #348]	@ (8000d6c <HAL_FDCAN_MspInit+0x188>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d150      	bne.n	8000cb6 <HAL_FDCAN_MspInit+0xd2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c14:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000c20:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fbe9 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000c38:	f000 fb06 	bl	8001248 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d70 <HAL_FDCAN_MspInit+0x18c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	4a4b      	ldr	r2, [pc, #300]	@ (8000d70 <HAL_FDCAN_MspInit+0x18c>)
 8000c44:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000c46:	4b4a      	ldr	r3, [pc, #296]	@ (8000d70 <HAL_FDCAN_MspInit+0x18c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d10e      	bne.n	8000c6c <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c4e:	4b49      	ldr	r3, [pc, #292]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000c50:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c54:	4a47      	ldr	r2, [pc, #284]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c5a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c5e:	4b45      	ldr	r3, [pc, #276]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000c60:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6c:	4b41      	ldr	r3, [pc, #260]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c72:	4a40      	ldr	r2, [pc, #256]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ca2:	2309      	movs	r3, #9
 8000ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cac:	4619      	mov	r1, r3
 8000cae:	4832      	ldr	r0, [pc, #200]	@ (8000d78 <HAL_FDCAN_MspInit+0x194>)
 8000cb0:	f004 f856 	bl	8004d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000cb4:	e055      	b.n	8000d62 <HAL_FDCAN_MspInit+0x17e>
  else if(fdcanHandle->Instance==FDCAN2)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a30      	ldr	r2, [pc, #192]	@ (8000d7c <HAL_FDCAN_MspInit+0x198>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d150      	bne.n	8000d62 <HAL_FDCAN_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cc0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ccc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f005 fb93 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_FDCAN_MspInit+0x104>
      Error_Handler();
 8000ce4:	f000 fab0 	bl	8001248 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ce8:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <HAL_FDCAN_MspInit+0x18c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a20      	ldr	r2, [pc, #128]	@ (8000d70 <HAL_FDCAN_MspInit+0x18c>)
 8000cf0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <HAL_FDCAN_MspInit+0x18c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d10e      	bne.n	8000d18 <HAL_FDCAN_MspInit+0x134>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000cfc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000d00:	4a1c      	ldr	r2, [pc, #112]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d06:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000d0c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1e:	4a15      	ldr	r2, [pc, #84]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_FDCAN_MspInit+0x190>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000d36:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8000d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000d50:	2309      	movs	r3, #9
 8000d52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4808      	ldr	r0, [pc, #32]	@ (8000d80 <HAL_FDCAN_MspInit+0x19c>)
 8000d5e:	f003 ffff 	bl	8004d60 <HAL_GPIO_Init>
}
 8000d62:	bf00      	nop
 8000d64:	37f0      	adds	r7, #240	@ 0xf0
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	4000a000 	.word	0x4000a000
 8000d70:	24000414 	.word	0x24000414
 8000d74:	58024400 	.word	0x58024400
 8000d78:	58020c00 	.word	0x58020c00
 8000d7c:	4000a400 	.word	0x4000a400
 8000d80:	58020400 	.word	0x58020400

08000d84 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d88:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <MX_FREERTOS_Init+0x18>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <MX_FREERTOS_Init+0x1c>)
 8000d8e:	f009 fc73 	bl	800a678 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a03      	ldr	r2, [pc, #12]	@ (8000da4 <MX_FREERTOS_Init+0x20>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	0800fca8 	.word	0x0800fca8
 8000da0:	08000da9 	.word	0x08000da9
 8000da4:	24000418 	.word	0x24000418

08000da8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f009 fcf3 	bl	800a79c <osDelay>
 8000db6:	e7fb      	b.n	8000db0 <StartDefaultTask+0x8>

08000db8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	@ 0x30
 8000dbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dce:	4b58      	ldr	r3, [pc, #352]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	4a56      	ldr	r2, [pc, #344]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000dd6:	f043 0320 	orr.w	r3, r3, #32
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dde:	4b54      	ldr	r3, [pc, #336]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	f003 0320 	and.w	r3, r3, #32
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dec:	4b50      	ldr	r3, [pc, #320]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	4a4f      	ldr	r2, [pc, #316]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b49      	ldr	r3, [pc, #292]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a47      	ldr	r2, [pc, #284]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1a:	4b45      	ldr	r3, [pc, #276]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	4b41      	ldr	r3, [pc, #260]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	4a40      	ldr	r2, [pc, #256]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e38:	4b3d      	ldr	r3, [pc, #244]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e46:	4b3a      	ldr	r3, [pc, #232]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	4a38      	ldr	r2, [pc, #224]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e56:	4b36      	ldr	r3, [pc, #216]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e64:	4b32      	ldr	r3, [pc, #200]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	4a31      	ldr	r2, [pc, #196]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e74:	4b2e      	ldr	r3, [pc, #184]	@ (8000f30 <MX_GPIO_Init+0x178>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e82:	2332      	movs	r3, #50	@ 0x32
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e92:	230b      	movs	r3, #11
 8000e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4825      	ldr	r0, [pc, #148]	@ (8000f34 <MX_GPIO_Init+0x17c>)
 8000e9e:	f003 ff5f 	bl	8004d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000ea2:	2382      	movs	r3, #130	@ 0x82
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb2:	230b      	movs	r3, #11
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481e      	ldr	r0, [pc, #120]	@ (8000f38 <MX_GPIO_Init+0x180>)
 8000ebe:	f003 ff4f 	bl	8004d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4817      	ldr	r0, [pc, #92]	@ (8000f3c <MX_GPIO_Init+0x184>)
 8000ee0:	f003 ff3e 	bl	8004d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ee4:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	480d      	ldr	r0, [pc, #52]	@ (8000f38 <MX_GPIO_Init+0x180>)
 8000f02:	f003 ff2d 	bl	8004d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f06:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f18:	230b      	movs	r3, #11
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	4807      	ldr	r0, [pc, #28]	@ (8000f40 <MX_GPIO_Init+0x188>)
 8000f24:	f003 ff1c 	bl	8004d60 <HAL_GPIO_Init>

}
 8000f28:	bf00      	nop
 8000f2a:	3730      	adds	r7, #48	@ 0x30
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58020800 	.word	0x58020800
 8000f38:	58020000 	.word	0x58020000
 8000f3c:	58020400 	.word	0x58020400
 8000f40:	58021800 	.word	0x58021800

08000f44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fbc <MX_I2C1_Init+0x78>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f50:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <MX_I2C1_Init+0x7c>)
 8000f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f7e:	480e      	ldr	r0, [pc, #56]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f80:	f004 f8cc 	bl	800511c <HAL_I2C_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f8a:	f000 f95d 	bl	8001248 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f92:	f004 f95f 	bl	8005254 <HAL_I2CEx_ConfigAnalogFilter>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f9c:	f000 f954 	bl	8001248 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000fa4:	f004 f9a1 	bl	80052ea <HAL_I2CEx_ConfigDigitalFilter>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fae:	f000 f94b 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2400041c 	.word	0x2400041c
 8000fbc:	40005400 	.word	0x40005400
 8000fc0:	00707cbb 	.word	0x00707cbb

08000fc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	22c0      	movs	r2, #192	@ 0xc0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f00c ffa9 	bl	800df3c <memset>
  if(i2cHandle->Instance==I2C1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a27      	ldr	r2, [pc, #156]	@ (800108c <HAL_I2C_MspInit+0xc8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d146      	bne.n	8001082 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ff4:	f04f 0208 	mov.w	r2, #8
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4618      	mov	r0, r3
 800100c:	f005 f9fa 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001016:	f000 f917 	bl	8001248 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <HAL_I2C_MspInit+0xcc>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001020:	4a1b      	ldr	r2, [pc, #108]	@ (8001090 <HAL_I2C_MspInit+0xcc>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102a:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <HAL_I2C_MspInit+0xcc>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001038:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800103c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001040:	2312      	movs	r3, #18
 8001042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001052:	2304      	movs	r3, #4
 8001054:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800105c:	4619      	mov	r1, r3
 800105e:	480d      	ldr	r0, [pc, #52]	@ (8001094 <HAL_I2C_MspInit+0xd0>)
 8001060:	f003 fe7e 	bl	8004d60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001064:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_I2C_MspInit+0xcc>)
 8001066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800106a:	4a09      	ldr	r2, [pc, #36]	@ (8001090 <HAL_I2C_MspInit+0xcc>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001070:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_I2C_MspInit+0xcc>)
 8001076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800107a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	37e8      	adds	r7, #232	@ 0xe8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40005400 	.word	0x40005400
 8001090:	58024400 	.word	0x58024400
 8001094:	58020400 	.word	0x58020400

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800109e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010a2:	607b      	str	r3, [r7, #4]
  //while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
  if ( timeout < 0 )
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da01      	bge.n	80010ae <main+0x16>
  {
  Error_Handler();
 80010aa:	f000 f8cd 	bl	8001248 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f000 fcb3 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f84b 	bl	800114c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80010b6:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <main+0xb0>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010bc:	4a22      	ldr	r2, [pc, #136]	@ (8001148 <main+0xb0>)
 80010be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c6:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <main+0xb0>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f003 fff3 	bl	80050c0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80010da:	2100      	movs	r1, #0
 80010dc:	2000      	movs	r0, #0
 80010de:	f004 f809 	bl	80050f4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80010e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010e6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80010e8:	bf00      	nop
 80010ea:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <main+0xb0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d104      	bne.n	8001100 <main+0x68>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	1e5a      	subs	r2, r3, #1
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dcf4      	bgt.n	80010ea <main+0x52>
if ( timeout < 0 )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	da01      	bge.n	800110a <main+0x72>
{
Error_Handler();
 8001106:	f000 f89f 	bl	8001248 <Error_Handler>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f7ff fe55 	bl	8000db8 <MX_GPIO_Init>
  MX_DMA_Init();
 800110e:	f7ff fc81 	bl	8000a14 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001112:	f7ff fc9f 	bl	8000a54 <MX_FDCAN1_Init>
  MX_TIM7_Init();
 8001116:	f000 f9e9 	bl	80014ec <MX_TIM7_Init>
  MX_ADC3_Init();
 800111a:	f7ff fb47 	bl	80007ac <MX_ADC3_Init>
  MX_FDCAN2_Init();
 800111e:	f7ff fcfd 	bl	8000b1c <MX_FDCAN2_Init>
  MX_UART4_Init();
 8001122:	f000 fa3b 	bl	800159c <MX_UART4_Init>
  MX_I2C1_Init();
 8001126:	f7ff ff0d 	bl	8000f44 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800112a:	f000 fa83 	bl	8001634 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800112e:	f000 facd 	bl	80016cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  cppMain();
 8001132:	f00b ffdb 	bl	800d0ec <cppMain>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001136:	f009 fa55 	bl	800a5e4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800113a:	f7ff fe23 	bl	8000d84 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800113e:	f009 fa75 	bl	800a62c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001142:	bf00      	nop
 8001144:	e7fd      	b.n	8001142 <main+0xaa>
 8001146:	bf00      	nop
 8001148:	58024400 	.word	0x58024400

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b09c      	sub	sp, #112	@ 0x70
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001156:	224c      	movs	r2, #76	@ 0x4c
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f00c feee 	bl	800df3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2220      	movs	r2, #32
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f00c fee8 	bl	800df3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800116c:	2004      	movs	r0, #4
 800116e:	f004 f909 	bl	8005384 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <SystemClock_Config+0xf4>)
 8001178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117a:	4a31      	ldr	r2, [pc, #196]	@ (8001240 <SystemClock_Config+0xf4>)
 800117c:	f023 0301 	bic.w	r3, r3, #1
 8001180:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001182:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <SystemClock_Config+0xf4>)
 8001184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <SystemClock_Config+0xf8>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001194:	4a2b      	ldr	r2, [pc, #172]	@ (8001244 <SystemClock_Config+0xf8>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <SystemClock_Config+0xf8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011a8:	bf00      	nop
 80011aa:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <SystemClock_Config+0xf8>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011b6:	d1f8      	bne.n	80011aa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b8:	2302      	movs	r3, #2
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011bc:	2301      	movs	r3, #1
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c0:	2340      	movs	r3, #64	@ 0x40
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c4:	2302      	movs	r3, #2
 80011c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c8:	2300      	movs	r3, #0
 80011ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80011d0:	2309      	movs	r3, #9
 80011d2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011d8:	2303      	movs	r3, #3
 80011da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011e0:	230c      	movs	r3, #12
 80011e2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80011e4:	2302      	movs	r3, #2
 80011e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80011e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 f920 	bl	8005438 <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80011fe:	f000 f823 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001202:	233f      	movs	r3, #63	@ 0x3f
 8001204:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001216:	2340      	movs	r3, #64	@ 0x40
 8001218:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2101      	movs	r1, #1
 8001226:	4618      	mov	r0, r3
 8001228:	f004 fd60 	bl	8005cec <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001232:	f000 f809 	bl	8001248 <Error_Handler>
  }
}
 8001236:	bf00      	nop
 8001238:	3770      	adds	r7, #112	@ 0x70
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	58000400 	.word	0x58000400
 8001244:	58024800 	.word	0x58024800

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <Error_Handler+0x8>

08001254 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800125c:	4a07      	ldr	r2, [pc, #28]	@ (800127c <RetargetInit+0x28>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <RetargetInit+0x2c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6898      	ldr	r0, [r3, #8]
 8001268:	2300      	movs	r3, #0
 800126a:	2202      	movs	r2, #2
 800126c:	2100      	movs	r1, #0
 800126e:	f00c fcd9 	bl	800dc24 <setvbuf>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	24000470 	.word	0x24000470
 8001280:	24000020 	.word	0x24000020

08001284 <_isatty>:

int _isatty(int fd) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db04      	blt.n	800129c <_isatty+0x18>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b02      	cmp	r3, #2
 8001296:	dc01      	bgt.n	800129c <_isatty+0x18>
    return 1;
 8001298:	2301      	movs	r3, #1
 800129a:	e005      	b.n	80012a8 <_isatty+0x24>

  errno = EBADF;
 800129c:	f00c fea0 	bl	800dfe0 <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2209      	movs	r2, #9
 80012a4:	601a      	str	r2, [r3, #0]
  return 0;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_write>:

int _write(int fd, char* ptr, int len) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d002      	beq.n	80012c8 <_write+0x18>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d111      	bne.n	80012ec <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <_write+0x54>)
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	f007 ff6f 	bl	80091b8 <HAL_UART_Transmit>
 80012da:	4603      	mov	r3, r0
 80012dc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <_write+0x38>
      return len;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	e008      	b.n	80012fa <_write+0x4a>
    else
      return EIO;
 80012e8:	2305      	movs	r3, #5
 80012ea:	e006      	b.n	80012fa <_write+0x4a>
  }
  errno = EBADF;
 80012ec:	f00c fe78 	bl	800dfe0 <__errno>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2209      	movs	r2, #9
 80012f4:	601a      	str	r2, [r3, #0]
  return -1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	24000470 	.word	0x24000470

08001308 <_close>:

int _close(int fd) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db04      	blt.n	8001320 <_close+0x18>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b02      	cmp	r3, #2
 800131a:	dc01      	bgt.n	8001320 <_close+0x18>
    return 0;
 800131c:	2300      	movs	r3, #0
 800131e:	e006      	b.n	800132e <_close+0x26>

  errno = EBADF;
 8001320:	f00c fe5e 	bl	800dfe0 <__errno>
 8001324:	4603      	mov	r3, r0
 8001326:	2209      	movs	r2, #9
 8001328:	601a      	str	r2, [r3, #0]
  return -1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001342:	f00c fe4d 	bl	800dfe0 <__errno>
 8001346:	4603      	mov	r3, r0
 8001348:	2209      	movs	r2, #9
 800134a:	601a      	str	r2, [r3, #0]
  return -1;
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_read>:

int _read(int fd, char* ptr, int len) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d110      	bne.n	800138c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <_read+0x4c>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	2201      	movs	r2, #1
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	f007 ffad 	bl	80092d4 <HAL_UART_Receive>
 800137a:	4603      	mov	r3, r0
 800137c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <_read+0x30>
      return 1;
 8001384:	2301      	movs	r3, #1
 8001386:	e008      	b.n	800139a <_read+0x42>
    else
      return EIO;
 8001388:	2305      	movs	r3, #5
 800138a:	e006      	b.n	800139a <_read+0x42>
  }
  errno = EBADF;
 800138c:	f00c fe28 	bl	800dfe0 <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	2209      	movs	r2, #9
 8001394:	601a      	str	r2, [r3, #0]
  return -1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	24000470 	.word	0x24000470

080013a8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db08      	blt.n	80013ca <_fstat+0x22>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	dc05      	bgt.n	80013ca <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c4:	605a      	str	r2, [r3, #4]
    return 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e005      	b.n	80013d6 <_fstat+0x2e>
  }

  errno = EBADF;
 80013ca:	f00c fe09 	bl	800dfe0 <__errno>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2209      	movs	r2, #9
 80013d2:	601a      	str	r2, [r3, #0]
  return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <HAL_MspInit+0x38>)
 80013e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <HAL_MspInit+0x38>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <HAL_MspInit+0x38>)
 80013f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	210f      	movs	r1, #15
 8001408:	f06f 0001 	mvn.w	r0, #1
 800140c:	f001 fc4d 	bl	8002caa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	58024400 	.word	0x58024400

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <NMI_Handler+0x4>

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <MemManage_Handler+0x4>

08001434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <UsageFault_Handler+0x4>

08001444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001456:	f000 fb51 	bl	8001afc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800145a:	f00b fa0b 	bl	800c874 <xTaskGetSchedulerState>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d001      	beq.n	8001468 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001464:	f009 fe50 	bl	800b108 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001470:	4802      	ldr	r0, [pc, #8]	@ (800147c <DMA1_Stream0_IRQHandler+0x10>)
 8001472:	f001 ffab 	bl	80033cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2400025c 	.word	0x2400025c

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f00c fd96 	bl	800dfe0 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	24080000 	.word	0x24080000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	24000474 	.word	0x24000474
 80014e8:	24005120 	.word	0x24005120

080014ec <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_TIM7_Init+0x64>)
 80014fe:	4a15      	ldr	r2, [pc, #84]	@ (8001554 <MX_TIM7_Init+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_TIM7_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_TIM7_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <MX_TIM7_Init+0x64>)
 8001510:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001514:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_TIM7_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <MX_TIM7_Init+0x64>)
 800151e:	f007 fc6f 	bl	8008e00 <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001528:	f7ff fe8e 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_TIM7_Init+0x64>)
 800153a:	f007 fd5f 	bl	8008ffc <HAL_TIMEx_MasterConfigSynchronization>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001544:	f7ff fe80 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	24000478 	.word	0x24000478
 8001554:	40001400 	.word	0x40001400

08001558 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <HAL_TIM_Base_MspInit+0x3c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10e      	bne.n	8001588 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_TIM_Base_MspInit+0x40>)
 800156c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001570:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_TIM_Base_MspInit+0x40>)
 8001572:	f043 0320 	orr.w	r3, r3, #32
 8001576:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <HAL_TIM_Base_MspInit+0x40>)
 800157c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001580:	f003 0320 	and.w	r3, r3, #32
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	40001400 	.word	0x40001400
 8001598:	58024400 	.word	0x58024400

0800159c <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015a0:	4b22      	ldr	r3, [pc, #136]	@ (800162c <MX_UART4_Init+0x90>)
 80015a2:	4a23      	ldr	r2, [pc, #140]	@ (8001630 <MX_UART4_Init+0x94>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <MX_UART4_Init+0x90>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <MX_UART4_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <MX_UART4_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <MX_UART4_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <MX_UART4_Init+0x90>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <MX_UART4_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b17      	ldr	r3, [pc, #92]	@ (800162c <MX_UART4_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d2:	4b16      	ldr	r3, [pc, #88]	@ (800162c <MX_UART4_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <MX_UART4_Init+0x90>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015de:	4b13      	ldr	r3, [pc, #76]	@ (800162c <MX_UART4_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015e4:	4811      	ldr	r0, [pc, #68]	@ (800162c <MX_UART4_Init+0x90>)
 80015e6:	f007 fd97 	bl	8009118 <HAL_UART_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015f0:	f7ff fe2a 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f4:	2100      	movs	r1, #0
 80015f6:	480d      	ldr	r0, [pc, #52]	@ (800162c <MX_UART4_Init+0x90>)
 80015f8:	f008 fef5 	bl	800a3e6 <HAL_UARTEx_SetTxFifoThreshold>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001602:	f7ff fe21 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001606:	2100      	movs	r1, #0
 8001608:	4808      	ldr	r0, [pc, #32]	@ (800162c <MX_UART4_Init+0x90>)
 800160a:	f008 ff2a 	bl	800a462 <HAL_UARTEx_SetRxFifoThreshold>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001614:	f7ff fe18 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <MX_UART4_Init+0x90>)
 800161a:	f008 feab 	bl	800a374 <HAL_UARTEx_DisableFifoMode>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001624:	f7ff fe10 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	240004c4 	.word	0x240004c4
 8001630:	40004c00 	.word	0x40004c00

08001634 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001638:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 800163a:	4a23      	ldr	r2, [pc, #140]	@ (80016c8 <MX_USART2_UART_Init+0x94>)
 800163c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800163e:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001652:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001676:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167c:	4811      	ldr	r0, [pc, #68]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 800167e:	f007 fd4b 	bl	8009118 <HAL_UART_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001688:	f7ff fdde 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168c:	2100      	movs	r1, #0
 800168e:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 8001690:	f008 fea9 	bl	800a3e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800169a:	f7ff fdd5 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800169e:	2100      	movs	r1, #0
 80016a0:	4808      	ldr	r0, [pc, #32]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 80016a2:	f008 fede 	bl	800a462 <HAL_UARTEx_SetRxFifoThreshold>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016ac:	f7ff fdcc 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016b0:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <MX_USART2_UART_Init+0x90>)
 80016b2:	f008 fe5f 	bl	800a374 <HAL_UARTEx_DisableFifoMode>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016bc:	f7ff fdc4 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	24000558 	.word	0x24000558
 80016c8:	40004400 	.word	0x40004400

080016cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016d0:	4b22      	ldr	r3, [pc, #136]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016d2:	4a23      	ldr	r2, [pc, #140]	@ (8001760 <MX_USART3_UART_Init+0x94>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016d6:	4b21      	ldr	r3, [pc, #132]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b17      	ldr	r3, [pc, #92]	@ (800175c <MX_USART3_UART_Init+0x90>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <MX_USART3_UART_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001708:	4b14      	ldr	r3, [pc, #80]	@ (800175c <MX_USART3_UART_Init+0x90>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170e:	4b13      	ldr	r3, [pc, #76]	@ (800175c <MX_USART3_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001714:	4811      	ldr	r0, [pc, #68]	@ (800175c <MX_USART3_UART_Init+0x90>)
 8001716:	f007 fcff 	bl	8009118 <HAL_UART_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001720:	f7ff fd92 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001724:	2100      	movs	r1, #0
 8001726:	480d      	ldr	r0, [pc, #52]	@ (800175c <MX_USART3_UART_Init+0x90>)
 8001728:	f008 fe5d 	bl	800a3e6 <HAL_UARTEx_SetTxFifoThreshold>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001732:	f7ff fd89 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001736:	2100      	movs	r1, #0
 8001738:	4808      	ldr	r0, [pc, #32]	@ (800175c <MX_USART3_UART_Init+0x90>)
 800173a:	f008 fe92 	bl	800a462 <HAL_UARTEx_SetRxFifoThreshold>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001744:	f7ff fd80 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	@ (800175c <MX_USART3_UART_Init+0x90>)
 800174a:	f008 fe13 	bl	800a374 <HAL_UARTEx_DisableFifoMode>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001754:	f7ff fd78 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	240005ec 	.word	0x240005ec
 8001760:	40004800 	.word	0x40004800

08001764 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0c0      	sub	sp, #256	@ 0x100
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800177c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001780:	22c0      	movs	r2, #192	@ 0xc0
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f00c fbd9 	bl	800df3c <memset>
  if(uartHandle->Instance==UART4)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a86      	ldr	r2, [pc, #536]	@ (80019a8 <HAL_UART_MspInit+0x244>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d16b      	bne.n	800186c <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001794:	f04f 0202 	mov.w	r2, #2
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fe2a 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017b6:	f7ff fd47 	bl	8001248 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017ba:	4b7c      	ldr	r3, [pc, #496]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80017bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017c0:	4a7a      	ldr	r2, [pc, #488]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80017c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017ca:	4b78      	ldr	r3, [pc, #480]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80017cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b74      	ldr	r3, [pc, #464]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017de:	4a73      	ldr	r2, [pc, #460]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e8:	4b70      	ldr	r3, [pc, #448]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	4b6d      	ldr	r3, [pc, #436]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fc:	4a6b      	ldr	r2, [pc, #428]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001806:	4b69      	ldr	r3, [pc, #420]	@ (80019ac <HAL_UART_MspInit+0x248>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001814:	2301      	movs	r3, #1
 8001816:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800182c:	2308      	movs	r3, #8
 800182e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001836:	4619      	mov	r1, r3
 8001838:	485d      	ldr	r0, [pc, #372]	@ (80019b0 <HAL_UART_MspInit+0x24c>)
 800183a:	f003 fa91 	bl	8004d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800183e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001842:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001858:	2308      	movs	r3, #8
 800185a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001862:	4619      	mov	r1, r3
 8001864:	4853      	ldr	r0, [pc, #332]	@ (80019b4 <HAL_UART_MspInit+0x250>)
 8001866:	f003 fa7b 	bl	8004d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800186a:	e097      	b.n	800199c <HAL_UART_MspInit+0x238>
  else if(uartHandle->Instance==USART2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a51      	ldr	r2, [pc, #324]	@ (80019b8 <HAL_UART_MspInit+0x254>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d146      	bne.n	8001904 <HAL_UART_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001876:	f04f 0202 	mov.w	r2, #2
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001888:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800188c:	4618      	mov	r0, r3
 800188e:	f004 fdb9 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001898:	f7ff fcd6 	bl	8001248 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800189c:	4b43      	ldr	r3, [pc, #268]	@ (80019ac <HAL_UART_MspInit+0x248>)
 800189e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018a2:	4a42      	ldr	r2, [pc, #264]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018ac:	4b3f      	ldr	r3, [pc, #252]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80018ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	4b3c      	ldr	r3, [pc, #240]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c0:	4a3a      	ldr	r2, [pc, #232]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ca:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <HAL_UART_MspInit+0x248>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d8:	230c      	movs	r3, #12
 80018da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f0:	2307      	movs	r3, #7
 80018f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80018fa:	4619      	mov	r1, r3
 80018fc:	482c      	ldr	r0, [pc, #176]	@ (80019b0 <HAL_UART_MspInit+0x24c>)
 80018fe:	f003 fa2f 	bl	8004d60 <HAL_GPIO_Init>
}
 8001902:	e04b      	b.n	800199c <HAL_UART_MspInit+0x238>
  else if(uartHandle->Instance==USART3)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2c      	ldr	r2, [pc, #176]	@ (80019bc <HAL_UART_MspInit+0x258>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d146      	bne.n	800199c <HAL_UART_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800190e:	f04f 0202 	mov.w	r2, #2
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001920:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001924:	4618      	mov	r0, r3
 8001926:	f004 fd6d 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8001930:	f7ff fc8a 	bl	8001248 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001934:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <HAL_UART_MspInit+0x248>)
 8001936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800193a:	4a1c      	ldr	r2, [pc, #112]	@ (80019ac <HAL_UART_MspInit+0x248>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001940:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001944:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <HAL_UART_MspInit+0x248>)
 8001946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800194a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001952:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <HAL_UART_MspInit+0x248>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001958:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <HAL_UART_MspInit+0x248>)
 800195a:	f043 0308 	orr.w	r3, r3, #8
 800195e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_UART_MspInit+0x248>)
 8001964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001970:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001974:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800198a:	2307      	movs	r3, #7
 800198c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001990:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001994:	4619      	mov	r1, r3
 8001996:	480a      	ldr	r0, [pc, #40]	@ (80019c0 <HAL_UART_MspInit+0x25c>)
 8001998:	f003 f9e2 	bl	8004d60 <HAL_GPIO_Init>
}
 800199c:	bf00      	nop
 800199e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40004c00 	.word	0x40004c00
 80019ac:	58024400 	.word	0x58024400
 80019b0:	58020000 	.word	0x58020000
 80019b4:	58020800 	.word	0x58020800
 80019b8:	40004400 	.word	0x40004400
 80019bc:	40004800 	.word	0x40004800
 80019c0:	58020c00 	.word	0x58020c00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c8:	f7fe fe5a 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019cc:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ce:	490d      	ldr	r1, [pc, #52]	@ (8001a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d4:	e002      	b.n	80019dc <LoopCopyDataInit>

080019d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019da:	3304      	adds	r3, #4

080019dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e0:	d3f9      	bcc.n	80019d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e8:	e001      	b.n	80019ee <LoopFillZerobss>

080019ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ec:	3204      	adds	r2, #4

080019ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f0:	d3fb      	bcc.n	80019ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f2:	f00c fafb 	bl	800dfec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7ff fb4f 	bl	8001098 <main>
  bx  lr
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a04:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001a08:	08010080 	.word	0x08010080
  ldr r2, =_sbss
 8001a0c:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001a10:	24005120 	.word	0x24005120

08001a14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC3_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1e:	2003      	movs	r0, #3
 8001a20:	f001 f938 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a24:	f004 fb18 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_Init+0x68>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	4913      	ldr	r1, [pc, #76]	@ (8001a84 <HAL_Init+0x6c>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_Init+0x68>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a84 <HAL_Init+0x6c>)
 8001a4c:	5cd3      	ldrb	r3, [r2, r3]
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	4a0b      	ldr	r2, [pc, #44]	@ (8001a88 <HAL_Init+0x70>)
 8001a5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a8c <HAL_Init+0x74>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a62:	200f      	movs	r0, #15
 8001a64:	f000 f814 	bl	8001a90 <HAL_InitTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e002      	b.n	8001a78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a72:	f7ff fcb5 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	58024400 	.word	0x58024400
 8001a84:	0800fc98 	.word	0x0800fc98
 8001a88:	24000004 	.word	0x24000004
 8001a8c:	24000000 	.word	0x24000000

08001a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_InitTick+0x60>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e021      	b.n	8001ae8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <HAL_InitTick+0x64>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_InitTick+0x60>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f001 f91d 	bl	8002cfa <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00e      	b.n	8001ae8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d80a      	bhi.n	8001ae6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f001 f8e7 	bl	8002caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001adc:	4a06      	ldr	r2, [pc, #24]	@ (8001af8 <HAL_InitTick+0x68>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2400000c 	.word	0x2400000c
 8001af4:	24000000 	.word	0x24000000
 8001af8:	24000008 	.word	0x24000008

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	@ (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	2400000c 	.word	0x2400000c
 8001b20:	24000680 	.word	0x24000680

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	@ (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	24000680 	.word	0x24000680

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffde 	bl	8001b24 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2400000c 	.word	0x2400000c

08001b84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <HAL_GetREVID+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0c1b      	lsrs	r3, r3, #16
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	5c001000 	.word	0x5c001000

08001b9c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001ba6:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	401a      	ands	r2, r3
 8001bb0:	4904      	ldr	r1, [pc, #16]	@ (8001bc4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	58000400 	.word	0x58000400

08001bc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	609a      	str	r2, [r3, #8]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3360      	adds	r3, #96	@ 0x60
 8001c42:	461a      	mov	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	431a      	orrs	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	611a      	str	r2, [r3, #16]
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3360      	adds	r3, #96	@ 0x60
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	601a      	str	r2, [r3, #0]
  }
}
 8001ccc:	bf00      	nop
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3330      	adds	r3, #48	@ 0x30
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	4413      	add	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	211f      	movs	r1, #31
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	0e9b      	lsrs	r3, r3, #26
 8001d10:	f003 011f 	and.w	r1, r3, #31
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3314      	adds	r3, #20
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	0e5b      	lsrs	r3, r3, #25
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	4413      	add	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	0d1b      	lsrs	r3, r3, #20
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	2107      	movs	r1, #7
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	401a      	ands	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	0d1b      	lsrs	r3, r3, #20
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	431a      	orrs	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d7a:	bf00      	nop
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0318 	and.w	r3, r3, #24
 8001daa:	4908      	ldr	r1, [pc, #32]	@ (8001dcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dac:	40d9      	lsrs	r1, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	400b      	ands	r3, r1
 8001db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001db6:	431a      	orrs	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	000fffff 	.word	0x000fffff

08001dd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6093      	str	r3, [r2, #8]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	5fffffc0 	.word	0x5fffffc0

08001df4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e08:	d101      	bne.n	8001e0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	6fffffc0 	.word	0x6fffffc0

08001e44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e58:	d101      	bne.n	8001e5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <LL_ADC_IsEnabled+0x18>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <LL_ADC_IsEnabled+0x1a>
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d101      	bne.n	8001eaa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d101      	bne.n	8001ed0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e18f      	b.n	800221a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7fe fcbf 	bl	800088c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff67 	bl	8001df4 <LL_ADC_IsDeepPowerDownEnabled>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff4d 	bl	8001dd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ff82 	bl	8001e44 <LL_ADC_IsInternalRegulatorEnabled>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d114      	bne.n	8001f70 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff66 	bl	8001e1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f50:	4b87      	ldr	r3, [pc, #540]	@ (8002170 <HAL_ADC_Init+0x290>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	4a87      	ldr	r2, [pc, #540]	@ (8002174 <HAL_ADC_Init+0x294>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f62:	e002      	b.n	8001f6a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f9      	bne.n	8001f64 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff65 	bl	8001e44 <LL_ADC_IsInternalRegulatorEnabled>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10d      	bne.n	8001f9c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f84:	f043 0210 	orr.w	r2, r3, #16
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff76 	bl	8001e92 <LL_ADC_REG_IsConversionOngoing>
 8001fa6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 8129 	bne.w	8002208 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f040 8125 	bne.w	8002208 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001fc6:	f043 0202 	orr.w	r2, r3, #2
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff4a 	bl	8001e6c <LL_ADC_IsEnabled>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d136      	bne.n	800204c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a65      	ldr	r2, [pc, #404]	@ (8002178 <HAL_ADC_Init+0x298>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d004      	beq.n	8001ff2 <HAL_ADC_Init+0x112>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a63      	ldr	r2, [pc, #396]	@ (800217c <HAL_ADC_Init+0x29c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10e      	bne.n	8002010 <HAL_ADC_Init+0x130>
 8001ff2:	4861      	ldr	r0, [pc, #388]	@ (8002178 <HAL_ADC_Init+0x298>)
 8001ff4:	f7ff ff3a 	bl	8001e6c <LL_ADC_IsEnabled>
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	4860      	ldr	r0, [pc, #384]	@ (800217c <HAL_ADC_Init+0x29c>)
 8001ffc:	f7ff ff36 	bl	8001e6c <LL_ADC_IsEnabled>
 8002000:	4603      	mov	r3, r0
 8002002:	4323      	orrs	r3, r4
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e008      	b.n	8002022 <HAL_ADC_Init+0x142>
 8002010:	485b      	ldr	r0, [pc, #364]	@ (8002180 <HAL_ADC_Init+0x2a0>)
 8002012:	f7ff ff2b 	bl	8001e6c <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d012      	beq.n	800204c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a53      	ldr	r2, [pc, #332]	@ (8002178 <HAL_ADC_Init+0x298>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d004      	beq.n	800203a <HAL_ADC_Init+0x15a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a51      	ldr	r2, [pc, #324]	@ (800217c <HAL_ADC_Init+0x29c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_ADC_Init+0x15e>
 800203a:	4a52      	ldr	r2, [pc, #328]	@ (8002184 <HAL_ADC_Init+0x2a4>)
 800203c:	e000      	b.n	8002040 <HAL_ADC_Init+0x160>
 800203e:	4a52      	ldr	r2, [pc, #328]	@ (8002188 <HAL_ADC_Init+0x2a8>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4619      	mov	r1, r3
 8002046:	4610      	mov	r0, r2
 8002048:	f7ff fdbe 	bl	8001bc8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800204c:	f7ff fd9a 	bl	8001b84 <HAL_GetREVID>
 8002050:	4603      	mov	r3, r0
 8002052:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002056:	4293      	cmp	r3, r2
 8002058:	d914      	bls.n	8002084 <HAL_ADC_Init+0x1a4>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b10      	cmp	r3, #16
 8002060:	d110      	bne.n	8002084 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7d5b      	ldrb	r3, [r3, #21]
 8002066:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800206c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002072:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7f1b      	ldrb	r3, [r3, #28]
 8002078:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800207a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800207c:	f043 030c 	orr.w	r3, r3, #12
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	e00d      	b.n	80020a0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7d5b      	ldrb	r3, [r3, #21]
 8002088:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800208e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002094:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7f1b      	ldrb	r3, [r3, #28]
 800209a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7f1b      	ldrb	r3, [r3, #28]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	045b      	lsls	r3, r3, #17
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	4b2c      	ldr	r3, [pc, #176]	@ (800218c <HAL_ADC_Init+0x2ac>)
 80020da:	4013      	ands	r3, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	69b9      	ldr	r1, [r7, #24]
 80020e2:	430b      	orrs	r3, r1
 80020e4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fed1 	bl	8001e92 <LL_ADC_REG_IsConversionOngoing>
 80020f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fede 	bl	8001eb8 <LL_ADC_INJ_IsConversionOngoing>
 80020fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d15f      	bne.n	80021c4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d15c      	bne.n	80021c4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7d1b      	ldrb	r3, [r3, #20]
 800210e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	4b1c      	ldr	r3, [pc, #112]	@ (8002190 <HAL_ADC_Init+0x2b0>)
 8002120:	4013      	ands	r3, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	69b9      	ldr	r1, [r7, #24]
 8002128:	430b      	orrs	r3, r1
 800212a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002132:	2b01      	cmp	r3, #1
 8002134:	d130      	bne.n	8002198 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <HAL_ADC_Init+0x2b4>)
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800214a:	3a01      	subs	r2, #1
 800214c:	0411      	lsls	r1, r2, #16
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800215e:	430a      	orrs	r2, r1
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	611a      	str	r2, [r3, #16]
 800216c:	e01c      	b.n	80021a8 <HAL_ADC_Init+0x2c8>
 800216e:	bf00      	nop
 8002170:	24000000 	.word	0x24000000
 8002174:	053e2d63 	.word	0x053e2d63
 8002178:	40022000 	.word	0x40022000
 800217c:	40022100 	.word	0x40022100
 8002180:	58026000 	.word	0x58026000
 8002184:	40022300 	.word	0x40022300
 8002188:	58026300 	.word	0x58026300
 800218c:	fff0c003 	.word	0xfff0c003
 8002190:	ffffbffc 	.word	0xffffbffc
 8002194:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fb8c 	bl	80028dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d10c      	bne.n	80021e6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f023 010f 	bic.w	r1, r3, #15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	1e5a      	subs	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80021e4:	e007      	b.n	80021f6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 020f 	bic.w	r2, r2, #15
 80021f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	f043 0201 	orr.w	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54
 8002206:	e007      	b.n	8002218 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220c:	f043 0210 	orr.w	r2, r3, #16
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002218:	7ffb      	ldrb	r3, [r7, #31]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	@ 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	bf00      	nop

08002224 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b0a1      	sub	sp, #132	@ 0x84
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a65      	ldr	r2, [pc, #404]	@ (80023d4 <HAL_ADC_ConfigChannel+0x1b0>)
 800223e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x2a>
 800224a:	2302      	movs	r3, #2
 800224c:	e32e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x688>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fe19 	bl	8001e92 <LL_ADC_REG_IsConversionOngoing>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 8313 	bne.w	800288e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	db2c      	blt.n	80022ca <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002278:	2b00      	cmp	r3, #0
 800227a:	d108      	bne.n	800228e <HAL_ADC_ConfigChannel+0x6a>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0e9b      	lsrs	r3, r3, #26
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	2201      	movs	r2, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	e016      	b.n	80022bc <HAL_ADC_ConfigChannel+0x98>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800229c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800229e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80022a6:	2320      	movs	r3, #32
 80022a8:	e003      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80022aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	2201      	movs	r2, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	69d1      	ldr	r1, [r2, #28]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	430b      	orrs	r3, r1
 80022c8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f7ff fcfe 	bl	8001cd8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fdd6 	bl	8001e92 <LL_ADC_REG_IsConversionOngoing>
 80022e6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fde3 	bl	8001eb8 <LL_ADC_INJ_IsConversionOngoing>
 80022f2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 80b8 	bne.w	800246c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 80b4 	bne.w	800246c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	461a      	mov	r2, r3
 8002312:	f7ff fd0d 	bl	8001d30 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002316:	4b30      	ldr	r3, [pc, #192]	@ (80023d8 <HAL_ADC_ConfigChannel+0x1b4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800231e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002322:	d10b      	bne.n	800233c <HAL_ADC_ConfigChannel+0x118>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	e01d      	b.n	8002378 <HAL_ADC_ConfigChannel+0x154>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10b      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x13e>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	e00a      	b.n	8002378 <HAL_ADC_ConfigChannel+0x154>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b04      	cmp	r3, #4
 8002380:	d02c      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6919      	ldr	r1, [r3, #16]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002390:	f7ff fc4e 	bl	8001c30 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6919      	ldr	r1, [r3, #16]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	7e5b      	ldrb	r3, [r3, #25]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d102      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x186>
 80023a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80023a8:	e000      	b.n	80023ac <HAL_ADC_ConfigChannel+0x188>
 80023aa:	2300      	movs	r3, #0
 80023ac:	461a      	mov	r2, r3
 80023ae:	f7ff fc78 	bl	8001ca2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6919      	ldr	r1, [r3, #16]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	7e1b      	ldrb	r3, [r3, #24]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d102      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1a4>
 80023c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023c6:	e000      	b.n	80023ca <HAL_ADC_ConfigChannel+0x1a6>
 80023c8:	2300      	movs	r3, #0
 80023ca:	461a      	mov	r2, r3
 80023cc:	f7ff fc50 	bl	8001c70 <LL_ADC_SetDataRightShift>
 80023d0:	e04c      	b.n	800246c <HAL_ADC_ConfigChannel+0x248>
 80023d2:	bf00      	nop
 80023d4:	47ff0000 	.word	0x47ff0000
 80023d8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	069b      	lsls	r3, r3, #26
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d107      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023fe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002406:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	069b      	lsls	r3, r3, #26
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002422:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800242a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	069b      	lsls	r3, r3, #26
 8002434:	429a      	cmp	r2, r3
 8002436:	d107      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002446:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800244e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	069b      	lsls	r3, r3, #26
 8002458:	429a      	cmp	r2, r3
 800245a:	d107      	bne.n	800246c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800246a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fcfb 	bl	8001e6c <LL_ADC_IsEnabled>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	f040 8211 	bne.w	80028a0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6819      	ldr	r1, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	461a      	mov	r2, r3
 800248c:	f7ff fc7c 	bl	8001d88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4aa1      	ldr	r2, [pc, #644]	@ (800271c <HAL_ADC_ConfigChannel+0x4f8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	f040 812e 	bne.w	80026f8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x2a0>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	3301      	adds	r3, #1
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	2b09      	cmp	r3, #9
 80024ba:	bf94      	ite	ls
 80024bc:	2301      	movls	r3, #1
 80024be:	2300      	movhi	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e019      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x2d4>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80024d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80024d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80024dc:	2320      	movs	r3, #32
 80024de:	e003      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80024e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	bf94      	ite	ls
 80024f2:	2301      	movls	r3, #1
 80024f4:	2300      	movhi	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d079      	beq.n	80025f0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x2f4>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	3301      	adds	r3, #1
 8002510:	069b      	lsls	r3, r3, #26
 8002512:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002516:	e015      	b.n	8002544 <HAL_ADC_ConfigChannel+0x320>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002528:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800252a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e003      	b.n	800253c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	069b      	lsls	r3, r3, #26
 8002540:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x340>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	3301      	adds	r3, #1
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	e017      	b.n	8002594 <HAL_ADC_ConfigChannel+0x370>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002574:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800257c:	2320      	movs	r3, #32
 800257e:	e003      	b.n	8002588 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	3301      	adds	r3, #1
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	ea42 0103 	orr.w	r1, r2, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x396>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	3301      	adds	r3, #1
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	051b      	lsls	r3, r3, #20
 80025b8:	e018      	b.n	80025ec <HAL_ADC_ConfigChannel+0x3c8>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80025c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80025cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80025d2:	2320      	movs	r3, #32
 80025d4:	e003      	b.n	80025de <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ec:	430b      	orrs	r3, r1
 80025ee:	e07e      	b.n	80026ee <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_ADC_ConfigChannel+0x3e8>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	3301      	adds	r3, #1
 8002604:	069b      	lsls	r3, r3, #26
 8002606:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800260a:	e015      	b.n	8002638 <HAL_ADC_ConfigChannel+0x414>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800261e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002624:	2320      	movs	r3, #32
 8002626:	e003      	b.n	8002630 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	3301      	adds	r3, #1
 8002632:	069b      	lsls	r3, r3, #26
 8002634:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x434>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	3301      	adds	r3, #1
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	e017      	b.n	8002688 <HAL_ADC_ConfigChannel+0x464>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	61bb      	str	r3, [r7, #24]
  return result;
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002670:	2320      	movs	r3, #32
 8002672:	e003      	b.n	800267c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	ea42 0103 	orr.w	r1, r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10d      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x490>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0e9b      	lsrs	r3, r3, #26
 800269e:	3301      	adds	r3, #1
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	3b1e      	subs	r3, #30
 80026ac:	051b      	lsls	r3, r3, #20
 80026ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026b2:	e01b      	b.n	80026ec <HAL_ADC_ConfigChannel+0x4c8>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	60fb      	str	r3, [r7, #12]
  return result;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80026cc:	2320      	movs	r3, #32
 80026ce:	e003      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	3b1e      	subs	r3, #30
 80026e6:	051b      	lsls	r3, r3, #20
 80026e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ec:	430b      	orrs	r3, r1
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	6892      	ldr	r2, [r2, #8]
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7ff fb1c 	bl	8001d30 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f280 80cf 	bge.w	80028a0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a06      	ldr	r2, [pc, #24]	@ (8002720 <HAL_ADC_ConfigChannel+0x4fc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d004      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x4f2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <HAL_ADC_ConfigChannel+0x500>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10a      	bne.n	800272c <HAL_ADC_ConfigChannel+0x508>
 8002716:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <HAL_ADC_ConfigChannel+0x504>)
 8002718:	e009      	b.n	800272e <HAL_ADC_ConfigChannel+0x50a>
 800271a:	bf00      	nop
 800271c:	47ff0000 	.word	0x47ff0000
 8002720:	40022000 	.word	0x40022000
 8002724:	40022100 	.word	0x40022100
 8002728:	40022300 	.word	0x40022300
 800272c:	4b61      	ldr	r3, [pc, #388]	@ (80028b4 <HAL_ADC_ConfigChannel+0x690>)
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fa70 	bl	8001c14 <LL_ADC_GetCommonPathInternalCh>
 8002734:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a5f      	ldr	r2, [pc, #380]	@ (80028b8 <HAL_ADC_ConfigChannel+0x694>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_ADC_ConfigChannel+0x526>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a5d      	ldr	r2, [pc, #372]	@ (80028bc <HAL_ADC_ConfigChannel+0x698>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10e      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x544>
 800274a:	485b      	ldr	r0, [pc, #364]	@ (80028b8 <HAL_ADC_ConfigChannel+0x694>)
 800274c:	f7ff fb8e 	bl	8001e6c <LL_ADC_IsEnabled>
 8002750:	4604      	mov	r4, r0
 8002752:	485a      	ldr	r0, [pc, #360]	@ (80028bc <HAL_ADC_ConfigChannel+0x698>)
 8002754:	f7ff fb8a 	bl	8001e6c <LL_ADC_IsEnabled>
 8002758:	4603      	mov	r3, r0
 800275a:	4323      	orrs	r3, r4
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	e008      	b.n	800277a <HAL_ADC_ConfigChannel+0x556>
 8002768:	4855      	ldr	r0, [pc, #340]	@ (80028c0 <HAL_ADC_ConfigChannel+0x69c>)
 800276a:	f7ff fb7f 	bl	8001e6c <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d07d      	beq.n	800287a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a50      	ldr	r2, [pc, #320]	@ (80028c4 <HAL_ADC_ConfigChannel+0x6a0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d130      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x5c6>
 8002788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800278a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d12b      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a4a      	ldr	r2, [pc, #296]	@ (80028c0 <HAL_ADC_ConfigChannel+0x69c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	f040 8081 	bne.w	80028a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a45      	ldr	r2, [pc, #276]	@ (80028b8 <HAL_ADC_ConfigChannel+0x694>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x58e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a43      	ldr	r2, [pc, #268]	@ (80028bc <HAL_ADC_ConfigChannel+0x698>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x592>
 80027b2:	4a45      	ldr	r2, [pc, #276]	@ (80028c8 <HAL_ADC_ConfigChannel+0x6a4>)
 80027b4:	e000      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x594>
 80027b6:	4a3f      	ldr	r2, [pc, #252]	@ (80028b4 <HAL_ADC_ConfigChannel+0x690>)
 80027b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f7ff fa14 	bl	8001bee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c6:	4b41      	ldr	r3, [pc, #260]	@ (80028cc <HAL_ADC_ConfigChannel+0x6a8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	099b      	lsrs	r3, r3, #6
 80027cc:	4a40      	ldr	r2, [pc, #256]	@ (80028d0 <HAL_ADC_ConfigChannel+0x6ac>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	099b      	lsrs	r3, r3, #6
 80027d4:	3301      	adds	r3, #1
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027da:	e002      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3b01      	subs	r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f9      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e8:	e05a      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a39      	ldr	r2, [pc, #228]	@ (80028d4 <HAL_ADC_ConfigChannel+0x6b0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d11e      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x60e>
 80027f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d119      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2f      	ldr	r2, [pc, #188]	@ (80028c0 <HAL_ADC_ConfigChannel+0x69c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d14b      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2a      	ldr	r2, [pc, #168]	@ (80028b8 <HAL_ADC_ConfigChannel+0x694>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_ADC_ConfigChannel+0x5f8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a29      	ldr	r2, [pc, #164]	@ (80028bc <HAL_ADC_ConfigChannel+0x698>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d101      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x5fc>
 800281c:	4a2a      	ldr	r2, [pc, #168]	@ (80028c8 <HAL_ADC_ConfigChannel+0x6a4>)
 800281e:	e000      	b.n	8002822 <HAL_ADC_ConfigChannel+0x5fe>
 8002820:	4a24      	ldr	r2, [pc, #144]	@ (80028b4 <HAL_ADC_ConfigChannel+0x690>)
 8002822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002824:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f7ff f9df 	bl	8001bee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002830:	e036      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a28      	ldr	r2, [pc, #160]	@ (80028d8 <HAL_ADC_ConfigChannel+0x6b4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d131      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
 800283c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d12c      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1d      	ldr	r2, [pc, #116]	@ (80028c0 <HAL_ADC_ConfigChannel+0x69c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d127      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a18      	ldr	r2, [pc, #96]	@ (80028b8 <HAL_ADC_ConfigChannel+0x694>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_ADC_ConfigChannel+0x640>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a17      	ldr	r2, [pc, #92]	@ (80028bc <HAL_ADC_ConfigChannel+0x698>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x644>
 8002864:	4a18      	ldr	r2, [pc, #96]	@ (80028c8 <HAL_ADC_ConfigChannel+0x6a4>)
 8002866:	e000      	b.n	800286a <HAL_ADC_ConfigChannel+0x646>
 8002868:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <HAL_ADC_ConfigChannel+0x690>)
 800286a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800286c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f7ff f9bb 	bl	8001bee <LL_ADC_SetCommonPathInternalCh>
 8002878:	e012      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287e:	f043 0220 	orr.w	r2, r3, #32
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800288c:	e008      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80028a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3784      	adds	r7, #132	@ 0x84
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	58026300 	.word	0x58026300
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40022100 	.word	0x40022100
 80028c0:	58026000 	.word	0x58026000
 80028c4:	cb840000 	.word	0xcb840000
 80028c8:	40022300 	.word	0x40022300
 80028cc:	24000000 	.word	0x24000000
 80028d0:	053e2d63 	.word	0x053e2d63
 80028d4:	c7520000 	.word	0xc7520000
 80028d8:	cfb80000 	.word	0xcfb80000

080028dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a7a      	ldr	r2, [pc, #488]	@ (8002ad4 <ADC_ConfigureBoostMode+0x1f8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d004      	beq.n	80028f8 <ADC_ConfigureBoostMode+0x1c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a79      	ldr	r2, [pc, #484]	@ (8002ad8 <ADC_ConfigureBoostMode+0x1fc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d109      	bne.n	800290c <ADC_ConfigureBoostMode+0x30>
 80028f8:	4b78      	ldr	r3, [pc, #480]	@ (8002adc <ADC_ConfigureBoostMode+0x200>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e008      	b.n	800291e <ADC_ConfigureBoostMode+0x42>
 800290c:	4b74      	ldr	r3, [pc, #464]	@ (8002ae0 <ADC_ConfigureBoostMode+0x204>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01c      	beq.n	800295c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002922:	f003 fd13 	bl	800634c <HAL_RCC_GetHCLKFreq>
 8002926:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002930:	d010      	beq.n	8002954 <ADC_ConfigureBoostMode+0x78>
 8002932:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002936:	d873      	bhi.n	8002a20 <ADC_ConfigureBoostMode+0x144>
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800293c:	d002      	beq.n	8002944 <ADC_ConfigureBoostMode+0x68>
 800293e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002942:	d16d      	bne.n	8002a20 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0c1b      	lsrs	r3, r3, #16
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	60fb      	str	r3, [r7, #12]
        break;
 8002952:	e068      	b.n	8002a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	60fb      	str	r3, [r7, #12]
        break;
 800295a:	e064      	b.n	8002a26 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800295c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002960:	f04f 0100 	mov.w	r1, #0
 8002964:	f004 ff58 	bl	8007818 <HAL_RCCEx_GetPeriphCLKFreq>
 8002968:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002972:	d051      	beq.n	8002a18 <ADC_ConfigureBoostMode+0x13c>
 8002974:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002978:	d854      	bhi.n	8002a24 <ADC_ConfigureBoostMode+0x148>
 800297a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800297e:	d047      	beq.n	8002a10 <ADC_ConfigureBoostMode+0x134>
 8002980:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002984:	d84e      	bhi.n	8002a24 <ADC_ConfigureBoostMode+0x148>
 8002986:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800298a:	d03d      	beq.n	8002a08 <ADC_ConfigureBoostMode+0x12c>
 800298c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002990:	d848      	bhi.n	8002a24 <ADC_ConfigureBoostMode+0x148>
 8002992:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002996:	d033      	beq.n	8002a00 <ADC_ConfigureBoostMode+0x124>
 8002998:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800299c:	d842      	bhi.n	8002a24 <ADC_ConfigureBoostMode+0x148>
 800299e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029a2:	d029      	beq.n	80029f8 <ADC_ConfigureBoostMode+0x11c>
 80029a4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029a8:	d83c      	bhi.n	8002a24 <ADC_ConfigureBoostMode+0x148>
 80029aa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80029ae:	d01a      	beq.n	80029e6 <ADC_ConfigureBoostMode+0x10a>
 80029b0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80029b4:	d836      	bhi.n	8002a24 <ADC_ConfigureBoostMode+0x148>
 80029b6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80029ba:	d014      	beq.n	80029e6 <ADC_ConfigureBoostMode+0x10a>
 80029bc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80029c0:	d830      	bhi.n	8002a24 <ADC_ConfigureBoostMode+0x148>
 80029c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029c6:	d00e      	beq.n	80029e6 <ADC_ConfigureBoostMode+0x10a>
 80029c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029cc:	d82a      	bhi.n	8002a24 <ADC_ConfigureBoostMode+0x148>
 80029ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80029d2:	d008      	beq.n	80029e6 <ADC_ConfigureBoostMode+0x10a>
 80029d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80029d8:	d824      	bhi.n	8002a24 <ADC_ConfigureBoostMode+0x148>
 80029da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029de:	d002      	beq.n	80029e6 <ADC_ConfigureBoostMode+0x10a>
 80029e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029e4:	d11e      	bne.n	8002a24 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	0c9b      	lsrs	r3, r3, #18
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	60fb      	str	r3, [r7, #12]
        break;
 80029f6:	e016      	b.n	8002a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	60fb      	str	r3, [r7, #12]
        break;
 80029fe:	e012      	b.n	8002a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	60fb      	str	r3, [r7, #12]
        break;
 8002a06:	e00e      	b.n	8002a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	099b      	lsrs	r3, r3, #6
 8002a0c:	60fb      	str	r3, [r7, #12]
        break;
 8002a0e:	e00a      	b.n	8002a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	09db      	lsrs	r3, r3, #7
 8002a14:	60fb      	str	r3, [r7, #12]
        break;
 8002a16:	e006      	b.n	8002a26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	60fb      	str	r3, [r7, #12]
        break;
 8002a1e:	e002      	b.n	8002a26 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002a20:	bf00      	nop
 8002a22:	e000      	b.n	8002a26 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002a24:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a26:	f7ff f8ad 	bl	8001b84 <HAL_GetREVID>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d815      	bhi.n	8002a60 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a2b      	ldr	r2, [pc, #172]	@ (8002ae4 <ADC_ConfigureBoostMode+0x208>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d908      	bls.n	8002a4e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a4a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a4c:	e03e      	b.n	8002acc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a5c:	609a      	str	r2, [r3, #8]
}
 8002a5e:	e035      	b.n	8002acc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae8 <ADC_ConfigureBoostMode+0x20c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d808      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a7c:	609a      	str	r2, [r3, #8]
}
 8002a7e:	e025      	b.n	8002acc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a1a      	ldr	r2, [pc, #104]	@ (8002aec <ADC_ConfigureBoostMode+0x210>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d80a      	bhi.n	8002a9e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	e016      	b.n	8002acc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a13      	ldr	r2, [pc, #76]	@ (8002af0 <ADC_ConfigureBoostMode+0x214>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d80a      	bhi.n	8002abc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab8:	609a      	str	r2, [r3, #8]
}
 8002aba:	e007      	b.n	8002acc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	40022100 	.word	0x40022100
 8002adc:	40022300 	.word	0x40022300
 8002ae0:	58026300 	.word	0x58026300
 8002ae4:	01312d00 	.word	0x01312d00
 8002ae8:	005f5e10 	.word	0x005f5e10
 8002aec:	00bebc20 	.word	0x00bebc20
 8002af0:	017d7840 	.word	0x017d7840

08002af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b04:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <__NVIC_SetPriorityGrouping+0x40>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b10:	4013      	ands	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	@ (8002b34 <__NVIC_SetPriorityGrouping+0x40>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00
 8002b38:	05fa0000 	.word	0x05fa0000

08002b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b40:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <__NVIC_GetPriorityGrouping+0x18>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 0307 	and.w	r3, r3, #7
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db0b      	blt.n	8002b82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	4907      	ldr	r1, [pc, #28]	@ (8002b90 <__NVIC_EnableIRQ+0x38>)
 8002b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2001      	movs	r0, #1
 8002b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db0a      	blt.n	8002bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	490c      	ldr	r1, [pc, #48]	@ (8002be0 <__NVIC_SetPriority+0x4c>)
 8002bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bbc:	e00a      	b.n	8002bd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4908      	ldr	r1, [pc, #32]	@ (8002be4 <__NVIC_SetPriority+0x50>)
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3b04      	subs	r3, #4
 8002bcc:	0112      	lsls	r2, r2, #4
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	761a      	strb	r2, [r3, #24]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000e100 	.word	0xe000e100
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	@ 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f1c3 0307 	rsb	r3, r3, #7
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	bf28      	it	cs
 8002c06:	2304      	movcs	r3, #4
 8002c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d902      	bls.n	8002c18 <NVIC_EncodePriority+0x30>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3b03      	subs	r3, #3
 8002c16:	e000      	b.n	8002c1a <NVIC_EncodePriority+0x32>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43d9      	mvns	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	4313      	orrs	r3, r2
         );
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3724      	adds	r7, #36	@ 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <SysTick_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6e:	210f      	movs	r1, #15
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f7ff ff8e 	bl	8002b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <SysTick_Config+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	@ (8002c90 <SysTick_Config+0x40>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff29 	bl	8002af4 <__NVIC_SetPriorityGrouping>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb8:	f7ff ff40 	bl	8002b3c <__NVIC_GetPriorityGrouping>
 8002cbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f7ff ff90 	bl	8002be8 <NVIC_EncodePriority>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff5f 	bl	8002b94 <__NVIC_SetPriority>
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff33 	bl	8002b58 <__NVIC_EnableIRQ>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffa4 	bl	8002c50 <SysTick_Config>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7fe ff02 	bl	8001b24 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e316      	b.n	800335a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a66      	ldr	r2, [pc, #408]	@ (8002ecc <HAL_DMA_Init+0x1b8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d04a      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a65      	ldr	r2, [pc, #404]	@ (8002ed0 <HAL_DMA_Init+0x1bc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d045      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a63      	ldr	r2, [pc, #396]	@ (8002ed4 <HAL_DMA_Init+0x1c0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d040      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a62      	ldr	r2, [pc, #392]	@ (8002ed8 <HAL_DMA_Init+0x1c4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d03b      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a60      	ldr	r2, [pc, #384]	@ (8002edc <HAL_DMA_Init+0x1c8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d036      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a5f      	ldr	r2, [pc, #380]	@ (8002ee0 <HAL_DMA_Init+0x1cc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d031      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee4 <HAL_DMA_Init+0x1d0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02c      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee8 <HAL_DMA_Init+0x1d4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d027      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5a      	ldr	r2, [pc, #360]	@ (8002eec <HAL_DMA_Init+0x1d8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d022      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a59      	ldr	r2, [pc, #356]	@ (8002ef0 <HAL_DMA_Init+0x1dc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d01d      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a57      	ldr	r2, [pc, #348]	@ (8002ef4 <HAL_DMA_Init+0x1e0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d018      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a56      	ldr	r2, [pc, #344]	@ (8002ef8 <HAL_DMA_Init+0x1e4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a54      	ldr	r2, [pc, #336]	@ (8002efc <HAL_DMA_Init+0x1e8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00e      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a53      	ldr	r2, [pc, #332]	@ (8002f00 <HAL_DMA_Init+0x1ec>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a51      	ldr	r2, [pc, #324]	@ (8002f04 <HAL_DMA_Init+0x1f0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_DMA_Init+0xb8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a50      	ldr	r2, [pc, #320]	@ (8002f08 <HAL_DMA_Init+0x1f4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d101      	bne.n	8002dd0 <HAL_DMA_Init+0xbc>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_DMA_Init+0xbe>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 813b 	beq.w	800304e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a37      	ldr	r2, [pc, #220]	@ (8002ecc <HAL_DMA_Init+0x1b8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d04a      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a36      	ldr	r2, [pc, #216]	@ (8002ed0 <HAL_DMA_Init+0x1bc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d045      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a34      	ldr	r2, [pc, #208]	@ (8002ed4 <HAL_DMA_Init+0x1c0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d040      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a33      	ldr	r2, [pc, #204]	@ (8002ed8 <HAL_DMA_Init+0x1c4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d03b      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a31      	ldr	r2, [pc, #196]	@ (8002edc <HAL_DMA_Init+0x1c8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d036      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a30      	ldr	r2, [pc, #192]	@ (8002ee0 <HAL_DMA_Init+0x1cc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d031      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a2e      	ldr	r2, [pc, #184]	@ (8002ee4 <HAL_DMA_Init+0x1d0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d02c      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2d      	ldr	r2, [pc, #180]	@ (8002ee8 <HAL_DMA_Init+0x1d4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d027      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002eec <HAL_DMA_Init+0x1d8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d022      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef0 <HAL_DMA_Init+0x1dc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d01d      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a28      	ldr	r2, [pc, #160]	@ (8002ef4 <HAL_DMA_Init+0x1e0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d018      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a27      	ldr	r2, [pc, #156]	@ (8002ef8 <HAL_DMA_Init+0x1e4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a25      	ldr	r2, [pc, #148]	@ (8002efc <HAL_DMA_Init+0x1e8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00e      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a24      	ldr	r2, [pc, #144]	@ (8002f00 <HAL_DMA_Init+0x1ec>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a22      	ldr	r2, [pc, #136]	@ (8002f04 <HAL_DMA_Init+0x1f0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_DMA_Init+0x174>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a21      	ldr	r2, [pc, #132]	@ (8002f08 <HAL_DMA_Init+0x1f4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d108      	bne.n	8002e9a <HAL_DMA_Init+0x186>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	e007      	b.n	8002eaa <HAL_DMA_Init+0x196>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002eaa:	e02f      	b.n	8002f0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eac:	f7fe fe3a 	bl	8001b24 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d928      	bls.n	8002f0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e246      	b.n	800335a <HAL_DMA_Init+0x646>
 8002ecc:	40020010 	.word	0x40020010
 8002ed0:	40020028 	.word	0x40020028
 8002ed4:	40020040 	.word	0x40020040
 8002ed8:	40020058 	.word	0x40020058
 8002edc:	40020070 	.word	0x40020070
 8002ee0:	40020088 	.word	0x40020088
 8002ee4:	400200a0 	.word	0x400200a0
 8002ee8:	400200b8 	.word	0x400200b8
 8002eec:	40020410 	.word	0x40020410
 8002ef0:	40020428 	.word	0x40020428
 8002ef4:	40020440 	.word	0x40020440
 8002ef8:	40020458 	.word	0x40020458
 8002efc:	40020470 	.word	0x40020470
 8002f00:	40020488 	.word	0x40020488
 8002f04:	400204a0 	.word	0x400204a0
 8002f08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1c8      	bne.n	8002eac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4b83      	ldr	r3, [pc, #524]	@ (8003134 <HAL_DMA_Init+0x420>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d107      	bne.n	8002f70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f70:	4b71      	ldr	r3, [pc, #452]	@ (8003138 <HAL_DMA_Init+0x424>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b71      	ldr	r3, [pc, #452]	@ (800313c <HAL_DMA_Init+0x428>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f7c:	d328      	bcc.n	8002fd0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b28      	cmp	r3, #40	@ 0x28
 8002f84:	d903      	bls.n	8002f8e <HAL_DMA_Init+0x27a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f8c:	d917      	bls.n	8002fbe <HAL_DMA_Init+0x2aa>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f94:	d903      	bls.n	8002f9e <HAL_DMA_Init+0x28a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b42      	cmp	r3, #66	@ 0x42
 8002f9c:	d90f      	bls.n	8002fbe <HAL_DMA_Init+0x2aa>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b46      	cmp	r3, #70	@ 0x46
 8002fa4:	d903      	bls.n	8002fae <HAL_DMA_Init+0x29a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b48      	cmp	r3, #72	@ 0x48
 8002fac:	d907      	bls.n	8002fbe <HAL_DMA_Init+0x2aa>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b4e      	cmp	r3, #78	@ 0x4e
 8002fb4:	d905      	bls.n	8002fc2 <HAL_DMA_Init+0x2ae>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b52      	cmp	r3, #82	@ 0x52
 8002fbc:	d801      	bhi.n	8002fc2 <HAL_DMA_Init+0x2ae>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_DMA_Init+0x2b0>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 0307 	bic.w	r3, r3, #7
 8002fe6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d117      	bne.n	800302a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00e      	beq.n	800302a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f001 f9b9 	bl	8004384 <DMA_CheckFifoParam>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2240      	movs	r2, #64	@ 0x40
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e197      	b.n	800335a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f001 f8f4 	bl	8004220 <DMA_CalcBaseAndBitshift>
 8003038:	4603      	mov	r3, r0
 800303a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	223f      	movs	r2, #63	@ 0x3f
 8003046:	409a      	lsls	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	e0cd      	b.n	80031ea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a3b      	ldr	r2, [pc, #236]	@ (8003140 <HAL_DMA_Init+0x42c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d022      	beq.n	800309e <HAL_DMA_Init+0x38a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a39      	ldr	r2, [pc, #228]	@ (8003144 <HAL_DMA_Init+0x430>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01d      	beq.n	800309e <HAL_DMA_Init+0x38a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a38      	ldr	r2, [pc, #224]	@ (8003148 <HAL_DMA_Init+0x434>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d018      	beq.n	800309e <HAL_DMA_Init+0x38a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a36      	ldr	r2, [pc, #216]	@ (800314c <HAL_DMA_Init+0x438>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_DMA_Init+0x38a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a35      	ldr	r2, [pc, #212]	@ (8003150 <HAL_DMA_Init+0x43c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00e      	beq.n	800309e <HAL_DMA_Init+0x38a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a33      	ldr	r2, [pc, #204]	@ (8003154 <HAL_DMA_Init+0x440>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d009      	beq.n	800309e <HAL_DMA_Init+0x38a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a32      	ldr	r2, [pc, #200]	@ (8003158 <HAL_DMA_Init+0x444>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <HAL_DMA_Init+0x38a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a30      	ldr	r2, [pc, #192]	@ (800315c <HAL_DMA_Init+0x448>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <HAL_DMA_Init+0x38e>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_DMA_Init+0x390>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8097 	beq.w	80031d8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a24      	ldr	r2, [pc, #144]	@ (8003140 <HAL_DMA_Init+0x42c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d021      	beq.n	80030f8 <HAL_DMA_Init+0x3e4>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <HAL_DMA_Init+0x430>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01c      	beq.n	80030f8 <HAL_DMA_Init+0x3e4>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a21      	ldr	r2, [pc, #132]	@ (8003148 <HAL_DMA_Init+0x434>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d017      	beq.n	80030f8 <HAL_DMA_Init+0x3e4>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1f      	ldr	r2, [pc, #124]	@ (800314c <HAL_DMA_Init+0x438>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d012      	beq.n	80030f8 <HAL_DMA_Init+0x3e4>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003150 <HAL_DMA_Init+0x43c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00d      	beq.n	80030f8 <HAL_DMA_Init+0x3e4>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003154 <HAL_DMA_Init+0x440>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d008      	beq.n	80030f8 <HAL_DMA_Init+0x3e4>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003158 <HAL_DMA_Init+0x444>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <HAL_DMA_Init+0x3e4>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a19      	ldr	r2, [pc, #100]	@ (800315c <HAL_DMA_Init+0x448>)
 80030f6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <HAL_DMA_Init+0x44c>)
 8003114:	4013      	ands	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b40      	cmp	r3, #64	@ 0x40
 800311e:	d021      	beq.n	8003164 <HAL_DMA_Init+0x450>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b80      	cmp	r3, #128	@ 0x80
 8003126:	d102      	bne.n	800312e <HAL_DMA_Init+0x41a>
 8003128:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800312c:	e01b      	b.n	8003166 <HAL_DMA_Init+0x452>
 800312e:	2300      	movs	r3, #0
 8003130:	e019      	b.n	8003166 <HAL_DMA_Init+0x452>
 8003132:	bf00      	nop
 8003134:	fe10803f 	.word	0xfe10803f
 8003138:	5c001000 	.word	0x5c001000
 800313c:	ffff0000 	.word	0xffff0000
 8003140:	58025408 	.word	0x58025408
 8003144:	5802541c 	.word	0x5802541c
 8003148:	58025430 	.word	0x58025430
 800314c:	58025444 	.word	0x58025444
 8003150:	58025458 	.word	0x58025458
 8003154:	5802546c 	.word	0x5802546c
 8003158:	58025480 	.word	0x58025480
 800315c:	58025494 	.word	0x58025494
 8003160:	fffe000f 	.word	0xfffe000f
 8003164:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68d2      	ldr	r2, [r2, #12]
 800316a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800316c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003174:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800317c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800318c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003194:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b6e      	ldr	r3, [pc, #440]	@ (8003364 <HAL_DMA_Init+0x650>)
 80031ac:	4413      	add	r3, r2
 80031ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003368 <HAL_DMA_Init+0x654>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	009a      	lsls	r2, r3, #2
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f001 f82f 	bl	8004220 <DMA_CalcBaseAndBitshift>
 80031c2:	4603      	mov	r3, r0
 80031c4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	2201      	movs	r2, #1
 80031d0:	409a      	lsls	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	e008      	b.n	80031ea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2240      	movs	r2, #64	@ 0x40
 80031dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2203      	movs	r2, #3
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0b7      	b.n	800335a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a5f      	ldr	r2, [pc, #380]	@ (800336c <HAL_DMA_Init+0x658>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d072      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003370 <HAL_DMA_Init+0x65c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d06d      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a5c      	ldr	r2, [pc, #368]	@ (8003374 <HAL_DMA_Init+0x660>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d068      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a5a      	ldr	r2, [pc, #360]	@ (8003378 <HAL_DMA_Init+0x664>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d063      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a59      	ldr	r2, [pc, #356]	@ (800337c <HAL_DMA_Init+0x668>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d05e      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a57      	ldr	r2, [pc, #348]	@ (8003380 <HAL_DMA_Init+0x66c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d059      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a56      	ldr	r2, [pc, #344]	@ (8003384 <HAL_DMA_Init+0x670>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d054      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a54      	ldr	r2, [pc, #336]	@ (8003388 <HAL_DMA_Init+0x674>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d04f      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a53      	ldr	r2, [pc, #332]	@ (800338c <HAL_DMA_Init+0x678>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d04a      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a51      	ldr	r2, [pc, #324]	@ (8003390 <HAL_DMA_Init+0x67c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d045      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a50      	ldr	r2, [pc, #320]	@ (8003394 <HAL_DMA_Init+0x680>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d040      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a4e      	ldr	r2, [pc, #312]	@ (8003398 <HAL_DMA_Init+0x684>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d03b      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a4d      	ldr	r2, [pc, #308]	@ (800339c <HAL_DMA_Init+0x688>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d036      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a4b      	ldr	r2, [pc, #300]	@ (80033a0 <HAL_DMA_Init+0x68c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d031      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a4a      	ldr	r2, [pc, #296]	@ (80033a4 <HAL_DMA_Init+0x690>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d02c      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a48      	ldr	r2, [pc, #288]	@ (80033a8 <HAL_DMA_Init+0x694>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d027      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a47      	ldr	r2, [pc, #284]	@ (80033ac <HAL_DMA_Init+0x698>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d022      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a45      	ldr	r2, [pc, #276]	@ (80033b0 <HAL_DMA_Init+0x69c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01d      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a44      	ldr	r2, [pc, #272]	@ (80033b4 <HAL_DMA_Init+0x6a0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d018      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a42      	ldr	r2, [pc, #264]	@ (80033b8 <HAL_DMA_Init+0x6a4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a41      	ldr	r2, [pc, #260]	@ (80033bc <HAL_DMA_Init+0x6a8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a3f      	ldr	r2, [pc, #252]	@ (80033c0 <HAL_DMA_Init+0x6ac>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a3e      	ldr	r2, [pc, #248]	@ (80033c4 <HAL_DMA_Init+0x6b0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_DMA_Init+0x5c6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3c      	ldr	r2, [pc, #240]	@ (80033c8 <HAL_DMA_Init+0x6b4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <HAL_DMA_Init+0x5ca>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_DMA_Init+0x5cc>
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d032      	beq.n	800334a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f001 f8c9 	bl	800447c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b80      	cmp	r3, #128	@ 0x80
 80032f0:	d102      	bne.n	80032f8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800330c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d010      	beq.n	8003338 <HAL_DMA_Init+0x624>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b08      	cmp	r3, #8
 800331c:	d80c      	bhi.n	8003338 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f001 f946 	bl	80045b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	e008      	b.n	800334a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	a7fdabf8 	.word	0xa7fdabf8
 8003368:	cccccccd 	.word	0xcccccccd
 800336c:	40020010 	.word	0x40020010
 8003370:	40020028 	.word	0x40020028
 8003374:	40020040 	.word	0x40020040
 8003378:	40020058 	.word	0x40020058
 800337c:	40020070 	.word	0x40020070
 8003380:	40020088 	.word	0x40020088
 8003384:	400200a0 	.word	0x400200a0
 8003388:	400200b8 	.word	0x400200b8
 800338c:	40020410 	.word	0x40020410
 8003390:	40020428 	.word	0x40020428
 8003394:	40020440 	.word	0x40020440
 8003398:	40020458 	.word	0x40020458
 800339c:	40020470 	.word	0x40020470
 80033a0:	40020488 	.word	0x40020488
 80033a4:	400204a0 	.word	0x400204a0
 80033a8:	400204b8 	.word	0x400204b8
 80033ac:	58025408 	.word	0x58025408
 80033b0:	5802541c 	.word	0x5802541c
 80033b4:	58025430 	.word	0x58025430
 80033b8:	58025444 	.word	0x58025444
 80033bc:	58025458 	.word	0x58025458
 80033c0:	5802546c 	.word	0x5802546c
 80033c4:	58025480 	.word	0x58025480
 80033c8:	58025494 	.word	0x58025494

080033cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	@ 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033d8:	4b67      	ldr	r3, [pc, #412]	@ (8003578 <HAL_DMA_IRQHandler+0x1ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a67      	ldr	r2, [pc, #412]	@ (800357c <HAL_DMA_IRQHandler+0x1b0>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a5f      	ldr	r2, [pc, #380]	@ (8003580 <HAL_DMA_IRQHandler+0x1b4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d04a      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a5d      	ldr	r2, [pc, #372]	@ (8003584 <HAL_DMA_IRQHandler+0x1b8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d045      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a5c      	ldr	r2, [pc, #368]	@ (8003588 <HAL_DMA_IRQHandler+0x1bc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d040      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a5a      	ldr	r2, [pc, #360]	@ (800358c <HAL_DMA_IRQHandler+0x1c0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d03b      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a59      	ldr	r2, [pc, #356]	@ (8003590 <HAL_DMA_IRQHandler+0x1c4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d036      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a57      	ldr	r2, [pc, #348]	@ (8003594 <HAL_DMA_IRQHandler+0x1c8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d031      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a56      	ldr	r2, [pc, #344]	@ (8003598 <HAL_DMA_IRQHandler+0x1cc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d02c      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a54      	ldr	r2, [pc, #336]	@ (800359c <HAL_DMA_IRQHandler+0x1d0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d027      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a53      	ldr	r2, [pc, #332]	@ (80035a0 <HAL_DMA_IRQHandler+0x1d4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d022      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a51      	ldr	r2, [pc, #324]	@ (80035a4 <HAL_DMA_IRQHandler+0x1d8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01d      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a50      	ldr	r2, [pc, #320]	@ (80035a8 <HAL_DMA_IRQHandler+0x1dc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d018      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a4e      	ldr	r2, [pc, #312]	@ (80035ac <HAL_DMA_IRQHandler+0x1e0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a4d      	ldr	r2, [pc, #308]	@ (80035b0 <HAL_DMA_IRQHandler+0x1e4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00e      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a4b      	ldr	r2, [pc, #300]	@ (80035b4 <HAL_DMA_IRQHandler+0x1e8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d009      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a4a      	ldr	r2, [pc, #296]	@ (80035b8 <HAL_DMA_IRQHandler+0x1ec>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_DMA_IRQHandler+0xd2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a48      	ldr	r2, [pc, #288]	@ (80035bc <HAL_DMA_IRQHandler+0x1f0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <HAL_DMA_IRQHandler+0xd6>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_DMA_IRQHandler+0xd8>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 842b 	beq.w	8003d00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	2208      	movs	r2, #8
 80034b4:	409a      	lsls	r2, r3
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80a2 	beq.w	8003604 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003580 <HAL_DMA_IRQHandler+0x1b4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d04a      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003584 <HAL_DMA_IRQHandler+0x1b8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d045      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003588 <HAL_DMA_IRQHandler+0x1bc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d040      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2a      	ldr	r2, [pc, #168]	@ (800358c <HAL_DMA_IRQHandler+0x1c0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d03b      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a28      	ldr	r2, [pc, #160]	@ (8003590 <HAL_DMA_IRQHandler+0x1c4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d036      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a27      	ldr	r2, [pc, #156]	@ (8003594 <HAL_DMA_IRQHandler+0x1c8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d031      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a25      	ldr	r2, [pc, #148]	@ (8003598 <HAL_DMA_IRQHandler+0x1cc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d02c      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a24      	ldr	r2, [pc, #144]	@ (800359c <HAL_DMA_IRQHandler+0x1d0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d027      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a22      	ldr	r2, [pc, #136]	@ (80035a0 <HAL_DMA_IRQHandler+0x1d4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d022      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a21      	ldr	r2, [pc, #132]	@ (80035a4 <HAL_DMA_IRQHandler+0x1d8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d01d      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1f      	ldr	r2, [pc, #124]	@ (80035a8 <HAL_DMA_IRQHandler+0x1dc>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d018      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1e      	ldr	r2, [pc, #120]	@ (80035ac <HAL_DMA_IRQHandler+0x1e0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d013      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1c      	ldr	r2, [pc, #112]	@ (80035b0 <HAL_DMA_IRQHandler+0x1e4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00e      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <HAL_DMA_IRQHandler+0x1e8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d009      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a19      	ldr	r2, [pc, #100]	@ (80035b8 <HAL_DMA_IRQHandler+0x1ec>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_DMA_IRQHandler+0x194>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a18      	ldr	r2, [pc, #96]	@ (80035bc <HAL_DMA_IRQHandler+0x1f0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d12f      	bne.n	80035c0 <HAL_DMA_IRQHandler+0x1f4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	bf14      	ite	ne
 800356e:	2301      	movne	r3, #1
 8003570:	2300      	moveq	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e02e      	b.n	80035d4 <HAL_DMA_IRQHandler+0x208>
 8003576:	bf00      	nop
 8003578:	24000000 	.word	0x24000000
 800357c:	1b4e81b5 	.word	0x1b4e81b5
 8003580:	40020010 	.word	0x40020010
 8003584:	40020028 	.word	0x40020028
 8003588:	40020040 	.word	0x40020040
 800358c:	40020058 	.word	0x40020058
 8003590:	40020070 	.word	0x40020070
 8003594:	40020088 	.word	0x40020088
 8003598:	400200a0 	.word	0x400200a0
 800359c:	400200b8 	.word	0x400200b8
 80035a0:	40020410 	.word	0x40020410
 80035a4:	40020428 	.word	0x40020428
 80035a8:	40020440 	.word	0x40020440
 80035ac:	40020458 	.word	0x40020458
 80035b0:	40020470 	.word	0x40020470
 80035b4:	40020488 	.word	0x40020488
 80035b8:	400204a0 	.word	0x400204a0
 80035bc:	400204b8 	.word	0x400204b8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bf14      	ite	ne
 80035ce:	2301      	movne	r3, #1
 80035d0:	2300      	moveq	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0204 	bic.w	r2, r2, #4
 80035e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2208      	movs	r2, #8
 80035f2:	409a      	lsls	r2, r3
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06e      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a69      	ldr	r2, [pc, #420]	@ (80037c4 <HAL_DMA_IRQHandler+0x3f8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d04a      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a67      	ldr	r2, [pc, #412]	@ (80037c8 <HAL_DMA_IRQHandler+0x3fc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d045      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a66      	ldr	r2, [pc, #408]	@ (80037cc <HAL_DMA_IRQHandler+0x400>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d040      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a64      	ldr	r2, [pc, #400]	@ (80037d0 <HAL_DMA_IRQHandler+0x404>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d03b      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a63      	ldr	r2, [pc, #396]	@ (80037d4 <HAL_DMA_IRQHandler+0x408>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d036      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a61      	ldr	r2, [pc, #388]	@ (80037d8 <HAL_DMA_IRQHandler+0x40c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d031      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a60      	ldr	r2, [pc, #384]	@ (80037dc <HAL_DMA_IRQHandler+0x410>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d02c      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a5e      	ldr	r2, [pc, #376]	@ (80037e0 <HAL_DMA_IRQHandler+0x414>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d027      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5d      	ldr	r2, [pc, #372]	@ (80037e4 <HAL_DMA_IRQHandler+0x418>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d022      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5b      	ldr	r2, [pc, #364]	@ (80037e8 <HAL_DMA_IRQHandler+0x41c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01d      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a5a      	ldr	r2, [pc, #360]	@ (80037ec <HAL_DMA_IRQHandler+0x420>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d018      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a58      	ldr	r2, [pc, #352]	@ (80037f0 <HAL_DMA_IRQHandler+0x424>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d013      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a57      	ldr	r2, [pc, #348]	@ (80037f4 <HAL_DMA_IRQHandler+0x428>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00e      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a55      	ldr	r2, [pc, #340]	@ (80037f8 <HAL_DMA_IRQHandler+0x42c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d009      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a54      	ldr	r2, [pc, #336]	@ (80037fc <HAL_DMA_IRQHandler+0x430>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d004      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2ee>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a52      	ldr	r2, [pc, #328]	@ (8003800 <HAL_DMA_IRQHandler+0x434>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10a      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x304>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e003      	b.n	80036d8 <HAL_DMA_IRQHandler+0x30c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2300      	movs	r3, #0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	2201      	movs	r2, #1
 80036e6:	409a      	lsls	r2, r3
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f0:	f043 0202 	orr.w	r2, r3, #2
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	2204      	movs	r2, #4
 8003702:	409a      	lsls	r2, r3
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 808f 	beq.w	800382c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a2c      	ldr	r2, [pc, #176]	@ (80037c4 <HAL_DMA_IRQHandler+0x3f8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d04a      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a2a      	ldr	r2, [pc, #168]	@ (80037c8 <HAL_DMA_IRQHandler+0x3fc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d045      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a29      	ldr	r2, [pc, #164]	@ (80037cc <HAL_DMA_IRQHandler+0x400>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d040      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a27      	ldr	r2, [pc, #156]	@ (80037d0 <HAL_DMA_IRQHandler+0x404>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d03b      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a26      	ldr	r2, [pc, #152]	@ (80037d4 <HAL_DMA_IRQHandler+0x408>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d036      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a24      	ldr	r2, [pc, #144]	@ (80037d8 <HAL_DMA_IRQHandler+0x40c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d031      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a23      	ldr	r2, [pc, #140]	@ (80037dc <HAL_DMA_IRQHandler+0x410>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d02c      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a21      	ldr	r2, [pc, #132]	@ (80037e0 <HAL_DMA_IRQHandler+0x414>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d027      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a20      	ldr	r2, [pc, #128]	@ (80037e4 <HAL_DMA_IRQHandler+0x418>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d022      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1e      	ldr	r2, [pc, #120]	@ (80037e8 <HAL_DMA_IRQHandler+0x41c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01d      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1d      	ldr	r2, [pc, #116]	@ (80037ec <HAL_DMA_IRQHandler+0x420>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d018      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1b      	ldr	r2, [pc, #108]	@ (80037f0 <HAL_DMA_IRQHandler+0x424>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1a      	ldr	r2, [pc, #104]	@ (80037f4 <HAL_DMA_IRQHandler+0x428>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00e      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a18      	ldr	r2, [pc, #96]	@ (80037f8 <HAL_DMA_IRQHandler+0x42c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d009      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <HAL_DMA_IRQHandler+0x430>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d004      	beq.n	80037ae <HAL_DMA_IRQHandler+0x3e2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a15      	ldr	r2, [pc, #84]	@ (8003800 <HAL_DMA_IRQHandler+0x434>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d12a      	bne.n	8003804 <HAL_DMA_IRQHandler+0x438>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e023      	b.n	800380c <HAL_DMA_IRQHandler+0x440>
 80037c4:	40020010 	.word	0x40020010
 80037c8:	40020028 	.word	0x40020028
 80037cc:	40020040 	.word	0x40020040
 80037d0:	40020058 	.word	0x40020058
 80037d4:	40020070 	.word	0x40020070
 80037d8:	40020088 	.word	0x40020088
 80037dc:	400200a0 	.word	0x400200a0
 80037e0:	400200b8 	.word	0x400200b8
 80037e4:	40020410 	.word	0x40020410
 80037e8:	40020428 	.word	0x40020428
 80037ec:	40020440 	.word	0x40020440
 80037f0:	40020458 	.word	0x40020458
 80037f4:	40020470 	.word	0x40020470
 80037f8:	40020488 	.word	0x40020488
 80037fc:	400204a0 	.word	0x400204a0
 8003800:	400204b8 	.word	0x400204b8
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2300      	movs	r3, #0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00d      	beq.n	800382c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2204      	movs	r2, #4
 800381a:	409a      	lsls	r2, r3
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003824:	f043 0204 	orr.w	r2, r3, #4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2210      	movs	r2, #16
 8003836:	409a      	lsls	r2, r3
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80a6 	beq.w	800398e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a85      	ldr	r2, [pc, #532]	@ (8003a5c <HAL_DMA_IRQHandler+0x690>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d04a      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a83      	ldr	r2, [pc, #524]	@ (8003a60 <HAL_DMA_IRQHandler+0x694>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d045      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a82      	ldr	r2, [pc, #520]	@ (8003a64 <HAL_DMA_IRQHandler+0x698>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d040      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a80      	ldr	r2, [pc, #512]	@ (8003a68 <HAL_DMA_IRQHandler+0x69c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d03b      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a7f      	ldr	r2, [pc, #508]	@ (8003a6c <HAL_DMA_IRQHandler+0x6a0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d036      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a7d      	ldr	r2, [pc, #500]	@ (8003a70 <HAL_DMA_IRQHandler+0x6a4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d031      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a7c      	ldr	r2, [pc, #496]	@ (8003a74 <HAL_DMA_IRQHandler+0x6a8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d02c      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7a      	ldr	r2, [pc, #488]	@ (8003a78 <HAL_DMA_IRQHandler+0x6ac>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d027      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a79      	ldr	r2, [pc, #484]	@ (8003a7c <HAL_DMA_IRQHandler+0x6b0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d022      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a77      	ldr	r2, [pc, #476]	@ (8003a80 <HAL_DMA_IRQHandler+0x6b4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01d      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a76      	ldr	r2, [pc, #472]	@ (8003a84 <HAL_DMA_IRQHandler+0x6b8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d018      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a74      	ldr	r2, [pc, #464]	@ (8003a88 <HAL_DMA_IRQHandler+0x6bc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a73      	ldr	r2, [pc, #460]	@ (8003a8c <HAL_DMA_IRQHandler+0x6c0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a71      	ldr	r2, [pc, #452]	@ (8003a90 <HAL_DMA_IRQHandler+0x6c4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a70      	ldr	r2, [pc, #448]	@ (8003a94 <HAL_DMA_IRQHandler+0x6c8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x516>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003a98 <HAL_DMA_IRQHandler+0x6cc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10a      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x52c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf14      	ite	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	2300      	moveq	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	e009      	b.n	800390c <HAL_DMA_IRQHandler+0x540>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf14      	ite	ne
 8003906:	2301      	movne	r3, #1
 8003908:	2300      	moveq	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d03e      	beq.n	800398e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	2210      	movs	r2, #16
 800391a:	409a      	lsls	r2, r3
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d018      	beq.n	8003960 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d108      	bne.n	800394e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d024      	beq.n	800398e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
 800394c:	e01f      	b.n	800398e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01b      	beq.n	800398e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
 800395e:	e016      	b.n	800398e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d107      	bne.n	800397e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0208 	bic.w	r2, r2, #8
 800397c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2220      	movs	r2, #32
 8003998:	409a      	lsls	r2, r3
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8110 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2c      	ldr	r2, [pc, #176]	@ (8003a5c <HAL_DMA_IRQHandler+0x690>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04a      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003a60 <HAL_DMA_IRQHandler+0x694>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d045      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a29      	ldr	r2, [pc, #164]	@ (8003a64 <HAL_DMA_IRQHandler+0x698>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d040      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a28      	ldr	r2, [pc, #160]	@ (8003a68 <HAL_DMA_IRQHandler+0x69c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d03b      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a26      	ldr	r2, [pc, #152]	@ (8003a6c <HAL_DMA_IRQHandler+0x6a0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d036      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a25      	ldr	r2, [pc, #148]	@ (8003a70 <HAL_DMA_IRQHandler+0x6a4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d031      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a23      	ldr	r2, [pc, #140]	@ (8003a74 <HAL_DMA_IRQHandler+0x6a8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02c      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a22      	ldr	r2, [pc, #136]	@ (8003a78 <HAL_DMA_IRQHandler+0x6ac>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d027      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a20      	ldr	r2, [pc, #128]	@ (8003a7c <HAL_DMA_IRQHandler+0x6b0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d022      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1f      	ldr	r2, [pc, #124]	@ (8003a80 <HAL_DMA_IRQHandler+0x6b4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01d      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a84 <HAL_DMA_IRQHandler+0x6b8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d018      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1c      	ldr	r2, [pc, #112]	@ (8003a88 <HAL_DMA_IRQHandler+0x6bc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1a      	ldr	r2, [pc, #104]	@ (8003a8c <HAL_DMA_IRQHandler+0x6c0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00e      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a19      	ldr	r2, [pc, #100]	@ (8003a90 <HAL_DMA_IRQHandler+0x6c4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a17      	ldr	r2, [pc, #92]	@ (8003a94 <HAL_DMA_IRQHandler+0x6c8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x678>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a16      	ldr	r2, [pc, #88]	@ (8003a98 <HAL_DMA_IRQHandler+0x6cc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d12b      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x6d0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bf14      	ite	ne
 8003a52:	2301      	movne	r3, #1
 8003a54:	2300      	moveq	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	e02a      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x6e4>
 8003a5a:	bf00      	nop
 8003a5c:	40020010 	.word	0x40020010
 8003a60:	40020028 	.word	0x40020028
 8003a64:	40020040 	.word	0x40020040
 8003a68:	40020058 	.word	0x40020058
 8003a6c:	40020070 	.word	0x40020070
 8003a70:	40020088 	.word	0x40020088
 8003a74:	400200a0 	.word	0x400200a0
 8003a78:	400200b8 	.word	0x400200b8
 8003a7c:	40020410 	.word	0x40020410
 8003a80:	40020428 	.word	0x40020428
 8003a84:	40020440 	.word	0x40020440
 8003a88:	40020458 	.word	0x40020458
 8003a8c:	40020470 	.word	0x40020470
 8003a90:	40020488 	.word	0x40020488
 8003a94:	400204a0 	.word	0x400204a0
 8003a98:	400204b8 	.word	0x400204b8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bf14      	ite	ne
 8003aaa:	2301      	movne	r3, #1
 8003aac:	2300      	moveq	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8087 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	2220      	movs	r2, #32
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d139      	bne.n	8003b46 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0216 	bic.w	r2, r2, #22
 8003ae0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003af0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d103      	bne.n	8003b02 <HAL_DMA_IRQHandler+0x736>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0208 	bic.w	r2, r2, #8
 8003b10:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	223f      	movs	r2, #63	@ 0x3f
 8003b1c:	409a      	lsls	r2, r3
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 834a 	beq.w	80041d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
          }
          return;
 8003b44:	e344      	b.n	80041d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d018      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d108      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d02c      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	4798      	blx	r3
 8003b72:	e027      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d023      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
 8003b84:	e01e      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10f      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0210 	bic.w	r2, r2, #16
 8003ba2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8306 	beq.w	80041da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8088 	beq.w	8003cec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2204      	movs	r2, #4
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a7a      	ldr	r2, [pc, #488]	@ (8003dd4 <HAL_DMA_IRQHandler+0xa08>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d04a      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a79      	ldr	r2, [pc, #484]	@ (8003dd8 <HAL_DMA_IRQHandler+0xa0c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d045      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a77      	ldr	r2, [pc, #476]	@ (8003ddc <HAL_DMA_IRQHandler+0xa10>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d040      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a76      	ldr	r2, [pc, #472]	@ (8003de0 <HAL_DMA_IRQHandler+0xa14>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d03b      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a74      	ldr	r2, [pc, #464]	@ (8003de4 <HAL_DMA_IRQHandler+0xa18>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d036      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a73      	ldr	r2, [pc, #460]	@ (8003de8 <HAL_DMA_IRQHandler+0xa1c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d031      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a71      	ldr	r2, [pc, #452]	@ (8003dec <HAL_DMA_IRQHandler+0xa20>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d02c      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a70      	ldr	r2, [pc, #448]	@ (8003df0 <HAL_DMA_IRQHandler+0xa24>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d027      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a6e      	ldr	r2, [pc, #440]	@ (8003df4 <HAL_DMA_IRQHandler+0xa28>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d022      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a6d      	ldr	r2, [pc, #436]	@ (8003df8 <HAL_DMA_IRQHandler+0xa2c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d01d      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a6b      	ldr	r2, [pc, #428]	@ (8003dfc <HAL_DMA_IRQHandler+0xa30>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d018      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6a      	ldr	r2, [pc, #424]	@ (8003e00 <HAL_DMA_IRQHandler+0xa34>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d013      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a68      	ldr	r2, [pc, #416]	@ (8003e04 <HAL_DMA_IRQHandler+0xa38>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00e      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a67      	ldr	r2, [pc, #412]	@ (8003e08 <HAL_DMA_IRQHandler+0xa3c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d009      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a65      	ldr	r2, [pc, #404]	@ (8003e0c <HAL_DMA_IRQHandler+0xa40>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d004      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x8b8>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a64      	ldr	r2, [pc, #400]	@ (8003e10 <HAL_DMA_IRQHandler+0xa44>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d108      	bne.n	8003c96 <HAL_DMA_IRQHandler+0x8ca>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e007      	b.n	8003ca6 <HAL_DMA_IRQHandler+0x8da>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0201 	bic.w	r2, r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d307      	bcc.n	8003cc2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f2      	bne.n	8003ca6 <HAL_DMA_IRQHandler+0x8da>
 8003cc0:	e000      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003cc2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d004      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003cda:	e003      	b.n	8003ce4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8272 	beq.w	80041da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
 8003cfe:	e26c      	b.n	80041da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a43      	ldr	r2, [pc, #268]	@ (8003e14 <HAL_DMA_IRQHandler+0xa48>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d022      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x984>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a42      	ldr	r2, [pc, #264]	@ (8003e18 <HAL_DMA_IRQHandler+0xa4c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d01d      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x984>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a40      	ldr	r2, [pc, #256]	@ (8003e1c <HAL_DMA_IRQHandler+0xa50>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d018      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x984>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3f      	ldr	r2, [pc, #252]	@ (8003e20 <HAL_DMA_IRQHandler+0xa54>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d013      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x984>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a3d      	ldr	r2, [pc, #244]	@ (8003e24 <HAL_DMA_IRQHandler+0xa58>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00e      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x984>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a3c      	ldr	r2, [pc, #240]	@ (8003e28 <HAL_DMA_IRQHandler+0xa5c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d009      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x984>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3a      	ldr	r2, [pc, #232]	@ (8003e2c <HAL_DMA_IRQHandler+0xa60>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d004      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x984>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a39      	ldr	r2, [pc, #228]	@ (8003e30 <HAL_DMA_IRQHandler+0xa64>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x988>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <HAL_DMA_IRQHandler+0x98a>
 8003d54:	2300      	movs	r3, #0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 823f 	beq.w	80041da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80cd 	beq.w	8003f14 <HAL_DMA_IRQHandler+0xb48>
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80c7 	beq.w	8003f14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2204      	movs	r2, #4
 8003d90:	409a      	lsls	r2, r3
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d049      	beq.n	8003e34 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8210 	beq.w	80041d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dbc:	e20a      	b.n	80041d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8206 	beq.w	80041d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dd0:	e200      	b.n	80041d4 <HAL_DMA_IRQHandler+0xe08>
 8003dd2:	bf00      	nop
 8003dd4:	40020010 	.word	0x40020010
 8003dd8:	40020028 	.word	0x40020028
 8003ddc:	40020040 	.word	0x40020040
 8003de0:	40020058 	.word	0x40020058
 8003de4:	40020070 	.word	0x40020070
 8003de8:	40020088 	.word	0x40020088
 8003dec:	400200a0 	.word	0x400200a0
 8003df0:	400200b8 	.word	0x400200b8
 8003df4:	40020410 	.word	0x40020410
 8003df8:	40020428 	.word	0x40020428
 8003dfc:	40020440 	.word	0x40020440
 8003e00:	40020458 	.word	0x40020458
 8003e04:	40020470 	.word	0x40020470
 8003e08:	40020488 	.word	0x40020488
 8003e0c:	400204a0 	.word	0x400204a0
 8003e10:	400204b8 	.word	0x400204b8
 8003e14:	58025408 	.word	0x58025408
 8003e18:	5802541c 	.word	0x5802541c
 8003e1c:	58025430 	.word	0x58025430
 8003e20:	58025444 	.word	0x58025444
 8003e24:	58025458 	.word	0x58025458
 8003e28:	5802546c 	.word	0x5802546c
 8003e2c:	58025480 	.word	0x58025480
 8003e30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d160      	bne.n	8003f00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a7f      	ldr	r2, [pc, #508]	@ (8004040 <HAL_DMA_IRQHandler+0xc74>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d04a      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a7d      	ldr	r2, [pc, #500]	@ (8004044 <HAL_DMA_IRQHandler+0xc78>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d045      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a7c      	ldr	r2, [pc, #496]	@ (8004048 <HAL_DMA_IRQHandler+0xc7c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d040      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a7a      	ldr	r2, [pc, #488]	@ (800404c <HAL_DMA_IRQHandler+0xc80>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d03b      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a79      	ldr	r2, [pc, #484]	@ (8004050 <HAL_DMA_IRQHandler+0xc84>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d036      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a77      	ldr	r2, [pc, #476]	@ (8004054 <HAL_DMA_IRQHandler+0xc88>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d031      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a76      	ldr	r2, [pc, #472]	@ (8004058 <HAL_DMA_IRQHandler+0xc8c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d02c      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a74      	ldr	r2, [pc, #464]	@ (800405c <HAL_DMA_IRQHandler+0xc90>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d027      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a73      	ldr	r2, [pc, #460]	@ (8004060 <HAL_DMA_IRQHandler+0xc94>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d022      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a71      	ldr	r2, [pc, #452]	@ (8004064 <HAL_DMA_IRQHandler+0xc98>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01d      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a70      	ldr	r2, [pc, #448]	@ (8004068 <HAL_DMA_IRQHandler+0xc9c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800406c <HAL_DMA_IRQHandler+0xca0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a6d      	ldr	r2, [pc, #436]	@ (8004070 <HAL_DMA_IRQHandler+0xca4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6b      	ldr	r2, [pc, #428]	@ (8004074 <HAL_DMA_IRQHandler+0xca8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6a      	ldr	r2, [pc, #424]	@ (8004078 <HAL_DMA_IRQHandler+0xcac>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_DMA_IRQHandler+0xb12>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a68      	ldr	r2, [pc, #416]	@ (800407c <HAL_DMA_IRQHandler+0xcb0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d108      	bne.n	8003ef0 <HAL_DMA_IRQHandler+0xb24>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0208 	bic.w	r2, r2, #8
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e007      	b.n	8003f00 <HAL_DMA_IRQHandler+0xb34>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0204 	bic.w	r2, r2, #4
 8003efe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8165 	beq.w	80041d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f12:	e15f      	b.n	80041d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80c5 	beq.w	80040b4 <HAL_DMA_IRQHandler+0xce8>
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80bf 	beq.w	80040b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2202      	movs	r2, #2
 8003f40:	409a      	lsls	r2, r3
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d018      	beq.n	8003f82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 813a 	beq.w	80041d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f6c:	e134      	b.n	80041d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8130 	beq.w	80041d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f80:	e12a      	b.n	80041d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f040 8089 	bne.w	80040a0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a2b      	ldr	r2, [pc, #172]	@ (8004040 <HAL_DMA_IRQHandler+0xc74>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04a      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a29      	ldr	r2, [pc, #164]	@ (8004044 <HAL_DMA_IRQHandler+0xc78>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d045      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a28      	ldr	r2, [pc, #160]	@ (8004048 <HAL_DMA_IRQHandler+0xc7c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d040      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a26      	ldr	r2, [pc, #152]	@ (800404c <HAL_DMA_IRQHandler+0xc80>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d03b      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a25      	ldr	r2, [pc, #148]	@ (8004050 <HAL_DMA_IRQHandler+0xc84>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d036      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	@ (8004054 <HAL_DMA_IRQHandler+0xc88>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d031      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a22      	ldr	r2, [pc, #136]	@ (8004058 <HAL_DMA_IRQHandler+0xc8c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d02c      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a20      	ldr	r2, [pc, #128]	@ (800405c <HAL_DMA_IRQHandler+0xc90>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d027      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8004060 <HAL_DMA_IRQHandler+0xc94>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d022      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	@ (8004064 <HAL_DMA_IRQHandler+0xc98>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01d      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8004068 <HAL_DMA_IRQHandler+0xc9c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d018      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1a      	ldr	r2, [pc, #104]	@ (800406c <HAL_DMA_IRQHandler+0xca0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a19      	ldr	r2, [pc, #100]	@ (8004070 <HAL_DMA_IRQHandler+0xca4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a17      	ldr	r2, [pc, #92]	@ (8004074 <HAL_DMA_IRQHandler+0xca8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a16      	ldr	r2, [pc, #88]	@ (8004078 <HAL_DMA_IRQHandler+0xcac>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_DMA_IRQHandler+0xc62>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a14      	ldr	r2, [pc, #80]	@ (800407c <HAL_DMA_IRQHandler+0xcb0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d128      	bne.n	8004080 <HAL_DMA_IRQHandler+0xcb4>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0214 	bic.w	r2, r2, #20
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e027      	b.n	8004090 <HAL_DMA_IRQHandler+0xcc4>
 8004040:	40020010 	.word	0x40020010
 8004044:	40020028 	.word	0x40020028
 8004048:	40020040 	.word	0x40020040
 800404c:	40020058 	.word	0x40020058
 8004050:	40020070 	.word	0x40020070
 8004054:	40020088 	.word	0x40020088
 8004058:	400200a0 	.word	0x400200a0
 800405c:	400200b8 	.word	0x400200b8
 8004060:	40020410 	.word	0x40020410
 8004064:	40020428 	.word	0x40020428
 8004068:	40020440 	.word	0x40020440
 800406c:	40020458 	.word	0x40020458
 8004070:	40020470 	.word	0x40020470
 8004074:	40020488 	.word	0x40020488
 8004078:	400204a0 	.word	0x400204a0
 800407c:	400204b8 	.word	0x400204b8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 020a 	bic.w	r2, r2, #10
 800408e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8097 	beq.w	80041d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040b2:	e091      	b.n	80041d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	2208      	movs	r2, #8
 80040be:	409a      	lsls	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8088 	beq.w	80041da <HAL_DMA_IRQHandler+0xe0e>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8082 	beq.w	80041da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a41      	ldr	r2, [pc, #260]	@ (80041e0 <HAL_DMA_IRQHandler+0xe14>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04a      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a3f      	ldr	r2, [pc, #252]	@ (80041e4 <HAL_DMA_IRQHandler+0xe18>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d045      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a3e      	ldr	r2, [pc, #248]	@ (80041e8 <HAL_DMA_IRQHandler+0xe1c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d040      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a3c      	ldr	r2, [pc, #240]	@ (80041ec <HAL_DMA_IRQHandler+0xe20>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d03b      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a3b      	ldr	r2, [pc, #236]	@ (80041f0 <HAL_DMA_IRQHandler+0xe24>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d036      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a39      	ldr	r2, [pc, #228]	@ (80041f4 <HAL_DMA_IRQHandler+0xe28>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d031      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a38      	ldr	r2, [pc, #224]	@ (80041f8 <HAL_DMA_IRQHandler+0xe2c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d02c      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a36      	ldr	r2, [pc, #216]	@ (80041fc <HAL_DMA_IRQHandler+0xe30>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d027      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a35      	ldr	r2, [pc, #212]	@ (8004200 <HAL_DMA_IRQHandler+0xe34>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a33      	ldr	r2, [pc, #204]	@ (8004204 <HAL_DMA_IRQHandler+0xe38>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01d      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a32      	ldr	r2, [pc, #200]	@ (8004208 <HAL_DMA_IRQHandler+0xe3c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d018      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a30      	ldr	r2, [pc, #192]	@ (800420c <HAL_DMA_IRQHandler+0xe40>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2f      	ldr	r2, [pc, #188]	@ (8004210 <HAL_DMA_IRQHandler+0xe44>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2d      	ldr	r2, [pc, #180]	@ (8004214 <HAL_DMA_IRQHandler+0xe48>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2c      	ldr	r2, [pc, #176]	@ (8004218 <HAL_DMA_IRQHandler+0xe4c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_DMA_IRQHandler+0xdaa>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2a      	ldr	r2, [pc, #168]	@ (800421c <HAL_DMA_IRQHandler+0xe50>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d108      	bne.n	8004188 <HAL_DMA_IRQHandler+0xdbc>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 021c 	bic.w	r2, r2, #28
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	e007      	b.n	8004198 <HAL_DMA_IRQHandler+0xdcc>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 020e 	bic.w	r2, r2, #14
 8004196:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
 80041ce:	e004      	b.n	80041da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80041da:	3728      	adds	r7, #40	@ 0x28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40020010 	.word	0x40020010
 80041e4:	40020028 	.word	0x40020028
 80041e8:	40020040 	.word	0x40020040
 80041ec:	40020058 	.word	0x40020058
 80041f0:	40020070 	.word	0x40020070
 80041f4:	40020088 	.word	0x40020088
 80041f8:	400200a0 	.word	0x400200a0
 80041fc:	400200b8 	.word	0x400200b8
 8004200:	40020410 	.word	0x40020410
 8004204:	40020428 	.word	0x40020428
 8004208:	40020440 	.word	0x40020440
 800420c:	40020458 	.word	0x40020458
 8004210:	40020470 	.word	0x40020470
 8004214:	40020488 	.word	0x40020488
 8004218:	400204a0 	.word	0x400204a0
 800421c:	400204b8 	.word	0x400204b8

08004220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a42      	ldr	r2, [pc, #264]	@ (8004338 <DMA_CalcBaseAndBitshift+0x118>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d04a      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a41      	ldr	r2, [pc, #260]	@ (800433c <DMA_CalcBaseAndBitshift+0x11c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d045      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a3f      	ldr	r2, [pc, #252]	@ (8004340 <DMA_CalcBaseAndBitshift+0x120>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d040      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a3e      	ldr	r2, [pc, #248]	@ (8004344 <DMA_CalcBaseAndBitshift+0x124>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d03b      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a3c      	ldr	r2, [pc, #240]	@ (8004348 <DMA_CalcBaseAndBitshift+0x128>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d036      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a3b      	ldr	r2, [pc, #236]	@ (800434c <DMA_CalcBaseAndBitshift+0x12c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d031      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a39      	ldr	r2, [pc, #228]	@ (8004350 <DMA_CalcBaseAndBitshift+0x130>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d02c      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a38      	ldr	r2, [pc, #224]	@ (8004354 <DMA_CalcBaseAndBitshift+0x134>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d027      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a36      	ldr	r2, [pc, #216]	@ (8004358 <DMA_CalcBaseAndBitshift+0x138>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d022      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a35      	ldr	r2, [pc, #212]	@ (800435c <DMA_CalcBaseAndBitshift+0x13c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d01d      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a33      	ldr	r2, [pc, #204]	@ (8004360 <DMA_CalcBaseAndBitshift+0x140>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d018      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a32      	ldr	r2, [pc, #200]	@ (8004364 <DMA_CalcBaseAndBitshift+0x144>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d013      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a30      	ldr	r2, [pc, #192]	@ (8004368 <DMA_CalcBaseAndBitshift+0x148>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00e      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2f      	ldr	r2, [pc, #188]	@ (800436c <DMA_CalcBaseAndBitshift+0x14c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d009      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004370 <DMA_CalcBaseAndBitshift+0x150>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xa8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004374 <DMA_CalcBaseAndBitshift+0x154>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d101      	bne.n	80042cc <DMA_CalcBaseAndBitshift+0xac>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <DMA_CalcBaseAndBitshift+0xae>
 80042cc:	2300      	movs	r3, #0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d024      	beq.n	800431c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	3b10      	subs	r3, #16
 80042da:	4a27      	ldr	r2, [pc, #156]	@ (8004378 <DMA_CalcBaseAndBitshift+0x158>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	4a24      	ldr	r2, [pc, #144]	@ (800437c <DMA_CalcBaseAndBitshift+0x15c>)
 80042ec:	5cd3      	ldrb	r3, [r2, r3]
 80042ee:	461a      	mov	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d908      	bls.n	800430c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	4b1f      	ldr	r3, [pc, #124]	@ (8004380 <DMA_CalcBaseAndBitshift+0x160>)
 8004302:	4013      	ands	r3, r2
 8004304:	1d1a      	adds	r2, r3, #4
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	659a      	str	r2, [r3, #88]	@ 0x58
 800430a:	e00d      	b.n	8004328 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	4b1b      	ldr	r3, [pc, #108]	@ (8004380 <DMA_CalcBaseAndBitshift+0x160>)
 8004314:	4013      	ands	r3, r2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6593      	str	r3, [r2, #88]	@ 0x58
 800431a:	e005      	b.n	8004328 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	40020010 	.word	0x40020010
 800433c:	40020028 	.word	0x40020028
 8004340:	40020040 	.word	0x40020040
 8004344:	40020058 	.word	0x40020058
 8004348:	40020070 	.word	0x40020070
 800434c:	40020088 	.word	0x40020088
 8004350:	400200a0 	.word	0x400200a0
 8004354:	400200b8 	.word	0x400200b8
 8004358:	40020410 	.word	0x40020410
 800435c:	40020428 	.word	0x40020428
 8004360:	40020440 	.word	0x40020440
 8004364:	40020458 	.word	0x40020458
 8004368:	40020470 	.word	0x40020470
 800436c:	40020488 	.word	0x40020488
 8004370:	400204a0 	.word	0x400204a0
 8004374:	400204b8 	.word	0x400204b8
 8004378:	aaaaaaab 	.word	0xaaaaaaab
 800437c:	0800fccc 	.word	0x0800fccc
 8004380:	fffffc00 	.word	0xfffffc00

08004384 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d120      	bne.n	80043da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	2b03      	cmp	r3, #3
 800439e:	d858      	bhi.n	8004452 <DMA_CheckFifoParam+0xce>
 80043a0:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <DMA_CheckFifoParam+0x24>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043cb 	.word	0x080043cb
 80043b0:	080043b9 	.word	0x080043b9
 80043b4:	08004453 	.word	0x08004453
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d048      	beq.n	8004456 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043c8:	e045      	b.n	8004456 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043d2:	d142      	bne.n	800445a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043d8:	e03f      	b.n	800445a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043e2:	d123      	bne.n	800442c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d838      	bhi.n	800445e <DMA_CheckFifoParam+0xda>
 80043ec:	a201      	add	r2, pc, #4	@ (adr r2, 80043f4 <DMA_CheckFifoParam+0x70>)
 80043ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f2:	bf00      	nop
 80043f4:	08004405 	.word	0x08004405
 80043f8:	0800440b 	.word	0x0800440b
 80043fc:	08004405 	.word	0x08004405
 8004400:	0800441d 	.word	0x0800441d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
        break;
 8004408:	e030      	b.n	800446c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d025      	beq.n	8004462 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800441a:	e022      	b.n	8004462 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004424:	d11f      	bne.n	8004466 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800442a:	e01c      	b.n	8004466 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	2b02      	cmp	r3, #2
 8004432:	d902      	bls.n	800443a <DMA_CheckFifoParam+0xb6>
 8004434:	2b03      	cmp	r3, #3
 8004436:	d003      	beq.n	8004440 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004438:	e018      	b.n	800446c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
        break;
 800443e:	e015      	b.n	800446c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00e      	beq.n	800446a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
    break;
 8004450:	e00b      	b.n	800446a <DMA_CheckFifoParam+0xe6>
        break;
 8004452:	bf00      	nop
 8004454:	e00a      	b.n	800446c <DMA_CheckFifoParam+0xe8>
        break;
 8004456:	bf00      	nop
 8004458:	e008      	b.n	800446c <DMA_CheckFifoParam+0xe8>
        break;
 800445a:	bf00      	nop
 800445c:	e006      	b.n	800446c <DMA_CheckFifoParam+0xe8>
        break;
 800445e:	bf00      	nop
 8004460:	e004      	b.n	800446c <DMA_CheckFifoParam+0xe8>
        break;
 8004462:	bf00      	nop
 8004464:	e002      	b.n	800446c <DMA_CheckFifoParam+0xe8>
        break;
 8004466:	bf00      	nop
 8004468:	e000      	b.n	800446c <DMA_CheckFifoParam+0xe8>
    break;
 800446a:	bf00      	nop
    }
  }

  return status;
 800446c:	7bfb      	ldrb	r3, [r7, #15]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop

0800447c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a38      	ldr	r2, [pc, #224]	@ (8004570 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d022      	beq.n	80044da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a36      	ldr	r2, [pc, #216]	@ (8004574 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01d      	beq.n	80044da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a35      	ldr	r2, [pc, #212]	@ (8004578 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d018      	beq.n	80044da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a33      	ldr	r2, [pc, #204]	@ (800457c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a32      	ldr	r2, [pc, #200]	@ (8004580 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00e      	beq.n	80044da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a30      	ldr	r2, [pc, #192]	@ (8004584 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d009      	beq.n	80044da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004588 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a2d      	ldr	r2, [pc, #180]	@ (800458c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80044de:	2300      	movs	r3, #0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01a      	beq.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	3b08      	subs	r3, #8
 80044ec:	4a28      	ldr	r2, [pc, #160]	@ (8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4b26      	ldr	r3, [pc, #152]	@ (8004594 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a24      	ldr	r2, [pc, #144]	@ (8004598 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004508:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2201      	movs	r2, #1
 8004512:	409a      	lsls	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004518:	e024      	b.n	8004564 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	3b10      	subs	r3, #16
 8004522:	4a1e      	ldr	r2, [pc, #120]	@ (800459c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4a1c      	ldr	r2, [pc, #112]	@ (80045a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d806      	bhi.n	8004542 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4a1b      	ldr	r2, [pc, #108]	@ (80045a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d902      	bls.n	8004542 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3308      	adds	r3, #8
 8004540:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4b18      	ldr	r3, [pc, #96]	@ (80045a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	461a      	mov	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a16      	ldr	r2, [pc, #88]	@ (80045ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004554:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	2201      	movs	r2, #1
 800455e:	409a      	lsls	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004564:	bf00      	nop
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	58025408 	.word	0x58025408
 8004574:	5802541c 	.word	0x5802541c
 8004578:	58025430 	.word	0x58025430
 800457c:	58025444 	.word	0x58025444
 8004580:	58025458 	.word	0x58025458
 8004584:	5802546c 	.word	0x5802546c
 8004588:	58025480 	.word	0x58025480
 800458c:	58025494 	.word	0x58025494
 8004590:	cccccccd 	.word	0xcccccccd
 8004594:	16009600 	.word	0x16009600
 8004598:	58025880 	.word	0x58025880
 800459c:	aaaaaaab 	.word	0xaaaaaaab
 80045a0:	400204b8 	.word	0x400204b8
 80045a4:	4002040f 	.word	0x4002040f
 80045a8:	10008200 	.word	0x10008200
 80045ac:	40020880 	.word	0x40020880

080045b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d04a      	beq.n	800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d847      	bhi.n	800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a25      	ldr	r2, [pc, #148]	@ (8004668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d022      	beq.n	800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a24      	ldr	r2, [pc, #144]	@ (800466c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d01d      	beq.n	800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a22      	ldr	r2, [pc, #136]	@ (8004670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d018      	beq.n	800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a21      	ldr	r2, [pc, #132]	@ (8004674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d013      	beq.n	800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00e      	beq.n	800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a1e      	ldr	r2, [pc, #120]	@ (800467c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d009      	beq.n	800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1c      	ldr	r2, [pc, #112]	@ (8004680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1b      	ldr	r2, [pc, #108]	@ (8004684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004620:	2300      	movs	r3, #0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4b17      	ldr	r3, [pc, #92]	@ (8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a15      	ldr	r2, [pc, #84]	@ (800468c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004638:	671a      	str	r2, [r3, #112]	@ 0x70
 800463a:	e009      	b.n	8004650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4b14      	ldr	r3, [pc, #80]	@ (8004690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	461a      	mov	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a11      	ldr	r2, [pc, #68]	@ (8004694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800464e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3b01      	subs	r3, #1
 8004654:	2201      	movs	r2, #1
 8004656:	409a      	lsls	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800465c:	bf00      	nop
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	58025408 	.word	0x58025408
 800466c:	5802541c 	.word	0x5802541c
 8004670:	58025430 	.word	0x58025430
 8004674:	58025444 	.word	0x58025444
 8004678:	58025458 	.word	0x58025458
 800467c:	5802546c 	.word	0x5802546c
 8004680:	58025480 	.word	0x58025480
 8004684:	58025494 	.word	0x58025494
 8004688:	1600963f 	.word	0x1600963f
 800468c:	58025940 	.word	0x58025940
 8004690:	1000823f 	.word	0x1000823f
 8004694:	40020940 	.word	0x40020940

08004698 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b098      	sub	sp, #96	@ 0x60
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80046a0:	4a84      	ldr	r2, [pc, #528]	@ (80048b4 <HAL_FDCAN_Init+0x21c>)
 80046a2:	f107 030c 	add.w	r3, r7, #12
 80046a6:	4611      	mov	r1, r2
 80046a8:	224c      	movs	r2, #76	@ 0x4c
 80046aa:	4618      	mov	r0, r3
 80046ac:	f009 fcc5 	bl	800e03a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e1c6      	b.n	8004a48 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a7e      	ldr	r2, [pc, #504]	@ (80048b8 <HAL_FDCAN_Init+0x220>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d106      	bne.n	80046d2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80046cc:	461a      	mov	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc fa7c 	bl	8000be4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0210 	bic.w	r2, r2, #16
 80046fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046fc:	f7fd fa12 	bl	8001b24 <HAL_GetTick>
 8004700:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004702:	e014      	b.n	800472e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004704:	f7fd fa0e 	bl	8001b24 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b0a      	cmp	r3, #10
 8004710:	d90d      	bls.n	800472e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2203      	movs	r2, #3
 8004726:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e18c      	b.n	8004a48 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b08      	cmp	r3, #8
 800473a:	d0e3      	beq.n	8004704 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800474c:	f7fd f9ea 	bl	8001b24 <HAL_GetTick>
 8004750:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004752:	e014      	b.n	800477e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004754:	f7fd f9e6 	bl	8001b24 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b0a      	cmp	r3, #10
 8004760:	d90d      	bls.n	800477e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004768:	f043 0201 	orr.w	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2203      	movs	r2, #3
 8004776:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e164      	b.n	8004a48 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0e3      	beq.n	8004754 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0202 	orr.w	r2, r2, #2
 800479a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	7c1b      	ldrb	r3, [r3, #16]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d108      	bne.n	80047b6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047b2:	619a      	str	r2, [r3, #24]
 80047b4:	e007      	b.n	80047c6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047c4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	7c5b      	ldrb	r3, [r3, #17]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d108      	bne.n	80047e0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047dc:	619a      	str	r2, [r3, #24]
 80047de:	e007      	b.n	80047f0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047ee:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	7c9b      	ldrb	r3, [r3, #18]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d108      	bne.n	800480a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004806:	619a      	str	r2, [r3, #24]
 8004808:	e007      	b.n	800481a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004818:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800483e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0210 	bic.w	r2, r2, #16
 800484e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d108      	bne.n	800486a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0204 	orr.w	r2, r2, #4
 8004866:	619a      	str	r2, [r3, #24]
 8004868:	e030      	b.n	80048cc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d02c      	beq.n	80048cc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d020      	beq.n	80048bc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004888:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0210 	orr.w	r2, r2, #16
 8004898:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d114      	bne.n	80048cc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0220 	orr.w	r2, r2, #32
 80048b0:	619a      	str	r2, [r3, #24]
 80048b2:	e00b      	b.n	80048cc <HAL_FDCAN_Init+0x234>
 80048b4:	0800fbc4 	.word	0x0800fbc4
 80048b8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0220 	orr.w	r2, r2, #32
 80048ca:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	3b01      	subs	r3, #1
 80048da:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048dc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80048e4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80048f4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048f6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004900:	d115      	bne.n	800492e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004906:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	3b01      	subs	r3, #1
 800490e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004910:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	3b01      	subs	r3, #1
 8004918:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800491a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	3b01      	subs	r3, #1
 8004924:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800492a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800492c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004954:	4413      	add	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d011      	beq.n	800497e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004962:	f023 0107 	bic.w	r1, r3, #7
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	3360      	adds	r3, #96	@ 0x60
 800496e:	443b      	add	r3, r7
 8004970:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d011      	beq.n	80049aa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800498e:	f023 0107 	bic.w	r1, r3, #7
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	3360      	adds	r3, #96	@ 0x60
 800499a:	443b      	add	r3, r7
 800499c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d012      	beq.n	80049d8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049ba:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	3360      	adds	r3, #96	@ 0x60
 80049c6:	443b      	add	r3, r7
 80049c8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80049cc:	011a      	lsls	r2, r3, #4
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d012      	beq.n	8004a06 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049e8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	3360      	adds	r3, #96	@ 0x60
 80049f4:	443b      	add	r3, r7
 80049f6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80049fa:	021a      	lsls	r2, r3, #8
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a11      	ldr	r2, [pc, #68]	@ (8004a50 <HAL_FDCAN_Init+0x3b8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d107      	bne.n	8004a20 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f022 0203 	bic.w	r2, r2, #3
 8004a1e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f80b 	bl	8004a54 <FDCAN_CalcultateRamBlockAddresses>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004a44:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3760      	adds	r7, #96	@ 0x60
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	4000a000 	.word	0x4000a000

08004a54 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a60:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004a6a:	4ba7      	ldr	r3, [pc, #668]	@ (8004d08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	0091      	lsls	r1, r2, #2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	430b      	orrs	r3, r1
 8004a78:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a84:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8c:	041a      	lsls	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004aaa:	4b97      	ldr	r3, [pc, #604]	@ (8004d08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	0091      	lsls	r1, r2, #2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004acc:	041a      	lsls	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004aec:	4b86      	ldr	r3, [pc, #536]	@ (8004d08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	0091      	lsls	r1, r2, #2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	430b      	orrs	r3, r1
 8004afa:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b06:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	041a      	lsls	r2, r3, #16
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	4413      	add	r3, r2
 8004b2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b34:	4b74      	ldr	r3, [pc, #464]	@ (8004d08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	0091      	lsls	r1, r2, #2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	430b      	orrs	r3, r1
 8004b42:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b4e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b56:	041a      	lsls	r2, r3, #16
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4413      	add	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004b7c:	4b62      	ldr	r3, [pc, #392]	@ (8004d08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	0091      	lsls	r1, r2, #2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004ba8:	4b57      	ldr	r3, [pc, #348]	@ (8004d08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	0091      	lsls	r1, r2, #2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bc2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bca:	041a      	lsls	r2, r3, #16
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	4413      	add	r3, r2
 8004be0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004bea:	4b47      	ldr	r3, [pc, #284]	@ (8004d08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	0091      	lsls	r1, r2, #2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c04:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0c:	041a      	lsls	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c20:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c28:	061a      	lsls	r2, r3, #24
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c38:	4b34      	ldr	r3, [pc, #208]	@ (8004d0c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009a      	lsls	r2, r3, #2
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	441a      	add	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	441a      	add	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004c74:	441a      	add	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004c9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ca2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004ca4:	441a      	add	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	441a      	add	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004cf0:	441a      	add	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfe:	4a04      	ldr	r2, [pc, #16]	@ (8004d10 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d915      	bls.n	8004d30 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004d04:	e006      	b.n	8004d14 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004d06:	bf00      	nop
 8004d08:	ffff0003 	.word	0xffff0003
 8004d0c:	10002b00 	.word	0x10002b00
 8004d10:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2203      	movs	r2, #3
 8004d28:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e010      	b.n	8004d52 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e005      	b.n	8004d44 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3304      	adds	r3, #4
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d3f3      	bcc.n	8004d38 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop

08004d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b089      	sub	sp, #36	@ 0x24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d6e:	4b89      	ldr	r3, [pc, #548]	@ (8004f94 <HAL_GPIO_Init+0x234>)
 8004d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d72:	e194      	b.n	800509e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	2101      	movs	r1, #1
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d80:	4013      	ands	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8186 	beq.w	8005098 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d005      	beq.n	8004da4 <HAL_GPIO_Init+0x44>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d130      	bne.n	8004e06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	2203      	movs	r2, #3
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dda:	2201      	movs	r2, #1
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	43db      	mvns	r3, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4013      	ands	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	091b      	lsrs	r3, r3, #4
 8004df0:	f003 0201 	and.w	r2, r3, #1
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d017      	beq.n	8004e42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4013      	ands	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d123      	bne.n	8004e96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	08da      	lsrs	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3208      	adds	r2, #8
 8004e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	220f      	movs	r2, #15
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	08da      	lsrs	r2, r3, #3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3208      	adds	r2, #8
 8004e90:	69b9      	ldr	r1, [r7, #24]
 8004e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f003 0203 	and.w	r2, r3, #3
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80e0 	beq.w	8005098 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8004f98 <HAL_GPIO_Init+0x238>)
 8004eda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ede:	4a2e      	ldr	r2, [pc, #184]	@ (8004f98 <HAL_GPIO_Init+0x238>)
 8004ee0:	f043 0302 	orr.w	r3, r3, #2
 8004ee4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f98 <HAL_GPIO_Init+0x238>)
 8004eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ef6:	4a29      	ldr	r2, [pc, #164]	@ (8004f9c <HAL_GPIO_Init+0x23c>)
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	089b      	lsrs	r3, r3, #2
 8004efc:	3302      	adds	r3, #2
 8004efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	220f      	movs	r2, #15
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a20      	ldr	r2, [pc, #128]	@ (8004fa0 <HAL_GPIO_Init+0x240>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d052      	beq.n	8004fc8 <HAL_GPIO_Init+0x268>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1f      	ldr	r2, [pc, #124]	@ (8004fa4 <HAL_GPIO_Init+0x244>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d031      	beq.n	8004f8e <HAL_GPIO_Init+0x22e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa8 <HAL_GPIO_Init+0x248>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d02b      	beq.n	8004f8a <HAL_GPIO_Init+0x22a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1d      	ldr	r2, [pc, #116]	@ (8004fac <HAL_GPIO_Init+0x24c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d025      	beq.n	8004f86 <HAL_GPIO_Init+0x226>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb0 <HAL_GPIO_Init+0x250>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01f      	beq.n	8004f82 <HAL_GPIO_Init+0x222>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb4 <HAL_GPIO_Init+0x254>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d019      	beq.n	8004f7e <HAL_GPIO_Init+0x21e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb8 <HAL_GPIO_Init+0x258>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <HAL_GPIO_Init+0x21a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <HAL_GPIO_Init+0x25c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00d      	beq.n	8004f76 <HAL_GPIO_Init+0x216>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a18      	ldr	r2, [pc, #96]	@ (8004fc0 <HAL_GPIO_Init+0x260>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <HAL_GPIO_Init+0x212>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a17      	ldr	r2, [pc, #92]	@ (8004fc4 <HAL_GPIO_Init+0x264>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d101      	bne.n	8004f6e <HAL_GPIO_Init+0x20e>
 8004f6a:	2309      	movs	r3, #9
 8004f6c:	e02d      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f6e:	230a      	movs	r3, #10
 8004f70:	e02b      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f72:	2308      	movs	r3, #8
 8004f74:	e029      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f76:	2307      	movs	r3, #7
 8004f78:	e027      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f7a:	2306      	movs	r3, #6
 8004f7c:	e025      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f7e:	2305      	movs	r3, #5
 8004f80:	e023      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f82:	2304      	movs	r3, #4
 8004f84:	e021      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f86:	2303      	movs	r3, #3
 8004f88:	e01f      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e01d      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e01b      	b.n	8004fca <HAL_GPIO_Init+0x26a>
 8004f92:	bf00      	nop
 8004f94:	58000080 	.word	0x58000080
 8004f98:	58024400 	.word	0x58024400
 8004f9c:	58000400 	.word	0x58000400
 8004fa0:	58020000 	.word	0x58020000
 8004fa4:	58020400 	.word	0x58020400
 8004fa8:	58020800 	.word	0x58020800
 8004fac:	58020c00 	.word	0x58020c00
 8004fb0:	58021000 	.word	0x58021000
 8004fb4:	58021400 	.word	0x58021400
 8004fb8:	58021800 	.word	0x58021800
 8004fbc:	58021c00 	.word	0x58021c00
 8004fc0:	58022000 	.word	0x58022000
 8004fc4:	58022400 	.word	0x58022400
 8004fc8:	2300      	movs	r3, #0
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	f002 0203 	and.w	r2, r2, #3
 8004fd0:	0092      	lsls	r2, r2, #2
 8004fd2:	4093      	lsls	r3, r2
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fda:	4938      	ldr	r1, [pc, #224]	@ (80050bc <HAL_GPIO_Init+0x35c>)
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	089b      	lsrs	r3, r3, #2
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800500e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	43db      	mvns	r3, r3
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	4013      	ands	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800503c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f ae63 	bne.w	8004d74 <HAL_GPIO_Init+0x14>
  }
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	3724      	adds	r7, #36	@ 0x24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	58000400 	.word	0x58000400

080050c0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80050c8:	4a08      	ldr	r2, [pc, #32]	@ (80050ec <HAL_HSEM_FastTake+0x2c>)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3320      	adds	r3, #32
 80050ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d2:	4a07      	ldr	r2, [pc, #28]	@ (80050f0 <HAL_HSEM_FastTake+0x30>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d101      	bne.n	80050dc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e000      	b.n	80050de <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	58026400 	.word	0x58026400
 80050f0:	80000300 	.word	0x80000300

080050f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80050fe:	4906      	ldr	r1, [pc, #24]	@ (8005118 <HAL_HSEM_Release+0x24>)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	58026400 	.word	0x58026400

0800511c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e08b      	b.n	8005246 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fb ff3e 	bl	8000fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2224      	movs	r2, #36	@ 0x24
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800516c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800517c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d107      	bne.n	8005196 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005192:	609a      	str	r2, [r3, #8]
 8005194:	e006      	b.n	80051a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80051a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d108      	bne.n	80051be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051ba:	605a      	str	r2, [r3, #4]
 80051bc:	e007      	b.n	80051ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005250 <HAL_I2C_Init+0x134>)
 80051da:	430b      	orrs	r3, r1
 80051dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69d9      	ldr	r1, [r3, #28]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1a      	ldr	r2, [r3, #32]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	02008000 	.word	0x02008000

08005254 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b20      	cmp	r3, #32
 8005268:	d138      	bne.n	80052dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005274:	2302      	movs	r3, #2
 8005276:	e032      	b.n	80052de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2224      	movs	r2, #36	@ 0x24
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6819      	ldr	r1, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d139      	bne.n	8005374 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800530a:	2302      	movs	r3, #2
 800530c:	e033      	b.n	8005376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2224      	movs	r2, #36	@ 0x24
 800531a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800533c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e000      	b.n	8005376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005374:	2302      	movs	r3, #2
  }
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800538c:	4b29      	ldr	r3, [pc, #164]	@ (8005434 <HAL_PWREx_ConfigSupply+0xb0>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	2b06      	cmp	r3, #6
 8005396:	d00a      	beq.n	80053ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005398:	4b26      	ldr	r3, [pc, #152]	@ (8005434 <HAL_PWREx_ConfigSupply+0xb0>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d001      	beq.n	80053aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e040      	b.n	800542c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e03e      	b.n	800542c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80053ae:	4b21      	ldr	r3, [pc, #132]	@ (8005434 <HAL_PWREx_ConfigSupply+0xb0>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80053b6:	491f      	ldr	r1, [pc, #124]	@ (8005434 <HAL_PWREx_ConfigSupply+0xb0>)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80053be:	f7fc fbb1 	bl	8001b24 <HAL_GetTick>
 80053c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053c4:	e009      	b.n	80053da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053c6:	f7fc fbad 	bl	8001b24 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053d4:	d901      	bls.n	80053da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e028      	b.n	800542c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053da:	4b16      	ldr	r3, [pc, #88]	@ (8005434 <HAL_PWREx_ConfigSupply+0xb0>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e6:	d1ee      	bne.n	80053c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b1e      	cmp	r3, #30
 80053ec:	d008      	beq.n	8005400 <HAL_PWREx_ConfigSupply+0x7c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80053f2:	d005      	beq.n	8005400 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b1d      	cmp	r3, #29
 80053f8:	d002      	beq.n	8005400 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80053fe:	d114      	bne.n	800542a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005400:	f7fc fb90 	bl	8001b24 <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005406:	e009      	b.n	800541c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005408:	f7fc fb8c 	bl	8001b24 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005416:	d901      	bls.n	800541c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e007      	b.n	800542c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800541c:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <HAL_PWREx_ConfigSupply+0xb0>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005428:	d1ee      	bne.n	8005408 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	58024800 	.word	0x58024800

08005438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08c      	sub	sp, #48	@ 0x30
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f000 bc48 	b.w	8005cdc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8088 	beq.w	800556a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800545a:	4b99      	ldr	r3, [pc, #612]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005464:	4b96      	ldr	r3, [pc, #600]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800546a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546c:	2b10      	cmp	r3, #16
 800546e:	d007      	beq.n	8005480 <HAL_RCC_OscConfig+0x48>
 8005470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005472:	2b18      	cmp	r3, #24
 8005474:	d111      	bne.n	800549a <HAL_RCC_OscConfig+0x62>
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	f003 0303 	and.w	r3, r3, #3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d10c      	bne.n	800549a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005480:	4b8f      	ldr	r3, [pc, #572]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d06d      	beq.n	8005568 <HAL_RCC_OscConfig+0x130>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d169      	bne.n	8005568 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f000 bc21 	b.w	8005cdc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a2:	d106      	bne.n	80054b2 <HAL_RCC_OscConfig+0x7a>
 80054a4:	4b86      	ldr	r3, [pc, #536]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a85      	ldr	r2, [pc, #532]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e02e      	b.n	8005510 <HAL_RCC_OscConfig+0xd8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x9c>
 80054ba:	4b81      	ldr	r3, [pc, #516]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a80      	ldr	r2, [pc, #512]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b7e      	ldr	r3, [pc, #504]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a7d      	ldr	r2, [pc, #500]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e01d      	b.n	8005510 <HAL_RCC_OscConfig+0xd8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0xc0>
 80054de:	4b78      	ldr	r3, [pc, #480]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a77      	ldr	r2, [pc, #476]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b75      	ldr	r3, [pc, #468]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a74      	ldr	r2, [pc, #464]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e00b      	b.n	8005510 <HAL_RCC_OscConfig+0xd8>
 80054f8:	4b71      	ldr	r3, [pc, #452]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a70      	ldr	r2, [pc, #448]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80054fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	4b6e      	ldr	r3, [pc, #440]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a6d      	ldr	r2, [pc, #436]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 800550a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800550e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d013      	beq.n	8005540 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7fc fb04 	bl	8001b24 <HAL_GetTick>
 800551c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005520:	f7fc fb00 	bl	8001b24 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	@ 0x64
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e3d4      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005532:	4b63      	ldr	r3, [pc, #396]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0xe8>
 800553e:	e014      	b.n	800556a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fc faf0 	bl	8001b24 <HAL_GetTick>
 8005544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005548:	f7fc faec 	bl	8001b24 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b64      	cmp	r3, #100	@ 0x64
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e3c0      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800555a:	4b59      	ldr	r3, [pc, #356]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x110>
 8005566:	e000      	b.n	800556a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80ca 	beq.w	800570c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005578:	4b51      	ldr	r3, [pc, #324]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005580:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005582:	4b4f      	ldr	r3, [pc, #316]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 8005584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005586:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <HAL_RCC_OscConfig+0x166>
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	2b18      	cmp	r3, #24
 8005592:	d156      	bne.n	8005642 <HAL_RCC_OscConfig+0x20a>
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d151      	bne.n	8005642 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800559e:	4b48      	ldr	r3, [pc, #288]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_RCC_OscConfig+0x17e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e392      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055b6:	4b42      	ldr	r3, [pc, #264]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f023 0219 	bic.w	r2, r3, #25
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	493f      	ldr	r1, [pc, #252]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c8:	f7fc faac 	bl	8001b24 <HAL_GetTick>
 80055cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055d0:	f7fc faa8 	bl	8001b24 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e37c      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055e2:	4b37      	ldr	r3, [pc, #220]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0f0      	beq.n	80055d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ee:	f7fc fac9 	bl	8001b84 <HAL_GetREVID>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d817      	bhi.n	800562c <HAL_RCC_OscConfig+0x1f4>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b40      	cmp	r3, #64	@ 0x40
 8005602:	d108      	bne.n	8005616 <HAL_RCC_OscConfig+0x1de>
 8005604:	4b2e      	ldr	r3, [pc, #184]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800560c:	4a2c      	ldr	r2, [pc, #176]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 800560e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005612:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005614:	e07a      	b.n	800570c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005616:	4b2a      	ldr	r3, [pc, #168]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	031b      	lsls	r3, r3, #12
 8005624:	4926      	ldr	r1, [pc, #152]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 8005626:	4313      	orrs	r3, r2
 8005628:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800562a:	e06f      	b.n	800570c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562c:	4b24      	ldr	r3, [pc, #144]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	061b      	lsls	r3, r3, #24
 800563a:	4921      	ldr	r1, [pc, #132]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 800563c:	4313      	orrs	r3, r2
 800563e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005640:	e064      	b.n	800570c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d047      	beq.n	80056da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800564a:	4b1d      	ldr	r3, [pc, #116]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 0219 	bic.w	r2, r3, #25
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	491a      	ldr	r1, [pc, #104]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 8005658:	4313      	orrs	r3, r2
 800565a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fc fa62 	bl	8001b24 <HAL_GetTick>
 8005660:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005664:	f7fc fa5e 	bl	8001b24 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e332      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005676:	4b12      	ldr	r3, [pc, #72]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005682:	f7fc fa7f 	bl	8001b84 <HAL_GetREVID>
 8005686:	4603      	mov	r3, r0
 8005688:	f241 0203 	movw	r2, #4099	@ 0x1003
 800568c:	4293      	cmp	r3, r2
 800568e:	d819      	bhi.n	80056c4 <HAL_RCC_OscConfig+0x28c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b40      	cmp	r3, #64	@ 0x40
 8005696:	d108      	bne.n	80056aa <HAL_RCC_OscConfig+0x272>
 8005698:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80056a0:	4a07      	ldr	r2, [pc, #28]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80056a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056a6:	6053      	str	r3, [r2, #4]
 80056a8:	e030      	b.n	800570c <HAL_RCC_OscConfig+0x2d4>
 80056aa:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	031b      	lsls	r3, r3, #12
 80056b8:	4901      	ldr	r1, [pc, #4]	@ (80056c0 <HAL_RCC_OscConfig+0x288>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	604b      	str	r3, [r1, #4]
 80056be:	e025      	b.n	800570c <HAL_RCC_OscConfig+0x2d4>
 80056c0:	58024400 	.word	0x58024400
 80056c4:	4b9a      	ldr	r3, [pc, #616]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	4997      	ldr	r1, [pc, #604]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]
 80056d8:	e018      	b.n	800570c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056da:	4b95      	ldr	r3, [pc, #596]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a94      	ldr	r2, [pc, #592]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e6:	f7fc fa1d 	bl	8001b24 <HAL_GetTick>
 80056ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ee:	f7fc fa19 	bl	8001b24 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e2ed      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005700:	4b8b      	ldr	r3, [pc, #556]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1f0      	bne.n	80056ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80a9 	beq.w	800586c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800571a:	4b85      	ldr	r3, [pc, #532]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005722:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005724:	4b82      	ldr	r3, [pc, #520]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b08      	cmp	r3, #8
 800572e:	d007      	beq.n	8005740 <HAL_RCC_OscConfig+0x308>
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b18      	cmp	r3, #24
 8005734:	d13a      	bne.n	80057ac <HAL_RCC_OscConfig+0x374>
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d135      	bne.n	80057ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005740:	4b7b      	ldr	r3, [pc, #492]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_RCC_OscConfig+0x320>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	2b80      	cmp	r3, #128	@ 0x80
 8005752:	d001      	beq.n	8005758 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e2c1      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005758:	f7fc fa14 	bl	8001b84 <HAL_GetREVID>
 800575c:	4603      	mov	r3, r0
 800575e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005762:	4293      	cmp	r3, r2
 8005764:	d817      	bhi.n	8005796 <HAL_RCC_OscConfig+0x35e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	2b20      	cmp	r3, #32
 800576c:	d108      	bne.n	8005780 <HAL_RCC_OscConfig+0x348>
 800576e:	4b70      	ldr	r3, [pc, #448]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005776:	4a6e      	ldr	r2, [pc, #440]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005778:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800577c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800577e:	e075      	b.n	800586c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005780:	4b6b      	ldr	r3, [pc, #428]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	069b      	lsls	r3, r3, #26
 800578e:	4968      	ldr	r1, [pc, #416]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005790:	4313      	orrs	r3, r2
 8005792:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005794:	e06a      	b.n	800586c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005796:	4b66      	ldr	r3, [pc, #408]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	061b      	lsls	r3, r3, #24
 80057a4:	4962      	ldr	r1, [pc, #392]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057aa:	e05f      	b.n	800586c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d042      	beq.n	800583a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80057b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80057ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c0:	f7fc f9b0 	bl	8001b24 <HAL_GetTick>
 80057c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80057c8:	f7fc f9ac 	bl	8001b24 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e280      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057da:	4b55      	ldr	r3, [pc, #340]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f0      	beq.n	80057c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057e6:	f7fc f9cd 	bl	8001b84 <HAL_GetREVID>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d817      	bhi.n	8005824 <HAL_RCC_OscConfig+0x3ec>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d108      	bne.n	800580e <HAL_RCC_OscConfig+0x3d6>
 80057fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005804:	4a4a      	ldr	r2, [pc, #296]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005806:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800580a:	6053      	str	r3, [r2, #4]
 800580c:	e02e      	b.n	800586c <HAL_RCC_OscConfig+0x434>
 800580e:	4b48      	ldr	r3, [pc, #288]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	069b      	lsls	r3, r3, #26
 800581c:	4944      	ldr	r1, [pc, #272]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 800581e:	4313      	orrs	r3, r2
 8005820:	604b      	str	r3, [r1, #4]
 8005822:	e023      	b.n	800586c <HAL_RCC_OscConfig+0x434>
 8005824:	4b42      	ldr	r3, [pc, #264]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	061b      	lsls	r3, r3, #24
 8005832:	493f      	ldr	r1, [pc, #252]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005834:	4313      	orrs	r3, r2
 8005836:	60cb      	str	r3, [r1, #12]
 8005838:	e018      	b.n	800586c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800583a:	4b3d      	ldr	r3, [pc, #244]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a3c      	ldr	r2, [pc, #240]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fc f96d 	bl	8001b24 <HAL_GetTick>
 800584a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800584e:	f7fc f969 	bl	8001b24 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e23d      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005860:	4b33      	ldr	r3, [pc, #204]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f0      	bne.n	800584e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d036      	beq.n	80058e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d019      	beq.n	80058b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005880:	4b2b      	ldr	r3, [pc, #172]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005884:	4a2a      	ldr	r2, [pc, #168]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588c:	f7fc f94a 	bl	8001b24 <HAL_GetTick>
 8005890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005894:	f7fc f946 	bl	8001b24 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e21a      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058a6:	4b22      	ldr	r3, [pc, #136]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80058a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0x45c>
 80058b2:	e018      	b.n	80058e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80058b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80058ba:	f023 0301 	bic.w	r3, r3, #1
 80058be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fc f930 	bl	8001b24 <HAL_GetTick>
 80058c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058c8:	f7fc f92c 	bl	8001b24 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e200      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058da:	4b15      	ldr	r3, [pc, #84]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80058dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d039      	beq.n	8005966 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01c      	beq.n	8005934 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005900:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005904:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005906:	f7fc f90d 	bl	8001b24 <HAL_GetTick>
 800590a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800590e:	f7fc f909 	bl	8001b24 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e1dd      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005920:	4b03      	ldr	r3, [pc, #12]	@ (8005930 <HAL_RCC_OscConfig+0x4f8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f0      	beq.n	800590e <HAL_RCC_OscConfig+0x4d6>
 800592c:	e01b      	b.n	8005966 <HAL_RCC_OscConfig+0x52e>
 800592e:	bf00      	nop
 8005930:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005934:	4b9b      	ldr	r3, [pc, #620]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a9a      	ldr	r2, [pc, #616]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 800593a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800593e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005940:	f7fc f8f0 	bl	8001b24 <HAL_GetTick>
 8005944:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005948:	f7fc f8ec 	bl	8001b24 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e1c0      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800595a:	4b92      	ldr	r3, [pc, #584]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8081 	beq.w	8005a76 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005974:	4b8c      	ldr	r3, [pc, #560]	@ (8005ba8 <HAL_RCC_OscConfig+0x770>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a8b      	ldr	r2, [pc, #556]	@ (8005ba8 <HAL_RCC_OscConfig+0x770>)
 800597a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800597e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005980:	f7fc f8d0 	bl	8001b24 <HAL_GetTick>
 8005984:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005988:	f7fc f8cc 	bl	8001b24 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	@ 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e1a0      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800599a:	4b83      	ldr	r3, [pc, #524]	@ (8005ba8 <HAL_RCC_OscConfig+0x770>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d106      	bne.n	80059bc <HAL_RCC_OscConfig+0x584>
 80059ae:	4b7d      	ldr	r3, [pc, #500]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ba:	e02d      	b.n	8005a18 <HAL_RCC_OscConfig+0x5e0>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10c      	bne.n	80059de <HAL_RCC_OscConfig+0x5a6>
 80059c4:	4b77      	ldr	r3, [pc, #476]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c8:	4a76      	ldr	r2, [pc, #472]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80059d0:	4b74      	ldr	r3, [pc, #464]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 80059d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d4:	4a73      	ldr	r2, [pc, #460]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 80059d6:	f023 0304 	bic.w	r3, r3, #4
 80059da:	6713      	str	r3, [r2, #112]	@ 0x70
 80059dc:	e01c      	b.n	8005a18 <HAL_RCC_OscConfig+0x5e0>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2b05      	cmp	r3, #5
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCC_OscConfig+0x5c8>
 80059e6:	4b6f      	ldr	r3, [pc, #444]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ea:	4a6e      	ldr	r2, [pc, #440]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 80059ec:	f043 0304 	orr.w	r3, r3, #4
 80059f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80059f2:	4b6c      	ldr	r3, [pc, #432]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f6:	4a6b      	ldr	r2, [pc, #428]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80059fe:	e00b      	b.n	8005a18 <HAL_RCC_OscConfig+0x5e0>
 8005a00:	4b68      	ldr	r3, [pc, #416]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a04:	4a67      	ldr	r2, [pc, #412]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a0c:	4b65      	ldr	r3, [pc, #404]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a10:	4a64      	ldr	r2, [pc, #400]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005a12:	f023 0304 	bic.w	r3, r3, #4
 8005a16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d015      	beq.n	8005a4c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a20:	f7fc f880 	bl	8001b24 <HAL_GetTick>
 8005a24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a26:	e00a      	b.n	8005a3e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a28:	f7fc f87c 	bl	8001b24 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e14e      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a3e:	4b59      	ldr	r3, [pc, #356]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0ee      	beq.n	8005a28 <HAL_RCC_OscConfig+0x5f0>
 8005a4a:	e014      	b.n	8005a76 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4c:	f7fc f86a 	bl	8001b24 <HAL_GetTick>
 8005a50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a54:	f7fc f866 	bl	8001b24 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e138      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1ee      	bne.n	8005a54 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 812d 	beq.w	8005cda <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a80:	4b48      	ldr	r3, [pc, #288]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a88:	2b18      	cmp	r3, #24
 8005a8a:	f000 80bd 	beq.w	8005c08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	f040 809e 	bne.w	8005bd4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a98:	4b42      	ldr	r3, [pc, #264]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a41      	ldr	r2, [pc, #260]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fc f83e 	bl	8001b24 <HAL_GetTick>
 8005aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fc f83a 	bl	8001b24 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e10e      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005abe:	4b39      	ldr	r3, [pc, #228]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aca:	4b36      	ldr	r3, [pc, #216]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005acc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ace:	4b37      	ldr	r3, [pc, #220]	@ (8005bac <HAL_RCC_OscConfig+0x774>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ada:	0112      	lsls	r2, r2, #4
 8005adc:	430a      	orrs	r2, r1
 8005ade:	4931      	ldr	r1, [pc, #196]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af2:	3b01      	subs	r3, #1
 8005af4:	025b      	lsls	r3, r3, #9
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afe:	3b01      	subs	r3, #1
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b14:	4923      	ldr	r1, [pc, #140]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005b1a:	4b22      	ldr	r3, [pc, #136]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1e:	4a21      	ldr	r2, [pc, #132]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b26:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b2a:	4b21      	ldr	r3, [pc, #132]	@ (8005bb0 <HAL_RCC_OscConfig+0x778>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b32:	00d2      	lsls	r2, r2, #3
 8005b34:	491b      	ldr	r1, [pc, #108]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3e:	f023 020c 	bic.w	r2, r3, #12
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	4917      	ldr	r1, [pc, #92]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b4c:	4b15      	ldr	r3, [pc, #84]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	f023 0202 	bic.w	r2, r3, #2
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b58:	4912      	ldr	r1, [pc, #72]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b5e:	4b11      	ldr	r3, [pc, #68]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b62:	4a10      	ldr	r2, [pc, #64]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005b82:	4b08      	ldr	r3, [pc, #32]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b86:	4a07      	ldr	r2, [pc, #28]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a04      	ldr	r2, [pc, #16]	@ (8005ba4 <HAL_RCC_OscConfig+0x76c>)
 8005b94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9a:	f7fb ffc3 	bl	8001b24 <HAL_GetTick>
 8005b9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ba0:	e011      	b.n	8005bc6 <HAL_RCC_OscConfig+0x78e>
 8005ba2:	bf00      	nop
 8005ba4:	58024400 	.word	0x58024400
 8005ba8:	58024800 	.word	0x58024800
 8005bac:	fffffc0c 	.word	0xfffffc0c
 8005bb0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fb ffb6 	bl	8001b24 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e08a      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bc6:	4b47      	ldr	r3, [pc, #284]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x77c>
 8005bd2:	e082      	b.n	8005cda <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd4:	4b43      	ldr	r3, [pc, #268]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a42      	ldr	r2, [pc, #264]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be0:	f7fb ffa0 	bl	8001b24 <HAL_GetTick>
 8005be4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be8:	f7fb ff9c 	bl	8001b24 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e070      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x7b0>
 8005c06:	e068      	b.n	8005cda <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c08:	4b36      	ldr	r3, [pc, #216]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c0e:	4b35      	ldr	r3, [pc, #212]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d031      	beq.n	8005c80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f003 0203 	and.w	r2, r3, #3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d12a      	bne.n	8005c80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	091b      	lsrs	r3, r3, #4
 8005c2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d122      	bne.n	8005c80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d11a      	bne.n	8005c80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	0a5b      	lsrs	r3, r3, #9
 8005c4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d111      	bne.n	8005c80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	0c1b      	lsrs	r3, r3, #16
 8005c60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d108      	bne.n	8005c80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	0e1b      	lsrs	r3, r3, #24
 8005c72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d001      	beq.n	8005c84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e02b      	b.n	8005cdc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005c84:	4b17      	ldr	r3, [pc, #92]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c88:	08db      	lsrs	r3, r3, #3
 8005c8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d01f      	beq.n	8005cda <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005c9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9e:	4a11      	ldr	r2, [pc, #68]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005ca0:	f023 0301 	bic.w	r3, r3, #1
 8005ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ca6:	f7fb ff3d 	bl	8001b24 <HAL_GetTick>
 8005caa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005cac:	bf00      	nop
 8005cae:	f7fb ff39 	bl	8001b24 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d0f9      	beq.n	8005cae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005cba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce8 <HAL_RCC_OscConfig+0x8b0>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005cc6:	00d2      	lsls	r2, r2, #3
 8005cc8:	4906      	ldr	r1, [pc, #24]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005cce:	4b05      	ldr	r3, [pc, #20]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	4a04      	ldr	r2, [pc, #16]	@ (8005ce4 <HAL_RCC_OscConfig+0x8ac>)
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3730      	adds	r7, #48	@ 0x30
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	58024400 	.word	0x58024400
 8005ce8:	ffff0007 	.word	0xffff0007

08005cec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e19c      	b.n	800603a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d00:	4b8a      	ldr	r3, [pc, #552]	@ (8005f2c <HAL_RCC_ClockConfig+0x240>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d910      	bls.n	8005d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0e:	4b87      	ldr	r3, [pc, #540]	@ (8005f2c <HAL_RCC_ClockConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f023 020f 	bic.w	r2, r3, #15
 8005d16:	4985      	ldr	r1, [pc, #532]	@ (8005f2c <HAL_RCC_ClockConfig+0x240>)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1e:	4b83      	ldr	r3, [pc, #524]	@ (8005f2c <HAL_RCC_ClockConfig+0x240>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d001      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e184      	b.n	800603a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d010      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	4b7b      	ldr	r3, [pc, #492]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d908      	bls.n	8005d5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d4c:	4b78      	ldr	r3, [pc, #480]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	4975      	ldr	r1, [pc, #468]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d010      	beq.n	8005d8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695a      	ldr	r2, [r3, #20]
 8005d6e:	4b70      	ldr	r3, [pc, #448]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d908      	bls.n	8005d8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	496a      	ldr	r1, [pc, #424]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d010      	beq.n	8005dba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699a      	ldr	r2, [r3, #24]
 8005d9c:	4b64      	ldr	r3, [pc, #400]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d908      	bls.n	8005dba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005da8:	4b61      	ldr	r3, [pc, #388]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	495e      	ldr	r1, [pc, #376]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d010      	beq.n	8005de8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69da      	ldr	r2, [r3, #28]
 8005dca:	4b59      	ldr	r3, [pc, #356]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d908      	bls.n	8005de8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005dd6:	4b56      	ldr	r3, [pc, #344]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	4953      	ldr	r1, [pc, #332]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d010      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	4b4d      	ldr	r3, [pc, #308]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d908      	bls.n	8005e16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e04:	4b4a      	ldr	r3, [pc, #296]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f023 020f 	bic.w	r2, r3, #15
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4947      	ldr	r1, [pc, #284]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d055      	beq.n	8005ece <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e22:	4b43      	ldr	r3, [pc, #268]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4940      	ldr	r1, [pc, #256]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d107      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d121      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0f6      	b.n	800603a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d107      	bne.n	8005e64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e54:	4b36      	ldr	r3, [pc, #216]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d115      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0ea      	b.n	800603a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d107      	bne.n	8005e7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e6c:	4b30      	ldr	r3, [pc, #192]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0de      	b.n	800603a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0d6      	b.n	800603a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e8c:	4b28      	ldr	r3, [pc, #160]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f023 0207 	bic.w	r2, r3, #7
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	4925      	ldr	r1, [pc, #148]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e9e:	f7fb fe41 	bl	8001b24 <HAL_GetTick>
 8005ea2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea4:	e00a      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea6:	f7fb fe3d 	bl	8001b24 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d901      	bls.n	8005ebc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e0be      	b.n	800603a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d1eb      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d010      	beq.n	8005efc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	4b14      	ldr	r3, [pc, #80]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d208      	bcs.n	8005efc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eea:	4b11      	ldr	r3, [pc, #68]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f023 020f 	bic.w	r2, r3, #15
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	490e      	ldr	r1, [pc, #56]	@ (8005f30 <HAL_RCC_ClockConfig+0x244>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005efc:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <HAL_RCC_ClockConfig+0x240>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d214      	bcs.n	8005f34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0a:	4b08      	ldr	r3, [pc, #32]	@ (8005f2c <HAL_RCC_ClockConfig+0x240>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f023 020f 	bic.w	r2, r3, #15
 8005f12:	4906      	ldr	r1, [pc, #24]	@ (8005f2c <HAL_RCC_ClockConfig+0x240>)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1a:	4b04      	ldr	r3, [pc, #16]	@ (8005f2c <HAL_RCC_ClockConfig+0x240>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e086      	b.n	800603a <HAL_RCC_ClockConfig+0x34e>
 8005f2c:	52002000 	.word	0x52002000
 8005f30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d010      	beq.n	8005f62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	4b3f      	ldr	r3, [pc, #252]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d208      	bcs.n	8005f62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f50:	4b3c      	ldr	r3, [pc, #240]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	4939      	ldr	r1, [pc, #228]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d010      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	4b34      	ldr	r3, [pc, #208]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d208      	bcs.n	8005f90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f7e:	4b31      	ldr	r3, [pc, #196]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	492e      	ldr	r1, [pc, #184]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d010      	beq.n	8005fbe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699a      	ldr	r2, [r3, #24]
 8005fa0:	4b28      	ldr	r3, [pc, #160]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d208      	bcs.n	8005fbe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005fac:	4b25      	ldr	r3, [pc, #148]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	4922      	ldr	r1, [pc, #136]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d010      	beq.n	8005fec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69da      	ldr	r2, [r3, #28]
 8005fce:	4b1d      	ldr	r3, [pc, #116]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d208      	bcs.n	8005fec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fda:	4b1a      	ldr	r3, [pc, #104]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	4917      	ldr	r1, [pc, #92]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005fec:	f000 f834 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	4b14      	ldr	r3, [pc, #80]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	0a1b      	lsrs	r3, r3, #8
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	4912      	ldr	r1, [pc, #72]	@ (8006048 <HAL_RCC_ClockConfig+0x35c>)
 8005ffe:	5ccb      	ldrb	r3, [r1, r3]
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
 8006008:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800600a:	4b0e      	ldr	r3, [pc, #56]	@ (8006044 <HAL_RCC_ClockConfig+0x358>)
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	4a0d      	ldr	r2, [pc, #52]	@ (8006048 <HAL_RCC_ClockConfig+0x35c>)
 8006014:	5cd3      	ldrb	r3, [r2, r3]
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
 8006020:	4a0a      	ldr	r2, [pc, #40]	@ (800604c <HAL_RCC_ClockConfig+0x360>)
 8006022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006024:	4a0a      	ldr	r2, [pc, #40]	@ (8006050 <HAL_RCC_ClockConfig+0x364>)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800602a:	4b0a      	ldr	r3, [pc, #40]	@ (8006054 <HAL_RCC_ClockConfig+0x368>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	f7fb fd2e 	bl	8001a90 <HAL_InitTick>
 8006034:	4603      	mov	r3, r0
 8006036:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	58024400 	.word	0x58024400
 8006048:	0800fc98 	.word	0x0800fc98
 800604c:	24000004 	.word	0x24000004
 8006050:	24000000 	.word	0x24000000
 8006054:	24000008 	.word	0x24000008

08006058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006058:	b480      	push	{r7}
 800605a:	b089      	sub	sp, #36	@ 0x24
 800605c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800605e:	4bb3      	ldr	r3, [pc, #716]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006066:	2b18      	cmp	r3, #24
 8006068:	f200 8155 	bhi.w	8006316 <HAL_RCC_GetSysClockFreq+0x2be>
 800606c:	a201      	add	r2, pc, #4	@ (adr r2, 8006074 <HAL_RCC_GetSysClockFreq+0x1c>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	080060d9 	.word	0x080060d9
 8006078:	08006317 	.word	0x08006317
 800607c:	08006317 	.word	0x08006317
 8006080:	08006317 	.word	0x08006317
 8006084:	08006317 	.word	0x08006317
 8006088:	08006317 	.word	0x08006317
 800608c:	08006317 	.word	0x08006317
 8006090:	08006317 	.word	0x08006317
 8006094:	080060ff 	.word	0x080060ff
 8006098:	08006317 	.word	0x08006317
 800609c:	08006317 	.word	0x08006317
 80060a0:	08006317 	.word	0x08006317
 80060a4:	08006317 	.word	0x08006317
 80060a8:	08006317 	.word	0x08006317
 80060ac:	08006317 	.word	0x08006317
 80060b0:	08006317 	.word	0x08006317
 80060b4:	08006105 	.word	0x08006105
 80060b8:	08006317 	.word	0x08006317
 80060bc:	08006317 	.word	0x08006317
 80060c0:	08006317 	.word	0x08006317
 80060c4:	08006317 	.word	0x08006317
 80060c8:	08006317 	.word	0x08006317
 80060cc:	08006317 	.word	0x08006317
 80060d0:	08006317 	.word	0x08006317
 80060d4:	0800610b 	.word	0x0800610b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060d8:	4b94      	ldr	r3, [pc, #592]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060e4:	4b91      	ldr	r3, [pc, #580]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	08db      	lsrs	r3, r3, #3
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	4a90      	ldr	r2, [pc, #576]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
 80060f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80060f6:	e111      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80060f8:	4b8d      	ldr	r3, [pc, #564]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060fa:	61bb      	str	r3, [r7, #24]
      break;
 80060fc:	e10e      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80060fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006100:	61bb      	str	r3, [r7, #24]
      break;
 8006102:	e10b      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006104:	4b8c      	ldr	r3, [pc, #560]	@ (8006338 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006106:	61bb      	str	r3, [r7, #24]
      break;
 8006108:	e108      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800610a:	4b88      	ldr	r3, [pc, #544]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800610c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006114:	4b85      	ldr	r3, [pc, #532]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800611e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006120:	4b82      	ldr	r3, [pc, #520]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800612a:	4b80      	ldr	r3, [pc, #512]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800612c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612e:	08db      	lsrs	r3, r3, #3
 8006130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	fb02 f303 	mul.w	r3, r2, r3
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80e1 	beq.w	8006310 <HAL_RCC_GetSysClockFreq+0x2b8>
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b02      	cmp	r3, #2
 8006152:	f000 8083 	beq.w	800625c <HAL_RCC_GetSysClockFreq+0x204>
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b02      	cmp	r3, #2
 800615a:	f200 80a1 	bhi.w	80062a0 <HAL_RCC_GetSysClockFreq+0x248>
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_RCC_GetSysClockFreq+0x114>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d056      	beq.n	8006218 <HAL_RCC_GetSysClockFreq+0x1c0>
 800616a:	e099      	b.n	80062a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800616c:	4b6f      	ldr	r3, [pc, #444]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	d02d      	beq.n	80061d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006178:	4b6c      	ldr	r3, [pc, #432]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	08db      	lsrs	r3, r3, #3
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	4a6b      	ldr	r2, [pc, #428]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006184:	fa22 f303 	lsr.w	r3, r2, r3
 8006188:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a2:	4b62      	ldr	r3, [pc, #392]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800633c <HAL_RCC_GetSysClockFreq+0x2e4>
 80061ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80061d2:	e087      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006340 <HAL_RCC_GetSysClockFreq+0x2e8>
 80061e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e6:	4b51      	ldr	r3, [pc, #324]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80061fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800633c <HAL_RCC_GetSysClockFreq+0x2e4>
 80061fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800620a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800620e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006216:	e065      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006222:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006344 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622a:	4b40      	ldr	r3, [pc, #256]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800622e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623a:	ed97 6a02 	vldr	s12, [r7, #8]
 800623e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800633c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800624e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800625a:	e043      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006266:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006348 <HAL_RCC_GetSysClockFreq+0x2f0>
 800626a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626e:	4b2f      	ldr	r3, [pc, #188]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006282:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800633c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800629e:	e021      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006344 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b2:	4b1e      	ldr	r3, [pc, #120]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800633c <HAL_RCC_GetSysClockFreq+0x2e4>
 80062ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80062e4:	4b11      	ldr	r3, [pc, #68]	@ (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	0a5b      	lsrs	r3, r3, #9
 80062ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ee:	3301      	adds	r3, #1
 80062f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006308:	ee17 3a90 	vmov	r3, s15
 800630c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800630e:	e005      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	61bb      	str	r3, [r7, #24]
      break;
 8006314:	e002      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006316:	4b07      	ldr	r3, [pc, #28]	@ (8006334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006318:	61bb      	str	r3, [r7, #24]
      break;
 800631a:	bf00      	nop
  }

  return sysclockfreq;
 800631c:	69bb      	ldr	r3, [r7, #24]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3724      	adds	r7, #36	@ 0x24
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	58024400 	.word	0x58024400
 8006330:	03d09000 	.word	0x03d09000
 8006334:	003d0900 	.word	0x003d0900
 8006338:	017d7840 	.word	0x017d7840
 800633c:	46000000 	.word	0x46000000
 8006340:	4c742400 	.word	0x4c742400
 8006344:	4a742400 	.word	0x4a742400
 8006348:	4bbebc20 	.word	0x4bbebc20

0800634c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006352:	f7ff fe81 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 8006356:	4602      	mov	r2, r0
 8006358:	4b10      	ldr	r3, [pc, #64]	@ (800639c <HAL_RCC_GetHCLKFreq+0x50>)
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	0a1b      	lsrs	r3, r3, #8
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	490f      	ldr	r1, [pc, #60]	@ (80063a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006364:	5ccb      	ldrb	r3, [r1, r3]
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	fa22 f303 	lsr.w	r3, r2, r3
 800636e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006370:	4b0a      	ldr	r3, [pc, #40]	@ (800639c <HAL_RCC_GetHCLKFreq+0x50>)
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	4a09      	ldr	r2, [pc, #36]	@ (80063a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800637a:	5cd3      	ldrb	r3, [r2, r3]
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	fa22 f303 	lsr.w	r3, r2, r3
 8006386:	4a07      	ldr	r2, [pc, #28]	@ (80063a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006388:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800638a:	4a07      	ldr	r2, [pc, #28]	@ (80063a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006390:	4b04      	ldr	r3, [pc, #16]	@ (80063a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006392:	681b      	ldr	r3, [r3, #0]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	58024400 	.word	0x58024400
 80063a0:	0800fc98 	.word	0x0800fc98
 80063a4:	24000004 	.word	0x24000004
 80063a8:	24000000 	.word	0x24000000

080063ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80063b0:	f7ff ffcc 	bl	800634c <HAL_RCC_GetHCLKFreq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	4b06      	ldr	r3, [pc, #24]	@ (80063d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	4904      	ldr	r1, [pc, #16]	@ (80063d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063c2:	5ccb      	ldrb	r3, [r1, r3]
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	58024400 	.word	0x58024400
 80063d4:	0800fc98 	.word	0x0800fc98

080063d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80063dc:	f7ff ffb6 	bl	800634c <HAL_RCC_GetHCLKFreq>
 80063e0:	4602      	mov	r2, r0
 80063e2:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	0a1b      	lsrs	r3, r3, #8
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	4904      	ldr	r1, [pc, #16]	@ (8006400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063ee:	5ccb      	ldrb	r3, [r1, r3]
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	58024400 	.word	0x58024400
 8006400:	0800fc98 	.word	0x0800fc98

08006404 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006408:	b0ca      	sub	sp, #296	@ 0x128
 800640a:	af00      	add	r7, sp, #0
 800640c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006410:	2300      	movs	r3, #0
 8006412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006416:	2300      	movs	r3, #0
 8006418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006428:	2500      	movs	r5, #0
 800642a:	ea54 0305 	orrs.w	r3, r4, r5
 800642e:	d049      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006436:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800643a:	d02f      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800643c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006440:	d828      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006442:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006446:	d01a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006448:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800644c:	d822      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006456:	d007      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006458:	e01c      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645a:	4bb8      	ldr	r3, [pc, #736]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800645c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645e:	4ab7      	ldr	r2, [pc, #732]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006466:	e01a      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646c:	3308      	adds	r3, #8
 800646e:	2102      	movs	r1, #2
 8006470:	4618      	mov	r0, r3
 8006472:	f002 fb61 	bl	8008b38 <RCCEx_PLL2_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800647c:	e00f      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006482:	3328      	adds	r3, #40	@ 0x28
 8006484:	2102      	movs	r1, #2
 8006486:	4618      	mov	r0, r3
 8006488:	f002 fc08 	bl	8008c9c <RCCEx_PLL3_Config>
 800648c:	4603      	mov	r3, r0
 800648e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006492:	e004      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800649a:	e000      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800649c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800649e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10a      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80064a6:	4ba5      	ldr	r3, [pc, #660]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80064ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064b4:	4aa1      	ldr	r2, [pc, #644]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064b6:	430b      	orrs	r3, r1
 80064b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80064ba:	e003      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80064d0:	f04f 0900 	mov.w	r9, #0
 80064d4:	ea58 0309 	orrs.w	r3, r8, r9
 80064d8:	d047      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d82a      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80064e4:	a201      	add	r2, pc, #4	@ (adr r2, 80064ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80064e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ea:	bf00      	nop
 80064ec:	08006501 	.word	0x08006501
 80064f0:	0800650f 	.word	0x0800650f
 80064f4:	08006525 	.word	0x08006525
 80064f8:	08006543 	.word	0x08006543
 80064fc:	08006543 	.word	0x08006543
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006500:	4b8e      	ldr	r3, [pc, #568]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006504:	4a8d      	ldr	r2, [pc, #564]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800650a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800650c:	e01a      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006512:	3308      	adds	r3, #8
 8006514:	2100      	movs	r1, #0
 8006516:	4618      	mov	r0, r3
 8006518:	f002 fb0e 	bl	8008b38 <RCCEx_PLL2_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006522:	e00f      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006528:	3328      	adds	r3, #40	@ 0x28
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f002 fbb5 	bl	8008c9c <RCCEx_PLL3_Config>
 8006532:	4603      	mov	r3, r0
 8006534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006538:	e004      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006540:	e000      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800654c:	4b7b      	ldr	r3, [pc, #492]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800654e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006550:	f023 0107 	bic.w	r1, r3, #7
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655a:	4a78      	ldr	r2, [pc, #480]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800655c:	430b      	orrs	r3, r1
 800655e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006560:	e003      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006576:	f04f 0b00 	mov.w	fp, #0
 800657a:	ea5a 030b 	orrs.w	r3, sl, fp
 800657e:	d04c      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800658a:	d030      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800658c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006590:	d829      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006592:	2bc0      	cmp	r3, #192	@ 0xc0
 8006594:	d02d      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006596:	2bc0      	cmp	r3, #192	@ 0xc0
 8006598:	d825      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800659a:	2b80      	cmp	r3, #128	@ 0x80
 800659c:	d018      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800659e:	2b80      	cmp	r3, #128	@ 0x80
 80065a0:	d821      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80065a6:	2b40      	cmp	r3, #64	@ 0x40
 80065a8:	d007      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80065aa:	e01c      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ac:	4b63      	ldr	r3, [pc, #396]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	4a62      	ldr	r2, [pc, #392]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80065b8:	e01c      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065be:	3308      	adds	r3, #8
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f002 fab8 	bl	8008b38 <RCCEx_PLL2_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80065ce:	e011      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d4:	3328      	adds	r3, #40	@ 0x28
 80065d6:	2100      	movs	r1, #0
 80065d8:	4618      	mov	r0, r3
 80065da:	f002 fb5f 	bl	8008c9c <RCCEx_PLL3_Config>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80065e4:	e006      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80065f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80065fc:	4b4f      	ldr	r3, [pc, #316]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006600:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800660a:	4a4c      	ldr	r2, [pc, #304]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800660c:	430b      	orrs	r3, r1
 800660e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006610:	e003      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006616:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006626:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800662a:	2300      	movs	r3, #0
 800662c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006630:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006634:	460b      	mov	r3, r1
 8006636:	4313      	orrs	r3, r2
 8006638:	d053      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006642:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006646:	d035      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006648:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800664c:	d82e      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800664e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006652:	d031      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006654:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006658:	d828      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800665a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800665e:	d01a      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006660:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006664:	d822      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800666a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800666e:	d007      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006670:	e01c      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006672:	4b32      	ldr	r3, [pc, #200]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	4a31      	ldr	r2, [pc, #196]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800667c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800667e:	e01c      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006684:	3308      	adds	r3, #8
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f002 fa55 	bl	8008b38 <RCCEx_PLL2_Config>
 800668e:	4603      	mov	r3, r0
 8006690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006694:	e011      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669a:	3328      	adds	r3, #40	@ 0x28
 800669c:	2100      	movs	r1, #0
 800669e:	4618      	mov	r0, r3
 80066a0:	f002 fafc 	bl	8008c9c <RCCEx_PLL3_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066aa:	e006      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066b2:	e002      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80066b4:	bf00      	nop
 80066b6:	e000      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80066b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10b      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80066c2:	4b1e      	ldr	r3, [pc, #120]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80066d2:	4a1a      	ldr	r2, [pc, #104]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066d4:	430b      	orrs	r3, r1
 80066d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80066d8:	e003      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80066ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80066f2:	2300      	movs	r3, #0
 80066f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80066f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80066fc:	460b      	mov	r3, r1
 80066fe:	4313      	orrs	r3, r2
 8006700:	d056      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800670a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800670e:	d038      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006710:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006714:	d831      	bhi.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006716:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800671a:	d034      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800671c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006720:	d82b      	bhi.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006722:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006726:	d01d      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006728:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800672c:	d825      	bhi.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d006      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006732:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006736:	d00a      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006738:	e01f      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800673a:	bf00      	nop
 800673c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006740:	4ba2      	ldr	r3, [pc, #648]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006744:	4aa1      	ldr	r2, [pc, #644]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800674a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800674c:	e01c      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800674e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006752:	3308      	adds	r3, #8
 8006754:	2100      	movs	r1, #0
 8006756:	4618      	mov	r0, r3
 8006758:	f002 f9ee 	bl	8008b38 <RCCEx_PLL2_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006762:	e011      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006768:	3328      	adds	r3, #40	@ 0x28
 800676a:	2100      	movs	r1, #0
 800676c:	4618      	mov	r0, r3
 800676e:	f002 fa95 	bl	8008c9c <RCCEx_PLL3_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006778:	e006      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006780:	e002      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006782:	bf00      	nop
 8006784:	e000      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10b      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006790:	4b8e      	ldr	r3, [pc, #568]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006794:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067a0:	4a8a      	ldr	r2, [pc, #552]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067a2:	430b      	orrs	r3, r1
 80067a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80067a6:	e003      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80067bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80067ca:	460b      	mov	r3, r1
 80067cc:	4313      	orrs	r3, r2
 80067ce:	d03a      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067d6:	2b30      	cmp	r3, #48	@ 0x30
 80067d8:	d01f      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80067da:	2b30      	cmp	r3, #48	@ 0x30
 80067dc:	d819      	bhi.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d00c      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d815      	bhi.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d019      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80067ea:	2b10      	cmp	r3, #16
 80067ec:	d111      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ee:	4b77      	ldr	r3, [pc, #476]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f2:	4a76      	ldr	r2, [pc, #472]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80067fa:	e011      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006800:	3308      	adds	r3, #8
 8006802:	2102      	movs	r1, #2
 8006804:	4618      	mov	r0, r3
 8006806:	f002 f997 	bl	8008b38 <RCCEx_PLL2_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006810:	e006      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006818:	e002      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800681a:	bf00      	nop
 800681c:	e000      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800681e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006828:	4b68      	ldr	r3, [pc, #416]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800682a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800682c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006836:	4a65      	ldr	r2, [pc, #404]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006838:	430b      	orrs	r3, r1
 800683a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800683c:	e003      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006852:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006856:	2300      	movs	r3, #0
 8006858:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800685c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006860:	460b      	mov	r3, r1
 8006862:	4313      	orrs	r3, r2
 8006864:	d051      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800686c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006870:	d035      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006872:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006876:	d82e      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006878:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800687c:	d031      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800687e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006882:	d828      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006888:	d01a      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800688a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800688e:	d822      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006898:	d007      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800689a:	e01c      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800689c:	4b4b      	ldr	r3, [pc, #300]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800689e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a0:	4a4a      	ldr	r2, [pc, #296]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068a8:	e01c      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ae:	3308      	adds	r3, #8
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f002 f940 	bl	8008b38 <RCCEx_PLL2_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068be:	e011      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c4:	3328      	adds	r3, #40	@ 0x28
 80068c6:	2100      	movs	r1, #0
 80068c8:	4618      	mov	r0, r3
 80068ca:	f002 f9e7 	bl	8008c9c <RCCEx_PLL3_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068d4:	e006      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068dc:	e002      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80068de:	bf00      	nop
 80068e0:	e000      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80068e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80068ec:	4b37      	ldr	r3, [pc, #220]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068fa:	4a34      	ldr	r2, [pc, #208]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068fc:	430b      	orrs	r3, r1
 80068fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8006900:	e003      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006916:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800691a:	2300      	movs	r3, #0
 800691c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006920:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006924:	460b      	mov	r3, r1
 8006926:	4313      	orrs	r3, r2
 8006928:	d056      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006934:	d033      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006936:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800693a:	d82c      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800693c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006940:	d02f      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006942:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006946:	d826      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006948:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800694c:	d02b      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800694e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006952:	d820      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006954:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006958:	d012      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800695a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800695e:	d81a      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006960:	2b00      	cmp	r3, #0
 8006962:	d022      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006968:	d115      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696e:	3308      	adds	r3, #8
 8006970:	2101      	movs	r1, #1
 8006972:	4618      	mov	r0, r3
 8006974:	f002 f8e0 	bl	8008b38 <RCCEx_PLL2_Config>
 8006978:	4603      	mov	r3, r0
 800697a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800697e:	e015      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006984:	3328      	adds	r3, #40	@ 0x28
 8006986:	2101      	movs	r1, #1
 8006988:	4618      	mov	r0, r3
 800698a:	f002 f987 	bl	8008c9c <RCCEx_PLL3_Config>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006994:	e00a      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800699c:	e006      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800699e:	bf00      	nop
 80069a0:	e004      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80069a2:	bf00      	nop
 80069a4:	e002      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80069aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10d      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069b4:	4b05      	ldr	r3, [pc, #20]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069c2:	4a02      	ldr	r2, [pc, #8]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80069c8:	e006      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80069ca:	bf00      	nop
 80069cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80069e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069e8:	2300      	movs	r3, #0
 80069ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4313      	orrs	r3, r2
 80069f6:	d055      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80069f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a04:	d033      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a0a:	d82c      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a10:	d02f      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a16:	d826      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a1c:	d02b      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006a1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a22:	d820      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a28:	d012      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a2e:	d81a      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d022      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006a34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a38:	d115      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3e:	3308      	adds	r3, #8
 8006a40:	2101      	movs	r1, #1
 8006a42:	4618      	mov	r0, r3
 8006a44:	f002 f878 	bl	8008b38 <RCCEx_PLL2_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a4e:	e015      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a54:	3328      	adds	r3, #40	@ 0x28
 8006a56:	2101      	movs	r1, #1
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f002 f91f 	bl	8008c9c <RCCEx_PLL3_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a64:	e00a      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a6c:	e006      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a6e:	bf00      	nop
 8006a70:	e004      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a72:	bf00      	nop
 8006a74:	e002      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a76:	bf00      	nop
 8006a78:	e000      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10b      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a84:	4ba3      	ldr	r3, [pc, #652]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a88:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a94:	4a9f      	ldr	r2, [pc, #636]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a96:	430b      	orrs	r3, r1
 8006a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a9a:	e003      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006aba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	d037      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ace:	d00e      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ad4:	d816      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d018      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006ada:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ade:	d111      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae0:	4b8c      	ldr	r3, [pc, #560]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	4a8b      	ldr	r2, [pc, #556]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006aec:	e00f      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af2:	3308      	adds	r3, #8
 8006af4:	2101      	movs	r1, #1
 8006af6:	4618      	mov	r0, r3
 8006af8:	f002 f81e 	bl	8008b38 <RCCEx_PLL2_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b02:	e004      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b0a:	e000      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b16:	4b7f      	ldr	r3, [pc, #508]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b24:	4a7b      	ldr	r2, [pc, #492]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b26:	430b      	orrs	r3, r1
 8006b28:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b2a:	e003      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b44:	2300      	movs	r3, #0
 8006b46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4313      	orrs	r3, r2
 8006b52:	d039      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d81c      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b64 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006ba1 	.word	0x08006ba1
 8006b68:	08006b75 	.word	0x08006b75
 8006b6c:	08006b83 	.word	0x08006b83
 8006b70:	08006ba1 	.word	0x08006ba1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b74:	4b67      	ldr	r3, [pc, #412]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b78:	4a66      	ldr	r2, [pc, #408]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b80:	e00f      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b86:	3308      	adds	r3, #8
 8006b88:	2102      	movs	r1, #2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f001 ffd4 	bl	8008b38 <RCCEx_PLL2_Config>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b96:	e004      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10a      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006baa:	4b5a      	ldr	r3, [pc, #360]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bae:	f023 0103 	bic.w	r1, r3, #3
 8006bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bb8:	4a56      	ldr	r2, [pc, #344]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bba:	430b      	orrs	r3, r1
 8006bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bbe:	e003      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006bde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006be2:	460b      	mov	r3, r1
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f000 809f 	beq.w	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bea:	4b4b      	ldr	r3, [pc, #300]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a4a      	ldr	r2, [pc, #296]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bf6:	f7fa ff95 	bl	8001b24 <HAL_GetTick>
 8006bfa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bfe:	e00b      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c00:	f7fa ff90 	bl	8001b24 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b64      	cmp	r3, #100	@ 0x64
 8006c0e:	d903      	bls.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c16:	e005      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c18:	4b3f      	ldr	r3, [pc, #252]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0ed      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d179      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c2c:	4b39      	ldr	r3, [pc, #228]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c38:	4053      	eors	r3, r2
 8006c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d015      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c42:	4b34      	ldr	r3, [pc, #208]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c4e:	4b31      	ldr	r3, [pc, #196]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c52:	4a30      	ldr	r2, [pc, #192]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c58:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c64:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c66:	4a2b      	ldr	r2, [pc, #172]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c6c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c7a:	d118      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7c:	f7fa ff52 	bl	8001b24 <HAL_GetTick>
 8006c80:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c84:	e00d      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c86:	f7fa ff4d 	bl	8001b24 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006c90:	1ad2      	subs	r2, r2, r3
 8006c92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d903      	bls.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006ca0:	e005      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0eb      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d129      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cc6:	d10e      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006cc8:	4b12      	ldr	r3, [pc, #72]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cd8:	091a      	lsrs	r2, r3, #4
 8006cda:	4b10      	ldr	r3, [pc, #64]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	4a0d      	ldr	r2, [pc, #52]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	6113      	str	r3, [r2, #16]
 8006ce4:	e005      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	4a0a      	ldr	r2, [pc, #40]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006cf0:	6113      	str	r3, [r2, #16]
 8006cf2:	4b08      	ldr	r3, [pc, #32]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cf4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d02:	4a04      	ldr	r2, [pc, #16]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d08:	e00e      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006d12:	e009      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006d14:	58024400 	.word	0x58024400
 8006d18:	58024800 	.word	0x58024800
 8006d1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	f002 0301 	and.w	r3, r2, #1
 8006d34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f000 8089 	beq.w	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d50:	2b28      	cmp	r3, #40	@ 0x28
 8006d52:	d86b      	bhi.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006d54:	a201      	add	r2, pc, #4	@ (adr r2, 8006d5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006e35 	.word	0x08006e35
 8006d60:	08006e2d 	.word	0x08006e2d
 8006d64:	08006e2d 	.word	0x08006e2d
 8006d68:	08006e2d 	.word	0x08006e2d
 8006d6c:	08006e2d 	.word	0x08006e2d
 8006d70:	08006e2d 	.word	0x08006e2d
 8006d74:	08006e2d 	.word	0x08006e2d
 8006d78:	08006e2d 	.word	0x08006e2d
 8006d7c:	08006e01 	.word	0x08006e01
 8006d80:	08006e2d 	.word	0x08006e2d
 8006d84:	08006e2d 	.word	0x08006e2d
 8006d88:	08006e2d 	.word	0x08006e2d
 8006d8c:	08006e2d 	.word	0x08006e2d
 8006d90:	08006e2d 	.word	0x08006e2d
 8006d94:	08006e2d 	.word	0x08006e2d
 8006d98:	08006e2d 	.word	0x08006e2d
 8006d9c:	08006e17 	.word	0x08006e17
 8006da0:	08006e2d 	.word	0x08006e2d
 8006da4:	08006e2d 	.word	0x08006e2d
 8006da8:	08006e2d 	.word	0x08006e2d
 8006dac:	08006e2d 	.word	0x08006e2d
 8006db0:	08006e2d 	.word	0x08006e2d
 8006db4:	08006e2d 	.word	0x08006e2d
 8006db8:	08006e2d 	.word	0x08006e2d
 8006dbc:	08006e35 	.word	0x08006e35
 8006dc0:	08006e2d 	.word	0x08006e2d
 8006dc4:	08006e2d 	.word	0x08006e2d
 8006dc8:	08006e2d 	.word	0x08006e2d
 8006dcc:	08006e2d 	.word	0x08006e2d
 8006dd0:	08006e2d 	.word	0x08006e2d
 8006dd4:	08006e2d 	.word	0x08006e2d
 8006dd8:	08006e2d 	.word	0x08006e2d
 8006ddc:	08006e35 	.word	0x08006e35
 8006de0:	08006e2d 	.word	0x08006e2d
 8006de4:	08006e2d 	.word	0x08006e2d
 8006de8:	08006e2d 	.word	0x08006e2d
 8006dec:	08006e2d 	.word	0x08006e2d
 8006df0:	08006e2d 	.word	0x08006e2d
 8006df4:	08006e2d 	.word	0x08006e2d
 8006df8:	08006e2d 	.word	0x08006e2d
 8006dfc:	08006e35 	.word	0x08006e35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e04:	3308      	adds	r3, #8
 8006e06:	2101      	movs	r1, #1
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f001 fe95 	bl	8008b38 <RCCEx_PLL2_Config>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e14:	e00f      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1a:	3328      	adds	r3, #40	@ 0x28
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f001 ff3c 	bl	8008c9c <RCCEx_PLL3_Config>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e2a:	e004      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e32:	e000      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e3e:	4bbf      	ldr	r3, [pc, #764]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e42:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e4c:	4abb      	ldr	r2, [pc, #748]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e52:	e003      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f002 0302 	and.w	r3, r2, #2
 8006e68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006e76:	460b      	mov	r3, r1
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	d041      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e82:	2b05      	cmp	r3, #5
 8006e84:	d824      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006e86:	a201      	add	r2, pc, #4	@ (adr r2, 8006e8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8c:	08006ed9 	.word	0x08006ed9
 8006e90:	08006ea5 	.word	0x08006ea5
 8006e94:	08006ebb 	.word	0x08006ebb
 8006e98:	08006ed9 	.word	0x08006ed9
 8006e9c:	08006ed9 	.word	0x08006ed9
 8006ea0:	08006ed9 	.word	0x08006ed9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	2101      	movs	r1, #1
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 fe43 	bl	8008b38 <RCCEx_PLL2_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006eb8:	e00f      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebe:	3328      	adds	r3, #40	@ 0x28
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 feea 	bl	8008c9c <RCCEx_PLL3_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ece:	e004      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ed6:	e000      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ee2:	4b96      	ldr	r3, [pc, #600]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee6:	f023 0107 	bic.w	r1, r3, #7
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ef0:	4a92      	ldr	r2, [pc, #584]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ef6:	e003      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006efc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f002 0304 	and.w	r3, r2, #4
 8006f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f10:	2300      	movs	r3, #0
 8006f12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	d044      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f28:	2b05      	cmp	r3, #5
 8006f2a:	d825      	bhi.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08006f81 	.word	0x08006f81
 8006f38:	08006f4d 	.word	0x08006f4d
 8006f3c:	08006f63 	.word	0x08006f63
 8006f40:	08006f81 	.word	0x08006f81
 8006f44:	08006f81 	.word	0x08006f81
 8006f48:	08006f81 	.word	0x08006f81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f50:	3308      	adds	r3, #8
 8006f52:	2101      	movs	r1, #1
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 fdef 	bl	8008b38 <RCCEx_PLL2_Config>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f60:	e00f      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f66:	3328      	adds	r3, #40	@ 0x28
 8006f68:	2101      	movs	r1, #1
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f001 fe96 	bl	8008c9c <RCCEx_PLL3_Config>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f76:	e004      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f7e:	e000      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10b      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f8a:	4b6c      	ldr	r3, [pc, #432]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f8e:	f023 0107 	bic.w	r1, r3, #7
 8006f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f9a:	4a68      	ldr	r2, [pc, #416]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fa0:	e003      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f002 0320 	and.w	r3, r2, #32
 8006fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	d055      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fd6:	d033      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fdc:	d82c      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe2:	d02f      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe8:	d826      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006fea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fee:	d02b      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006ff0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ff4:	d820      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ffa:	d012      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007000:	d81a      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d022      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800700a:	d115      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800700c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007010:	3308      	adds	r3, #8
 8007012:	2100      	movs	r1, #0
 8007014:	4618      	mov	r0, r3
 8007016:	f001 fd8f 	bl	8008b38 <RCCEx_PLL2_Config>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007020:	e015      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007026:	3328      	adds	r3, #40	@ 0x28
 8007028:	2102      	movs	r1, #2
 800702a:	4618      	mov	r0, r3
 800702c:	f001 fe36 	bl	8008c9c <RCCEx_PLL3_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007036:	e00a      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800703e:	e006      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007040:	bf00      	nop
 8007042:	e004      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007044:	bf00      	nop
 8007046:	e002      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800704c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800704e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10b      	bne.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007056:	4b39      	ldr	r3, [pc, #228]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800705a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800705e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007066:	4a35      	ldr	r2, [pc, #212]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007068:	430b      	orrs	r3, r1
 800706a:	6553      	str	r3, [r2, #84]	@ 0x54
 800706c:	e003      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007086:	2300      	movs	r3, #0
 8007088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800708c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007090:	460b      	mov	r3, r1
 8007092:	4313      	orrs	r3, r2
 8007094:	d058      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800709e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80070a2:	d033      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80070a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80070a8:	d82c      	bhi.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ae:	d02f      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80070b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070b4:	d826      	bhi.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070ba:	d02b      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80070bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070c0:	d820      	bhi.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070c6:	d012      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80070c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070cc:	d81a      	bhi.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d022      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80070d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070d6:	d115      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070dc:	3308      	adds	r3, #8
 80070de:	2100      	movs	r1, #0
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 fd29 	bl	8008b38 <RCCEx_PLL2_Config>
 80070e6:	4603      	mov	r3, r0
 80070e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80070ec:	e015      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f2:	3328      	adds	r3, #40	@ 0x28
 80070f4:	2102      	movs	r1, #2
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 fdd0 	bl	8008c9c <RCCEx_PLL3_Config>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007102:	e00a      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800710a:	e006      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800710c:	bf00      	nop
 800710e:	e004      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007110:	bf00      	nop
 8007112:	e002      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007114:	bf00      	nop
 8007116:	e000      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10e      	bne.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007122:	4b06      	ldr	r3, [pc, #24]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007126:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800712a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007132:	4a02      	ldr	r2, [pc, #8]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007134:	430b      	orrs	r3, r1
 8007136:	6593      	str	r3, [r2, #88]	@ 0x58
 8007138:	e006      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800713a:	bf00      	nop
 800713c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007144:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007158:	2300      	movs	r3, #0
 800715a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800715e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007162:	460b      	mov	r3, r1
 8007164:	4313      	orrs	r3, r2
 8007166:	d055      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007170:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007174:	d033      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007176:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800717a:	d82c      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800717c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007180:	d02f      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007186:	d826      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007188:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800718c:	d02b      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800718e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007192:	d820      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007194:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007198:	d012      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800719a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800719e:	d81a      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d022      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80071a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a8:	d115      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ae:	3308      	adds	r3, #8
 80071b0:	2100      	movs	r1, #0
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 fcc0 	bl	8008b38 <RCCEx_PLL2_Config>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80071be:	e015      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c4:	3328      	adds	r3, #40	@ 0x28
 80071c6:	2102      	movs	r1, #2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 fd67 	bl	8008c9c <RCCEx_PLL3_Config>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80071d4:	e00a      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071dc:	e006      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80071de:	bf00      	nop
 80071e0:	e004      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80071e2:	bf00      	nop
 80071e4:	e002      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80071e6:	bf00      	nop
 80071e8:	e000      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80071ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10b      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80071f4:	4ba1      	ldr	r3, [pc, #644]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007200:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007204:	4a9d      	ldr	r2, [pc, #628]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007206:	430b      	orrs	r3, r1
 8007208:	6593      	str	r3, [r2, #88]	@ 0x58
 800720a:	e003      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007210:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f002 0308 	and.w	r3, r2, #8
 8007220:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007224:	2300      	movs	r3, #0
 8007226:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800722a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800722e:	460b      	mov	r3, r1
 8007230:	4313      	orrs	r3, r2
 8007232:	d01e      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800723c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007240:	d10c      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007246:	3328      	adds	r3, #40	@ 0x28
 8007248:	2102      	movs	r1, #2
 800724a:	4618      	mov	r0, r3
 800724c:	f001 fd26 	bl	8008c9c <RCCEx_PLL3_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800725c:	4b87      	ldr	r3, [pc, #540]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800725e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007260:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800726c:	4a83      	ldr	r2, [pc, #524]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800726e:	430b      	orrs	r3, r1
 8007270:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	f002 0310 	and.w	r3, r2, #16
 800727e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007282:	2300      	movs	r3, #0
 8007284:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007288:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800728c:	460b      	mov	r3, r1
 800728e:	4313      	orrs	r3, r2
 8007290:	d01e      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007296:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800729a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800729e:	d10c      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a4:	3328      	adds	r3, #40	@ 0x28
 80072a6:	2102      	movs	r1, #2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 fcf7 	bl	8008c9c <RCCEx_PLL3_Config>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072ba:	4b70      	ldr	r3, [pc, #448]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072ca:	4a6c      	ldr	r2, [pc, #432]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072cc:	430b      	orrs	r3, r1
 80072ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80072dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072e0:	2300      	movs	r3, #0
 80072e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80072ea:	460b      	mov	r3, r1
 80072ec:	4313      	orrs	r3, r2
 80072ee:	d03e      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80072f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80072f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072fc:	d022      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80072fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007302:	d81b      	bhi.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800730c:	d00b      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800730e:	e015      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007314:	3308      	adds	r3, #8
 8007316:	2100      	movs	r1, #0
 8007318:	4618      	mov	r0, r3
 800731a:	f001 fc0d 	bl	8008b38 <RCCEx_PLL2_Config>
 800731e:	4603      	mov	r3, r0
 8007320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007324:	e00f      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732a:	3328      	adds	r3, #40	@ 0x28
 800732c:	2102      	movs	r1, #2
 800732e:	4618      	mov	r0, r3
 8007330:	f001 fcb4 	bl	8008c9c <RCCEx_PLL3_Config>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800733a:	e004      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007342:	e000      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10b      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800734e:	4b4b      	ldr	r3, [pc, #300]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007352:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800735e:	4a47      	ldr	r2, [pc, #284]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007360:	430b      	orrs	r3, r1
 8007362:	6593      	str	r3, [r2, #88]	@ 0x58
 8007364:	e003      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800736a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800737a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800737c:	2300      	movs	r3, #0
 800737e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007380:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007384:	460b      	mov	r3, r1
 8007386:	4313      	orrs	r3, r2
 8007388:	d03b      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800738a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800738e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007392:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007396:	d01f      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007398:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800739c:	d818      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800739e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073a2:	d003      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80073a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073a8:	d007      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80073aa:	e011      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ac:	4b33      	ldr	r3, [pc, #204]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b0:	4a32      	ldr	r2, [pc, #200]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80073b8:	e00f      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	3328      	adds	r3, #40	@ 0x28
 80073c0:	2101      	movs	r1, #1
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 fc6a 	bl	8008c9c <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80073ce:	e004      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073d6:	e000      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80073d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10b      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073e2:	4b26      	ldr	r3, [pc, #152]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f2:	4a22      	ldr	r2, [pc, #136]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073f4:	430b      	orrs	r3, r1
 80073f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80073f8:	e003      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800740e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007410:	2300      	movs	r3, #0
 8007412:	677b      	str	r3, [r7, #116]	@ 0x74
 8007414:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007418:	460b      	mov	r3, r1
 800741a:	4313      	orrs	r3, r2
 800741c:	d034      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800742c:	d007      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800742e:	e011      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007430:	4b12      	ldr	r3, [pc, #72]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007434:	4a11      	ldr	r2, [pc, #68]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800743a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800743c:	e00e      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007442:	3308      	adds	r3, #8
 8007444:	2102      	movs	r1, #2
 8007446:	4618      	mov	r0, r3
 8007448:	f001 fb76 	bl	8008b38 <RCCEx_PLL2_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007452:	e003      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800745a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800745c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10d      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007464:	4b05      	ldr	r3, [pc, #20]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007468:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800746c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007472:	4a02      	ldr	r2, [pc, #8]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007474:	430b      	orrs	r3, r1
 8007476:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007478:	e006      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800747a:	bf00      	nop
 800747c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007494:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007496:	2300      	movs	r3, #0
 8007498:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800749a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800749e:	460b      	mov	r3, r1
 80074a0:	4313      	orrs	r3, r2
 80074a2:	d00c      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80074a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a8:	3328      	adds	r3, #40	@ 0x28
 80074aa:	2102      	movs	r1, #2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 fbf5 	bl	8008c9c <RCCEx_PLL3_Config>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80074be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80074ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80074cc:	2300      	movs	r3, #0
 80074ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80074d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80074d4:	460b      	mov	r3, r1
 80074d6:	4313      	orrs	r3, r2
 80074d8:	d038      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80074da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074e6:	d018      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80074e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074ec:	d811      	bhi.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80074ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f2:	d014      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80074f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f8:	d80b      	bhi.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d011      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80074fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007502:	d106      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007504:	4bc3      	ldr	r3, [pc, #780]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007508:	4ac2      	ldr	r2, [pc, #776]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800750a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800750e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007510:	e008      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007518:	e004      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800751a:	bf00      	nop
 800751c:	e002      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800751e:	bf00      	nop
 8007520:	e000      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10b      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800752c:	4bb9      	ldr	r3, [pc, #740]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800752e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007530:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800753c:	4ab5      	ldr	r2, [pc, #724]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800753e:	430b      	orrs	r3, r1
 8007540:	6553      	str	r3, [r2, #84]	@ 0x54
 8007542:	e003      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800754c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007558:	65bb      	str	r3, [r7, #88]	@ 0x58
 800755a:	2300      	movs	r3, #0
 800755c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800755e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007562:	460b      	mov	r3, r1
 8007564:	4313      	orrs	r3, r2
 8007566:	d009      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007568:	4baa      	ldr	r3, [pc, #680]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800756a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800756c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007576:	4aa7      	ldr	r2, [pc, #668]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007578:	430b      	orrs	r3, r1
 800757a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800757c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007588:	653b      	str	r3, [r7, #80]	@ 0x50
 800758a:	2300      	movs	r3, #0
 800758c:	657b      	str	r3, [r7, #84]	@ 0x54
 800758e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007592:	460b      	mov	r3, r1
 8007594:	4313      	orrs	r3, r2
 8007596:	d00a      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007598:	4b9e      	ldr	r3, [pc, #632]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80075a8:	4a9a      	ldr	r2, [pc, #616]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075aa:	430b      	orrs	r3, r1
 80075ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80075ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075bc:	2300      	movs	r3, #0
 80075be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80075c4:	460b      	mov	r3, r1
 80075c6:	4313      	orrs	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075ca:	4b92      	ldr	r3, [pc, #584]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075d8:	4a8e      	ldr	r2, [pc, #568]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075da:	430b      	orrs	r3, r1
 80075dc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80075de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80075ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80075ec:	2300      	movs	r3, #0
 80075ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80075f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80075f4:	460b      	mov	r3, r1
 80075f6:	4313      	orrs	r3, r2
 80075f8:	d00e      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075fa:	4b86      	ldr	r3, [pc, #536]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	4a85      	ldr	r2, [pc, #532]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007600:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007604:	6113      	str	r3, [r2, #16]
 8007606:	4b83      	ldr	r3, [pc, #524]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007608:	6919      	ldr	r1, [r3, #16]
 800760a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007612:	4a80      	ldr	r2, [pc, #512]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007614:	430b      	orrs	r3, r1
 8007616:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007624:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007626:	2300      	movs	r3, #0
 8007628:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800762a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800762e:	460b      	mov	r3, r1
 8007630:	4313      	orrs	r3, r2
 8007632:	d009      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007634:	4b77      	ldr	r3, [pc, #476]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007638:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800763c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007642:	4a74      	ldr	r2, [pc, #464]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007644:	430b      	orrs	r3, r1
 8007646:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007650:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007654:	633b      	str	r3, [r7, #48]	@ 0x30
 8007656:	2300      	movs	r3, #0
 8007658:	637b      	str	r3, [r7, #52]	@ 0x34
 800765a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800765e:	460b      	mov	r3, r1
 8007660:	4313      	orrs	r3, r2
 8007662:	d00a      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007664:	4b6b      	ldr	r3, [pc, #428]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007668:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800766c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007674:	4a67      	ldr	r2, [pc, #412]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007676:	430b      	orrs	r3, r1
 8007678:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800767a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	2100      	movs	r1, #0
 8007684:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800768c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007690:	460b      	mov	r3, r1
 8007692:	4313      	orrs	r3, r2
 8007694:	d011      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769a:	3308      	adds	r3, #8
 800769c:	2100      	movs	r1, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	f001 fa4a 	bl	8008b38 <RCCEx_PLL2_Config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80076aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80076ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c2:	2100      	movs	r1, #0
 80076c4:	6239      	str	r1, [r7, #32]
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80076cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80076d0:	460b      	mov	r3, r1
 80076d2:	4313      	orrs	r3, r2
 80076d4:	d011      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076da:	3308      	adds	r3, #8
 80076dc:	2101      	movs	r1, #1
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 fa2a 	bl	8008b38 <RCCEx_PLL2_Config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80076ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80076fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	2100      	movs	r1, #0
 8007704:	61b9      	str	r1, [r7, #24]
 8007706:	f003 0304 	and.w	r3, r3, #4
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007710:	460b      	mov	r3, r1
 8007712:	4313      	orrs	r3, r2
 8007714:	d011      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	3308      	adds	r3, #8
 800771c:	2102      	movs	r1, #2
 800771e:	4618      	mov	r0, r3
 8007720:	f001 fa0a 	bl	8008b38 <RCCEx_PLL2_Config>
 8007724:	4603      	mov	r3, r0
 8007726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800772a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800773a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	2100      	movs	r1, #0
 8007744:	6139      	str	r1, [r7, #16]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007750:	460b      	mov	r3, r1
 8007752:	4313      	orrs	r3, r2
 8007754:	d011      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775a:	3328      	adds	r3, #40	@ 0x28
 800775c:	2100      	movs	r1, #0
 800775e:	4618      	mov	r0, r3
 8007760:	f001 fa9c 	bl	8008c9c <RCCEx_PLL3_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800776a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	2100      	movs	r1, #0
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	f003 0310 	and.w	r3, r3, #16
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007790:	460b      	mov	r3, r1
 8007792:	4313      	orrs	r3, r2
 8007794:	d011      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779a:	3328      	adds	r3, #40	@ 0x28
 800779c:	2101      	movs	r1, #1
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 fa7c 	bl	8008c9c <RCCEx_PLL3_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80077aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	2100      	movs	r1, #0
 80077c4:	6039      	str	r1, [r7, #0]
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80077d0:	460b      	mov	r3, r1
 80077d2:	4313      	orrs	r3, r2
 80077d4:	d011      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077da:	3328      	adds	r3, #40	@ 0x28
 80077dc:	2102      	movs	r1, #2
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 fa5c 	bl	8008c9c <RCCEx_PLL3_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80077ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80077fa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	e000      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
}
 8007808:	4618      	mov	r0, r3
 800780a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800780e:	46bd      	mov	sp, r7
 8007810:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007814:	58024400 	.word	0x58024400

08007818 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b090      	sub	sp, #64	@ 0x40
 800781c:	af00      	add	r7, sp, #0
 800781e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007826:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800782a:	430b      	orrs	r3, r1
 800782c:	f040 8094 	bne.w	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007830:	4b9e      	ldr	r3, [pc, #632]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	2b04      	cmp	r3, #4
 800783e:	f200 8087 	bhi.w	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007842:	a201      	add	r2, pc, #4	@ (adr r2, 8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	0800785d 	.word	0x0800785d
 800784c:	08007885 	.word	0x08007885
 8007850:	080078ad 	.word	0x080078ad
 8007854:	08007949 	.word	0x08007949
 8007858:	080078d5 	.word	0x080078d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800785c:	4b93      	ldr	r3, [pc, #588]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007868:	d108      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800786a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800786e:	4618      	mov	r0, r3
 8007870:	f001 f810 	bl	8008894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007878:	f000 bd45 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007880:	f000 bd41 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007884:	4b89      	ldr	r3, [pc, #548]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800788c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007890:	d108      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007892:	f107 0318 	add.w	r3, r7, #24
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fd54 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078a0:	f000 bd31 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a8:	f000 bd2d 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078ac:	4b7f      	ldr	r3, [pc, #508]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078b8:	d108      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ba:	f107 030c 	add.w	r3, r7, #12
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fe94 	bl	80085ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078c8:	f000 bd1d 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078d0:	f000 bd19 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078d4:	4b75      	ldr	r3, [pc, #468]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078de:	4b73      	ldr	r3, [pc, #460]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0304 	and.w	r3, r3, #4
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d10c      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80078ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d109      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078f0:	4b6e      	ldr	r3, [pc, #440]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	08db      	lsrs	r3, r3, #3
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	4a6d      	ldr	r2, [pc, #436]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007902:	e01f      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007904:	4b69      	ldr	r3, [pc, #420]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800790c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007910:	d106      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007918:	d102      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800791a:	4b66      	ldr	r3, [pc, #408]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800791c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800791e:	e011      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007920:	4b62      	ldr	r3, [pc, #392]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800792c:	d106      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800792e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007934:	d102      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007936:	4b60      	ldr	r3, [pc, #384]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800793a:	e003      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007940:	f000 bce1 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007944:	f000 bcdf 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007948:	4b5c      	ldr	r3, [pc, #368]	@ (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800794a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800794c:	f000 bcdb 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007954:	f000 bcd7 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800795c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007960:	430b      	orrs	r3, r1
 8007962:	f040 80ad 	bne.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007966:	4b51      	ldr	r3, [pc, #324]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800796a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800796e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007976:	d056      	beq.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800797e:	f200 8090 	bhi.w	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	2bc0      	cmp	r3, #192	@ 0xc0
 8007986:	f000 8088 	beq.w	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	2bc0      	cmp	r3, #192	@ 0xc0
 800798e:	f200 8088 	bhi.w	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	2b80      	cmp	r3, #128	@ 0x80
 8007996:	d032      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799a:	2b80      	cmp	r3, #128	@ 0x80
 800799c:	f200 8081 	bhi.w	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	2b40      	cmp	r3, #64	@ 0x40
 80079aa:	d014      	beq.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80079ac:	e079      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079ae:	4b3f      	ldr	r3, [pc, #252]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079ba:	d108      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 ff67 	bl	8008894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ca:	f000 bc9c 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079d2:	f000 bc98 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079d6:	4b35      	ldr	r3, [pc, #212]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079e2:	d108      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e4:	f107 0318 	add.w	r3, r7, #24
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fcab 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079f2:	f000 bc88 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079fa:	f000 bc84 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079fe:	4b2b      	ldr	r3, [pc, #172]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a0a:	d108      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fdeb 	bl	80085ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a1a:	f000 bc74 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a22:	f000 bc70 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a26:	4b21      	ldr	r3, [pc, #132]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a30:	4b1e      	ldr	r3, [pc, #120]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	d10c      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d109      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a42:	4b1a      	ldr	r3, [pc, #104]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	08db      	lsrs	r3, r3, #3
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	4a18      	ldr	r2, [pc, #96]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a54:	e01f      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a56:	4b15      	ldr	r3, [pc, #84]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a62:	d106      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a6a:	d102      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a6c:	4b11      	ldr	r3, [pc, #68]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a70:	e011      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a72:	4b0e      	ldr	r3, [pc, #56]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a7e:	d106      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a86:	d102      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a88:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a8c:	e003      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a92:	f000 bc38 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a96:	f000 bc36 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a9a:	4b08      	ldr	r3, [pc, #32]	@ (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a9e:	f000 bc32 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa6:	f000 bc2e 	b.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007aaa:	bf00      	nop
 8007aac:	58024400 	.word	0x58024400
 8007ab0:	03d09000 	.word	0x03d09000
 8007ab4:	003d0900 	.word	0x003d0900
 8007ab8:	017d7840 	.word	0x017d7840
 8007abc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	f040 809c 	bne.w	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007ace:	4b9e      	ldr	r3, [pc, #632]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007ad6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ada:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ade:	d054      	beq.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ae6:	f200 808b 	bhi.w	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007af0:	f000 8083 	beq.w	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007afa:	f200 8081 	bhi.w	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b04:	d02f      	beq.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b0c:	d878      	bhi.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d004      	beq.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b1a:	d012      	beq.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007b1c:	e070      	b.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b1e:	4b8a      	ldr	r3, [pc, #552]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b2a:	d107      	bne.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 feaf 	bl	8008894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b3a:	e3e4      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b40:	e3e1      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b42:	4b81      	ldr	r3, [pc, #516]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b4e:	d107      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b50:	f107 0318 	add.w	r3, r7, #24
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 fbf5 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b5e:	e3d2      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b64:	e3cf      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b66:	4b78      	ldr	r3, [pc, #480]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b72:	d107      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b74:	f107 030c 	add.w	r3, r7, #12
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fd37 	bl	80085ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b82:	e3c0      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b88:	e3bd      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b8a:	4b6f      	ldr	r3, [pc, #444]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b94:	4b6c      	ldr	r3, [pc, #432]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d10c      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ba6:	4b68      	ldr	r3, [pc, #416]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	08db      	lsrs	r3, r3, #3
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	4a66      	ldr	r2, [pc, #408]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bb8:	e01e      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bba:	4b63      	ldr	r3, [pc, #396]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bc6:	d106      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bce:	d102      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007bd0:	4b5f      	ldr	r3, [pc, #380]	@ (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bd4:	e010      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bd6:	4b5c      	ldr	r3, [pc, #368]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007be2:	d106      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bea:	d102      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007bec:	4b59      	ldr	r3, [pc, #356]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bf0:	e002      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007bf6:	e386      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007bf8:	e385      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007bfa:	4b57      	ldr	r3, [pc, #348]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bfe:	e382      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c04:	e37f      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c0a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	f040 80a7 	bne.w	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007c14:	4b4c      	ldr	r3, [pc, #304]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c18:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007c1c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c24:	d055      	beq.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c2c:	f200 8096 	bhi.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007c36:	f000 8084 	beq.w	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007c40:	f200 808c 	bhi.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c4a:	d030      	beq.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c52:	f200 8083 	bhi.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c62:	d012      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007c64:	e07a      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c66:	4b38      	ldr	r3, [pc, #224]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c72:	d107      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fe0b 	bl	8008894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c82:	e340      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c88:	e33d      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c96:	d107      	bne.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c98:	f107 0318 	add.w	r3, r7, #24
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fb51 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ca6:	e32e      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cac:	e32b      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cae:	4b26      	ldr	r3, [pc, #152]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cba:	d107      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cbc:	f107 030c 	add.w	r3, r7, #12
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fc93 	bl	80085ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cca:	e31c      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cd0:	e319      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007cda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d10c      	bne.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cee:	4b16      	ldr	r3, [pc, #88]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	08db      	lsrs	r3, r3, #3
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	4a14      	ldr	r2, [pc, #80]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d00:	e01e      	b.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d02:	4b11      	ldr	r3, [pc, #68]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0e:	d106      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d16:	d102      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d18:	4b0d      	ldr	r3, [pc, #52]	@ (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d1c:	e010      	b.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d2a:	d106      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d32:	d102      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d34:	4b07      	ldr	r3, [pc, #28]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d38:	e002      	b.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007d3e:	e2e2      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d40:	e2e1      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d42:	4b05      	ldr	r3, [pc, #20]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d46:	e2de      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d48:	58024400 	.word	0x58024400
 8007d4c:	03d09000 	.word	0x03d09000
 8007d50:	003d0900 	.word	0x003d0900
 8007d54:	017d7840 	.word	0x017d7840
 8007d58:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d60:	e2d1      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d66:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	f040 809c 	bne.w	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007d70:	4b93      	ldr	r3, [pc, #588]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d74:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007d78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d80:	d054      	beq.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d88:	f200 808b 	bhi.w	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d92:	f000 8083 	beq.w	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d9c:	f200 8081 	bhi.w	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da6:	d02f      	beq.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dae:	d878      	bhi.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dbc:	d012      	beq.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007dbe:	e070      	b.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dc0:	4b7f      	ldr	r3, [pc, #508]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dcc:	d107      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fd5e 	bl	8008894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ddc:	e293      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de2:	e290      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007de4:	4b76      	ldr	r3, [pc, #472]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007df0:	d107      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007df2:	f107 0318 	add.w	r3, r7, #24
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 faa4 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e00:	e281      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e06:	e27e      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e08:	4b6d      	ldr	r3, [pc, #436]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e14:	d107      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fbe6 	bl	80085ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e24:	e26f      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e2a:	e26c      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e2c:	4b64      	ldr	r3, [pc, #400]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e34:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e36:	4b62      	ldr	r3, [pc, #392]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d10c      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d109      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e48:	4b5d      	ldr	r3, [pc, #372]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	08db      	lsrs	r3, r3, #3
 8007e4e:	f003 0303 	and.w	r3, r3, #3
 8007e52:	4a5c      	ldr	r2, [pc, #368]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007e54:	fa22 f303 	lsr.w	r3, r2, r3
 8007e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e5a:	e01e      	b.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e5c:	4b58      	ldr	r3, [pc, #352]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e68:	d106      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e70:	d102      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e72:	4b55      	ldr	r3, [pc, #340]	@ (8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e76:	e010      	b.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e78:	4b51      	ldr	r3, [pc, #324]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e84:	d106      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e8c:	d102      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e92:	e002      	b.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e98:	e235      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e9a:	e234      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e9c:	4b4c      	ldr	r3, [pc, #304]	@ (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea0:	e231      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea6:	e22e      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eac:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	f040 808f 	bne.w	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007eb6:	4b42      	ldr	r3, [pc, #264]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eba:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ec6:	d06b      	beq.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ece:	d874      	bhi.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ed6:	d056      	beq.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ede:	d86c      	bhi.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ee6:	d03b      	beq.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007eee:	d864      	bhi.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ef6:	d021      	beq.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007efe:	d85c      	bhi.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f0c:	d004      	beq.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007f0e:	e054      	b.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007f10:	f7fe fa4c 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 8007f14:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f16:	e1f6      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f18:	4b29      	ldr	r3, [pc, #164]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f24:	d107      	bne.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f26:	f107 0318 	add.w	r3, r7, #24
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fa0a 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f34:	e1e7      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f3a:	e1e4      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f3c:	4b20      	ldr	r3, [pc, #128]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f48:	d107      	bne.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f4a:	f107 030c 	add.w	r3, r7, #12
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fb4c 	bl	80085ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f58:	e1d5      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f5e:	e1d2      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f60:	4b17      	ldr	r3, [pc, #92]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0304 	and.w	r3, r3, #4
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d109      	bne.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f6c:	4b14      	ldr	r3, [pc, #80]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	08db      	lsrs	r3, r3, #3
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	4a13      	ldr	r2, [pc, #76]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007f78:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f7e:	e1c2      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f84:	e1bf      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f86:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f92:	d102      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007f94:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f98:	e1b5      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9e:	e1b2      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007fa0:	4b07      	ldr	r3, [pc, #28]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fac:	d102      	bne.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007fae:	4b07      	ldr	r3, [pc, #28]	@ (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb2:	e1a8      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb8:	e1a5      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fbe:	e1a2      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fc0:	58024400 	.word	0x58024400
 8007fc4:	03d09000 	.word	0x03d09000
 8007fc8:	003d0900 	.word	0x003d0900
 8007fcc:	017d7840 	.word	0x017d7840
 8007fd0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fd8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	d173      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007fe0:	4b9c      	ldr	r3, [pc, #624]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007fe8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ff0:	d02f      	beq.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ff8:	d863      	bhi.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d004      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008006:	d012      	beq.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008008:	e05b      	b.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800800a:	4b92      	ldr	r3, [pc, #584]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008012:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008016:	d107      	bne.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008018:	f107 0318 	add.w	r3, r7, #24
 800801c:	4618      	mov	r0, r3
 800801e:	f000 f991 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008026:	e16e      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800802c:	e16b      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800802e:	4b89      	ldr	r3, [pc, #548]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800803a:	d107      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800803c:	f107 030c 	add.w	r3, r7, #12
 8008040:	4618      	mov	r0, r3
 8008042:	f000 fad3 	bl	80085ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800804a:	e15c      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008050:	e159      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008052:	4b80      	ldr	r3, [pc, #512]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008056:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800805a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800805c:	4b7d      	ldr	r3, [pc, #500]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0304 	and.w	r3, r3, #4
 8008064:	2b04      	cmp	r3, #4
 8008066:	d10c      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800806e:	4b79      	ldr	r3, [pc, #484]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	08db      	lsrs	r3, r3, #3
 8008074:	f003 0303 	and.w	r3, r3, #3
 8008078:	4a77      	ldr	r2, [pc, #476]	@ (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800807a:	fa22 f303 	lsr.w	r3, r2, r3
 800807e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008080:	e01e      	b.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008082:	4b74      	ldr	r3, [pc, #464]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800808a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800808e:	d106      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008096:	d102      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008098:	4b70      	ldr	r3, [pc, #448]	@ (800825c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800809a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800809c:	e010      	b.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800809e:	4b6d      	ldr	r3, [pc, #436]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080aa:	d106      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80080ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080b2:	d102      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80080b4:	4b6a      	ldr	r3, [pc, #424]	@ (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080b8:	e002      	b.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80080be:	e122      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080c0:	e121      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c6:	e11e      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80080c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080cc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80080d0:	430b      	orrs	r3, r1
 80080d2:	d133      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80080d4:	4b5f      	ldr	r3, [pc, #380]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80080de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80080e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080ea:	d012      	beq.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80080ec:	e023      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080ee:	4b59      	ldr	r3, [pc, #356]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080fa:	d107      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fbc7 	bl	8008894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800810a:	e0fc      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008110:	e0f9      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008112:	4b50      	ldr	r3, [pc, #320]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800811a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800811e:	d107      	bne.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008120:	f107 0318 	add.w	r3, r7, #24
 8008124:	4618      	mov	r0, r3
 8008126:	f000 f90d 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800812e:	e0ea      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008130:	2300      	movs	r3, #0
 8008132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008134:	e0e7      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800813a:	e0e4      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800813c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008140:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008144:	430b      	orrs	r3, r1
 8008146:	f040 808d 	bne.w	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800814a:	4b42      	ldr	r3, [pc, #264]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800814c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800814e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008152:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800815a:	d06b      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800815c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008162:	d874      	bhi.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800816a:	d056      	beq.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008172:	d86c      	bhi.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800817a:	d03b      	beq.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008182:	d864      	bhi.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800818a:	d021      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800818c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008192:	d85c      	bhi.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008196:	2b00      	cmp	r3, #0
 8008198:	d004      	beq.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800819a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081a0:	d004      	beq.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80081a2:	e054      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80081a4:	f000 f8b8 	bl	8008318 <HAL_RCCEx_GetD3PCLK1Freq>
 80081a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081aa:	e0ac      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081ac:	4b29      	ldr	r3, [pc, #164]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081b8:	d107      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ba:	f107 0318 	add.w	r3, r7, #24
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 f8c0 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081c8:	e09d      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ce:	e09a      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081d0:	4b20      	ldr	r3, [pc, #128]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081dc:	d107      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081de:	f107 030c 	add.w	r3, r7, #12
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fa02 	bl	80085ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ec:	e08b      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f2:	e088      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081f4:	4b17      	ldr	r3, [pc, #92]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d109      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008200:	4b14      	ldr	r3, [pc, #80]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	08db      	lsrs	r3, r3, #3
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	4a13      	ldr	r2, [pc, #76]	@ (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800820c:	fa22 f303 	lsr.w	r3, r2, r3
 8008210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008212:	e078      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008218:	e075      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800821a:	4b0e      	ldr	r3, [pc, #56]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008226:	d102      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008228:	4b0c      	ldr	r3, [pc, #48]	@ (800825c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800822a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800822c:	e06b      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008232:	e068      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008234:	4b07      	ldr	r3, [pc, #28]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800823c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008240:	d102      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008242:	4b07      	ldr	r3, [pc, #28]	@ (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008246:	e05e      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800824c:	e05b      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008252:	e058      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008254:	58024400 	.word	0x58024400
 8008258:	03d09000 	.word	0x03d09000
 800825c:	003d0900 	.word	0x003d0900
 8008260:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008268:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800826c:	430b      	orrs	r3, r1
 800826e:	d148      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008270:	4b27      	ldr	r3, [pc, #156]	@ (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008274:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008278:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800827a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008280:	d02a      	beq.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008288:	d838      	bhi.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800828a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828c:	2b00      	cmp	r3, #0
 800828e:	d004      	beq.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008292:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008296:	d00d      	beq.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008298:	e030      	b.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800829a:	4b1d      	ldr	r3, [pc, #116]	@ (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082a6:	d102      	bne.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80082a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80082aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ac:	e02b      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b2:	e028      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082b4:	4b16      	ldr	r3, [pc, #88]	@ (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082c0:	d107      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fae4 	bl	8008894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d0:	e019      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082d2:	2300      	movs	r3, #0
 80082d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d6:	e016      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082e4:	d107      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082e6:	f107 0318 	add.w	r3, r7, #24
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 f82a 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082f4:	e007      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082fa:	e004      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008300:	e001      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008308:	4618      	mov	r0, r3
 800830a:	3740      	adds	r7, #64	@ 0x40
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	58024400 	.word	0x58024400
 8008314:	017d7840 	.word	0x017d7840

08008318 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800831c:	f7fe f816 	bl	800634c <HAL_RCC_GetHCLKFreq>
 8008320:	4602      	mov	r2, r0
 8008322:	4b06      	ldr	r3, [pc, #24]	@ (800833c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	091b      	lsrs	r3, r3, #4
 8008328:	f003 0307 	and.w	r3, r3, #7
 800832c:	4904      	ldr	r1, [pc, #16]	@ (8008340 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800832e:	5ccb      	ldrb	r3, [r1, r3]
 8008330:	f003 031f 	and.w	r3, r3, #31
 8008334:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008338:	4618      	mov	r0, r3
 800833a:	bd80      	pop	{r7, pc}
 800833c:	58024400 	.word	0x58024400
 8008340:	0800fc98 	.word	0x0800fc98

08008344 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008344:	b480      	push	{r7}
 8008346:	b089      	sub	sp, #36	@ 0x24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800834c:	4ba1      	ldr	r3, [pc, #644]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800834e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008356:	4b9f      	ldr	r3, [pc, #636]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835a:	0b1b      	lsrs	r3, r3, #12
 800835c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008360:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008362:	4b9c      	ldr	r3, [pc, #624]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008366:	091b      	lsrs	r3, r3, #4
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800836e:	4b99      	ldr	r3, [pc, #612]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008372:	08db      	lsrs	r3, r3, #3
 8008374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	fb02 f303 	mul.w	r3, r2, r3
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008386:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 8111 	beq.w	80085b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	2b02      	cmp	r3, #2
 8008396:	f000 8083 	beq.w	80084a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	2b02      	cmp	r3, #2
 800839e:	f200 80a1 	bhi.w	80084e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d056      	beq.n	800845c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80083ae:	e099      	b.n	80084e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083b0:	4b88      	ldr	r3, [pc, #544]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d02d      	beq.n	8008418 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083bc:	4b85      	ldr	r3, [pc, #532]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	08db      	lsrs	r3, r3, #3
 80083c2:	f003 0303 	and.w	r3, r3, #3
 80083c6:	4a84      	ldr	r2, [pc, #528]	@ (80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80083c8:	fa22 f303 	lsr.w	r3, r2, r3
 80083cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	ee07 3a90 	vmov	s15, r3
 80083d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	ee07 3a90 	vmov	s15, r3
 80083de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e6:	4b7b      	ldr	r3, [pc, #492]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800840a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008412:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008416:	e087      	b.n	8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008422:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800842a:	4b6a      	ldr	r3, [pc, #424]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800842c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800843a:	ed97 6a03 	vldr	s12, [r7, #12]
 800843e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800844a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800844e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800845a:	e065      	b.n	8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	ee07 3a90 	vmov	s15, r3
 8008462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008466:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800846a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846e:	4b59      	ldr	r3, [pc, #356]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008482:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800848a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800849e:	e043      	b.n	8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	ee07 3a90 	vmov	s15, r3
 80084a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80085e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80084ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b2:	4b48      	ldr	r3, [pc, #288]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084e2:	e021      	b.n	8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80084f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f6:	4b37      	ldr	r3, [pc, #220]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008506:	ed97 6a03 	vldr	s12, [r7, #12]
 800850a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800850e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800851a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008526:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008528:	4b2a      	ldr	r3, [pc, #168]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800852a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852c:	0a5b      	lsrs	r3, r3, #9
 800852e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800853e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008542:	edd7 6a07 	vldr	s13, [r7, #28]
 8008546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800854a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800854e:	ee17 2a90 	vmov	r2, s15
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008556:	4b1f      	ldr	r3, [pc, #124]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855a:	0c1b      	lsrs	r3, r3, #16
 800855c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008560:	ee07 3a90 	vmov	s15, r3
 8008564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008568:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800856c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008570:	edd7 6a07 	vldr	s13, [r7, #28]
 8008574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800857c:	ee17 2a90 	vmov	r2, s15
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008584:	4b13      	ldr	r3, [pc, #76]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008588:	0e1b      	lsrs	r3, r3, #24
 800858a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008596:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800859a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800859e:	edd7 6a07 	vldr	s13, [r7, #28]
 80085a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085aa:	ee17 2a90 	vmov	r2, s15
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80085b2:	e008      	b.n	80085c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	609a      	str	r2, [r3, #8]
}
 80085c6:	bf00      	nop
 80085c8:	3724      	adds	r7, #36	@ 0x24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	58024400 	.word	0x58024400
 80085d8:	03d09000 	.word	0x03d09000
 80085dc:	46000000 	.word	0x46000000
 80085e0:	4c742400 	.word	0x4c742400
 80085e4:	4a742400 	.word	0x4a742400
 80085e8:	4bbebc20 	.word	0x4bbebc20

080085ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b089      	sub	sp, #36	@ 0x24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085f4:	4ba1      	ldr	r3, [pc, #644]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f8:	f003 0303 	and.w	r3, r3, #3
 80085fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80085fe:	4b9f      	ldr	r3, [pc, #636]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008602:	0d1b      	lsrs	r3, r3, #20
 8008604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008608:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800860a:	4b9c      	ldr	r3, [pc, #624]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800860c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860e:	0a1b      	lsrs	r3, r3, #8
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008616:	4b99      	ldr	r3, [pc, #612]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861a:	08db      	lsrs	r3, r3, #3
 800861c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	fb02 f303 	mul.w	r3, r2, r3
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8111 	beq.w	800885c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	2b02      	cmp	r3, #2
 800863e:	f000 8083 	beq.w	8008748 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b02      	cmp	r3, #2
 8008646:	f200 80a1 	bhi.w	800878c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d056      	beq.n	8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008656:	e099      	b.n	800878c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008658:	4b88      	ldr	r3, [pc, #544]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b00      	cmp	r3, #0
 8008662:	d02d      	beq.n	80086c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008664:	4b85      	ldr	r3, [pc, #532]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	08db      	lsrs	r3, r3, #3
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	4a84      	ldr	r2, [pc, #528]	@ (8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008670:	fa22 f303 	lsr.w	r3, r2, r3
 8008674:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	ee07 3a90 	vmov	s15, r3
 800867c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	ee07 3a90 	vmov	s15, r3
 8008686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868e:	4b7b      	ldr	r3, [pc, #492]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008696:	ee07 3a90 	vmov	s15, r3
 800869a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869e:	ed97 6a03 	vldr	s12, [r7, #12]
 80086a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086be:	e087      	b.n	80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	ee07 3a90 	vmov	s15, r3
 80086c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008888 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80086ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086d2:	4b6a      	ldr	r3, [pc, #424]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008702:	e065      	b.n	80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	ee07 3a90 	vmov	s15, r3
 800870a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800888c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008716:	4b59      	ldr	r3, [pc, #356]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008726:	ed97 6a03 	vldr	s12, [r7, #12]
 800872a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800872e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800873a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008746:	e043      	b.n	80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	ee07 3a90 	vmov	s15, r3
 800874e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008752:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008890 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875a:	4b48      	ldr	r3, [pc, #288]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800875c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876a:	ed97 6a03 	vldr	s12, [r7, #12]
 800876e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800877e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800878a:	e021      	b.n	80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008796:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800888c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800879a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879e:	4b37      	ldr	r3, [pc, #220]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80087d0:	4b2a      	ldr	r3, [pc, #168]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d4:	0a5b      	lsrs	r3, r3, #9
 80087d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80087ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087f6:	ee17 2a90 	vmov	r2, s15
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80087fe:	4b1f      	ldr	r3, [pc, #124]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008802:	0c1b      	lsrs	r3, r3, #16
 8008804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008808:	ee07 3a90 	vmov	s15, r3
 800880c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008810:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008818:	edd7 6a07 	vldr	s13, [r7, #28]
 800881c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008824:	ee17 2a90 	vmov	r2, s15
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800882c:	4b13      	ldr	r3, [pc, #76]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800882e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008830:	0e1b      	lsrs	r3, r3, #24
 8008832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008846:	edd7 6a07 	vldr	s13, [r7, #28]
 800884a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800884e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008852:	ee17 2a90 	vmov	r2, s15
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800885a:	e008      	b.n	800886e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	609a      	str	r2, [r3, #8]
}
 800886e:	bf00      	nop
 8008870:	3724      	adds	r7, #36	@ 0x24
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	58024400 	.word	0x58024400
 8008880:	03d09000 	.word	0x03d09000
 8008884:	46000000 	.word	0x46000000
 8008888:	4c742400 	.word	0x4c742400
 800888c:	4a742400 	.word	0x4a742400
 8008890:	4bbebc20 	.word	0x4bbebc20

08008894 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008894:	b480      	push	{r7}
 8008896:	b089      	sub	sp, #36	@ 0x24
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800889c:	4ba0      	ldr	r3, [pc, #640]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800889e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a0:	f003 0303 	and.w	r3, r3, #3
 80088a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80088a6:	4b9e      	ldr	r3, [pc, #632]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088aa:	091b      	lsrs	r3, r3, #4
 80088ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80088b2:	4b9b      	ldr	r3, [pc, #620]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80088bc:	4b98      	ldr	r3, [pc, #608]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c0:	08db      	lsrs	r3, r3, #3
 80088c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	fb02 f303 	mul.w	r3, r2, r3
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 8111 	beq.w	8008b02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	f000 8083 	beq.w	80089ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	f200 80a1 	bhi.w	8008a32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d056      	beq.n	80089aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80088fc:	e099      	b.n	8008a32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088fe:	4b88      	ldr	r3, [pc, #544]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b00      	cmp	r3, #0
 8008908:	d02d      	beq.n	8008966 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800890a:	4b85      	ldr	r3, [pc, #532]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	08db      	lsrs	r3, r3, #3
 8008910:	f003 0303 	and.w	r3, r3, #3
 8008914:	4a83      	ldr	r2, [pc, #524]	@ (8008b24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008916:	fa22 f303 	lsr.w	r3, r2, r3
 800891a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	ee07 3a90 	vmov	s15, r3
 800892c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008934:	4b7a      	ldr	r3, [pc, #488]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893c:	ee07 3a90 	vmov	s15, r3
 8008940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008944:	ed97 6a03 	vldr	s12, [r7, #12]
 8008948:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800894c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008954:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008960:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008964:	e087      	b.n	8008a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	ee07 3a90 	vmov	s15, r3
 800896c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008970:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008b2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008978:	4b69      	ldr	r3, [pc, #420]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800897a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008980:	ee07 3a90 	vmov	s15, r3
 8008984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008988:	ed97 6a03 	vldr	s12, [r7, #12]
 800898c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008998:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800899c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089a8:	e065      	b.n	8008a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	ee07 3a90 	vmov	s15, r3
 80089b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008b30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80089b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089bc:	4b58      	ldr	r3, [pc, #352]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c4:	ee07 3a90 	vmov	s15, r3
 80089c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80089d0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ec:	e043      	b.n	8008a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	ee07 3a90 	vmov	s15, r3
 80089f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80089fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a00:	4b47      	ldr	r3, [pc, #284]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a08:	ee07 3a90 	vmov	s15, r3
 8008a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a10:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a14:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a30:	e021      	b.n	8008a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	ee07 3a90 	vmov	s15, r3
 8008a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008b2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a44:	4b36      	ldr	r3, [pc, #216]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4c:	ee07 3a90 	vmov	s15, r3
 8008a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a54:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a58:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a74:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008a76:	4b2a      	ldr	r3, [pc, #168]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a7a:	0a5b      	lsrs	r3, r3, #9
 8008a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a80:	ee07 3a90 	vmov	s15, r3
 8008a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a9c:	ee17 2a90 	vmov	r2, s15
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa8:	0c1b      	lsrs	r3, r3, #16
 8008aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aae:	ee07 3a90 	vmov	s15, r3
 8008ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aca:	ee17 2a90 	vmov	r2, s15
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008ad2:	4b13      	ldr	r3, [pc, #76]	@ (8008b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad6:	0e1b      	lsrs	r3, r3, #24
 8008ad8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008adc:	ee07 3a90 	vmov	s15, r3
 8008ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8008af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af8:	ee17 2a90 	vmov	r2, s15
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008b00:	e008      	b.n	8008b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	609a      	str	r2, [r3, #8]
}
 8008b14:	bf00      	nop
 8008b16:	3724      	adds	r7, #36	@ 0x24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	58024400 	.word	0x58024400
 8008b24:	03d09000 	.word	0x03d09000
 8008b28:	46000000 	.word	0x46000000
 8008b2c:	4c742400 	.word	0x4c742400
 8008b30:	4a742400 	.word	0x4a742400
 8008b34:	4bbebc20 	.word	0x4bbebc20

08008b38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b46:	4b53      	ldr	r3, [pc, #332]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d101      	bne.n	8008b56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e099      	b.n	8008c8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b56:	4b4f      	ldr	r3, [pc, #316]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a4e      	ldr	r2, [pc, #312]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b62:	f7f8 ffdf 	bl	8001b24 <HAL_GetTick>
 8008b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b68:	e008      	b.n	8008b7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b6a:	f7f8 ffdb 	bl	8001b24 <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d901      	bls.n	8008b7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e086      	b.n	8008c8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b7c:	4b45      	ldr	r3, [pc, #276]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1f0      	bne.n	8008b6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b88:	4b42      	ldr	r3, [pc, #264]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	031b      	lsls	r3, r3, #12
 8008b96:	493f      	ldr	r1, [pc, #252]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	025b      	lsls	r3, r3, #9
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	041b      	lsls	r3, r3, #16
 8008bba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	061b      	lsls	r3, r3, #24
 8008bc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008bcc:	4931      	ldr	r1, [pc, #196]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008bd2:	4b30      	ldr	r3, [pc, #192]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	492d      	ldr	r1, [pc, #180]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008be4:	4b2b      	ldr	r3, [pc, #172]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be8:	f023 0220 	bic.w	r2, r3, #32
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	4928      	ldr	r1, [pc, #160]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008bf6:	4b27      	ldr	r3, [pc, #156]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfa:	4a26      	ldr	r2, [pc, #152]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008bfc:	f023 0310 	bic.w	r3, r3, #16
 8008c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c02:	4b24      	ldr	r3, [pc, #144]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c06:	4b24      	ldr	r3, [pc, #144]	@ (8008c98 <RCCEx_PLL2_Config+0x160>)
 8008c08:	4013      	ands	r3, r2
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	69d2      	ldr	r2, [r2, #28]
 8008c0e:	00d2      	lsls	r2, r2, #3
 8008c10:	4920      	ldr	r1, [pc, #128]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c16:	4b1f      	ldr	r3, [pc, #124]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c1c:	f043 0310 	orr.w	r3, r3, #16
 8008c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d106      	bne.n	8008c36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c28:	4b1a      	ldr	r3, [pc, #104]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2c:	4a19      	ldr	r2, [pc, #100]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c34:	e00f      	b.n	8008c56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d106      	bne.n	8008c4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c3c:	4b15      	ldr	r3, [pc, #84]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c40:	4a14      	ldr	r2, [pc, #80]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c48:	e005      	b.n	8008c56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c4a:	4b12      	ldr	r3, [pc, #72]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4e:	4a11      	ldr	r2, [pc, #68]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008c54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c56:	4b0f      	ldr	r3, [pc, #60]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c62:	f7f8 ff5f 	bl	8001b24 <HAL_GetTick>
 8008c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c68:	e008      	b.n	8008c7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c6a:	f7f8 ff5b 	bl	8001b24 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d901      	bls.n	8008c7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e006      	b.n	8008c8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c7c:	4b05      	ldr	r3, [pc, #20]	@ (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0f0      	beq.n	8008c6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	58024400 	.word	0x58024400
 8008c98:	ffff0007 	.word	0xffff0007

08008c9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008caa:	4b53      	ldr	r3, [pc, #332]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d101      	bne.n	8008cba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e099      	b.n	8008dee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008cba:	4b4f      	ldr	r3, [pc, #316]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a4e      	ldr	r2, [pc, #312]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008cc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cc6:	f7f8 ff2d 	bl	8001b24 <HAL_GetTick>
 8008cca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ccc:	e008      	b.n	8008ce0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cce:	f7f8 ff29 	bl	8001b24 <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d901      	bls.n	8008ce0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e086      	b.n	8008dee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ce0:	4b45      	ldr	r3, [pc, #276]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1f0      	bne.n	8008cce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008cec:	4b42      	ldr	r3, [pc, #264]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	051b      	lsls	r3, r3, #20
 8008cfa:	493f      	ldr	r1, [pc, #252]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	025b      	lsls	r3, r3, #9
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	431a      	orrs	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	041b      	lsls	r3, r3, #16
 8008d1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	061b      	lsls	r3, r3, #24
 8008d2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d30:	4931      	ldr	r1, [pc, #196]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d36:	4b30      	ldr	r3, [pc, #192]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	492d      	ldr	r1, [pc, #180]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d48:	4b2b      	ldr	r3, [pc, #172]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	4928      	ldr	r1, [pc, #160]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d5a:	4b27      	ldr	r3, [pc, #156]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5e:	4a26      	ldr	r2, [pc, #152]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d66:	4b24      	ldr	r3, [pc, #144]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d6a:	4b24      	ldr	r3, [pc, #144]	@ (8008dfc <RCCEx_PLL3_Config+0x160>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	69d2      	ldr	r2, [r2, #28]
 8008d72:	00d2      	lsls	r2, r2, #3
 8008d74:	4920      	ldr	r1, [pc, #128]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d106      	bne.n	8008d9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d90:	4a19      	ldr	r2, [pc, #100]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008d96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d98:	e00f      	b.n	8008dba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d106      	bne.n	8008dae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008da0:	4b15      	ldr	r3, [pc, #84]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	4a14      	ldr	r2, [pc, #80]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008da6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008daa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008dac:	e005      	b.n	8008dba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008dae:	4b12      	ldr	r3, [pc, #72]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db2:	4a11      	ldr	r2, [pc, #68]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008db4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008db8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008dba:	4b0f      	ldr	r3, [pc, #60]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dc6:	f7f8 fead 	bl	8001b24 <HAL_GetTick>
 8008dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008dcc:	e008      	b.n	8008de0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008dce:	f7f8 fea9 	bl	8001b24 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d901      	bls.n	8008de0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e006      	b.n	8008dee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008de0:	4b05      	ldr	r3, [pc, #20]	@ (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d0f0      	beq.n	8008dce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	58024400 	.word	0x58024400
 8008dfc:	ffff0007 	.word	0xffff0007

08008e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e049      	b.n	8008ea6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d106      	bne.n	8008e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7f8 fb96 	bl	8001558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f000 f836 	bl	8008eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a46      	ldr	r2, [pc, #280]	@ (8008fdc <TIM_Base_SetConfig+0x12c>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d013      	beq.n	8008ef0 <TIM_Base_SetConfig+0x40>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ece:	d00f      	beq.n	8008ef0 <TIM_Base_SetConfig+0x40>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a43      	ldr	r2, [pc, #268]	@ (8008fe0 <TIM_Base_SetConfig+0x130>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d00b      	beq.n	8008ef0 <TIM_Base_SetConfig+0x40>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a42      	ldr	r2, [pc, #264]	@ (8008fe4 <TIM_Base_SetConfig+0x134>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d007      	beq.n	8008ef0 <TIM_Base_SetConfig+0x40>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a41      	ldr	r2, [pc, #260]	@ (8008fe8 <TIM_Base_SetConfig+0x138>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d003      	beq.n	8008ef0 <TIM_Base_SetConfig+0x40>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a40      	ldr	r2, [pc, #256]	@ (8008fec <TIM_Base_SetConfig+0x13c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d108      	bne.n	8008f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a35      	ldr	r2, [pc, #212]	@ (8008fdc <TIM_Base_SetConfig+0x12c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d01f      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f10:	d01b      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a32      	ldr	r2, [pc, #200]	@ (8008fe0 <TIM_Base_SetConfig+0x130>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d017      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a31      	ldr	r2, [pc, #196]	@ (8008fe4 <TIM_Base_SetConfig+0x134>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d013      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a30      	ldr	r2, [pc, #192]	@ (8008fe8 <TIM_Base_SetConfig+0x138>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00f      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8008fec <TIM_Base_SetConfig+0x13c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00b      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a2e      	ldr	r2, [pc, #184]	@ (8008ff0 <TIM_Base_SetConfig+0x140>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d007      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8008ff4 <TIM_Base_SetConfig+0x144>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d003      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a2c      	ldr	r2, [pc, #176]	@ (8008ff8 <TIM_Base_SetConfig+0x148>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d108      	bne.n	8008f5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a16      	ldr	r2, [pc, #88]	@ (8008fdc <TIM_Base_SetConfig+0x12c>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00f      	beq.n	8008fa8 <TIM_Base_SetConfig+0xf8>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a18      	ldr	r2, [pc, #96]	@ (8008fec <TIM_Base_SetConfig+0x13c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00b      	beq.n	8008fa8 <TIM_Base_SetConfig+0xf8>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a17      	ldr	r2, [pc, #92]	@ (8008ff0 <TIM_Base_SetConfig+0x140>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d007      	beq.n	8008fa8 <TIM_Base_SetConfig+0xf8>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a16      	ldr	r2, [pc, #88]	@ (8008ff4 <TIM_Base_SetConfig+0x144>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d003      	beq.n	8008fa8 <TIM_Base_SetConfig+0xf8>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a15      	ldr	r2, [pc, #84]	@ (8008ff8 <TIM_Base_SetConfig+0x148>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d103      	bne.n	8008fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	691a      	ldr	r2, [r3, #16]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d105      	bne.n	8008fce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f023 0201 	bic.w	r2, r3, #1
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	611a      	str	r2, [r3, #16]
  }
}
 8008fce:	bf00      	nop
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	40010000 	.word	0x40010000
 8008fe0:	40000400 	.word	0x40000400
 8008fe4:	40000800 	.word	0x40000800
 8008fe8:	40000c00 	.word	0x40000c00
 8008fec:	40010400 	.word	0x40010400
 8008ff0:	40014000 	.word	0x40014000
 8008ff4:	40014400 	.word	0x40014400
 8008ff8:	40014800 	.word	0x40014800

08008ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800900c:	2b01      	cmp	r3, #1
 800900e:	d101      	bne.n	8009014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009010:	2302      	movs	r3, #2
 8009012:	e06d      	b.n	80090f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a30      	ldr	r2, [pc, #192]	@ (80090fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d004      	beq.n	8009048 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a2f      	ldr	r2, [pc, #188]	@ (8009100 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d108      	bne.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800904e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009060:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a20      	ldr	r2, [pc, #128]	@ (80090fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d022      	beq.n	80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009086:	d01d      	beq.n	80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a1d      	ldr	r2, [pc, #116]	@ (8009104 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d018      	beq.n	80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a1c      	ldr	r2, [pc, #112]	@ (8009108 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d013      	beq.n	80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a1a      	ldr	r2, [pc, #104]	@ (800910c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d00e      	beq.n	80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a15      	ldr	r2, [pc, #84]	@ (8009100 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d009      	beq.n	80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a16      	ldr	r2, [pc, #88]	@ (8009110 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d004      	beq.n	80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a15      	ldr	r2, [pc, #84]	@ (8009114 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d10c      	bne.n	80090de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	40010000 	.word	0x40010000
 8009100:	40010400 	.word	0x40010400
 8009104:	40000400 	.word	0x40000400
 8009108:	40000800 	.word	0x40000800
 800910c:	40000c00 	.word	0x40000c00
 8009110:	40001800 	.word	0x40001800
 8009114:	40014000 	.word	0x40014000

08009118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e042      	b.n	80091b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7f8 fb11 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2224      	movs	r2, #36	@ 0x24
 8009146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 0201 	bic.w	r2, r2, #1
 8009158:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fee6 	bl	8009f34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f97b 	bl	8009464 <UART_SetConfig>
 800916e:	4603      	mov	r3, r0
 8009170:	2b01      	cmp	r3, #1
 8009172:	d101      	bne.n	8009178 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e01b      	b.n	80091b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0201 	orr.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 ff65 	bl	800a078 <UART_CheckIdleState>
 80091ae:	4603      	mov	r3, r0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	@ 0x28
 80091bc:	af02      	add	r7, sp, #8
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	603b      	str	r3, [r7, #0]
 80091c4:	4613      	mov	r3, r2
 80091c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d17b      	bne.n	80092ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <HAL_UART_Transmit+0x26>
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e074      	b.n	80092cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2221      	movs	r2, #33	@ 0x21
 80091ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091f2:	f7f8 fc97 	bl	8001b24 <HAL_GetTick>
 80091f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	88fa      	ldrh	r2, [r7, #6]
 80091fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	88fa      	ldrh	r2, [r7, #6]
 8009204:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009210:	d108      	bne.n	8009224 <HAL_UART_Transmit+0x6c>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d104      	bne.n	8009224 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	61bb      	str	r3, [r7, #24]
 8009222:	e003      	b.n	800922c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009228:	2300      	movs	r3, #0
 800922a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800922c:	e030      	b.n	8009290 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2200      	movs	r2, #0
 8009236:	2180      	movs	r1, #128	@ 0x80
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 ffc7 	bl	800a1cc <UART_WaitOnFlagUntilTimeout>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2220      	movs	r2, #32
 8009248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e03d      	b.n	80092cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10b      	bne.n	800926e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009264:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	3302      	adds	r3, #2
 800926a:	61bb      	str	r3, [r7, #24]
 800926c:	e007      	b.n	800927e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	781a      	ldrb	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	3301      	adds	r3, #1
 800927c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009284:	b29b      	uxth	r3, r3
 8009286:	3b01      	subs	r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009296:	b29b      	uxth	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1c8      	bne.n	800922e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2200      	movs	r2, #0
 80092a4:	2140      	movs	r1, #64	@ 0x40
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 ff90 	bl	800a1cc <UART_WaitOnFlagUntilTimeout>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d005      	beq.n	80092be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2220      	movs	r2, #32
 80092b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e006      	b.n	80092cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e000      	b.n	80092cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80092ca:	2302      	movs	r3, #2
  }
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3720      	adds	r7, #32
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08a      	sub	sp, #40	@ 0x28
 80092d8:	af02      	add	r7, sp, #8
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	4613      	mov	r3, r2
 80092e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	f040 80b5 	bne.w	800945a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <HAL_UART_Receive+0x28>
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e0ad      	b.n	800945c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2222      	movs	r2, #34	@ 0x22
 800930c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009316:	f7f8 fc05 	bl	8001b24 <HAL_GetTick>
 800931a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	88fa      	ldrh	r2, [r7, #6]
 8009320:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009334:	d10e      	bne.n	8009354 <HAL_UART_Receive+0x80>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d105      	bne.n	800934a <HAL_UART_Receive+0x76>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009344:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009348:	e02d      	b.n	80093a6 <HAL_UART_Receive+0xd2>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	22ff      	movs	r2, #255	@ 0xff
 800934e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009352:	e028      	b.n	80093a6 <HAL_UART_Receive+0xd2>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10d      	bne.n	8009378 <HAL_UART_Receive+0xa4>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d104      	bne.n	800936e <HAL_UART_Receive+0x9a>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	22ff      	movs	r2, #255	@ 0xff
 8009368:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800936c:	e01b      	b.n	80093a6 <HAL_UART_Receive+0xd2>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	227f      	movs	r2, #127	@ 0x7f
 8009372:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009376:	e016      	b.n	80093a6 <HAL_UART_Receive+0xd2>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009380:	d10d      	bne.n	800939e <HAL_UART_Receive+0xca>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d104      	bne.n	8009394 <HAL_UART_Receive+0xc0>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	227f      	movs	r2, #127	@ 0x7f
 800938e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009392:	e008      	b.n	80093a6 <HAL_UART_Receive+0xd2>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	223f      	movs	r2, #63	@ 0x3f
 8009398:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800939c:	e003      	b.n	80093a6 <HAL_UART_Receive+0xd2>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80093ac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093b6:	d108      	bne.n	80093ca <HAL_UART_Receive+0xf6>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d104      	bne.n	80093ca <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80093c0:	2300      	movs	r3, #0
 80093c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	61bb      	str	r3, [r7, #24]
 80093c8:	e003      	b.n	80093d2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80093d2:	e036      	b.n	8009442 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2200      	movs	r2, #0
 80093dc:	2120      	movs	r1, #32
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 fef4 	bl	800a1cc <UART_WaitOnFlagUntilTimeout>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d005      	beq.n	80093f6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e032      	b.n	800945c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10c      	bne.n	8009416 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009402:	b29a      	uxth	r2, r3
 8009404:	8a7b      	ldrh	r3, [r7, #18]
 8009406:	4013      	ands	r3, r2
 8009408:	b29a      	uxth	r2, r3
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	3302      	adds	r3, #2
 8009412:	61bb      	str	r3, [r7, #24]
 8009414:	e00c      	b.n	8009430 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800941c:	b2da      	uxtb	r2, r3
 800941e:	8a7b      	ldrh	r3, [r7, #18]
 8009420:	b2db      	uxtb	r3, r3
 8009422:	4013      	ands	r3, r2
 8009424:	b2da      	uxtb	r2, r3
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	3301      	adds	r3, #1
 800942e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009436:	b29b      	uxth	r3, r3
 8009438:	3b01      	subs	r3, #1
 800943a:	b29a      	uxth	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009448:	b29b      	uxth	r3, r3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1c2      	bne.n	80093d4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2220      	movs	r2, #32
 8009452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	e000      	b.n	800945c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800945a:	2302      	movs	r3, #2
  }
}
 800945c:	4618      	mov	r0, r3
 800945e:	3720      	adds	r7, #32
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009468:	b092      	sub	sp, #72	@ 0x48
 800946a:	af00      	add	r7, sp, #0
 800946c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	689a      	ldr	r2, [r3, #8]
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	431a      	orrs	r2, r3
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	431a      	orrs	r2, r3
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	4313      	orrs	r3, r2
 800948a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	4bbe      	ldr	r3, [pc, #760]	@ (800978c <UART_SetConfig+0x328>)
 8009494:	4013      	ands	r3, r2
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	6812      	ldr	r2, [r2, #0]
 800949a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800949c:	430b      	orrs	r3, r1
 800949e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4ab3      	ldr	r2, [pc, #716]	@ (8009790 <UART_SetConfig+0x32c>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d004      	beq.n	80094d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094cc:	4313      	orrs	r3, r2
 80094ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689a      	ldr	r2, [r3, #8]
 80094d6:	4baf      	ldr	r3, [pc, #700]	@ (8009794 <UART_SetConfig+0x330>)
 80094d8:	4013      	ands	r3, r2
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	6812      	ldr	r2, [r2, #0]
 80094de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80094e0:	430b      	orrs	r3, r1
 80094e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ea:	f023 010f 	bic.w	r1, r3, #15
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4aa6      	ldr	r2, [pc, #664]	@ (8009798 <UART_SetConfig+0x334>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d177      	bne.n	80095f4 <UART_SetConfig+0x190>
 8009504:	4ba5      	ldr	r3, [pc, #660]	@ (800979c <UART_SetConfig+0x338>)
 8009506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009508:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800950c:	2b28      	cmp	r3, #40	@ 0x28
 800950e:	d86d      	bhi.n	80095ec <UART_SetConfig+0x188>
 8009510:	a201      	add	r2, pc, #4	@ (adr r2, 8009518 <UART_SetConfig+0xb4>)
 8009512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009516:	bf00      	nop
 8009518:	080095bd 	.word	0x080095bd
 800951c:	080095ed 	.word	0x080095ed
 8009520:	080095ed 	.word	0x080095ed
 8009524:	080095ed 	.word	0x080095ed
 8009528:	080095ed 	.word	0x080095ed
 800952c:	080095ed 	.word	0x080095ed
 8009530:	080095ed 	.word	0x080095ed
 8009534:	080095ed 	.word	0x080095ed
 8009538:	080095c5 	.word	0x080095c5
 800953c:	080095ed 	.word	0x080095ed
 8009540:	080095ed 	.word	0x080095ed
 8009544:	080095ed 	.word	0x080095ed
 8009548:	080095ed 	.word	0x080095ed
 800954c:	080095ed 	.word	0x080095ed
 8009550:	080095ed 	.word	0x080095ed
 8009554:	080095ed 	.word	0x080095ed
 8009558:	080095cd 	.word	0x080095cd
 800955c:	080095ed 	.word	0x080095ed
 8009560:	080095ed 	.word	0x080095ed
 8009564:	080095ed 	.word	0x080095ed
 8009568:	080095ed 	.word	0x080095ed
 800956c:	080095ed 	.word	0x080095ed
 8009570:	080095ed 	.word	0x080095ed
 8009574:	080095ed 	.word	0x080095ed
 8009578:	080095d5 	.word	0x080095d5
 800957c:	080095ed 	.word	0x080095ed
 8009580:	080095ed 	.word	0x080095ed
 8009584:	080095ed 	.word	0x080095ed
 8009588:	080095ed 	.word	0x080095ed
 800958c:	080095ed 	.word	0x080095ed
 8009590:	080095ed 	.word	0x080095ed
 8009594:	080095ed 	.word	0x080095ed
 8009598:	080095dd 	.word	0x080095dd
 800959c:	080095ed 	.word	0x080095ed
 80095a0:	080095ed 	.word	0x080095ed
 80095a4:	080095ed 	.word	0x080095ed
 80095a8:	080095ed 	.word	0x080095ed
 80095ac:	080095ed 	.word	0x080095ed
 80095b0:	080095ed 	.word	0x080095ed
 80095b4:	080095ed 	.word	0x080095ed
 80095b8:	080095e5 	.word	0x080095e5
 80095bc:	2301      	movs	r3, #1
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c2:	e222      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80095c4:	2304      	movs	r3, #4
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ca:	e21e      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80095cc:	2308      	movs	r3, #8
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d2:	e21a      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80095d4:	2310      	movs	r3, #16
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e216      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80095dc:	2320      	movs	r3, #32
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e212      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80095e4:	2340      	movs	r3, #64	@ 0x40
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e20e      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80095ec:	2380      	movs	r3, #128	@ 0x80
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e20a      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a69      	ldr	r2, [pc, #420]	@ (80097a0 <UART_SetConfig+0x33c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d130      	bne.n	8009660 <UART_SetConfig+0x1fc>
 80095fe:	4b67      	ldr	r3, [pc, #412]	@ (800979c <UART_SetConfig+0x338>)
 8009600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	2b05      	cmp	r3, #5
 8009608:	d826      	bhi.n	8009658 <UART_SetConfig+0x1f4>
 800960a:	a201      	add	r2, pc, #4	@ (adr r2, 8009610 <UART_SetConfig+0x1ac>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	08009629 	.word	0x08009629
 8009614:	08009631 	.word	0x08009631
 8009618:	08009639 	.word	0x08009639
 800961c:	08009641 	.word	0x08009641
 8009620:	08009649 	.word	0x08009649
 8009624:	08009651 	.word	0x08009651
 8009628:	2300      	movs	r3, #0
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962e:	e1ec      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009630:	2304      	movs	r3, #4
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e1e8      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009638:	2308      	movs	r3, #8
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963e:	e1e4      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009640:	2310      	movs	r3, #16
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009646:	e1e0      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009648:	2320      	movs	r3, #32
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964e:	e1dc      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009650:	2340      	movs	r3, #64	@ 0x40
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009656:	e1d8      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009658:	2380      	movs	r3, #128	@ 0x80
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965e:	e1d4      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a4f      	ldr	r2, [pc, #316]	@ (80097a4 <UART_SetConfig+0x340>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d130      	bne.n	80096cc <UART_SetConfig+0x268>
 800966a:	4b4c      	ldr	r3, [pc, #304]	@ (800979c <UART_SetConfig+0x338>)
 800966c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966e:	f003 0307 	and.w	r3, r3, #7
 8009672:	2b05      	cmp	r3, #5
 8009674:	d826      	bhi.n	80096c4 <UART_SetConfig+0x260>
 8009676:	a201      	add	r2, pc, #4	@ (adr r2, 800967c <UART_SetConfig+0x218>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	08009695 	.word	0x08009695
 8009680:	0800969d 	.word	0x0800969d
 8009684:	080096a5 	.word	0x080096a5
 8009688:	080096ad 	.word	0x080096ad
 800968c:	080096b5 	.word	0x080096b5
 8009690:	080096bd 	.word	0x080096bd
 8009694:	2300      	movs	r3, #0
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969a:	e1b6      	b.n	8009a0a <UART_SetConfig+0x5a6>
 800969c:	2304      	movs	r3, #4
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e1b2      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80096a4:	2308      	movs	r3, #8
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e1ae      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80096ac:	2310      	movs	r3, #16
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b2:	e1aa      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80096b4:	2320      	movs	r3, #32
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ba:	e1a6      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80096bc:	2340      	movs	r3, #64	@ 0x40
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e1a2      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80096c4:	2380      	movs	r3, #128	@ 0x80
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e19e      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a35      	ldr	r2, [pc, #212]	@ (80097a8 <UART_SetConfig+0x344>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d130      	bne.n	8009738 <UART_SetConfig+0x2d4>
 80096d6:	4b31      	ldr	r3, [pc, #196]	@ (800979c <UART_SetConfig+0x338>)
 80096d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096da:	f003 0307 	and.w	r3, r3, #7
 80096de:	2b05      	cmp	r3, #5
 80096e0:	d826      	bhi.n	8009730 <UART_SetConfig+0x2cc>
 80096e2:	a201      	add	r2, pc, #4	@ (adr r2, 80096e8 <UART_SetConfig+0x284>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	08009701 	.word	0x08009701
 80096ec:	08009709 	.word	0x08009709
 80096f0:	08009711 	.word	0x08009711
 80096f4:	08009719 	.word	0x08009719
 80096f8:	08009721 	.word	0x08009721
 80096fc:	08009729 	.word	0x08009729
 8009700:	2300      	movs	r3, #0
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009706:	e180      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009708:	2304      	movs	r3, #4
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970e:	e17c      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009710:	2308      	movs	r3, #8
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009716:	e178      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009718:	2310      	movs	r3, #16
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971e:	e174      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009720:	2320      	movs	r3, #32
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009726:	e170      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009728:	2340      	movs	r3, #64	@ 0x40
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e16c      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009730:	2380      	movs	r3, #128	@ 0x80
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e168      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a1b      	ldr	r2, [pc, #108]	@ (80097ac <UART_SetConfig+0x348>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d142      	bne.n	80097c8 <UART_SetConfig+0x364>
 8009742:	4b16      	ldr	r3, [pc, #88]	@ (800979c <UART_SetConfig+0x338>)
 8009744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009746:	f003 0307 	and.w	r3, r3, #7
 800974a:	2b05      	cmp	r3, #5
 800974c:	d838      	bhi.n	80097c0 <UART_SetConfig+0x35c>
 800974e:	a201      	add	r2, pc, #4	@ (adr r2, 8009754 <UART_SetConfig+0x2f0>)
 8009750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009754:	0800976d 	.word	0x0800976d
 8009758:	08009775 	.word	0x08009775
 800975c:	0800977d 	.word	0x0800977d
 8009760:	08009785 	.word	0x08009785
 8009764:	080097b1 	.word	0x080097b1
 8009768:	080097b9 	.word	0x080097b9
 800976c:	2300      	movs	r3, #0
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e14a      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009774:	2304      	movs	r3, #4
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977a:	e146      	b.n	8009a0a <UART_SetConfig+0x5a6>
 800977c:	2308      	movs	r3, #8
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e142      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009784:	2310      	movs	r3, #16
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e13e      	b.n	8009a0a <UART_SetConfig+0x5a6>
 800978c:	cfff69f3 	.word	0xcfff69f3
 8009790:	58000c00 	.word	0x58000c00
 8009794:	11fff4ff 	.word	0x11fff4ff
 8009798:	40011000 	.word	0x40011000
 800979c:	58024400 	.word	0x58024400
 80097a0:	40004400 	.word	0x40004400
 80097a4:	40004800 	.word	0x40004800
 80097a8:	40004c00 	.word	0x40004c00
 80097ac:	40005000 	.word	0x40005000
 80097b0:	2320      	movs	r3, #32
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b6:	e128      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80097b8:	2340      	movs	r3, #64	@ 0x40
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097be:	e124      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80097c0:	2380      	movs	r3, #128	@ 0x80
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c6:	e120      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4acb      	ldr	r2, [pc, #812]	@ (8009afc <UART_SetConfig+0x698>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d176      	bne.n	80098c0 <UART_SetConfig+0x45c>
 80097d2:	4bcb      	ldr	r3, [pc, #812]	@ (8009b00 <UART_SetConfig+0x69c>)
 80097d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097da:	2b28      	cmp	r3, #40	@ 0x28
 80097dc:	d86c      	bhi.n	80098b8 <UART_SetConfig+0x454>
 80097de:	a201      	add	r2, pc, #4	@ (adr r2, 80097e4 <UART_SetConfig+0x380>)
 80097e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e4:	08009889 	.word	0x08009889
 80097e8:	080098b9 	.word	0x080098b9
 80097ec:	080098b9 	.word	0x080098b9
 80097f0:	080098b9 	.word	0x080098b9
 80097f4:	080098b9 	.word	0x080098b9
 80097f8:	080098b9 	.word	0x080098b9
 80097fc:	080098b9 	.word	0x080098b9
 8009800:	080098b9 	.word	0x080098b9
 8009804:	08009891 	.word	0x08009891
 8009808:	080098b9 	.word	0x080098b9
 800980c:	080098b9 	.word	0x080098b9
 8009810:	080098b9 	.word	0x080098b9
 8009814:	080098b9 	.word	0x080098b9
 8009818:	080098b9 	.word	0x080098b9
 800981c:	080098b9 	.word	0x080098b9
 8009820:	080098b9 	.word	0x080098b9
 8009824:	08009899 	.word	0x08009899
 8009828:	080098b9 	.word	0x080098b9
 800982c:	080098b9 	.word	0x080098b9
 8009830:	080098b9 	.word	0x080098b9
 8009834:	080098b9 	.word	0x080098b9
 8009838:	080098b9 	.word	0x080098b9
 800983c:	080098b9 	.word	0x080098b9
 8009840:	080098b9 	.word	0x080098b9
 8009844:	080098a1 	.word	0x080098a1
 8009848:	080098b9 	.word	0x080098b9
 800984c:	080098b9 	.word	0x080098b9
 8009850:	080098b9 	.word	0x080098b9
 8009854:	080098b9 	.word	0x080098b9
 8009858:	080098b9 	.word	0x080098b9
 800985c:	080098b9 	.word	0x080098b9
 8009860:	080098b9 	.word	0x080098b9
 8009864:	080098a9 	.word	0x080098a9
 8009868:	080098b9 	.word	0x080098b9
 800986c:	080098b9 	.word	0x080098b9
 8009870:	080098b9 	.word	0x080098b9
 8009874:	080098b9 	.word	0x080098b9
 8009878:	080098b9 	.word	0x080098b9
 800987c:	080098b9 	.word	0x080098b9
 8009880:	080098b9 	.word	0x080098b9
 8009884:	080098b1 	.word	0x080098b1
 8009888:	2301      	movs	r3, #1
 800988a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988e:	e0bc      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009890:	2304      	movs	r3, #4
 8009892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009896:	e0b8      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009898:	2308      	movs	r3, #8
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989e:	e0b4      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80098a0:	2310      	movs	r3, #16
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a6:	e0b0      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80098a8:	2320      	movs	r3, #32
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ae:	e0ac      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80098b0:	2340      	movs	r3, #64	@ 0x40
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b6:	e0a8      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80098b8:	2380      	movs	r3, #128	@ 0x80
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098be:	e0a4      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a8f      	ldr	r2, [pc, #572]	@ (8009b04 <UART_SetConfig+0x6a0>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d130      	bne.n	800992c <UART_SetConfig+0x4c8>
 80098ca:	4b8d      	ldr	r3, [pc, #564]	@ (8009b00 <UART_SetConfig+0x69c>)
 80098cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ce:	f003 0307 	and.w	r3, r3, #7
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	d826      	bhi.n	8009924 <UART_SetConfig+0x4c0>
 80098d6:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <UART_SetConfig+0x478>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	080098f5 	.word	0x080098f5
 80098e0:	080098fd 	.word	0x080098fd
 80098e4:	08009905 	.word	0x08009905
 80098e8:	0800990d 	.word	0x0800990d
 80098ec:	08009915 	.word	0x08009915
 80098f0:	0800991d 	.word	0x0800991d
 80098f4:	2300      	movs	r3, #0
 80098f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fa:	e086      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80098fc:	2304      	movs	r3, #4
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009902:	e082      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009904:	2308      	movs	r3, #8
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990a:	e07e      	b.n	8009a0a <UART_SetConfig+0x5a6>
 800990c:	2310      	movs	r3, #16
 800990e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009912:	e07a      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009914:	2320      	movs	r3, #32
 8009916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991a:	e076      	b.n	8009a0a <UART_SetConfig+0x5a6>
 800991c:	2340      	movs	r3, #64	@ 0x40
 800991e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009922:	e072      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009924:	2380      	movs	r3, #128	@ 0x80
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992a:	e06e      	b.n	8009a0a <UART_SetConfig+0x5a6>
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a75      	ldr	r2, [pc, #468]	@ (8009b08 <UART_SetConfig+0x6a4>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d130      	bne.n	8009998 <UART_SetConfig+0x534>
 8009936:	4b72      	ldr	r3, [pc, #456]	@ (8009b00 <UART_SetConfig+0x69c>)
 8009938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	2b05      	cmp	r3, #5
 8009940:	d826      	bhi.n	8009990 <UART_SetConfig+0x52c>
 8009942:	a201      	add	r2, pc, #4	@ (adr r2, 8009948 <UART_SetConfig+0x4e4>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	08009961 	.word	0x08009961
 800994c:	08009969 	.word	0x08009969
 8009950:	08009971 	.word	0x08009971
 8009954:	08009979 	.word	0x08009979
 8009958:	08009981 	.word	0x08009981
 800995c:	08009989 	.word	0x08009989
 8009960:	2300      	movs	r3, #0
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009966:	e050      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009968:	2304      	movs	r3, #4
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996e:	e04c      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009970:	2308      	movs	r3, #8
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009976:	e048      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009978:	2310      	movs	r3, #16
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997e:	e044      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009980:	2320      	movs	r3, #32
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009986:	e040      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009988:	2340      	movs	r3, #64	@ 0x40
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998e:	e03c      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009990:	2380      	movs	r3, #128	@ 0x80
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009996:	e038      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a5b      	ldr	r2, [pc, #364]	@ (8009b0c <UART_SetConfig+0x6a8>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d130      	bne.n	8009a04 <UART_SetConfig+0x5a0>
 80099a2:	4b57      	ldr	r3, [pc, #348]	@ (8009b00 <UART_SetConfig+0x69c>)
 80099a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a6:	f003 0307 	and.w	r3, r3, #7
 80099aa:	2b05      	cmp	r3, #5
 80099ac:	d826      	bhi.n	80099fc <UART_SetConfig+0x598>
 80099ae:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <UART_SetConfig+0x550>)
 80099b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b4:	080099cd 	.word	0x080099cd
 80099b8:	080099d5 	.word	0x080099d5
 80099bc:	080099dd 	.word	0x080099dd
 80099c0:	080099e5 	.word	0x080099e5
 80099c4:	080099ed 	.word	0x080099ed
 80099c8:	080099f5 	.word	0x080099f5
 80099cc:	2302      	movs	r3, #2
 80099ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d2:	e01a      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80099d4:	2304      	movs	r3, #4
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099da:	e016      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80099dc:	2308      	movs	r3, #8
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e2:	e012      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80099e4:	2310      	movs	r3, #16
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ea:	e00e      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80099ec:	2320      	movs	r3, #32
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f2:	e00a      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80099f4:	2340      	movs	r3, #64	@ 0x40
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fa:	e006      	b.n	8009a0a <UART_SetConfig+0x5a6>
 80099fc:	2380      	movs	r3, #128	@ 0x80
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a02:	e002      	b.n	8009a0a <UART_SetConfig+0x5a6>
 8009a04:	2380      	movs	r3, #128	@ 0x80
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a3f      	ldr	r2, [pc, #252]	@ (8009b0c <UART_SetConfig+0x6a8>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	f040 80f8 	bne.w	8009c06 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a16:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	dc46      	bgt.n	8009aac <UART_SetConfig+0x648>
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	f2c0 8082 	blt.w	8009b28 <UART_SetConfig+0x6c4>
 8009a24:	3b02      	subs	r3, #2
 8009a26:	2b1e      	cmp	r3, #30
 8009a28:	d87e      	bhi.n	8009b28 <UART_SetConfig+0x6c4>
 8009a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a30 <UART_SetConfig+0x5cc>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009ab3 	.word	0x08009ab3
 8009a34:	08009b29 	.word	0x08009b29
 8009a38:	08009abb 	.word	0x08009abb
 8009a3c:	08009b29 	.word	0x08009b29
 8009a40:	08009b29 	.word	0x08009b29
 8009a44:	08009b29 	.word	0x08009b29
 8009a48:	08009acb 	.word	0x08009acb
 8009a4c:	08009b29 	.word	0x08009b29
 8009a50:	08009b29 	.word	0x08009b29
 8009a54:	08009b29 	.word	0x08009b29
 8009a58:	08009b29 	.word	0x08009b29
 8009a5c:	08009b29 	.word	0x08009b29
 8009a60:	08009b29 	.word	0x08009b29
 8009a64:	08009b29 	.word	0x08009b29
 8009a68:	08009adb 	.word	0x08009adb
 8009a6c:	08009b29 	.word	0x08009b29
 8009a70:	08009b29 	.word	0x08009b29
 8009a74:	08009b29 	.word	0x08009b29
 8009a78:	08009b29 	.word	0x08009b29
 8009a7c:	08009b29 	.word	0x08009b29
 8009a80:	08009b29 	.word	0x08009b29
 8009a84:	08009b29 	.word	0x08009b29
 8009a88:	08009b29 	.word	0x08009b29
 8009a8c:	08009b29 	.word	0x08009b29
 8009a90:	08009b29 	.word	0x08009b29
 8009a94:	08009b29 	.word	0x08009b29
 8009a98:	08009b29 	.word	0x08009b29
 8009a9c:	08009b29 	.word	0x08009b29
 8009aa0:	08009b29 	.word	0x08009b29
 8009aa4:	08009b29 	.word	0x08009b29
 8009aa8:	08009b1b 	.word	0x08009b1b
 8009aac:	2b40      	cmp	r3, #64	@ 0x40
 8009aae:	d037      	beq.n	8009b20 <UART_SetConfig+0x6bc>
 8009ab0:	e03a      	b.n	8009b28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ab2:	f7fe fc31 	bl	8008318 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ab6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ab8:	e03c      	b.n	8009b34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fe fc40 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac8:	e034      	b.n	8009b34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aca:	f107 0318 	add.w	r3, r7, #24
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fe fd8c 	bl	80085ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad8:	e02c      	b.n	8009b34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ada:	4b09      	ldr	r3, [pc, #36]	@ (8009b00 <UART_SetConfig+0x69c>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0320 	and.w	r3, r3, #32
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d016      	beq.n	8009b14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ae6:	4b06      	ldr	r3, [pc, #24]	@ (8009b00 <UART_SetConfig+0x69c>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	08db      	lsrs	r3, r3, #3
 8009aec:	f003 0303 	and.w	r3, r3, #3
 8009af0:	4a07      	ldr	r2, [pc, #28]	@ (8009b10 <UART_SetConfig+0x6ac>)
 8009af2:	fa22 f303 	lsr.w	r3, r2, r3
 8009af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009af8:	e01c      	b.n	8009b34 <UART_SetConfig+0x6d0>
 8009afa:	bf00      	nop
 8009afc:	40011400 	.word	0x40011400
 8009b00:	58024400 	.word	0x58024400
 8009b04:	40007800 	.word	0x40007800
 8009b08:	40007c00 	.word	0x40007c00
 8009b0c:	58000c00 	.word	0x58000c00
 8009b10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009b14:	4b9d      	ldr	r3, [pc, #628]	@ (8009d8c <UART_SetConfig+0x928>)
 8009b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b18:	e00c      	b.n	8009b34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b1a:	4b9d      	ldr	r3, [pc, #628]	@ (8009d90 <UART_SetConfig+0x92c>)
 8009b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b1e:	e009      	b.n	8009b34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b26:	e005      	b.n	8009b34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f000 81de 	beq.w	8009ef8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b40:	4a94      	ldr	r2, [pc, #592]	@ (8009d94 <UART_SetConfig+0x930>)
 8009b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b46:	461a      	mov	r2, r3
 8009b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b4e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	4613      	mov	r3, r2
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	4413      	add	r3, r2
 8009b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d305      	bcc.n	8009b6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d903      	bls.n	8009b74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b72:	e1c1      	b.n	8009ef8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b76:	2200      	movs	r2, #0
 8009b78:	60bb      	str	r3, [r7, #8]
 8009b7a:	60fa      	str	r2, [r7, #12]
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b80:	4a84      	ldr	r2, [pc, #528]	@ (8009d94 <UART_SetConfig+0x930>)
 8009b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	2200      	movs	r2, #0
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	607a      	str	r2, [r7, #4]
 8009b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b96:	f7f6 fbfb 	bl	8000390 <__aeabi_uldivmod>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	f04f 0200 	mov.w	r2, #0
 8009ba6:	f04f 0300 	mov.w	r3, #0
 8009baa:	020b      	lsls	r3, r1, #8
 8009bac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bb0:	0202      	lsls	r2, r0, #8
 8009bb2:	6979      	ldr	r1, [r7, #20]
 8009bb4:	6849      	ldr	r1, [r1, #4]
 8009bb6:	0849      	lsrs	r1, r1, #1
 8009bb8:	2000      	movs	r0, #0
 8009bba:	460c      	mov	r4, r1
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	eb12 0804 	adds.w	r8, r2, r4
 8009bc2:	eb43 0905 	adc.w	r9, r3, r5
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	469a      	mov	sl, r3
 8009bce:	4693      	mov	fp, r2
 8009bd0:	4652      	mov	r2, sl
 8009bd2:	465b      	mov	r3, fp
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	f7f6 fbda 	bl	8000390 <__aeabi_uldivmod>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4613      	mov	r3, r2
 8009be2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bea:	d308      	bcc.n	8009bfe <UART_SetConfig+0x79a>
 8009bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bf2:	d204      	bcs.n	8009bfe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bfa:	60da      	str	r2, [r3, #12]
 8009bfc:	e17c      	b.n	8009ef8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c04:	e178      	b.n	8009ef8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c0e:	f040 80c5 	bne.w	8009d9c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009c12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c16:	2b20      	cmp	r3, #32
 8009c18:	dc48      	bgt.n	8009cac <UART_SetConfig+0x848>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	db7b      	blt.n	8009d16 <UART_SetConfig+0x8b2>
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	d879      	bhi.n	8009d16 <UART_SetConfig+0x8b2>
 8009c22:	a201      	add	r2, pc, #4	@ (adr r2, 8009c28 <UART_SetConfig+0x7c4>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009cb3 	.word	0x08009cb3
 8009c2c:	08009cbb 	.word	0x08009cbb
 8009c30:	08009d17 	.word	0x08009d17
 8009c34:	08009d17 	.word	0x08009d17
 8009c38:	08009cc3 	.word	0x08009cc3
 8009c3c:	08009d17 	.word	0x08009d17
 8009c40:	08009d17 	.word	0x08009d17
 8009c44:	08009d17 	.word	0x08009d17
 8009c48:	08009cd3 	.word	0x08009cd3
 8009c4c:	08009d17 	.word	0x08009d17
 8009c50:	08009d17 	.word	0x08009d17
 8009c54:	08009d17 	.word	0x08009d17
 8009c58:	08009d17 	.word	0x08009d17
 8009c5c:	08009d17 	.word	0x08009d17
 8009c60:	08009d17 	.word	0x08009d17
 8009c64:	08009d17 	.word	0x08009d17
 8009c68:	08009ce3 	.word	0x08009ce3
 8009c6c:	08009d17 	.word	0x08009d17
 8009c70:	08009d17 	.word	0x08009d17
 8009c74:	08009d17 	.word	0x08009d17
 8009c78:	08009d17 	.word	0x08009d17
 8009c7c:	08009d17 	.word	0x08009d17
 8009c80:	08009d17 	.word	0x08009d17
 8009c84:	08009d17 	.word	0x08009d17
 8009c88:	08009d17 	.word	0x08009d17
 8009c8c:	08009d17 	.word	0x08009d17
 8009c90:	08009d17 	.word	0x08009d17
 8009c94:	08009d17 	.word	0x08009d17
 8009c98:	08009d17 	.word	0x08009d17
 8009c9c:	08009d17 	.word	0x08009d17
 8009ca0:	08009d17 	.word	0x08009d17
 8009ca4:	08009d17 	.word	0x08009d17
 8009ca8:	08009d09 	.word	0x08009d09
 8009cac:	2b40      	cmp	r3, #64	@ 0x40
 8009cae:	d02e      	beq.n	8009d0e <UART_SetConfig+0x8aa>
 8009cb0:	e031      	b.n	8009d16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cb2:	f7fc fb7b 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 8009cb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cb8:	e033      	b.n	8009d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cba:	f7fc fb8d 	bl	80063d8 <HAL_RCC_GetPCLK2Freq>
 8009cbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cc0:	e02f      	b.n	8009d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fb3c 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd0:	e027      	b.n	8009d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cd2:	f107 0318 	add.w	r3, r7, #24
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fe fc88 	bl	80085ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce0:	e01f      	b.n	8009d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8009d98 <UART_SetConfig+0x934>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d009      	beq.n	8009d02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cee:	4b2a      	ldr	r3, [pc, #168]	@ (8009d98 <UART_SetConfig+0x934>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	08db      	lsrs	r3, r3, #3
 8009cf4:	f003 0303 	and.w	r3, r3, #3
 8009cf8:	4a24      	ldr	r2, [pc, #144]	@ (8009d8c <UART_SetConfig+0x928>)
 8009cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d00:	e00f      	b.n	8009d22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009d02:	4b22      	ldr	r3, [pc, #136]	@ (8009d8c <UART_SetConfig+0x928>)
 8009d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d06:	e00c      	b.n	8009d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d08:	4b21      	ldr	r3, [pc, #132]	@ (8009d90 <UART_SetConfig+0x92c>)
 8009d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d0c:	e009      	b.n	8009d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d14:	e005      	b.n	8009d22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 80e7 	beq.w	8009ef8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d2e:	4a19      	ldr	r2, [pc, #100]	@ (8009d94 <UART_SetConfig+0x930>)
 8009d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d34:	461a      	mov	r2, r3
 8009d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d3c:	005a      	lsls	r2, r3, #1
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	085b      	lsrs	r3, r3, #1
 8009d44:	441a      	add	r2, r3
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	2b0f      	cmp	r3, #15
 8009d54:	d916      	bls.n	8009d84 <UART_SetConfig+0x920>
 8009d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d5c:	d212      	bcs.n	8009d84 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	f023 030f 	bic.w	r3, r3, #15
 8009d66:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6a:	085b      	lsrs	r3, r3, #1
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d76:	4313      	orrs	r3, r2
 8009d78:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d80:	60da      	str	r2, [r3, #12]
 8009d82:	e0b9      	b.n	8009ef8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d8a:	e0b5      	b.n	8009ef8 <UART_SetConfig+0xa94>
 8009d8c:	03d09000 	.word	0x03d09000
 8009d90:	003d0900 	.word	0x003d0900
 8009d94:	0800fcd4 	.word	0x0800fcd4
 8009d98:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	dc49      	bgt.n	8009e38 <UART_SetConfig+0x9d4>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	db7c      	blt.n	8009ea2 <UART_SetConfig+0xa3e>
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	d87a      	bhi.n	8009ea2 <UART_SetConfig+0xa3e>
 8009dac:	a201      	add	r2, pc, #4	@ (adr r2, 8009db4 <UART_SetConfig+0x950>)
 8009dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db2:	bf00      	nop
 8009db4:	08009e3f 	.word	0x08009e3f
 8009db8:	08009e47 	.word	0x08009e47
 8009dbc:	08009ea3 	.word	0x08009ea3
 8009dc0:	08009ea3 	.word	0x08009ea3
 8009dc4:	08009e4f 	.word	0x08009e4f
 8009dc8:	08009ea3 	.word	0x08009ea3
 8009dcc:	08009ea3 	.word	0x08009ea3
 8009dd0:	08009ea3 	.word	0x08009ea3
 8009dd4:	08009e5f 	.word	0x08009e5f
 8009dd8:	08009ea3 	.word	0x08009ea3
 8009ddc:	08009ea3 	.word	0x08009ea3
 8009de0:	08009ea3 	.word	0x08009ea3
 8009de4:	08009ea3 	.word	0x08009ea3
 8009de8:	08009ea3 	.word	0x08009ea3
 8009dec:	08009ea3 	.word	0x08009ea3
 8009df0:	08009ea3 	.word	0x08009ea3
 8009df4:	08009e6f 	.word	0x08009e6f
 8009df8:	08009ea3 	.word	0x08009ea3
 8009dfc:	08009ea3 	.word	0x08009ea3
 8009e00:	08009ea3 	.word	0x08009ea3
 8009e04:	08009ea3 	.word	0x08009ea3
 8009e08:	08009ea3 	.word	0x08009ea3
 8009e0c:	08009ea3 	.word	0x08009ea3
 8009e10:	08009ea3 	.word	0x08009ea3
 8009e14:	08009ea3 	.word	0x08009ea3
 8009e18:	08009ea3 	.word	0x08009ea3
 8009e1c:	08009ea3 	.word	0x08009ea3
 8009e20:	08009ea3 	.word	0x08009ea3
 8009e24:	08009ea3 	.word	0x08009ea3
 8009e28:	08009ea3 	.word	0x08009ea3
 8009e2c:	08009ea3 	.word	0x08009ea3
 8009e30:	08009ea3 	.word	0x08009ea3
 8009e34:	08009e95 	.word	0x08009e95
 8009e38:	2b40      	cmp	r3, #64	@ 0x40
 8009e3a:	d02e      	beq.n	8009e9a <UART_SetConfig+0xa36>
 8009e3c:	e031      	b.n	8009ea2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e3e:	f7fc fab5 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 8009e42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e44:	e033      	b.n	8009eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e46:	f7fc fac7 	bl	80063d8 <HAL_RCC_GetPCLK2Freq>
 8009e4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e4c:	e02f      	b.n	8009eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe fa76 	bl	8008344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e5c:	e027      	b.n	8009eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e5e:	f107 0318 	add.w	r3, r7, #24
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fe fbc2 	bl	80085ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e6c:	e01f      	b.n	8009eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8009f24 <UART_SetConfig+0xac0>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 0320 	and.w	r3, r3, #32
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d009      	beq.n	8009e8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8009f24 <UART_SetConfig+0xac0>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	08db      	lsrs	r3, r3, #3
 8009e80:	f003 0303 	and.w	r3, r3, #3
 8009e84:	4a28      	ldr	r2, [pc, #160]	@ (8009f28 <UART_SetConfig+0xac4>)
 8009e86:	fa22 f303 	lsr.w	r3, r2, r3
 8009e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e8c:	e00f      	b.n	8009eae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009e8e:	4b26      	ldr	r3, [pc, #152]	@ (8009f28 <UART_SetConfig+0xac4>)
 8009e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e92:	e00c      	b.n	8009eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e94:	4b25      	ldr	r3, [pc, #148]	@ (8009f2c <UART_SetConfig+0xac8>)
 8009e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e98:	e009      	b.n	8009eae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea0:	e005      	b.n	8009eae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009eac:	bf00      	nop
    }

    if (pclk != 0U)
 8009eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d021      	beq.n	8009ef8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f30 <UART_SetConfig+0xacc>)
 8009eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec2:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	085b      	lsrs	r3, r3, #1
 8009ecc:	441a      	add	r2, r3
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eda:	2b0f      	cmp	r3, #15
 8009edc:	d909      	bls.n	8009ef2 <UART_SetConfig+0xa8e>
 8009ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ee4:	d205      	bcs.n	8009ef2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	60da      	str	r2, [r3, #12]
 8009ef0:	e002      	b.n	8009ef8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2200      	movs	r2, #0
 8009f12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f14:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3748      	adds	r7, #72	@ 0x48
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f22:	bf00      	nop
 8009f24:	58024400 	.word	0x58024400
 8009f28:	03d09000 	.word	0x03d09000
 8009f2c:	003d0900 	.word	0x003d0900
 8009f30:	0800fcd4 	.word	0x0800fcd4

08009f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f40:	f003 0308 	and.w	r3, r3, #8
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00a      	beq.n	8009f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00a      	beq.n	8009f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f84:	f003 0302 	and.w	r3, r3, #2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00a      	beq.n	8009fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa6:	f003 0304 	and.w	r3, r3, #4
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00a      	beq.n	8009fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc8:	f003 0310 	and.w	r3, r3, #16
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00a      	beq.n	8009fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fea:	f003 0320 	and.w	r3, r3, #32
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	430a      	orrs	r2, r1
 800a006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01a      	beq.n	800a04a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a02e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a032:	d10a      	bne.n	800a04a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00a      	beq.n	800a06c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	430a      	orrs	r2, r1
 800a06a:	605a      	str	r2, [r3, #4]
  }
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b098      	sub	sp, #96	@ 0x60
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a088:	f7f7 fd4c 	bl	8001b24 <HAL_GetTick>
 800a08c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0308 	and.w	r3, r3, #8
 800a098:	2b08      	cmp	r3, #8
 800a09a:	d12f      	bne.n	800a0fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a09c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f88e 	bl	800a1cc <UART_WaitOnFlagUntilTimeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d022      	beq.n	800a0fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0be:	e853 3f00 	ldrex	r3, [r3]
 800a0c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0dc:	e841 2300 	strex	r3, r2, [r1]
 800a0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e6      	bne.n	800a0b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e063      	b.n	800a1c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0304 	and.w	r3, r3, #4
 800a106:	2b04      	cmp	r3, #4
 800a108:	d149      	bne.n	800a19e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a10a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a112:	2200      	movs	r2, #0
 800a114:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f857 	bl	800a1cc <UART_WaitOnFlagUntilTimeout>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d03c      	beq.n	800a19e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12c:	e853 3f00 	ldrex	r3, [r3]
 800a130:	623b      	str	r3, [r7, #32]
   return(result);
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a138:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a142:	633b      	str	r3, [r7, #48]	@ 0x30
 800a144:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a146:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a14a:	e841 2300 	strex	r3, r2, [r1]
 800a14e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e6      	bne.n	800a124 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3308      	adds	r3, #8
 800a15c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	e853 3f00 	ldrex	r3, [r3]
 800a164:	60fb      	str	r3, [r7, #12]
   return(result);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f023 0301 	bic.w	r3, r3, #1
 800a16c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3308      	adds	r3, #8
 800a174:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a176:	61fa      	str	r2, [r7, #28]
 800a178:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	69b9      	ldr	r1, [r7, #24]
 800a17c:	69fa      	ldr	r2, [r7, #28]
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	617b      	str	r3, [r7, #20]
   return(result);
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e5      	bne.n	800a156 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2220      	movs	r2, #32
 800a18e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e012      	b.n	800a1c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2220      	movs	r2, #32
 800a1a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3758      	adds	r7, #88	@ 0x58
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	603b      	str	r3, [r7, #0]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1dc:	e04f      	b.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e4:	d04b      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1e6:	f7f7 fc9d 	bl	8001b24 <HAL_GetTick>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d302      	bcc.n	800a1fc <UART_WaitOnFlagUntilTimeout+0x30>
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d101      	bne.n	800a200 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e04e      	b.n	800a29e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0304 	and.w	r3, r3, #4
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d037      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2b80      	cmp	r3, #128	@ 0x80
 800a212:	d034      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b40      	cmp	r3, #64	@ 0x40
 800a218:	d031      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	f003 0308 	and.w	r3, r3, #8
 800a224:	2b08      	cmp	r3, #8
 800a226:	d110      	bne.n	800a24a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2208      	movs	r2, #8
 800a22e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f000 f839 	bl	800a2a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2208      	movs	r2, #8
 800a23a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e029      	b.n	800a29e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69db      	ldr	r3, [r3, #28]
 800a250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a258:	d111      	bne.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 f81f 	bl	800a2a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e00f      	b.n	800a29e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	69da      	ldr	r2, [r3, #28]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	4013      	ands	r3, r2
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	bf0c      	ite	eq
 800a28e:	2301      	moveq	r3, #1
 800a290:	2300      	movne	r3, #0
 800a292:	b2db      	uxtb	r3, r3
 800a294:	461a      	mov	r2, r3
 800a296:	79fb      	ldrb	r3, [r7, #7]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d0a0      	beq.n	800a1de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
	...

0800a2a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b095      	sub	sp, #84	@ 0x54
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b8:	e853 3f00 	ldrex	r3, [r3]
 800a2bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e6      	bne.n	800a2b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	e853 3f00 	ldrex	r3, [r3]
 800a2f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2f2:	69fa      	ldr	r2, [r7, #28]
 800a2f4:	4b1e      	ldr	r3, [pc, #120]	@ (800a370 <UART_EndRxTransfer+0xc8>)
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3308      	adds	r3, #8
 800a300:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a302:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a304:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a30a:	e841 2300 	strex	r3, r2, [r1]
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1e5      	bne.n	800a2e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d118      	bne.n	800a350 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f023 0310 	bic.w	r3, r3, #16
 800a332:	647b      	str	r3, [r7, #68]	@ 0x44
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	461a      	mov	r2, r3
 800a33a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a33c:	61bb      	str	r3, [r7, #24]
 800a33e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6979      	ldr	r1, [r7, #20]
 800a342:	69ba      	ldr	r2, [r7, #24]
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	613b      	str	r3, [r7, #16]
   return(result);
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e6      	bne.n	800a31e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2220      	movs	r2, #32
 800a354:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a364:	bf00      	nop
 800a366:	3754      	adds	r7, #84	@ 0x54
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	effffffe 	.word	0xeffffffe

0800a374 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a382:	2b01      	cmp	r3, #1
 800a384:	d101      	bne.n	800a38a <HAL_UARTEx_DisableFifoMode+0x16>
 800a386:	2302      	movs	r3, #2
 800a388:	e027      	b.n	800a3da <HAL_UARTEx_DisableFifoMode+0x66>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2224      	movs	r2, #36	@ 0x24
 800a396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0201 	bic.w	r2, r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a3b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2220      	movs	r2, #32
 800a3cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d101      	bne.n	800a3fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	e02d      	b.n	800a45a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2224      	movs	r2, #36	@ 0x24
 800a40a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f022 0201 	bic.w	r2, r2, #1
 800a424:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f850 	bl	800a4e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a472:	2b01      	cmp	r3, #1
 800a474:	d101      	bne.n	800a47a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a476:	2302      	movs	r3, #2
 800a478:	e02d      	b.n	800a4d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2224      	movs	r2, #36	@ 0x24
 800a486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f022 0201 	bic.w	r2, r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f812 	bl	800a4e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d108      	bne.n	800a502 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a500:	e031      	b.n	800a566 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a502:	2310      	movs	r3, #16
 800a504:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a506:	2310      	movs	r3, #16
 800a508:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	0e5b      	lsrs	r3, r3, #25
 800a512:	b2db      	uxtb	r3, r3
 800a514:	f003 0307 	and.w	r3, r3, #7
 800a518:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	0f5b      	lsrs	r3, r3, #29
 800a522:	b2db      	uxtb	r3, r3
 800a524:	f003 0307 	and.w	r3, r3, #7
 800a528:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	7b3a      	ldrb	r2, [r7, #12]
 800a52e:	4911      	ldr	r1, [pc, #68]	@ (800a574 <UARTEx_SetNbDataToProcess+0x94>)
 800a530:	5c8a      	ldrb	r2, [r1, r2]
 800a532:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a536:	7b3a      	ldrb	r2, [r7, #12]
 800a538:	490f      	ldr	r1, [pc, #60]	@ (800a578 <UARTEx_SetNbDataToProcess+0x98>)
 800a53a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a53c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a540:	b29a      	uxth	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a548:	7bfb      	ldrb	r3, [r7, #15]
 800a54a:	7b7a      	ldrb	r2, [r7, #13]
 800a54c:	4909      	ldr	r1, [pc, #36]	@ (800a574 <UARTEx_SetNbDataToProcess+0x94>)
 800a54e:	5c8a      	ldrb	r2, [r1, r2]
 800a550:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a554:	7b7a      	ldrb	r2, [r7, #13]
 800a556:	4908      	ldr	r1, [pc, #32]	@ (800a578 <UARTEx_SetNbDataToProcess+0x98>)
 800a558:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a55a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a55e:	b29a      	uxth	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a566:	bf00      	nop
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	0800fcec 	.word	0x0800fcec
 800a578:	0800fcf4 	.word	0x0800fcf4

0800a57c <__NVIC_SetPriority>:
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	6039      	str	r1, [r7, #0]
 800a586:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	db0a      	blt.n	800a5a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	b2da      	uxtb	r2, r3
 800a594:	490c      	ldr	r1, [pc, #48]	@ (800a5c8 <__NVIC_SetPriority+0x4c>)
 800a596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a59a:	0112      	lsls	r2, r2, #4
 800a59c:	b2d2      	uxtb	r2, r2
 800a59e:	440b      	add	r3, r1
 800a5a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a5a4:	e00a      	b.n	800a5bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	4908      	ldr	r1, [pc, #32]	@ (800a5cc <__NVIC_SetPriority+0x50>)
 800a5ac:	88fb      	ldrh	r3, [r7, #6]
 800a5ae:	f003 030f 	and.w	r3, r3, #15
 800a5b2:	3b04      	subs	r3, #4
 800a5b4:	0112      	lsls	r2, r2, #4
 800a5b6:	b2d2      	uxtb	r2, r2
 800a5b8:	440b      	add	r3, r1
 800a5ba:	761a      	strb	r2, [r3, #24]
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	e000e100 	.word	0xe000e100
 800a5cc:	e000ed00 	.word	0xe000ed00

0800a5d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	f06f 0004 	mvn.w	r0, #4
 800a5da:	f7ff ffcf 	bl	800a57c <__NVIC_SetPriority>
#endif
}
 800a5de:	bf00      	nop
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5ea:	f3ef 8305 	mrs	r3, IPSR
 800a5ee:	603b      	str	r3, [r7, #0]
  return(result);
 800a5f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a5f6:	f06f 0305 	mvn.w	r3, #5
 800a5fa:	607b      	str	r3, [r7, #4]
 800a5fc:	e00c      	b.n	800a618 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a5fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a628 <osKernelInitialize+0x44>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d105      	bne.n	800a612 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a606:	4b08      	ldr	r3, [pc, #32]	@ (800a628 <osKernelInitialize+0x44>)
 800a608:	2201      	movs	r2, #1
 800a60a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	607b      	str	r3, [r7, #4]
 800a610:	e002      	b.n	800a618 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a612:	f04f 33ff 	mov.w	r3, #4294967295
 800a616:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a618:	687b      	ldr	r3, [r7, #4]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	24000684 	.word	0x24000684

0800a62c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a632:	f3ef 8305 	mrs	r3, IPSR
 800a636:	603b      	str	r3, [r7, #0]
  return(result);
 800a638:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a63e:	f06f 0305 	mvn.w	r3, #5
 800a642:	607b      	str	r3, [r7, #4]
 800a644:	e010      	b.n	800a668 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a646:	4b0b      	ldr	r3, [pc, #44]	@ (800a674 <osKernelStart+0x48>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d109      	bne.n	800a662 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a64e:	f7ff ffbf 	bl	800a5d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a652:	4b08      	ldr	r3, [pc, #32]	@ (800a674 <osKernelStart+0x48>)
 800a654:	2202      	movs	r2, #2
 800a656:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a658:	f001 fcbe 	bl	800bfd8 <vTaskStartScheduler>
      stat = osOK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	607b      	str	r3, [r7, #4]
 800a660:	e002      	b.n	800a668 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a662:	f04f 33ff 	mov.w	r3, #4294967295
 800a666:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a668:	687b      	ldr	r3, [r7, #4]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	24000684 	.word	0x24000684

0800a678 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08e      	sub	sp, #56	@ 0x38
 800a67c:	af04      	add	r7, sp, #16
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a684:	2300      	movs	r3, #0
 800a686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a688:	f3ef 8305 	mrs	r3, IPSR
 800a68c:	617b      	str	r3, [r7, #20]
  return(result);
 800a68e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a690:	2b00      	cmp	r3, #0
 800a692:	d17e      	bne.n	800a792 <osThreadNew+0x11a>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d07b      	beq.n	800a792 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a69a:	2380      	movs	r3, #128	@ 0x80
 800a69c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a69e:	2318      	movs	r3, #24
 800a6a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d045      	beq.n	800a73e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <osThreadNew+0x48>
        name = attr->name;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d002      	beq.n	800a6ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d008      	beq.n	800a6e6 <osThreadNew+0x6e>
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	2b38      	cmp	r3, #56	@ 0x38
 800a6d8:	d805      	bhi.n	800a6e6 <osThreadNew+0x6e>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f003 0301 	and.w	r3, r3, #1
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <osThreadNew+0x72>
        return (NULL);
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e054      	b.n	800a794 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	089b      	lsrs	r3, r3, #2
 800a6f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00e      	beq.n	800a720 <osThreadNew+0xa8>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	2b5b      	cmp	r3, #91	@ 0x5b
 800a708:	d90a      	bls.n	800a720 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d006      	beq.n	800a720 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d002      	beq.n	800a720 <osThreadNew+0xa8>
        mem = 1;
 800a71a:	2301      	movs	r3, #1
 800a71c:	61bb      	str	r3, [r7, #24]
 800a71e:	e010      	b.n	800a742 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10c      	bne.n	800a742 <osThreadNew+0xca>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d108      	bne.n	800a742 <osThreadNew+0xca>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d104      	bne.n	800a742 <osThreadNew+0xca>
          mem = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	61bb      	str	r3, [r7, #24]
 800a73c:	e001      	b.n	800a742 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d110      	bne.n	800a76a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a750:	9202      	str	r2, [sp, #8]
 800a752:	9301      	str	r3, [sp, #4]
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	6a3a      	ldr	r2, [r7, #32]
 800a75c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f001 fa5e 	bl	800bc20 <xTaskCreateStatic>
 800a764:	4603      	mov	r3, r0
 800a766:	613b      	str	r3, [r7, #16]
 800a768:	e013      	b.n	800a792 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d110      	bne.n	800a792 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	b29a      	uxth	r2, r3
 800a774:	f107 0310 	add.w	r3, r7, #16
 800a778:	9301      	str	r3, [sp, #4]
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f001 faac 	bl	800bce0 <xTaskCreate>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d001      	beq.n	800a792 <osThreadNew+0x11a>
            hTask = NULL;
 800a78e:	2300      	movs	r3, #0
 800a790:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a792:	693b      	ldr	r3, [r7, #16]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3728      	adds	r7, #40	@ 0x28
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7a4:	f3ef 8305 	mrs	r3, IPSR
 800a7a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d003      	beq.n	800a7b8 <osDelay+0x1c>
    stat = osErrorISR;
 800a7b0:	f06f 0305 	mvn.w	r3, #5
 800a7b4:	60fb      	str	r3, [r7, #12]
 800a7b6:	e007      	b.n	800a7c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d002      	beq.n	800a7c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f001 fbd2 	bl	800bf6c <vTaskDelay>
    }
  }

  return (stat);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4a07      	ldr	r2, [pc, #28]	@ (800a800 <vApplicationGetIdleTaskMemory+0x2c>)
 800a7e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	4a06      	ldr	r2, [pc, #24]	@ (800a804 <vApplicationGetIdleTaskMemory+0x30>)
 800a7ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2280      	movs	r2, #128	@ 0x80
 800a7f0:	601a      	str	r2, [r3, #0]
}
 800a7f2:	bf00      	nop
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	24000688 	.word	0x24000688
 800a804:	240006e4 	.word	0x240006e4

0800a808 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4a07      	ldr	r2, [pc, #28]	@ (800a834 <vApplicationGetTimerTaskMemory+0x2c>)
 800a818:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	4a06      	ldr	r2, [pc, #24]	@ (800a838 <vApplicationGetTimerTaskMemory+0x30>)
 800a81e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a826:	601a      	str	r2, [r3, #0]
}
 800a828:	bf00      	nop
 800a82a:	3714      	adds	r7, #20
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	240008e4 	.word	0x240008e4
 800a838:	24000940 	.word	0x24000940

0800a83c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08a      	sub	sp, #40	@ 0x28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a844:	2300      	movs	r3, #0
 800a846:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a848:	f001 fc2e 	bl	800c0a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a84c:	4b5c      	ldr	r3, [pc, #368]	@ (800a9c0 <pvPortMalloc+0x184>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a854:	f000 f924 	bl	800aaa0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a858:	4b5a      	ldr	r3, [pc, #360]	@ (800a9c4 <pvPortMalloc+0x188>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4013      	ands	r3, r2
 800a860:	2b00      	cmp	r3, #0
 800a862:	f040 8095 	bne.w	800a990 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01e      	beq.n	800a8aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a86c:	2208      	movs	r2, #8
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4413      	add	r3, r2
 800a872:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f003 0307 	and.w	r3, r3, #7
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d015      	beq.n	800a8aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f023 0307 	bic.w	r3, r3, #7
 800a884:	3308      	adds	r3, #8
 800a886:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f003 0307 	and.w	r3, r3, #7
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00b      	beq.n	800a8aa <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8a4:	bf00      	nop
 800a8a6:	bf00      	nop
 800a8a8:	e7fd      	b.n	800a8a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d06f      	beq.n	800a990 <pvPortMalloc+0x154>
 800a8b0:	4b45      	ldr	r3, [pc, #276]	@ (800a9c8 <pvPortMalloc+0x18c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d86a      	bhi.n	800a990 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8ba:	4b44      	ldr	r3, [pc, #272]	@ (800a9cc <pvPortMalloc+0x190>)
 800a8bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8be:	4b43      	ldr	r3, [pc, #268]	@ (800a9cc <pvPortMalloc+0x190>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8c4:	e004      	b.n	800a8d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d903      	bls.n	800a8e2 <pvPortMalloc+0xa6>
 800a8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1f1      	bne.n	800a8c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a8e2:	4b37      	ldr	r3, [pc, #220]	@ (800a9c0 <pvPortMalloc+0x184>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d051      	beq.n	800a990 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2208      	movs	r2, #8
 800a8f2:	4413      	add	r3, r2
 800a8f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	6a3b      	ldr	r3, [r7, #32]
 800a8fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	1ad2      	subs	r2, r2, r3
 800a906:	2308      	movs	r3, #8
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d920      	bls.n	800a950 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a90e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4413      	add	r3, r2
 800a914:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	f003 0307 	and.w	r3, r3, #7
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00b      	beq.n	800a938 <pvPortMalloc+0xfc>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	613b      	str	r3, [r7, #16]
}
 800a932:	bf00      	nop
 800a934:	bf00      	nop
 800a936:	e7fd      	b.n	800a934 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	1ad2      	subs	r2, r2, r3
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a94a:	69b8      	ldr	r0, [r7, #24]
 800a94c:	f000 f90a 	bl	800ab64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a950:	4b1d      	ldr	r3, [pc, #116]	@ (800a9c8 <pvPortMalloc+0x18c>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	4a1b      	ldr	r2, [pc, #108]	@ (800a9c8 <pvPortMalloc+0x18c>)
 800a95c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a95e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9c8 <pvPortMalloc+0x18c>)
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	4b1b      	ldr	r3, [pc, #108]	@ (800a9d0 <pvPortMalloc+0x194>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	429a      	cmp	r2, r3
 800a968:	d203      	bcs.n	800a972 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a96a:	4b17      	ldr	r3, [pc, #92]	@ (800a9c8 <pvPortMalloc+0x18c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a18      	ldr	r2, [pc, #96]	@ (800a9d0 <pvPortMalloc+0x194>)
 800a970:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	4b13      	ldr	r3, [pc, #76]	@ (800a9c4 <pvPortMalloc+0x188>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	431a      	orrs	r2, r3
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a982:	2200      	movs	r2, #0
 800a984:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a986:	4b13      	ldr	r3, [pc, #76]	@ (800a9d4 <pvPortMalloc+0x198>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3301      	adds	r3, #1
 800a98c:	4a11      	ldr	r2, [pc, #68]	@ (800a9d4 <pvPortMalloc+0x198>)
 800a98e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a990:	f001 fb98 	bl	800c0c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	f003 0307 	and.w	r3, r3, #7
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00b      	beq.n	800a9b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	60fb      	str	r3, [r7, #12]
}
 800a9b0:	bf00      	nop
 800a9b2:	bf00      	nop
 800a9b4:	e7fd      	b.n	800a9b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a9b6:	69fb      	ldr	r3, [r7, #28]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3728      	adds	r7, #40	@ 0x28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	24004948 	.word	0x24004948
 800a9c4:	2400495c 	.word	0x2400495c
 800a9c8:	2400494c 	.word	0x2400494c
 800a9cc:	24004940 	.word	0x24004940
 800a9d0:	24004950 	.word	0x24004950
 800a9d4:	24004954 	.word	0x24004954

0800a9d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d04f      	beq.n	800aa8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a9ea:	2308      	movs	r3, #8
 800a9ec:	425b      	negs	r3, r3
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	4b25      	ldr	r3, [pc, #148]	@ (800aa94 <vPortFree+0xbc>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4013      	ands	r3, r2
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10b      	bne.n	800aa1e <vPortFree+0x46>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	60fb      	str	r3, [r7, #12]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00b      	beq.n	800aa3e <vPortFree+0x66>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	60bb      	str	r3, [r7, #8]
}
 800aa38:	bf00      	nop
 800aa3a:	bf00      	nop
 800aa3c:	e7fd      	b.n	800aa3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	4b14      	ldr	r3, [pc, #80]	@ (800aa94 <vPortFree+0xbc>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4013      	ands	r3, r2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d01e      	beq.n	800aa8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d11a      	bne.n	800aa8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	4b0e      	ldr	r3, [pc, #56]	@ (800aa94 <vPortFree+0xbc>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	43db      	mvns	r3, r3
 800aa5e:	401a      	ands	r2, r3
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa64:	f001 fb20 	bl	800c0a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa98 <vPortFree+0xc0>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4413      	add	r3, r2
 800aa72:	4a09      	ldr	r2, [pc, #36]	@ (800aa98 <vPortFree+0xc0>)
 800aa74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa76:	6938      	ldr	r0, [r7, #16]
 800aa78:	f000 f874 	bl	800ab64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa7c:	4b07      	ldr	r3, [pc, #28]	@ (800aa9c <vPortFree+0xc4>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	3301      	adds	r3, #1
 800aa82:	4a06      	ldr	r2, [pc, #24]	@ (800aa9c <vPortFree+0xc4>)
 800aa84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa86:	f001 fb1d 	bl	800c0c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa8a:	bf00      	nop
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	2400495c 	.word	0x2400495c
 800aa98:	2400494c 	.word	0x2400494c
 800aa9c:	24004958 	.word	0x24004958

0800aaa0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aaa6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800aaaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aaac:	4b27      	ldr	r3, [pc, #156]	@ (800ab4c <prvHeapInit+0xac>)
 800aaae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f003 0307 	and.w	r3, r3, #7
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00c      	beq.n	800aad4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3307      	adds	r3, #7
 800aabe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f023 0307 	bic.w	r3, r3, #7
 800aac6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	4a1f      	ldr	r2, [pc, #124]	@ (800ab4c <prvHeapInit+0xac>)
 800aad0:	4413      	add	r3, r2
 800aad2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aad8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab50 <prvHeapInit+0xb0>)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aade:	4b1c      	ldr	r3, [pc, #112]	@ (800ab50 <prvHeapInit+0xb0>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	4413      	add	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aaec:	2208      	movs	r2, #8
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	1a9b      	subs	r3, r3, r2
 800aaf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f023 0307 	bic.w	r3, r3, #7
 800aafa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4a15      	ldr	r2, [pc, #84]	@ (800ab54 <prvHeapInit+0xb4>)
 800ab00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab02:	4b14      	ldr	r3, [pc, #80]	@ (800ab54 <prvHeapInit+0xb4>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2200      	movs	r2, #0
 800ab08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab0a:	4b12      	ldr	r3, [pc, #72]	@ (800ab54 <prvHeapInit+0xb4>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	1ad2      	subs	r2, r2, r3
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab20:	4b0c      	ldr	r3, [pc, #48]	@ (800ab54 <prvHeapInit+0xb4>)
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ab58 <prvHeapInit+0xb8>)
 800ab2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	4a09      	ldr	r2, [pc, #36]	@ (800ab5c <prvHeapInit+0xbc>)
 800ab36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab38:	4b09      	ldr	r3, [pc, #36]	@ (800ab60 <prvHeapInit+0xc0>)
 800ab3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ab3e:	601a      	str	r2, [r3, #0]
}
 800ab40:	bf00      	nop
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr
 800ab4c:	24000d40 	.word	0x24000d40
 800ab50:	24004940 	.word	0x24004940
 800ab54:	24004948 	.word	0x24004948
 800ab58:	24004950 	.word	0x24004950
 800ab5c:	2400494c 	.word	0x2400494c
 800ab60:	2400495c 	.word	0x2400495c

0800ab64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab6c:	4b28      	ldr	r3, [pc, #160]	@ (800ac10 <prvInsertBlockIntoFreeList+0xac>)
 800ab6e:	60fb      	str	r3, [r7, #12]
 800ab70:	e002      	b.n	800ab78 <prvInsertBlockIntoFreeList+0x14>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	60fb      	str	r3, [r7, #12]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d8f7      	bhi.n	800ab72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d108      	bne.n	800aba6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	441a      	add	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	441a      	add	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d118      	bne.n	800abec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	4b15      	ldr	r3, [pc, #84]	@ (800ac14 <prvInsertBlockIntoFreeList+0xb0>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d00d      	beq.n	800abe2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	441a      	add	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	e008      	b.n	800abf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800abe2:	4b0c      	ldr	r3, [pc, #48]	@ (800ac14 <prvInsertBlockIntoFreeList+0xb0>)
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	e003      	b.n	800abf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d002      	beq.n	800ac02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac02:	bf00      	nop
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	24004940 	.word	0x24004940
 800ac14:	24004948 	.word	0x24004948

0800ac18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f103 0208 	add.w	r2, r3, #8
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f103 0208 	add.w	r2, r3, #8
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f103 0208 	add.w	r2, r3, #8
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac66:	bf00      	nop
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac72:	b480      	push	{r7}
 800ac74:	b085      	sub	sp, #20
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	689a      	ldr	r2, [r3, #8]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	1c5a      	adds	r2, r3, #1
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]
}
 800acae:	bf00      	nop
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800acba:	b480      	push	{r7}
 800acbc:	b085      	sub	sp, #20
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd0:	d103      	bne.n	800acda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	e00c      	b.n	800acf4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	3308      	adds	r3, #8
 800acde:	60fb      	str	r3, [r7, #12]
 800ace0:	e002      	b.n	800ace8 <vListInsert+0x2e>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	60fb      	str	r3, [r7, #12]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68ba      	ldr	r2, [r7, #8]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d2f6      	bcs.n	800ace2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	1c5a      	adds	r2, r3, #1
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	601a      	str	r2, [r3, #0]
}
 800ad20:	bf00      	nop
 800ad22:	3714      	adds	r7, #20
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	6892      	ldr	r2, [r2, #8]
 800ad42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	6852      	ldr	r2, [r2, #4]
 800ad4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d103      	bne.n	800ad60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	689a      	ldr	r2, [r3, #8]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	1e5a      	subs	r2, r3, #1
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	3b04      	subs	r3, #4
 800ad90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ad98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3b04      	subs	r3, #4
 800ad9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	f023 0201 	bic.w	r2, r3, #1
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	3b04      	subs	r3, #4
 800adae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800adb0:	4a0c      	ldr	r2, [pc, #48]	@ (800ade4 <pxPortInitialiseStack+0x64>)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3b14      	subs	r3, #20
 800adba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3b04      	subs	r3, #4
 800adc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f06f 0202 	mvn.w	r2, #2
 800adce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	3b20      	subs	r3, #32
 800add4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800add6:	68fb      	ldr	r3, [r7, #12]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	0800ade9 	.word	0x0800ade9

0800ade8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800adee:	2300      	movs	r3, #0
 800adf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800adf2:	4b13      	ldr	r3, [pc, #76]	@ (800ae40 <prvTaskExitError+0x58>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfa:	d00b      	beq.n	800ae14 <prvTaskExitError+0x2c>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	60fb      	str	r3, [r7, #12]
}
 800ae0e:	bf00      	nop
 800ae10:	bf00      	nop
 800ae12:	e7fd      	b.n	800ae10 <prvTaskExitError+0x28>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	60bb      	str	r3, [r7, #8]
}
 800ae26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ae28:	bf00      	nop
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0fc      	beq.n	800ae2a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ae30:	bf00      	nop
 800ae32:	bf00      	nop
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	24000010 	.word	0x24000010
	...

0800ae50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae50:	4b07      	ldr	r3, [pc, #28]	@ (800ae70 <pxCurrentTCBConst2>)
 800ae52:	6819      	ldr	r1, [r3, #0]
 800ae54:	6808      	ldr	r0, [r1, #0]
 800ae56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5a:	f380 8809 	msr	PSP, r0
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f04f 0000 	mov.w	r0, #0
 800ae66:	f380 8811 	msr	BASEPRI, r0
 800ae6a:	4770      	bx	lr
 800ae6c:	f3af 8000 	nop.w

0800ae70 <pxCurrentTCBConst2>:
 800ae70:	240049a8 	.word	0x240049a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop

0800ae78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae78:	4808      	ldr	r0, [pc, #32]	@ (800ae9c <prvPortStartFirstTask+0x24>)
 800ae7a:	6800      	ldr	r0, [r0, #0]
 800ae7c:	6800      	ldr	r0, [r0, #0]
 800ae7e:	f380 8808 	msr	MSP, r0
 800ae82:	f04f 0000 	mov.w	r0, #0
 800ae86:	f380 8814 	msr	CONTROL, r0
 800ae8a:	b662      	cpsie	i
 800ae8c:	b661      	cpsie	f
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	df00      	svc	0
 800ae98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae9a:	bf00      	nop
 800ae9c:	e000ed08 	.word	0xe000ed08

0800aea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aea6:	4b47      	ldr	r3, [pc, #284]	@ (800afc4 <xPortStartScheduler+0x124>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a47      	ldr	r2, [pc, #284]	@ (800afc8 <xPortStartScheduler+0x128>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d10b      	bne.n	800aec8 <xPortStartScheduler+0x28>
	__asm volatile
 800aeb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	613b      	str	r3, [r7, #16]
}
 800aec2:	bf00      	nop
 800aec4:	bf00      	nop
 800aec6:	e7fd      	b.n	800aec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aec8:	4b3e      	ldr	r3, [pc, #248]	@ (800afc4 <xPortStartScheduler+0x124>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a3f      	ldr	r2, [pc, #252]	@ (800afcc <xPortStartScheduler+0x12c>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d10b      	bne.n	800aeea <xPortStartScheduler+0x4a>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	60fb      	str	r3, [r7, #12]
}
 800aee4:	bf00      	nop
 800aee6:	bf00      	nop
 800aee8:	e7fd      	b.n	800aee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aeea:	4b39      	ldr	r3, [pc, #228]	@ (800afd0 <xPortStartScheduler+0x130>)
 800aeec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	22ff      	movs	r2, #255	@ 0xff
 800aefa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af04:	78fb      	ldrb	r3, [r7, #3]
 800af06:	b2db      	uxtb	r3, r3
 800af08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800af0c:	b2da      	uxtb	r2, r3
 800af0e:	4b31      	ldr	r3, [pc, #196]	@ (800afd4 <xPortStartScheduler+0x134>)
 800af10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af12:	4b31      	ldr	r3, [pc, #196]	@ (800afd8 <xPortStartScheduler+0x138>)
 800af14:	2207      	movs	r2, #7
 800af16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af18:	e009      	b.n	800af2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800af1a:	4b2f      	ldr	r3, [pc, #188]	@ (800afd8 <xPortStartScheduler+0x138>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3b01      	subs	r3, #1
 800af20:	4a2d      	ldr	r2, [pc, #180]	@ (800afd8 <xPortStartScheduler+0x138>)
 800af22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af24:	78fb      	ldrb	r3, [r7, #3]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	005b      	lsls	r3, r3, #1
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af2e:	78fb      	ldrb	r3, [r7, #3]
 800af30:	b2db      	uxtb	r3, r3
 800af32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af36:	2b80      	cmp	r3, #128	@ 0x80
 800af38:	d0ef      	beq.n	800af1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af3a:	4b27      	ldr	r3, [pc, #156]	@ (800afd8 <xPortStartScheduler+0x138>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f1c3 0307 	rsb	r3, r3, #7
 800af42:	2b04      	cmp	r3, #4
 800af44:	d00b      	beq.n	800af5e <xPortStartScheduler+0xbe>
	__asm volatile
 800af46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4a:	f383 8811 	msr	BASEPRI, r3
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	60bb      	str	r3, [r7, #8]
}
 800af58:	bf00      	nop
 800af5a:	bf00      	nop
 800af5c:	e7fd      	b.n	800af5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af5e:	4b1e      	ldr	r3, [pc, #120]	@ (800afd8 <xPortStartScheduler+0x138>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	021b      	lsls	r3, r3, #8
 800af64:	4a1c      	ldr	r2, [pc, #112]	@ (800afd8 <xPortStartScheduler+0x138>)
 800af66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af68:	4b1b      	ldr	r3, [pc, #108]	@ (800afd8 <xPortStartScheduler+0x138>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800af70:	4a19      	ldr	r2, [pc, #100]	@ (800afd8 <xPortStartScheduler+0x138>)
 800af72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	b2da      	uxtb	r2, r3
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af7c:	4b17      	ldr	r3, [pc, #92]	@ (800afdc <xPortStartScheduler+0x13c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a16      	ldr	r2, [pc, #88]	@ (800afdc <xPortStartScheduler+0x13c>)
 800af82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800af86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af88:	4b14      	ldr	r3, [pc, #80]	@ (800afdc <xPortStartScheduler+0x13c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a13      	ldr	r2, [pc, #76]	@ (800afdc <xPortStartScheduler+0x13c>)
 800af8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800af92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af94:	f000 f8da 	bl	800b14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af98:	4b11      	ldr	r3, [pc, #68]	@ (800afe0 <xPortStartScheduler+0x140>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af9e:	f000 f8f9 	bl	800b194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800afa2:	4b10      	ldr	r3, [pc, #64]	@ (800afe4 <xPortStartScheduler+0x144>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a0f      	ldr	r2, [pc, #60]	@ (800afe4 <xPortStartScheduler+0x144>)
 800afa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800afac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800afae:	f7ff ff63 	bl	800ae78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800afb2:	f001 f9ef 	bl	800c394 <vTaskSwitchContext>
	prvTaskExitError();
 800afb6:	f7ff ff17 	bl	800ade8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3718      	adds	r7, #24
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	e000ed00 	.word	0xe000ed00
 800afc8:	410fc271 	.word	0x410fc271
 800afcc:	410fc270 	.word	0x410fc270
 800afd0:	e000e400 	.word	0xe000e400
 800afd4:	24004960 	.word	0x24004960
 800afd8:	24004964 	.word	0x24004964
 800afdc:	e000ed20 	.word	0xe000ed20
 800afe0:	24000010 	.word	0x24000010
 800afe4:	e000ef34 	.word	0xe000ef34

0800afe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	607b      	str	r3, [r7, #4]
}
 800b000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b002:	4b10      	ldr	r3, [pc, #64]	@ (800b044 <vPortEnterCritical+0x5c>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3301      	adds	r3, #1
 800b008:	4a0e      	ldr	r2, [pc, #56]	@ (800b044 <vPortEnterCritical+0x5c>)
 800b00a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b00c:	4b0d      	ldr	r3, [pc, #52]	@ (800b044 <vPortEnterCritical+0x5c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d110      	bne.n	800b036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b014:	4b0c      	ldr	r3, [pc, #48]	@ (800b048 <vPortEnterCritical+0x60>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00b      	beq.n	800b036 <vPortEnterCritical+0x4e>
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	603b      	str	r3, [r7, #0]
}
 800b030:	bf00      	nop
 800b032:	bf00      	nop
 800b034:	e7fd      	b.n	800b032 <vPortEnterCritical+0x4a>
	}
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	24000010 	.word	0x24000010
 800b048:	e000ed04 	.word	0xe000ed04

0800b04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b052:	4b12      	ldr	r3, [pc, #72]	@ (800b09c <vPortExitCritical+0x50>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10b      	bne.n	800b072 <vPortExitCritical+0x26>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	607b      	str	r3, [r7, #4]
}
 800b06c:	bf00      	nop
 800b06e:	bf00      	nop
 800b070:	e7fd      	b.n	800b06e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b072:	4b0a      	ldr	r3, [pc, #40]	@ (800b09c <vPortExitCritical+0x50>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3b01      	subs	r3, #1
 800b078:	4a08      	ldr	r2, [pc, #32]	@ (800b09c <vPortExitCritical+0x50>)
 800b07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b07c:	4b07      	ldr	r3, [pc, #28]	@ (800b09c <vPortExitCritical+0x50>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d105      	bne.n	800b090 <vPortExitCritical+0x44>
 800b084:	2300      	movs	r3, #0
 800b086:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b08e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	24000010 	.word	0x24000010

0800b0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b0a0:	f3ef 8009 	mrs	r0, PSP
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	4b15      	ldr	r3, [pc, #84]	@ (800b100 <pxCurrentTCBConst>)
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	f01e 0f10 	tst.w	lr, #16
 800b0b0:	bf08      	it	eq
 800b0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ba:	6010      	str	r0, [r2, #0]
 800b0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b0c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b0c4:	f380 8811 	msr	BASEPRI, r0
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f001 f960 	bl	800c394 <vTaskSwitchContext>
 800b0d4:	f04f 0000 	mov.w	r0, #0
 800b0d8:	f380 8811 	msr	BASEPRI, r0
 800b0dc:	bc09      	pop	{r0, r3}
 800b0de:	6819      	ldr	r1, [r3, #0]
 800b0e0:	6808      	ldr	r0, [r1, #0]
 800b0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e6:	f01e 0f10 	tst.w	lr, #16
 800b0ea:	bf08      	it	eq
 800b0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b0f0:	f380 8809 	msr	PSP, r0
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	f3af 8000 	nop.w

0800b100 <pxCurrentTCBConst>:
 800b100:	240049a8 	.word	0x240049a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b104:	bf00      	nop
 800b106:	bf00      	nop

0800b108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	607b      	str	r3, [r7, #4]
}
 800b120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b122:	f001 f87d 	bl	800c220 <xTaskIncrementTick>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b12c:	4b06      	ldr	r3, [pc, #24]	@ (800b148 <xPortSysTickHandler+0x40>)
 800b12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	2300      	movs	r3, #0
 800b136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	f383 8811 	msr	BASEPRI, r3
}
 800b13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b140:	bf00      	nop
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	e000ed04 	.word	0xe000ed04

0800b14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b14c:	b480      	push	{r7}
 800b14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b150:	4b0b      	ldr	r3, [pc, #44]	@ (800b180 <vPortSetupTimerInterrupt+0x34>)
 800b152:	2200      	movs	r2, #0
 800b154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b156:	4b0b      	ldr	r3, [pc, #44]	@ (800b184 <vPortSetupTimerInterrupt+0x38>)
 800b158:	2200      	movs	r2, #0
 800b15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b15c:	4b0a      	ldr	r3, [pc, #40]	@ (800b188 <vPortSetupTimerInterrupt+0x3c>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a0a      	ldr	r2, [pc, #40]	@ (800b18c <vPortSetupTimerInterrupt+0x40>)
 800b162:	fba2 2303 	umull	r2, r3, r2, r3
 800b166:	099b      	lsrs	r3, r3, #6
 800b168:	4a09      	ldr	r2, [pc, #36]	@ (800b190 <vPortSetupTimerInterrupt+0x44>)
 800b16a:	3b01      	subs	r3, #1
 800b16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b16e:	4b04      	ldr	r3, [pc, #16]	@ (800b180 <vPortSetupTimerInterrupt+0x34>)
 800b170:	2207      	movs	r2, #7
 800b172:	601a      	str	r2, [r3, #0]
}
 800b174:	bf00      	nop
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	e000e010 	.word	0xe000e010
 800b184:	e000e018 	.word	0xe000e018
 800b188:	24000000 	.word	0x24000000
 800b18c:	10624dd3 	.word	0x10624dd3
 800b190:	e000e014 	.word	0xe000e014

0800b194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b1a4 <vPortEnableVFP+0x10>
 800b198:	6801      	ldr	r1, [r0, #0]
 800b19a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b19e:	6001      	str	r1, [r0, #0]
 800b1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b1a2:	bf00      	nop
 800b1a4:	e000ed88 	.word	0xe000ed88

0800b1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b1ae:	f3ef 8305 	mrs	r3, IPSR
 800b1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b0f      	cmp	r3, #15
 800b1b8:	d915      	bls.n	800b1e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b1ba:	4a18      	ldr	r2, [pc, #96]	@ (800b21c <vPortValidateInterruptPriority+0x74>)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4413      	add	r3, r2
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b1c4:	4b16      	ldr	r3, [pc, #88]	@ (800b220 <vPortValidateInterruptPriority+0x78>)
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	7afa      	ldrb	r2, [r7, #11]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d20b      	bcs.n	800b1e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	607b      	str	r3, [r7, #4]
}
 800b1e0:	bf00      	nop
 800b1e2:	bf00      	nop
 800b1e4:	e7fd      	b.n	800b1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b224 <vPortValidateInterruptPriority+0x7c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b228 <vPortValidateInterruptPriority+0x80>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d90b      	bls.n	800b20e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	603b      	str	r3, [r7, #0]
}
 800b208:	bf00      	nop
 800b20a:	bf00      	nop
 800b20c:	e7fd      	b.n	800b20a <vPortValidateInterruptPriority+0x62>
	}
 800b20e:	bf00      	nop
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	e000e3f0 	.word	0xe000e3f0
 800b220:	24004960 	.word	0x24004960
 800b224:	e000ed0c 	.word	0xe000ed0c
 800b228:	24004964 	.word	0x24004964

0800b22c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10b      	bne.n	800b258 <xQueueGenericReset+0x2c>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	60bb      	str	r3, [r7, #8]
}
 800b252:	bf00      	nop
 800b254:	bf00      	nop
 800b256:	e7fd      	b.n	800b254 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b258:	f7ff fec6 	bl	800afe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b264:	68f9      	ldr	r1, [r7, #12]
 800b266:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b268:	fb01 f303 	mul.w	r3, r1, r3
 800b26c:	441a      	add	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b288:	3b01      	subs	r3, #1
 800b28a:	68f9      	ldr	r1, [r7, #12]
 800b28c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b28e:	fb01 f303 	mul.w	r3, r1, r3
 800b292:	441a      	add	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	22ff      	movs	r2, #255	@ 0xff
 800b29c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	22ff      	movs	r2, #255	@ 0xff
 800b2a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d114      	bne.n	800b2d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d01a      	beq.n	800b2ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	3310      	adds	r3, #16
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f001 f91a 	bl	800c4f4 <xTaskRemoveFromEventList>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d012      	beq.n	800b2ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b2fc <xQueueGenericReset+0xd0>)
 800b2c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	e009      	b.n	800b2ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3310      	adds	r3, #16
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7ff fc9b 	bl	800ac18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3324      	adds	r3, #36	@ 0x24
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7ff fc96 	bl	800ac18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b2ec:	f7ff feae 	bl	800b04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b2f0:	2301      	movs	r3, #1
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	e000ed04 	.word	0xe000ed04

0800b300 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08e      	sub	sp, #56	@ 0x38
 800b304:	af02      	add	r7, sp, #8
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10b      	bne.n	800b32c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b326:	bf00      	nop
 800b328:	bf00      	nop
 800b32a:	e7fd      	b.n	800b328 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10b      	bne.n	800b34a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b344:	bf00      	nop
 800b346:	bf00      	nop
 800b348:	e7fd      	b.n	800b346 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <xQueueGenericCreateStatic+0x56>
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <xQueueGenericCreateStatic+0x5a>
 800b356:	2301      	movs	r3, #1
 800b358:	e000      	b.n	800b35c <xQueueGenericCreateStatic+0x5c>
 800b35a:	2300      	movs	r3, #0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10b      	bne.n	800b378 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	623b      	str	r3, [r7, #32]
}
 800b372:	bf00      	nop
 800b374:	bf00      	nop
 800b376:	e7fd      	b.n	800b374 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d102      	bne.n	800b384 <xQueueGenericCreateStatic+0x84>
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <xQueueGenericCreateStatic+0x88>
 800b384:	2301      	movs	r3, #1
 800b386:	e000      	b.n	800b38a <xQueueGenericCreateStatic+0x8a>
 800b388:	2300      	movs	r3, #0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10b      	bne.n	800b3a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	61fb      	str	r3, [r7, #28]
}
 800b3a0:	bf00      	nop
 800b3a2:	bf00      	nop
 800b3a4:	e7fd      	b.n	800b3a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b3a6:	2350      	movs	r3, #80	@ 0x50
 800b3a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2b50      	cmp	r3, #80	@ 0x50
 800b3ae:	d00b      	beq.n	800b3c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	61bb      	str	r3, [r7, #24]
}
 800b3c2:	bf00      	nop
 800b3c4:	bf00      	nop
 800b3c6:	e7fd      	b.n	800b3c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b3c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00d      	beq.n	800b3f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b3dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	68b9      	ldr	r1, [r7, #8]
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f000 f805 	bl	800b3fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3730      	adds	r7, #48	@ 0x30
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b084      	sub	sp, #16
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	60b9      	str	r1, [r7, #8]
 800b404:	607a      	str	r2, [r7, #4]
 800b406:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d103      	bne.n	800b416 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	69ba      	ldr	r2, [r7, #24]
 800b412:	601a      	str	r2, [r3, #0]
 800b414:	e002      	b.n	800b41c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b428:	2101      	movs	r1, #1
 800b42a:	69b8      	ldr	r0, [r7, #24]
 800b42c:	f7ff fefe 	bl	800b22c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	78fa      	ldrb	r2, [r7, #3]
 800b434:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b438:	bf00      	nop
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08e      	sub	sp, #56	@ 0x38
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b44e:	2300      	movs	r3, #0
 800b450:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10b      	bne.n	800b474 <xQueueGenericSend+0x34>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b46e:	bf00      	nop
 800b470:	bf00      	nop
 800b472:	e7fd      	b.n	800b470 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d103      	bne.n	800b482 <xQueueGenericSend+0x42>
 800b47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <xQueueGenericSend+0x46>
 800b482:	2301      	movs	r3, #1
 800b484:	e000      	b.n	800b488 <xQueueGenericSend+0x48>
 800b486:	2300      	movs	r3, #0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10b      	bne.n	800b4a4 <xQueueGenericSend+0x64>
	__asm volatile
 800b48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b490:	f383 8811 	msr	BASEPRI, r3
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b49e:	bf00      	nop
 800b4a0:	bf00      	nop
 800b4a2:	e7fd      	b.n	800b4a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d103      	bne.n	800b4b2 <xQueueGenericSend+0x72>
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d101      	bne.n	800b4b6 <xQueueGenericSend+0x76>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e000      	b.n	800b4b8 <xQueueGenericSend+0x78>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10b      	bne.n	800b4d4 <xQueueGenericSend+0x94>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	623b      	str	r3, [r7, #32]
}
 800b4ce:	bf00      	nop
 800b4d0:	bf00      	nop
 800b4d2:	e7fd      	b.n	800b4d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4d4:	f001 f9ce 	bl	800c874 <xTaskGetSchedulerState>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d102      	bne.n	800b4e4 <xQueueGenericSend+0xa4>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <xQueueGenericSend+0xa8>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e000      	b.n	800b4ea <xQueueGenericSend+0xaa>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10b      	bne.n	800b506 <xQueueGenericSend+0xc6>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	61fb      	str	r3, [r7, #28]
}
 800b500:	bf00      	nop
 800b502:	bf00      	nop
 800b504:	e7fd      	b.n	800b502 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b506:	f7ff fd6f 	bl	800afe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b512:	429a      	cmp	r2, r3
 800b514:	d302      	bcc.n	800b51c <xQueueGenericSend+0xdc>
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d129      	bne.n	800b570 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b51c:	683a      	ldr	r2, [r7, #0]
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b522:	f000 fa0f 	bl	800b944 <prvCopyDataToQueue>
 800b526:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d010      	beq.n	800b552 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b532:	3324      	adds	r3, #36	@ 0x24
 800b534:	4618      	mov	r0, r3
 800b536:	f000 ffdd 	bl	800c4f4 <xTaskRemoveFromEventList>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d013      	beq.n	800b568 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b540:	4b3f      	ldr	r3, [pc, #252]	@ (800b640 <xQueueGenericSend+0x200>)
 800b542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	e00a      	b.n	800b568 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b554:	2b00      	cmp	r3, #0
 800b556:	d007      	beq.n	800b568 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b558:	4b39      	ldr	r3, [pc, #228]	@ (800b640 <xQueueGenericSend+0x200>)
 800b55a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b568:	f7ff fd70 	bl	800b04c <vPortExitCritical>
				return pdPASS;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e063      	b.n	800b638 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d103      	bne.n	800b57e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b576:	f7ff fd69 	bl	800b04c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b57a:	2300      	movs	r3, #0
 800b57c:	e05c      	b.n	800b638 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b580:	2b00      	cmp	r3, #0
 800b582:	d106      	bne.n	800b592 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b584:	f107 0314 	add.w	r3, r7, #20
 800b588:	4618      	mov	r0, r3
 800b58a:	f001 f817 	bl	800c5bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b58e:	2301      	movs	r3, #1
 800b590:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b592:	f7ff fd5b 	bl	800b04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b596:	f000 fd87 	bl	800c0a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b59a:	f7ff fd25 	bl	800afe8 <vPortEnterCritical>
 800b59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b5a4:	b25b      	sxtb	r3, r3
 800b5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5aa:	d103      	bne.n	800b5b4 <xQueueGenericSend+0x174>
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b5ba:	b25b      	sxtb	r3, r3
 800b5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c0:	d103      	bne.n	800b5ca <xQueueGenericSend+0x18a>
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b5ca:	f7ff fd3f 	bl	800b04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5ce:	1d3a      	adds	r2, r7, #4
 800b5d0:	f107 0314 	add.w	r3, r7, #20
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f001 f806 	bl	800c5e8 <xTaskCheckForTimeOut>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d124      	bne.n	800b62c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b5e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5e4:	f000 faa6 	bl	800bb34 <prvIsQueueFull>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d018      	beq.n	800b620 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f0:	3310      	adds	r3, #16
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 ff2a 	bl	800c450 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b5fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5fe:	f000 fa31 	bl	800ba64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b602:	f000 fd5f 	bl	800c0c4 <xTaskResumeAll>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f47f af7c 	bne.w	800b506 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b60e:	4b0c      	ldr	r3, [pc, #48]	@ (800b640 <xQueueGenericSend+0x200>)
 800b610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	e772      	b.n	800b506 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b622:	f000 fa1f 	bl	800ba64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b626:	f000 fd4d 	bl	800c0c4 <xTaskResumeAll>
 800b62a:	e76c      	b.n	800b506 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b62c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b62e:	f000 fa19 	bl	800ba64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b632:	f000 fd47 	bl	800c0c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b636:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3738      	adds	r7, #56	@ 0x38
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	e000ed04 	.word	0xe000ed04

0800b644 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b090      	sub	sp, #64	@ 0x40
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10b      	bne.n	800b674 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
 800b672:	e7fd      	b.n	800b670 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d103      	bne.n	800b682 <xQueueGenericSendFromISR+0x3e>
 800b67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d101      	bne.n	800b686 <xQueueGenericSendFromISR+0x42>
 800b682:	2301      	movs	r3, #1
 800b684:	e000      	b.n	800b688 <xQueueGenericSendFromISR+0x44>
 800b686:	2300      	movs	r3, #0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10b      	bne.n	800b6a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b69e:	bf00      	nop
 800b6a0:	bf00      	nop
 800b6a2:	e7fd      	b.n	800b6a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d103      	bne.n	800b6b2 <xQueueGenericSendFromISR+0x6e>
 800b6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d101      	bne.n	800b6b6 <xQueueGenericSendFromISR+0x72>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e000      	b.n	800b6b8 <xQueueGenericSendFromISR+0x74>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10b      	bne.n	800b6d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	623b      	str	r3, [r7, #32]
}
 800b6ce:	bf00      	nop
 800b6d0:	bf00      	nop
 800b6d2:	e7fd      	b.n	800b6d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6d4:	f7ff fd68 	bl	800b1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800b6d8:	f3ef 8211 	mrs	r2, BASEPRI
 800b6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	61fa      	str	r2, [r7, #28]
 800b6ee:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b6f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d302      	bcc.n	800b706 <xQueueGenericSendFromISR+0xc2>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b02      	cmp	r3, #2
 800b704:	d12f      	bne.n	800b766 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b708:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b70c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b714:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	68b9      	ldr	r1, [r7, #8]
 800b71a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b71c:	f000 f912 	bl	800b944 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b720:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b728:	d112      	bne.n	800b750 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d016      	beq.n	800b760 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b734:	3324      	adds	r3, #36	@ 0x24
 800b736:	4618      	mov	r0, r3
 800b738:	f000 fedc 	bl	800c4f4 <xTaskRemoveFromEventList>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00e      	beq.n	800b760 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00b      	beq.n	800b760 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	e007      	b.n	800b760 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b750:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b754:	3301      	adds	r3, #1
 800b756:	b2db      	uxtb	r3, r3
 800b758:	b25a      	sxtb	r2, r3
 800b75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b760:	2301      	movs	r3, #1
 800b762:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b764:	e001      	b.n	800b76a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b766:	2300      	movs	r3, #0
 800b768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b76c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f383 8811 	msr	BASEPRI, r3
}
 800b774:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3740      	adds	r7, #64	@ 0x40
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08c      	sub	sp, #48	@ 0x30
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b78c:	2300      	movs	r3, #0
 800b78e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10b      	bne.n	800b7b2 <xQueueReceive+0x32>
	__asm volatile
 800b79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	623b      	str	r3, [r7, #32]
}
 800b7ac:	bf00      	nop
 800b7ae:	bf00      	nop
 800b7b0:	e7fd      	b.n	800b7ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d103      	bne.n	800b7c0 <xQueueReceive+0x40>
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <xQueueReceive+0x44>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e000      	b.n	800b7c6 <xQueueReceive+0x46>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10b      	bne.n	800b7e2 <xQueueReceive+0x62>
	__asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	61fb      	str	r3, [r7, #28]
}
 800b7dc:	bf00      	nop
 800b7de:	bf00      	nop
 800b7e0:	e7fd      	b.n	800b7de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7e2:	f001 f847 	bl	800c874 <xTaskGetSchedulerState>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d102      	bne.n	800b7f2 <xQueueReceive+0x72>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <xQueueReceive+0x76>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <xQueueReceive+0x78>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10b      	bne.n	800b814 <xQueueReceive+0x94>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	61bb      	str	r3, [r7, #24]
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	e7fd      	b.n	800b810 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b814:	f7ff fbe8 	bl	800afe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b820:	2b00      	cmp	r3, #0
 800b822:	d01f      	beq.n	800b864 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b824:	68b9      	ldr	r1, [r7, #8]
 800b826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b828:	f000 f8f6 	bl	800ba18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82e:	1e5a      	subs	r2, r3, #1
 800b830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b832:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00f      	beq.n	800b85c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83e:	3310      	adds	r3, #16
 800b840:	4618      	mov	r0, r3
 800b842:	f000 fe57 	bl	800c4f4 <xTaskRemoveFromEventList>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d007      	beq.n	800b85c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b84c:	4b3c      	ldr	r3, [pc, #240]	@ (800b940 <xQueueReceive+0x1c0>)
 800b84e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b85c:	f7ff fbf6 	bl	800b04c <vPortExitCritical>
				return pdPASS;
 800b860:	2301      	movs	r3, #1
 800b862:	e069      	b.n	800b938 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d103      	bne.n	800b872 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b86a:	f7ff fbef 	bl	800b04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b86e:	2300      	movs	r3, #0
 800b870:	e062      	b.n	800b938 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b874:	2b00      	cmp	r3, #0
 800b876:	d106      	bne.n	800b886 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b878:	f107 0310 	add.w	r3, r7, #16
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 fe9d 	bl	800c5bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b882:	2301      	movs	r3, #1
 800b884:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b886:	f7ff fbe1 	bl	800b04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b88a:	f000 fc0d 	bl	800c0a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b88e:	f7ff fbab 	bl	800afe8 <vPortEnterCritical>
 800b892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b898:	b25b      	sxtb	r3, r3
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89e:	d103      	bne.n	800b8a8 <xQueueReceive+0x128>
 800b8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8ae:	b25b      	sxtb	r3, r3
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b4:	d103      	bne.n	800b8be <xQueueReceive+0x13e>
 800b8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8be:	f7ff fbc5 	bl	800b04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8c2:	1d3a      	adds	r2, r7, #4
 800b8c4:	f107 0310 	add.w	r3, r7, #16
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 fe8c 	bl	800c5e8 <xTaskCheckForTimeOut>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d123      	bne.n	800b91e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8d8:	f000 f916 	bl	800bb08 <prvIsQueueEmpty>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d017      	beq.n	800b912 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e4:	3324      	adds	r3, #36	@ 0x24
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 fdb0 	bl	800c450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8f2:	f000 f8b7 	bl	800ba64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8f6:	f000 fbe5 	bl	800c0c4 <xTaskResumeAll>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d189      	bne.n	800b814 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b900:	4b0f      	ldr	r3, [pc, #60]	@ (800b940 <xQueueReceive+0x1c0>)
 800b902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	e780      	b.n	800b814 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b914:	f000 f8a6 	bl	800ba64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b918:	f000 fbd4 	bl	800c0c4 <xTaskResumeAll>
 800b91c:	e77a      	b.n	800b814 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b91e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b920:	f000 f8a0 	bl	800ba64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b924:	f000 fbce 	bl	800c0c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b928:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b92a:	f000 f8ed 	bl	800bb08 <prvIsQueueEmpty>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	f43f af6f 	beq.w	800b814 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b936:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3730      	adds	r7, #48	@ 0x30
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	e000ed04 	.word	0xe000ed04

0800b944 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b950:	2300      	movs	r3, #0
 800b952:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b958:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10d      	bne.n	800b97e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d14d      	bne.n	800ba06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 ff9e 	bl	800c8b0 <xTaskPriorityDisinherit>
 800b974:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	609a      	str	r2, [r3, #8]
 800b97c:	e043      	b.n	800ba06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d119      	bne.n	800b9b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6858      	ldr	r0, [r3, #4]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b98c:	461a      	mov	r2, r3
 800b98e:	68b9      	ldr	r1, [r7, #8]
 800b990:	f002 fb53 	bl	800e03a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b99c:	441a      	add	r2, r3
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d32b      	bcc.n	800ba06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	605a      	str	r2, [r3, #4]
 800b9b6:	e026      	b.n	800ba06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	68d8      	ldr	r0, [r3, #12]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	68b9      	ldr	r1, [r7, #8]
 800b9c4:	f002 fb39 	bl	800e03a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	68da      	ldr	r2, [r3, #12]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d0:	425b      	negs	r3, r3
 800b9d2:	441a      	add	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	68da      	ldr	r2, [r3, #12]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d207      	bcs.n	800b9f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	689a      	ldr	r2, [r3, #8]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ec:	425b      	negs	r3, r3
 800b9ee:	441a      	add	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d105      	bne.n	800ba06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	3b01      	subs	r3, #1
 800ba04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	1c5a      	adds	r2, r3, #1
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ba0e:	697b      	ldr	r3, [r7, #20]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3718      	adds	r7, #24
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d018      	beq.n	800ba5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68da      	ldr	r2, [r3, #12]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba32:	441a      	add	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	68da      	ldr	r2, [r3, #12]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d303      	bcc.n	800ba4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68d9      	ldr	r1, [r3, #12]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba54:	461a      	mov	r2, r3
 800ba56:	6838      	ldr	r0, [r7, #0]
 800ba58:	f002 faef 	bl	800e03a <memcpy>
	}
}
 800ba5c:	bf00      	nop
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ba6c:	f7ff fabc 	bl	800afe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba78:	e011      	b.n	800ba9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d012      	beq.n	800baa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	3324      	adds	r3, #36	@ 0x24
 800ba86:	4618      	mov	r0, r3
 800ba88:	f000 fd34 	bl	800c4f4 <xTaskRemoveFromEventList>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d001      	beq.n	800ba96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba92:	f000 fe0d 	bl	800c6b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	dce9      	bgt.n	800ba7a <prvUnlockQueue+0x16>
 800baa6:	e000      	b.n	800baaa <prvUnlockQueue+0x46>
					break;
 800baa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	22ff      	movs	r2, #255	@ 0xff
 800baae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bab2:	f7ff facb 	bl	800b04c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bab6:	f7ff fa97 	bl	800afe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bac0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bac2:	e011      	b.n	800bae8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d012      	beq.n	800baf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3310      	adds	r3, #16
 800bad0:	4618      	mov	r0, r3
 800bad2:	f000 fd0f 	bl	800c4f4 <xTaskRemoveFromEventList>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800badc:	f000 fde8 	bl	800c6b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	3b01      	subs	r3, #1
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baec:	2b00      	cmp	r3, #0
 800baee:	dce9      	bgt.n	800bac4 <prvUnlockQueue+0x60>
 800baf0:	e000      	b.n	800baf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800baf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	22ff      	movs	r2, #255	@ 0xff
 800baf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bafc:	f7ff faa6 	bl	800b04c <vPortExitCritical>
}
 800bb00:	bf00      	nop
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb10:	f7ff fa6a 	bl	800afe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d102      	bne.n	800bb22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	60fb      	str	r3, [r7, #12]
 800bb20:	e001      	b.n	800bb26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bb22:	2300      	movs	r3, #0
 800bb24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb26:	f7ff fa91 	bl	800b04c <vPortExitCritical>

	return xReturn;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb3c:	f7ff fa54 	bl	800afe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d102      	bne.n	800bb52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	e001      	b.n	800bb56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb52:	2300      	movs	r3, #0
 800bb54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb56:	f7ff fa79 	bl	800b04c <vPortExitCritical>

	return xReturn;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb6e:	2300      	movs	r3, #0
 800bb70:	60fb      	str	r3, [r7, #12]
 800bb72:	e014      	b.n	800bb9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bb74:	4a0f      	ldr	r2, [pc, #60]	@ (800bbb4 <vQueueAddToRegistry+0x50>)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10b      	bne.n	800bb98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bb80:	490c      	ldr	r1, [pc, #48]	@ (800bbb4 <vQueueAddToRegistry+0x50>)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	683a      	ldr	r2, [r7, #0]
 800bb86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bb8a:	4a0a      	ldr	r2, [pc, #40]	@ (800bbb4 <vQueueAddToRegistry+0x50>)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	00db      	lsls	r3, r3, #3
 800bb90:	4413      	add	r3, r2
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bb96:	e006      	b.n	800bba6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2b07      	cmp	r3, #7
 800bba2:	d9e7      	bls.n	800bb74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bba4:	bf00      	nop
 800bba6:	bf00      	nop
 800bba8:	3714      	adds	r7, #20
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	24004968 	.word	0x24004968

0800bbb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bbc8:	f7ff fa0e 	bl	800afe8 <vPortEnterCritical>
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbd2:	b25b      	sxtb	r3, r3
 800bbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd8:	d103      	bne.n	800bbe2 <vQueueWaitForMessageRestricted+0x2a>
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbe8:	b25b      	sxtb	r3, r3
 800bbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbee:	d103      	bne.n	800bbf8 <vQueueWaitForMessageRestricted+0x40>
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bbf8:	f7ff fa28 	bl	800b04c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d106      	bne.n	800bc12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	3324      	adds	r3, #36	@ 0x24
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	68b9      	ldr	r1, [r7, #8]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 fc45 	bl	800c49c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bc12:	6978      	ldr	r0, [r7, #20]
 800bc14:	f7ff ff26 	bl	800ba64 <prvUnlockQueue>
	}
 800bc18:	bf00      	nop
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08e      	sub	sp, #56	@ 0x38
 800bc24:	af04      	add	r7, sp, #16
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
 800bc2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10b      	bne.n	800bc4c <xTaskCreateStatic+0x2c>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	623b      	str	r3, [r7, #32]
}
 800bc46:	bf00      	nop
 800bc48:	bf00      	nop
 800bc4a:	e7fd      	b.n	800bc48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10b      	bne.n	800bc6a <xTaskCreateStatic+0x4a>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	61fb      	str	r3, [r7, #28]
}
 800bc64:	bf00      	nop
 800bc66:	bf00      	nop
 800bc68:	e7fd      	b.n	800bc66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc6a:	235c      	movs	r3, #92	@ 0x5c
 800bc6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc72:	d00b      	beq.n	800bc8c <xTaskCreateStatic+0x6c>
	__asm volatile
 800bc74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	61bb      	str	r3, [r7, #24]
}
 800bc86:	bf00      	nop
 800bc88:	bf00      	nop
 800bc8a:	e7fd      	b.n	800bc88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d01e      	beq.n	800bcd2 <xTaskCreateStatic+0xb2>
 800bc94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d01b      	beq.n	800bcd2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bca2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca6:	2202      	movs	r2, #2
 800bca8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcac:	2300      	movs	r3, #0
 800bcae:	9303      	str	r3, [sp, #12]
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb2:	9302      	str	r3, [sp, #8]
 800bcb4:	f107 0314 	add.w	r3, r7, #20
 800bcb8:	9301      	str	r3, [sp, #4]
 800bcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	68b9      	ldr	r1, [r7, #8]
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f000 f850 	bl	800bd6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bccc:	f000 f8de 	bl	800be8c <prvAddNewTaskToReadyList>
 800bcd0:	e001      	b.n	800bcd6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bcd6:	697b      	ldr	r3, [r7, #20]
	}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3728      	adds	r7, #40	@ 0x28
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b08c      	sub	sp, #48	@ 0x30
 800bce4:	af04      	add	r7, sp, #16
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	603b      	str	r3, [r7, #0]
 800bcec:	4613      	mov	r3, r2
 800bcee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bcf0:	88fb      	ldrh	r3, [r7, #6]
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fe fda1 	bl	800a83c <pvPortMalloc>
 800bcfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00e      	beq.n	800bd20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd02:	205c      	movs	r0, #92	@ 0x5c
 800bd04:	f7fe fd9a 	bl	800a83c <pvPortMalloc>
 800bd08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd16:	e005      	b.n	800bd24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd18:	6978      	ldr	r0, [r7, #20]
 800bd1a:	f7fe fe5d 	bl	800a9d8 <vPortFree>
 800bd1e:	e001      	b.n	800bd24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd20:	2300      	movs	r3, #0
 800bd22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d017      	beq.n	800bd5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd32:	88fa      	ldrh	r2, [r7, #6]
 800bd34:	2300      	movs	r3, #0
 800bd36:	9303      	str	r3, [sp, #12]
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	9302      	str	r3, [sp, #8]
 800bd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3e:	9301      	str	r3, [sp, #4]
 800bd40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	68b9      	ldr	r1, [r7, #8]
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f000 f80e 	bl	800bd6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd4e:	69f8      	ldr	r0, [r7, #28]
 800bd50:	f000 f89c 	bl	800be8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd54:	2301      	movs	r3, #1
 800bd56:	61bb      	str	r3, [r7, #24]
 800bd58:	e002      	b.n	800bd60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd60:	69bb      	ldr	r3, [r7, #24]
	}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3720      	adds	r7, #32
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b088      	sub	sp, #32
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	60f8      	str	r0, [r7, #12]
 800bd72:	60b9      	str	r1, [r7, #8]
 800bd74:	607a      	str	r2, [r7, #4]
 800bd76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	461a      	mov	r2, r3
 800bd82:	21a5      	movs	r1, #165	@ 0xa5
 800bd84:	f002 f8da 	bl	800df3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd8c:	6879      	ldr	r1, [r7, #4]
 800bd8e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800bd92:	440b      	add	r3, r1
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	f023 0307 	bic.w	r3, r3, #7
 800bda0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	f003 0307 	and.w	r3, r3, #7
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00b      	beq.n	800bdc4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	617b      	str	r3, [r7, #20]
}
 800bdbe:	bf00      	nop
 800bdc0:	bf00      	nop
 800bdc2:	e7fd      	b.n	800bdc0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d01f      	beq.n	800be0a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdca:	2300      	movs	r3, #0
 800bdcc:	61fb      	str	r3, [r7, #28]
 800bdce:	e012      	b.n	800bdf6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	7819      	ldrb	r1, [r3, #0]
 800bdd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdda:	69fb      	ldr	r3, [r7, #28]
 800bddc:	4413      	add	r3, r2
 800bdde:	3334      	adds	r3, #52	@ 0x34
 800bde0:	460a      	mov	r2, r1
 800bde2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	4413      	add	r3, r2
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d006      	beq.n	800bdfe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	61fb      	str	r3, [r7, #28]
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	2b0f      	cmp	r3, #15
 800bdfa:	d9e9      	bls.n	800bdd0 <prvInitialiseNewTask+0x66>
 800bdfc:	e000      	b.n	800be00 <prvInitialiseNewTask+0x96>
			{
				break;
 800bdfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be02:	2200      	movs	r2, #0
 800be04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be08:	e003      	b.n	800be12 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be14:	2b37      	cmp	r3, #55	@ 0x37
 800be16:	d901      	bls.n	800be1c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be18:	2337      	movs	r3, #55	@ 0x37
 800be1a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be20:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be26:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800be28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2a:	2200      	movs	r2, #0
 800be2c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be30:	3304      	adds	r3, #4
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe ff10 	bl	800ac58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be3a:	3318      	adds	r3, #24
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7fe ff0b 	bl	800ac58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be56:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5a:	2200      	movs	r2, #0
 800be5c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be60:	2200      	movs	r2, #0
 800be62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	68f9      	ldr	r1, [r7, #12]
 800be6a:	69b8      	ldr	r0, [r7, #24]
 800be6c:	f7fe ff88 	bl	800ad80 <pxPortInitialiseStack>
 800be70:	4602      	mov	r2, r0
 800be72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be82:	bf00      	nop
 800be84:	3720      	adds	r7, #32
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
	...

0800be8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be94:	f7ff f8a8 	bl	800afe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be98:	4b2d      	ldr	r3, [pc, #180]	@ (800bf50 <prvAddNewTaskToReadyList+0xc4>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3301      	adds	r3, #1
 800be9e:	4a2c      	ldr	r2, [pc, #176]	@ (800bf50 <prvAddNewTaskToReadyList+0xc4>)
 800bea0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bea2:	4b2c      	ldr	r3, [pc, #176]	@ (800bf54 <prvAddNewTaskToReadyList+0xc8>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d109      	bne.n	800bebe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800beaa:	4a2a      	ldr	r2, [pc, #168]	@ (800bf54 <prvAddNewTaskToReadyList+0xc8>)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800beb0:	4b27      	ldr	r3, [pc, #156]	@ (800bf50 <prvAddNewTaskToReadyList+0xc4>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d110      	bne.n	800beda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800beb8:	f000 fc1e 	bl	800c6f8 <prvInitialiseTaskLists>
 800bebc:	e00d      	b.n	800beda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bebe:	4b26      	ldr	r3, [pc, #152]	@ (800bf58 <prvAddNewTaskToReadyList+0xcc>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d109      	bne.n	800beda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bec6:	4b23      	ldr	r3, [pc, #140]	@ (800bf54 <prvAddNewTaskToReadyList+0xc8>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d802      	bhi.n	800beda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bed4:	4a1f      	ldr	r2, [pc, #124]	@ (800bf54 <prvAddNewTaskToReadyList+0xc8>)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800beda:	4b20      	ldr	r3, [pc, #128]	@ (800bf5c <prvAddNewTaskToReadyList+0xd0>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	3301      	adds	r3, #1
 800bee0:	4a1e      	ldr	r2, [pc, #120]	@ (800bf5c <prvAddNewTaskToReadyList+0xd0>)
 800bee2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bee4:	4b1d      	ldr	r3, [pc, #116]	@ (800bf5c <prvAddNewTaskToReadyList+0xd0>)
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef0:	4b1b      	ldr	r3, [pc, #108]	@ (800bf60 <prvAddNewTaskToReadyList+0xd4>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d903      	bls.n	800bf00 <prvAddNewTaskToReadyList+0x74>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800befc:	4a18      	ldr	r2, [pc, #96]	@ (800bf60 <prvAddNewTaskToReadyList+0xd4>)
 800befe:	6013      	str	r3, [r2, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf04:	4613      	mov	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	4413      	add	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4a15      	ldr	r2, [pc, #84]	@ (800bf64 <prvAddNewTaskToReadyList+0xd8>)
 800bf0e:	441a      	add	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	3304      	adds	r3, #4
 800bf14:	4619      	mov	r1, r3
 800bf16:	4610      	mov	r0, r2
 800bf18:	f7fe feab 	bl	800ac72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf1c:	f7ff f896 	bl	800b04c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf20:	4b0d      	ldr	r3, [pc, #52]	@ (800bf58 <prvAddNewTaskToReadyList+0xcc>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00e      	beq.n	800bf46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf28:	4b0a      	ldr	r3, [pc, #40]	@ (800bf54 <prvAddNewTaskToReadyList+0xc8>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d207      	bcs.n	800bf46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf36:	4b0c      	ldr	r3, [pc, #48]	@ (800bf68 <prvAddNewTaskToReadyList+0xdc>)
 800bf38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf3c:	601a      	str	r2, [r3, #0]
 800bf3e:	f3bf 8f4f 	dsb	sy
 800bf42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf46:	bf00      	nop
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	24004e7c 	.word	0x24004e7c
 800bf54:	240049a8 	.word	0x240049a8
 800bf58:	24004e88 	.word	0x24004e88
 800bf5c:	24004e98 	.word	0x24004e98
 800bf60:	24004e84 	.word	0x24004e84
 800bf64:	240049ac 	.word	0x240049ac
 800bf68:	e000ed04 	.word	0xe000ed04

0800bf6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bf74:	2300      	movs	r3, #0
 800bf76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d018      	beq.n	800bfb0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bf7e:	4b14      	ldr	r3, [pc, #80]	@ (800bfd0 <vTaskDelay+0x64>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00b      	beq.n	800bf9e <vTaskDelay+0x32>
	__asm volatile
 800bf86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8a:	f383 8811 	msr	BASEPRI, r3
 800bf8e:	f3bf 8f6f 	isb	sy
 800bf92:	f3bf 8f4f 	dsb	sy
 800bf96:	60bb      	str	r3, [r7, #8]
}
 800bf98:	bf00      	nop
 800bf9a:	bf00      	nop
 800bf9c:	e7fd      	b.n	800bf9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bf9e:	f000 f883 	bl	800c0a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fcf3 	bl	800c990 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bfaa:	f000 f88b 	bl	800c0c4 <xTaskResumeAll>
 800bfae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d107      	bne.n	800bfc6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bfb6:	4b07      	ldr	r3, [pc, #28]	@ (800bfd4 <vTaskDelay+0x68>)
 800bfb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfbc:	601a      	str	r2, [r3, #0]
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfc6:	bf00      	nop
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	24004ea4 	.word	0x24004ea4
 800bfd4:	e000ed04 	.word	0xe000ed04

0800bfd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08a      	sub	sp, #40	@ 0x28
 800bfdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bfe6:	463a      	mov	r2, r7
 800bfe8:	1d39      	adds	r1, r7, #4
 800bfea:	f107 0308 	add.w	r3, r7, #8
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fe fbf0 	bl	800a7d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	9202      	str	r2, [sp, #8]
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	2300      	movs	r3, #0
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	2300      	movs	r3, #0
 800c004:	460a      	mov	r2, r1
 800c006:	4922      	ldr	r1, [pc, #136]	@ (800c090 <vTaskStartScheduler+0xb8>)
 800c008:	4822      	ldr	r0, [pc, #136]	@ (800c094 <vTaskStartScheduler+0xbc>)
 800c00a:	f7ff fe09 	bl	800bc20 <xTaskCreateStatic>
 800c00e:	4603      	mov	r3, r0
 800c010:	4a21      	ldr	r2, [pc, #132]	@ (800c098 <vTaskStartScheduler+0xc0>)
 800c012:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c014:	4b20      	ldr	r3, [pc, #128]	@ (800c098 <vTaskStartScheduler+0xc0>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c01c:	2301      	movs	r3, #1
 800c01e:	617b      	str	r3, [r7, #20]
 800c020:	e001      	b.n	800c026 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c022:	2300      	movs	r3, #0
 800c024:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d102      	bne.n	800c032 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c02c:	f000 fd04 	bl	800ca38 <xTimerCreateTimerTask>
 800c030:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d116      	bne.n	800c066 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03c:	f383 8811 	msr	BASEPRI, r3
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	f3bf 8f4f 	dsb	sy
 800c048:	613b      	str	r3, [r7, #16]
}
 800c04a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c04c:	4b13      	ldr	r3, [pc, #76]	@ (800c09c <vTaskStartScheduler+0xc4>)
 800c04e:	f04f 32ff 	mov.w	r2, #4294967295
 800c052:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c054:	4b12      	ldr	r3, [pc, #72]	@ (800c0a0 <vTaskStartScheduler+0xc8>)
 800c056:	2201      	movs	r2, #1
 800c058:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c05a:	4b12      	ldr	r3, [pc, #72]	@ (800c0a4 <vTaskStartScheduler+0xcc>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c060:	f7fe ff1e 	bl	800aea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c064:	e00f      	b.n	800c086 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06c:	d10b      	bne.n	800c086 <vTaskStartScheduler+0xae>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	60fb      	str	r3, [r7, #12]
}
 800c080:	bf00      	nop
 800c082:	bf00      	nop
 800c084:	e7fd      	b.n	800c082 <vTaskStartScheduler+0xaa>
}
 800c086:	bf00      	nop
 800c088:	3718      	adds	r7, #24
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	0800fc10 	.word	0x0800fc10
 800c094:	0800c6c9 	.word	0x0800c6c9
 800c098:	24004ea0 	.word	0x24004ea0
 800c09c:	24004e9c 	.word	0x24004e9c
 800c0a0:	24004e88 	.word	0x24004e88
 800c0a4:	24004e80 	.word	0x24004e80

0800c0a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c0ac:	4b04      	ldr	r3, [pc, #16]	@ (800c0c0 <vTaskSuspendAll+0x18>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	4a03      	ldr	r2, [pc, #12]	@ (800c0c0 <vTaskSuspendAll+0x18>)
 800c0b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c0b6:	bf00      	nop
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	24004ea4 	.word	0x24004ea4

0800c0c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c0d2:	4b42      	ldr	r3, [pc, #264]	@ (800c1dc <xTaskResumeAll+0x118>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10b      	bne.n	800c0f2 <xTaskResumeAll+0x2e>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	603b      	str	r3, [r7, #0]
}
 800c0ec:	bf00      	nop
 800c0ee:	bf00      	nop
 800c0f0:	e7fd      	b.n	800c0ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c0f2:	f7fe ff79 	bl	800afe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c0f6:	4b39      	ldr	r3, [pc, #228]	@ (800c1dc <xTaskResumeAll+0x118>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	4a37      	ldr	r2, [pc, #220]	@ (800c1dc <xTaskResumeAll+0x118>)
 800c0fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c100:	4b36      	ldr	r3, [pc, #216]	@ (800c1dc <xTaskResumeAll+0x118>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d162      	bne.n	800c1ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c108:	4b35      	ldr	r3, [pc, #212]	@ (800c1e0 <xTaskResumeAll+0x11c>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d05e      	beq.n	800c1ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c110:	e02f      	b.n	800c172 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c112:	4b34      	ldr	r3, [pc, #208]	@ (800c1e4 <xTaskResumeAll+0x120>)
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	3318      	adds	r3, #24
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe fe04 	bl	800ad2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	3304      	adds	r3, #4
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fe fdff 	bl	800ad2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c132:	4b2d      	ldr	r3, [pc, #180]	@ (800c1e8 <xTaskResumeAll+0x124>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	d903      	bls.n	800c142 <xTaskResumeAll+0x7e>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c13e:	4a2a      	ldr	r2, [pc, #168]	@ (800c1e8 <xTaskResumeAll+0x124>)
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c146:	4613      	mov	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4413      	add	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4a27      	ldr	r2, [pc, #156]	@ (800c1ec <xTaskResumeAll+0x128>)
 800c150:	441a      	add	r2, r3
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	3304      	adds	r3, #4
 800c156:	4619      	mov	r1, r3
 800c158:	4610      	mov	r0, r2
 800c15a:	f7fe fd8a 	bl	800ac72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c162:	4b23      	ldr	r3, [pc, #140]	@ (800c1f0 <xTaskResumeAll+0x12c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c168:	429a      	cmp	r2, r3
 800c16a:	d302      	bcc.n	800c172 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c16c:	4b21      	ldr	r3, [pc, #132]	@ (800c1f4 <xTaskResumeAll+0x130>)
 800c16e:	2201      	movs	r2, #1
 800c170:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c172:	4b1c      	ldr	r3, [pc, #112]	@ (800c1e4 <xTaskResumeAll+0x120>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d1cb      	bne.n	800c112 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d001      	beq.n	800c184 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c180:	f000 fb58 	bl	800c834 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c184:	4b1c      	ldr	r3, [pc, #112]	@ (800c1f8 <xTaskResumeAll+0x134>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d010      	beq.n	800c1b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c190:	f000 f846 	bl	800c220 <xTaskIncrementTick>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d002      	beq.n	800c1a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c19a:	4b16      	ldr	r3, [pc, #88]	@ (800c1f4 <xTaskResumeAll+0x130>)
 800c19c:	2201      	movs	r2, #1
 800c19e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1f1      	bne.n	800c190 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c1ac:	4b12      	ldr	r3, [pc, #72]	@ (800c1f8 <xTaskResumeAll+0x134>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c1b2:	4b10      	ldr	r3, [pc, #64]	@ (800c1f4 <xTaskResumeAll+0x130>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d009      	beq.n	800c1ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c1be:	4b0f      	ldr	r3, [pc, #60]	@ (800c1fc <xTaskResumeAll+0x138>)
 800c1c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c4:	601a      	str	r2, [r3, #0]
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1ce:	f7fe ff3d 	bl	800b04c <vPortExitCritical>

	return xAlreadyYielded;
 800c1d2:	68bb      	ldr	r3, [r7, #8]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	24004ea4 	.word	0x24004ea4
 800c1e0:	24004e7c 	.word	0x24004e7c
 800c1e4:	24004e3c 	.word	0x24004e3c
 800c1e8:	24004e84 	.word	0x24004e84
 800c1ec:	240049ac 	.word	0x240049ac
 800c1f0:	240049a8 	.word	0x240049a8
 800c1f4:	24004e90 	.word	0x24004e90
 800c1f8:	24004e8c 	.word	0x24004e8c
 800c1fc:	e000ed04 	.word	0xe000ed04

0800c200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c206:	4b05      	ldr	r3, [pc, #20]	@ (800c21c <xTaskGetTickCount+0x1c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c20c:	687b      	ldr	r3, [r7, #4]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	24004e80 	.word	0x24004e80

0800c220 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b086      	sub	sp, #24
 800c224:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c226:	2300      	movs	r3, #0
 800c228:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c22a:	4b4f      	ldr	r3, [pc, #316]	@ (800c368 <xTaskIncrementTick+0x148>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f040 8090 	bne.w	800c354 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c234:	4b4d      	ldr	r3, [pc, #308]	@ (800c36c <xTaskIncrementTick+0x14c>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3301      	adds	r3, #1
 800c23a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c23c:	4a4b      	ldr	r2, [pc, #300]	@ (800c36c <xTaskIncrementTick+0x14c>)
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d121      	bne.n	800c28c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c248:	4b49      	ldr	r3, [pc, #292]	@ (800c370 <xTaskIncrementTick+0x150>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00b      	beq.n	800c26a <xTaskIncrementTick+0x4a>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	603b      	str	r3, [r7, #0]
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop
 800c268:	e7fd      	b.n	800c266 <xTaskIncrementTick+0x46>
 800c26a:	4b41      	ldr	r3, [pc, #260]	@ (800c370 <xTaskIncrementTick+0x150>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	4b40      	ldr	r3, [pc, #256]	@ (800c374 <xTaskIncrementTick+0x154>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a3e      	ldr	r2, [pc, #248]	@ (800c370 <xTaskIncrementTick+0x150>)
 800c276:	6013      	str	r3, [r2, #0]
 800c278:	4a3e      	ldr	r2, [pc, #248]	@ (800c374 <xTaskIncrementTick+0x154>)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6013      	str	r3, [r2, #0]
 800c27e:	4b3e      	ldr	r3, [pc, #248]	@ (800c378 <xTaskIncrementTick+0x158>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	3301      	adds	r3, #1
 800c284:	4a3c      	ldr	r2, [pc, #240]	@ (800c378 <xTaskIncrementTick+0x158>)
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	f000 fad4 	bl	800c834 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c28c:	4b3b      	ldr	r3, [pc, #236]	@ (800c37c <xTaskIncrementTick+0x15c>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	429a      	cmp	r2, r3
 800c294:	d349      	bcc.n	800c32a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c296:	4b36      	ldr	r3, [pc, #216]	@ (800c370 <xTaskIncrementTick+0x150>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d104      	bne.n	800c2aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2a0:	4b36      	ldr	r3, [pc, #216]	@ (800c37c <xTaskIncrementTick+0x15c>)
 800c2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a6:	601a      	str	r2, [r3, #0]
					break;
 800c2a8:	e03f      	b.n	800c32a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2aa:	4b31      	ldr	r3, [pc, #196]	@ (800c370 <xTaskIncrementTick+0x150>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c2ba:	693a      	ldr	r2, [r7, #16]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d203      	bcs.n	800c2ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c2c2:	4a2e      	ldr	r2, [pc, #184]	@ (800c37c <xTaskIncrementTick+0x15c>)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c2c8:	e02f      	b.n	800c32a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	3304      	adds	r3, #4
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe fd2c 	bl	800ad2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d004      	beq.n	800c2e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	3318      	adds	r3, #24
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fe fd23 	bl	800ad2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ea:	4b25      	ldr	r3, [pc, #148]	@ (800c380 <xTaskIncrementTick+0x160>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d903      	bls.n	800c2fa <xTaskIncrementTick+0xda>
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f6:	4a22      	ldr	r2, [pc, #136]	@ (800c380 <xTaskIncrementTick+0x160>)
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2fe:	4613      	mov	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4a1f      	ldr	r2, [pc, #124]	@ (800c384 <xTaskIncrementTick+0x164>)
 800c308:	441a      	add	r2, r3
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	3304      	adds	r3, #4
 800c30e:	4619      	mov	r1, r3
 800c310:	4610      	mov	r0, r2
 800c312:	f7fe fcae 	bl	800ac72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c31a:	4b1b      	ldr	r3, [pc, #108]	@ (800c388 <xTaskIncrementTick+0x168>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c320:	429a      	cmp	r2, r3
 800c322:	d3b8      	bcc.n	800c296 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c324:	2301      	movs	r3, #1
 800c326:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c328:	e7b5      	b.n	800c296 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c32a:	4b17      	ldr	r3, [pc, #92]	@ (800c388 <xTaskIncrementTick+0x168>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c330:	4914      	ldr	r1, [pc, #80]	@ (800c384 <xTaskIncrementTick+0x164>)
 800c332:	4613      	mov	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	4413      	add	r3, r2
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	440b      	add	r3, r1
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d901      	bls.n	800c346 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c342:	2301      	movs	r3, #1
 800c344:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c346:	4b11      	ldr	r3, [pc, #68]	@ (800c38c <xTaskIncrementTick+0x16c>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d007      	beq.n	800c35e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c34e:	2301      	movs	r3, #1
 800c350:	617b      	str	r3, [r7, #20]
 800c352:	e004      	b.n	800c35e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c354:	4b0e      	ldr	r3, [pc, #56]	@ (800c390 <xTaskIncrementTick+0x170>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	3301      	adds	r3, #1
 800c35a:	4a0d      	ldr	r2, [pc, #52]	@ (800c390 <xTaskIncrementTick+0x170>)
 800c35c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c35e:	697b      	ldr	r3, [r7, #20]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3718      	adds	r7, #24
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	24004ea4 	.word	0x24004ea4
 800c36c:	24004e80 	.word	0x24004e80
 800c370:	24004e34 	.word	0x24004e34
 800c374:	24004e38 	.word	0x24004e38
 800c378:	24004e94 	.word	0x24004e94
 800c37c:	24004e9c 	.word	0x24004e9c
 800c380:	24004e84 	.word	0x24004e84
 800c384:	240049ac 	.word	0x240049ac
 800c388:	240049a8 	.word	0x240049a8
 800c38c:	24004e90 	.word	0x24004e90
 800c390:	24004e8c 	.word	0x24004e8c

0800c394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c39a:	4b28      	ldr	r3, [pc, #160]	@ (800c43c <vTaskSwitchContext+0xa8>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d003      	beq.n	800c3aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c3a2:	4b27      	ldr	r3, [pc, #156]	@ (800c440 <vTaskSwitchContext+0xac>)
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c3a8:	e042      	b.n	800c430 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800c3aa:	4b25      	ldr	r3, [pc, #148]	@ (800c440 <vTaskSwitchContext+0xac>)
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3b0:	4b24      	ldr	r3, [pc, #144]	@ (800c444 <vTaskSwitchContext+0xb0>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	e011      	b.n	800c3dc <vTaskSwitchContext+0x48>
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10b      	bne.n	800c3d6 <vTaskSwitchContext+0x42>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	607b      	str	r3, [r7, #4]
}
 800c3d0:	bf00      	nop
 800c3d2:	bf00      	nop
 800c3d4:	e7fd      	b.n	800c3d2 <vTaskSwitchContext+0x3e>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	60fb      	str	r3, [r7, #12]
 800c3dc:	491a      	ldr	r1, [pc, #104]	@ (800c448 <vTaskSwitchContext+0xb4>)
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	440b      	add	r3, r1
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d0e3      	beq.n	800c3b8 <vTaskSwitchContext+0x24>
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4413      	add	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4a13      	ldr	r2, [pc, #76]	@ (800c448 <vTaskSwitchContext+0xb4>)
 800c3fc:	4413      	add	r3, r2
 800c3fe:	60bb      	str	r3, [r7, #8]
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	685a      	ldr	r2, [r3, #4]
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	605a      	str	r2, [r3, #4]
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	3308      	adds	r3, #8
 800c412:	429a      	cmp	r2, r3
 800c414:	d104      	bne.n	800c420 <vTaskSwitchContext+0x8c>
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	605a      	str	r2, [r3, #4]
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	4a09      	ldr	r2, [pc, #36]	@ (800c44c <vTaskSwitchContext+0xb8>)
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	4a06      	ldr	r2, [pc, #24]	@ (800c444 <vTaskSwitchContext+0xb0>)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6013      	str	r3, [r2, #0]
}
 800c430:	bf00      	nop
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	24004ea4 	.word	0x24004ea4
 800c440:	24004e90 	.word	0x24004e90
 800c444:	24004e84 	.word	0x24004e84
 800c448:	240049ac 	.word	0x240049ac
 800c44c:	240049a8 	.word	0x240049a8

0800c450 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d10b      	bne.n	800c478 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	60fb      	str	r3, [r7, #12]
}
 800c472:	bf00      	nop
 800c474:	bf00      	nop
 800c476:	e7fd      	b.n	800c474 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c478:	4b07      	ldr	r3, [pc, #28]	@ (800c498 <vTaskPlaceOnEventList+0x48>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	3318      	adds	r3, #24
 800c47e:	4619      	mov	r1, r3
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7fe fc1a 	bl	800acba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c486:	2101      	movs	r1, #1
 800c488:	6838      	ldr	r0, [r7, #0]
 800c48a:	f000 fa81 	bl	800c990 <prvAddCurrentTaskToDelayedList>
}
 800c48e:	bf00      	nop
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	240049a8 	.word	0x240049a8

0800c49c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10b      	bne.n	800c4c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	617b      	str	r3, [r7, #20]
}
 800c4c0:	bf00      	nop
 800c4c2:	bf00      	nop
 800c4c4:	e7fd      	b.n	800c4c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	3318      	adds	r3, #24
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f7fe fbcf 	bl	800ac72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d002      	beq.n	800c4e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c4da:	f04f 33ff 	mov.w	r3, #4294967295
 800c4de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c4e0:	6879      	ldr	r1, [r7, #4]
 800c4e2:	68b8      	ldr	r0, [r7, #8]
 800c4e4:	f000 fa54 	bl	800c990 <prvAddCurrentTaskToDelayedList>
	}
 800c4e8:	bf00      	nop
 800c4ea:	3718      	adds	r7, #24
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	240049a8 	.word	0x240049a8

0800c4f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10b      	bne.n	800c522 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	60fb      	str	r3, [r7, #12]
}
 800c51c:	bf00      	nop
 800c51e:	bf00      	nop
 800c520:	e7fd      	b.n	800c51e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	3318      	adds	r3, #24
 800c526:	4618      	mov	r0, r3
 800c528:	f7fe fc00 	bl	800ad2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c52c:	4b1d      	ldr	r3, [pc, #116]	@ (800c5a4 <xTaskRemoveFromEventList+0xb0>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d11d      	bne.n	800c570 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	3304      	adds	r3, #4
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fe fbf7 	bl	800ad2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c542:	4b19      	ldr	r3, [pc, #100]	@ (800c5a8 <xTaskRemoveFromEventList+0xb4>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	429a      	cmp	r2, r3
 800c548:	d903      	bls.n	800c552 <xTaskRemoveFromEventList+0x5e>
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c54e:	4a16      	ldr	r2, [pc, #88]	@ (800c5a8 <xTaskRemoveFromEventList+0xb4>)
 800c550:	6013      	str	r3, [r2, #0]
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c556:	4613      	mov	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	4413      	add	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4a13      	ldr	r2, [pc, #76]	@ (800c5ac <xTaskRemoveFromEventList+0xb8>)
 800c560:	441a      	add	r2, r3
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	3304      	adds	r3, #4
 800c566:	4619      	mov	r1, r3
 800c568:	4610      	mov	r0, r2
 800c56a:	f7fe fb82 	bl	800ac72 <vListInsertEnd>
 800c56e:	e005      	b.n	800c57c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	3318      	adds	r3, #24
 800c574:	4619      	mov	r1, r3
 800c576:	480e      	ldr	r0, [pc, #56]	@ (800c5b0 <xTaskRemoveFromEventList+0xbc>)
 800c578:	f7fe fb7b 	bl	800ac72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c580:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b4 <xTaskRemoveFromEventList+0xc0>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c586:	429a      	cmp	r2, r3
 800c588:	d905      	bls.n	800c596 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c58a:	2301      	movs	r3, #1
 800c58c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c58e:	4b0a      	ldr	r3, [pc, #40]	@ (800c5b8 <xTaskRemoveFromEventList+0xc4>)
 800c590:	2201      	movs	r2, #1
 800c592:	601a      	str	r2, [r3, #0]
 800c594:	e001      	b.n	800c59a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c596:	2300      	movs	r3, #0
 800c598:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c59a:	697b      	ldr	r3, [r7, #20]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	24004ea4 	.word	0x24004ea4
 800c5a8:	24004e84 	.word	0x24004e84
 800c5ac:	240049ac 	.word	0x240049ac
 800c5b0:	24004e3c 	.word	0x24004e3c
 800c5b4:	240049a8 	.word	0x240049a8
 800c5b8:	24004e90 	.word	0x24004e90

0800c5bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c5c4:	4b06      	ldr	r3, [pc, #24]	@ (800c5e0 <vTaskInternalSetTimeOutState+0x24>)
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5cc:	4b05      	ldr	r3, [pc, #20]	@ (800c5e4 <vTaskInternalSetTimeOutState+0x28>)
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	605a      	str	r2, [r3, #4]
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	24004e94 	.word	0x24004e94
 800c5e4:	24004e80 	.word	0x24004e80

0800c5e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10b      	bne.n	800c610 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	613b      	str	r3, [r7, #16]
}
 800c60a:	bf00      	nop
 800c60c:	bf00      	nop
 800c60e:	e7fd      	b.n	800c60c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d10b      	bne.n	800c62e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	60fb      	str	r3, [r7, #12]
}
 800c628:	bf00      	nop
 800c62a:	bf00      	nop
 800c62c:	e7fd      	b.n	800c62a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c62e:	f7fe fcdb 	bl	800afe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c632:	4b1d      	ldr	r3, [pc, #116]	@ (800c6a8 <xTaskCheckForTimeOut+0xc0>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	69ba      	ldr	r2, [r7, #24]
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64a:	d102      	bne.n	800c652 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c64c:	2300      	movs	r3, #0
 800c64e:	61fb      	str	r3, [r7, #28]
 800c650:	e023      	b.n	800c69a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	4b15      	ldr	r3, [pc, #84]	@ (800c6ac <xTaskCheckForTimeOut+0xc4>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d007      	beq.n	800c66e <xTaskCheckForTimeOut+0x86>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	69ba      	ldr	r2, [r7, #24]
 800c664:	429a      	cmp	r2, r3
 800c666:	d302      	bcc.n	800c66e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c668:	2301      	movs	r3, #1
 800c66a:	61fb      	str	r3, [r7, #28]
 800c66c:	e015      	b.n	800c69a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	429a      	cmp	r2, r3
 800c676:	d20b      	bcs.n	800c690 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	1ad2      	subs	r2, r2, r3
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7ff ff99 	bl	800c5bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c68a:	2300      	movs	r3, #0
 800c68c:	61fb      	str	r3, [r7, #28]
 800c68e:	e004      	b.n	800c69a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c696:	2301      	movs	r3, #1
 800c698:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c69a:	f7fe fcd7 	bl	800b04c <vPortExitCritical>

	return xReturn;
 800c69e:	69fb      	ldr	r3, [r7, #28]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3720      	adds	r7, #32
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	24004e80 	.word	0x24004e80
 800c6ac:	24004e94 	.word	0x24004e94

0800c6b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c6b4:	4b03      	ldr	r3, [pc, #12]	@ (800c6c4 <vTaskMissedYield+0x14>)
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	601a      	str	r2, [r3, #0]
}
 800c6ba:	bf00      	nop
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	24004e90 	.word	0x24004e90

0800c6c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c6d0:	f000 f852 	bl	800c778 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c6d4:	4b06      	ldr	r3, [pc, #24]	@ (800c6f0 <prvIdleTask+0x28>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d9f9      	bls.n	800c6d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6dc:	4b05      	ldr	r3, [pc, #20]	@ (800c6f4 <prvIdleTask+0x2c>)
 800c6de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6e2:	601a      	str	r2, [r3, #0]
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c6ec:	e7f0      	b.n	800c6d0 <prvIdleTask+0x8>
 800c6ee:	bf00      	nop
 800c6f0:	240049ac 	.word	0x240049ac
 800c6f4:	e000ed04 	.word	0xe000ed04

0800c6f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6fe:	2300      	movs	r3, #0
 800c700:	607b      	str	r3, [r7, #4]
 800c702:	e00c      	b.n	800c71e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	4613      	mov	r3, r2
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	4413      	add	r3, r2
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	4a12      	ldr	r2, [pc, #72]	@ (800c758 <prvInitialiseTaskLists+0x60>)
 800c710:	4413      	add	r3, r2
 800c712:	4618      	mov	r0, r3
 800c714:	f7fe fa80 	bl	800ac18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	3301      	adds	r3, #1
 800c71c:	607b      	str	r3, [r7, #4]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b37      	cmp	r3, #55	@ 0x37
 800c722:	d9ef      	bls.n	800c704 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c724:	480d      	ldr	r0, [pc, #52]	@ (800c75c <prvInitialiseTaskLists+0x64>)
 800c726:	f7fe fa77 	bl	800ac18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c72a:	480d      	ldr	r0, [pc, #52]	@ (800c760 <prvInitialiseTaskLists+0x68>)
 800c72c:	f7fe fa74 	bl	800ac18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c730:	480c      	ldr	r0, [pc, #48]	@ (800c764 <prvInitialiseTaskLists+0x6c>)
 800c732:	f7fe fa71 	bl	800ac18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c736:	480c      	ldr	r0, [pc, #48]	@ (800c768 <prvInitialiseTaskLists+0x70>)
 800c738:	f7fe fa6e 	bl	800ac18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c73c:	480b      	ldr	r0, [pc, #44]	@ (800c76c <prvInitialiseTaskLists+0x74>)
 800c73e:	f7fe fa6b 	bl	800ac18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c742:	4b0b      	ldr	r3, [pc, #44]	@ (800c770 <prvInitialiseTaskLists+0x78>)
 800c744:	4a05      	ldr	r2, [pc, #20]	@ (800c75c <prvInitialiseTaskLists+0x64>)
 800c746:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c748:	4b0a      	ldr	r3, [pc, #40]	@ (800c774 <prvInitialiseTaskLists+0x7c>)
 800c74a:	4a05      	ldr	r2, [pc, #20]	@ (800c760 <prvInitialiseTaskLists+0x68>)
 800c74c:	601a      	str	r2, [r3, #0]
}
 800c74e:	bf00      	nop
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	240049ac 	.word	0x240049ac
 800c75c:	24004e0c 	.word	0x24004e0c
 800c760:	24004e20 	.word	0x24004e20
 800c764:	24004e3c 	.word	0x24004e3c
 800c768:	24004e50 	.word	0x24004e50
 800c76c:	24004e68 	.word	0x24004e68
 800c770:	24004e34 	.word	0x24004e34
 800c774:	24004e38 	.word	0x24004e38

0800c778 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c77e:	e019      	b.n	800c7b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c780:	f7fe fc32 	bl	800afe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c784:	4b10      	ldr	r3, [pc, #64]	@ (800c7c8 <prvCheckTasksWaitingTermination+0x50>)
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3304      	adds	r3, #4
 800c790:	4618      	mov	r0, r3
 800c792:	f7fe facb 	bl	800ad2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c796:	4b0d      	ldr	r3, [pc, #52]	@ (800c7cc <prvCheckTasksWaitingTermination+0x54>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	4a0b      	ldr	r2, [pc, #44]	@ (800c7cc <prvCheckTasksWaitingTermination+0x54>)
 800c79e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c7a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c7d0 <prvCheckTasksWaitingTermination+0x58>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	4a0a      	ldr	r2, [pc, #40]	@ (800c7d0 <prvCheckTasksWaitingTermination+0x58>)
 800c7a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c7aa:	f7fe fc4f 	bl	800b04c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f000 f810 	bl	800c7d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7b4:	4b06      	ldr	r3, [pc, #24]	@ (800c7d0 <prvCheckTasksWaitingTermination+0x58>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1e1      	bne.n	800c780 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c7bc:	bf00      	nop
 800c7be:	bf00      	nop
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	24004e50 	.word	0x24004e50
 800c7cc:	24004e7c 	.word	0x24004e7c
 800c7d0:	24004e64 	.word	0x24004e64

0800c7d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d108      	bne.n	800c7f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fe f8f4 	bl	800a9d8 <vPortFree>
				vPortFree( pxTCB );
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7fe f8f1 	bl	800a9d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7f6:	e019      	b.n	800c82c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d103      	bne.n	800c80a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7fe f8e8 	bl	800a9d8 <vPortFree>
	}
 800c808:	e010      	b.n	800c82c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c810:	2b02      	cmp	r3, #2
 800c812:	d00b      	beq.n	800c82c <prvDeleteTCB+0x58>
	__asm volatile
 800c814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c818:	f383 8811 	msr	BASEPRI, r3
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	60fb      	str	r3, [r7, #12]
}
 800c826:	bf00      	nop
 800c828:	bf00      	nop
 800c82a:	e7fd      	b.n	800c828 <prvDeleteTCB+0x54>
	}
 800c82c:	bf00      	nop
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c83a:	4b0c      	ldr	r3, [pc, #48]	@ (800c86c <prvResetNextTaskUnblockTime+0x38>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d104      	bne.n	800c84e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c844:	4b0a      	ldr	r3, [pc, #40]	@ (800c870 <prvResetNextTaskUnblockTime+0x3c>)
 800c846:	f04f 32ff 	mov.w	r2, #4294967295
 800c84a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c84c:	e008      	b.n	800c860 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c84e:	4b07      	ldr	r3, [pc, #28]	@ (800c86c <prvResetNextTaskUnblockTime+0x38>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	4a04      	ldr	r2, [pc, #16]	@ (800c870 <prvResetNextTaskUnblockTime+0x3c>)
 800c85e:	6013      	str	r3, [r2, #0]
}
 800c860:	bf00      	nop
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr
 800c86c:	24004e34 	.word	0x24004e34
 800c870:	24004e9c 	.word	0x24004e9c

0800c874 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c87a:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a8 <xTaskGetSchedulerState+0x34>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d102      	bne.n	800c888 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c882:	2301      	movs	r3, #1
 800c884:	607b      	str	r3, [r7, #4]
 800c886:	e008      	b.n	800c89a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c888:	4b08      	ldr	r3, [pc, #32]	@ (800c8ac <xTaskGetSchedulerState+0x38>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d102      	bne.n	800c896 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c890:	2302      	movs	r3, #2
 800c892:	607b      	str	r3, [r7, #4]
 800c894:	e001      	b.n	800c89a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c896:	2300      	movs	r3, #0
 800c898:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c89a:	687b      	ldr	r3, [r7, #4]
	}
 800c89c:	4618      	mov	r0, r3
 800c89e:	370c      	adds	r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr
 800c8a8:	24004e88 	.word	0x24004e88
 800c8ac:	24004ea4 	.word	0x24004ea4

0800c8b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d058      	beq.n	800c978 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8c6:	4b2f      	ldr	r3, [pc, #188]	@ (800c984 <xTaskPriorityDisinherit+0xd4>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	693a      	ldr	r2, [r7, #16]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d00b      	beq.n	800c8e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	60fb      	str	r3, [r7, #12]
}
 800c8e2:	bf00      	nop
 800c8e4:	bf00      	nop
 800c8e6:	e7fd      	b.n	800c8e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10b      	bne.n	800c908 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	60bb      	str	r3, [r7, #8]
}
 800c902:	bf00      	nop
 800c904:	bf00      	nop
 800c906:	e7fd      	b.n	800c904 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c90c:	1e5a      	subs	r2, r3, #1
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d02c      	beq.n	800c978 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c922:	2b00      	cmp	r3, #0
 800c924:	d128      	bne.n	800c978 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	3304      	adds	r3, #4
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fe f9fe 	bl	800ad2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c93c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c948:	4b0f      	ldr	r3, [pc, #60]	@ (800c988 <xTaskPriorityDisinherit+0xd8>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d903      	bls.n	800c958 <xTaskPriorityDisinherit+0xa8>
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c954:	4a0c      	ldr	r2, [pc, #48]	@ (800c988 <xTaskPriorityDisinherit+0xd8>)
 800c956:	6013      	str	r3, [r2, #0]
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c95c:	4613      	mov	r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	4413      	add	r3, r2
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4a09      	ldr	r2, [pc, #36]	@ (800c98c <xTaskPriorityDisinherit+0xdc>)
 800c966:	441a      	add	r2, r3
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	3304      	adds	r3, #4
 800c96c:	4619      	mov	r1, r3
 800c96e:	4610      	mov	r0, r2
 800c970:	f7fe f97f 	bl	800ac72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c974:	2301      	movs	r3, #1
 800c976:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c978:	697b      	ldr	r3, [r7, #20]
	}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	240049a8 	.word	0x240049a8
 800c988:	24004e84 	.word	0x24004e84
 800c98c:	240049ac 	.word	0x240049ac

0800c990 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c99a:	4b21      	ldr	r3, [pc, #132]	@ (800ca20 <prvAddCurrentTaskToDelayedList+0x90>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9a0:	4b20      	ldr	r3, [pc, #128]	@ (800ca24 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fe f9c0 	bl	800ad2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b2:	d10a      	bne.n	800c9ca <prvAddCurrentTaskToDelayedList+0x3a>
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d007      	beq.n	800c9ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9ba:	4b1a      	ldr	r3, [pc, #104]	@ (800ca24 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3304      	adds	r3, #4
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	4819      	ldr	r0, [pc, #100]	@ (800ca28 <prvAddCurrentTaskToDelayedList+0x98>)
 800c9c4:	f7fe f955 	bl	800ac72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c9c8:	e026      	b.n	800ca18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c9d2:	4b14      	ldr	r3, [pc, #80]	@ (800ca24 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d209      	bcs.n	800c9f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9e2:	4b12      	ldr	r3, [pc, #72]	@ (800ca2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	4b0f      	ldr	r3, [pc, #60]	@ (800ca24 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	f7fe f963 	bl	800acba <vListInsert>
}
 800c9f4:	e010      	b.n	800ca18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9f6:	4b0e      	ldr	r3, [pc, #56]	@ (800ca30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800ca24 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	3304      	adds	r3, #4
 800ca00:	4619      	mov	r1, r3
 800ca02:	4610      	mov	r0, r2
 800ca04:	f7fe f959 	bl	800acba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca08:	4b0a      	ldr	r3, [pc, #40]	@ (800ca34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d202      	bcs.n	800ca18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ca12:	4a08      	ldr	r2, [pc, #32]	@ (800ca34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	6013      	str	r3, [r2, #0]
}
 800ca18:	bf00      	nop
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	24004e80 	.word	0x24004e80
 800ca24:	240049a8 	.word	0x240049a8
 800ca28:	24004e68 	.word	0x24004e68
 800ca2c:	24004e38 	.word	0x24004e38
 800ca30:	24004e34 	.word	0x24004e34
 800ca34:	24004e9c 	.word	0x24004e9c

0800ca38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08a      	sub	sp, #40	@ 0x28
 800ca3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ca42:	f000 fb13 	bl	800d06c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ca46:	4b1d      	ldr	r3, [pc, #116]	@ (800cabc <xTimerCreateTimerTask+0x84>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d021      	beq.n	800ca92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ca52:	2300      	movs	r3, #0
 800ca54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ca56:	1d3a      	adds	r2, r7, #4
 800ca58:	f107 0108 	add.w	r1, r7, #8
 800ca5c:	f107 030c 	add.w	r3, r7, #12
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7fd fed1 	bl	800a808 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ca66:	6879      	ldr	r1, [r7, #4]
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	9202      	str	r2, [sp, #8]
 800ca6e:	9301      	str	r3, [sp, #4]
 800ca70:	2302      	movs	r3, #2
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	2300      	movs	r3, #0
 800ca76:	460a      	mov	r2, r1
 800ca78:	4911      	ldr	r1, [pc, #68]	@ (800cac0 <xTimerCreateTimerTask+0x88>)
 800ca7a:	4812      	ldr	r0, [pc, #72]	@ (800cac4 <xTimerCreateTimerTask+0x8c>)
 800ca7c:	f7ff f8d0 	bl	800bc20 <xTaskCreateStatic>
 800ca80:	4603      	mov	r3, r0
 800ca82:	4a11      	ldr	r2, [pc, #68]	@ (800cac8 <xTimerCreateTimerTask+0x90>)
 800ca84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca86:	4b10      	ldr	r3, [pc, #64]	@ (800cac8 <xTimerCreateTimerTask+0x90>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10b      	bne.n	800cab0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ca98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca9c:	f383 8811 	msr	BASEPRI, r3
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	613b      	str	r3, [r7, #16]
}
 800caaa:	bf00      	nop
 800caac:	bf00      	nop
 800caae:	e7fd      	b.n	800caac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cab0:	697b      	ldr	r3, [r7, #20]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3718      	adds	r7, #24
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	24004ed8 	.word	0x24004ed8
 800cac0:	0800fc18 	.word	0x0800fc18
 800cac4:	0800cc05 	.word	0x0800cc05
 800cac8:	24004edc 	.word	0x24004edc

0800cacc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b08a      	sub	sp, #40	@ 0x28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
 800cad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cada:	2300      	movs	r3, #0
 800cadc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d10b      	bne.n	800cafc <xTimerGenericCommand+0x30>
	__asm volatile
 800cae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae8:	f383 8811 	msr	BASEPRI, r3
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	623b      	str	r3, [r7, #32]
}
 800caf6:	bf00      	nop
 800caf8:	bf00      	nop
 800cafa:	e7fd      	b.n	800caf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cafc:	4b19      	ldr	r3, [pc, #100]	@ (800cb64 <xTimerGenericCommand+0x98>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d02a      	beq.n	800cb5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	2b05      	cmp	r3, #5
 800cb14:	dc18      	bgt.n	800cb48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cb16:	f7ff fead 	bl	800c874 <xTaskGetSchedulerState>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d109      	bne.n	800cb34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cb20:	4b10      	ldr	r3, [pc, #64]	@ (800cb64 <xTimerGenericCommand+0x98>)
 800cb22:	6818      	ldr	r0, [r3, #0]
 800cb24:	f107 0110 	add.w	r1, r7, #16
 800cb28:	2300      	movs	r3, #0
 800cb2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb2c:	f7fe fc88 	bl	800b440 <xQueueGenericSend>
 800cb30:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb32:	e012      	b.n	800cb5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cb34:	4b0b      	ldr	r3, [pc, #44]	@ (800cb64 <xTimerGenericCommand+0x98>)
 800cb36:	6818      	ldr	r0, [r3, #0]
 800cb38:	f107 0110 	add.w	r1, r7, #16
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f7fe fc7e 	bl	800b440 <xQueueGenericSend>
 800cb44:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb46:	e008      	b.n	800cb5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb48:	4b06      	ldr	r3, [pc, #24]	@ (800cb64 <xTimerGenericCommand+0x98>)
 800cb4a:	6818      	ldr	r0, [r3, #0]
 800cb4c:	f107 0110 	add.w	r1, r7, #16
 800cb50:	2300      	movs	r3, #0
 800cb52:	683a      	ldr	r2, [r7, #0]
 800cb54:	f7fe fd76 	bl	800b644 <xQueueGenericSendFromISR>
 800cb58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3728      	adds	r7, #40	@ 0x28
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	24004ed8 	.word	0x24004ed8

0800cb68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b088      	sub	sp, #32
 800cb6c:	af02      	add	r7, sp, #8
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb72:	4b23      	ldr	r3, [pc, #140]	@ (800cc00 <prvProcessExpiredTimer+0x98>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	3304      	adds	r3, #4
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7fe f8d3 	bl	800ad2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb8c:	f003 0304 	and.w	r3, r3, #4
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d023      	beq.n	800cbdc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	699a      	ldr	r2, [r3, #24]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	18d1      	adds	r1, r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	6978      	ldr	r0, [r7, #20]
 800cba2:	f000 f8d5 	bl	800cd50 <prvInsertTimerInActiveList>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d020      	beq.n	800cbee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cbac:	2300      	movs	r3, #0
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	6978      	ldr	r0, [r7, #20]
 800cbb8:	f7ff ff88 	bl	800cacc <xTimerGenericCommand>
 800cbbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d114      	bne.n	800cbee <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cbc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	60fb      	str	r3, [r7, #12]
}
 800cbd6:	bf00      	nop
 800cbd8:	bf00      	nop
 800cbda:	e7fd      	b.n	800cbd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbe2:	f023 0301 	bic.w	r3, r3, #1
 800cbe6:	b2da      	uxtb	r2, r3
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	6a1b      	ldr	r3, [r3, #32]
 800cbf2:	6978      	ldr	r0, [r7, #20]
 800cbf4:	4798      	blx	r3
}
 800cbf6:	bf00      	nop
 800cbf8:	3718      	adds	r7, #24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	24004ed0 	.word	0x24004ed0

0800cc04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc0c:	f107 0308 	add.w	r3, r7, #8
 800cc10:	4618      	mov	r0, r3
 800cc12:	f000 f859 	bl	800ccc8 <prvGetNextExpireTime>
 800cc16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f000 f805 	bl	800cc2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cc22:	f000 f8d7 	bl	800cdd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc26:	bf00      	nop
 800cc28:	e7f0      	b.n	800cc0c <prvTimerTask+0x8>
	...

0800cc2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cc36:	f7ff fa37 	bl	800c0a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc3a:	f107 0308 	add.w	r3, r7, #8
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 f866 	bl	800cd10 <prvSampleTimeNow>
 800cc44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d130      	bne.n	800ccae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d10a      	bne.n	800cc68 <prvProcessTimerOrBlockTask+0x3c>
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d806      	bhi.n	800cc68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cc5a:	f7ff fa33 	bl	800c0c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cc5e:	68f9      	ldr	r1, [r7, #12]
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff ff81 	bl	800cb68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cc66:	e024      	b.n	800ccb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d008      	beq.n	800cc80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cc6e:	4b13      	ldr	r3, [pc, #76]	@ (800ccbc <prvProcessTimerOrBlockTask+0x90>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d101      	bne.n	800cc7c <prvProcessTimerOrBlockTask+0x50>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e000      	b.n	800cc7e <prvProcessTimerOrBlockTask+0x52>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cc80:	4b0f      	ldr	r3, [pc, #60]	@ (800ccc0 <prvProcessTimerOrBlockTask+0x94>)
 800cc82:	6818      	ldr	r0, [r3, #0]
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	f7fe ff93 	bl	800bbb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc92:	f7ff fa17 	bl	800c0c4 <xTaskResumeAll>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10a      	bne.n	800ccb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc9c:	4b09      	ldr	r3, [pc, #36]	@ (800ccc4 <prvProcessTimerOrBlockTask+0x98>)
 800cc9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	f3bf 8f6f 	isb	sy
}
 800ccac:	e001      	b.n	800ccb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ccae:	f7ff fa09 	bl	800c0c4 <xTaskResumeAll>
}
 800ccb2:	bf00      	nop
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	24004ed4 	.word	0x24004ed4
 800ccc0:	24004ed8 	.word	0x24004ed8
 800ccc4:	e000ed04 	.word	0xe000ed04

0800ccc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ccd0:	4b0e      	ldr	r3, [pc, #56]	@ (800cd0c <prvGetNextExpireTime+0x44>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d101      	bne.n	800ccde <prvGetNextExpireTime+0x16>
 800ccda:	2201      	movs	r2, #1
 800ccdc:	e000      	b.n	800cce0 <prvGetNextExpireTime+0x18>
 800ccde:	2200      	movs	r2, #0
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d105      	bne.n	800ccf8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ccec:	4b07      	ldr	r3, [pc, #28]	@ (800cd0c <prvGetNextExpireTime+0x44>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	60fb      	str	r3, [r7, #12]
 800ccf6:	e001      	b.n	800ccfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3714      	adds	r7, #20
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	24004ed0 	.word	0x24004ed0

0800cd10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cd18:	f7ff fa72 	bl	800c200 <xTaskGetTickCount>
 800cd1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cd1e:	4b0b      	ldr	r3, [pc, #44]	@ (800cd4c <prvSampleTimeNow+0x3c>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d205      	bcs.n	800cd34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cd28:	f000 f93a 	bl	800cfa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	601a      	str	r2, [r3, #0]
 800cd32:	e002      	b.n	800cd3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cd3a:	4a04      	ldr	r2, [pc, #16]	@ (800cd4c <prvSampleTimeNow+0x3c>)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cd40:	68fb      	ldr	r3, [r7, #12]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	24004ee0 	.word	0x24004ee0

0800cd50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cd6e:	68ba      	ldr	r2, [r7, #8]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d812      	bhi.n	800cd9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	1ad2      	subs	r2, r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	699b      	ldr	r3, [r3, #24]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d302      	bcc.n	800cd8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd84:	2301      	movs	r3, #1
 800cd86:	617b      	str	r3, [r7, #20]
 800cd88:	e01b      	b.n	800cdc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd8a:	4b10      	ldr	r3, [pc, #64]	@ (800cdcc <prvInsertTimerInActiveList+0x7c>)
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3304      	adds	r3, #4
 800cd92:	4619      	mov	r1, r3
 800cd94:	4610      	mov	r0, r2
 800cd96:	f7fd ff90 	bl	800acba <vListInsert>
 800cd9a:	e012      	b.n	800cdc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d206      	bcs.n	800cdb2 <prvInsertTimerInActiveList+0x62>
 800cda4:	68ba      	ldr	r2, [r7, #8]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d302      	bcc.n	800cdb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cdac:	2301      	movs	r3, #1
 800cdae:	617b      	str	r3, [r7, #20]
 800cdb0:	e007      	b.n	800cdc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdb2:	4b07      	ldr	r3, [pc, #28]	@ (800cdd0 <prvInsertTimerInActiveList+0x80>)
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	3304      	adds	r3, #4
 800cdba:	4619      	mov	r1, r3
 800cdbc:	4610      	mov	r0, r2
 800cdbe:	f7fd ff7c 	bl	800acba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cdc2:	697b      	ldr	r3, [r7, #20]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3718      	adds	r7, #24
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	24004ed4 	.word	0x24004ed4
 800cdd0:	24004ed0 	.word	0x24004ed0

0800cdd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b08e      	sub	sp, #56	@ 0x38
 800cdd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cdda:	e0ce      	b.n	800cf7a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	da19      	bge.n	800ce16 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cde2:	1d3b      	adds	r3, r7, #4
 800cde4:	3304      	adds	r3, #4
 800cde6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10b      	bne.n	800ce06 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	61fb      	str	r3, [r7, #28]
}
 800ce00:	bf00      	nop
 800ce02:	bf00      	nop
 800ce04:	e7fd      	b.n	800ce02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ce06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce0c:	6850      	ldr	r0, [r2, #4]
 800ce0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce10:	6892      	ldr	r2, [r2, #8]
 800ce12:	4611      	mov	r1, r2
 800ce14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f2c0 80ae 	blt.w	800cf7a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ce22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce24:	695b      	ldr	r3, [r3, #20]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d004      	beq.n	800ce34 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fd ff7c 	bl	800ad2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce34:	463b      	mov	r3, r7
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7ff ff6a 	bl	800cd10 <prvSampleTimeNow>
 800ce3c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b09      	cmp	r3, #9
 800ce42:	f200 8097 	bhi.w	800cf74 <prvProcessReceivedCommands+0x1a0>
 800ce46:	a201      	add	r2, pc, #4	@ (adr r2, 800ce4c <prvProcessReceivedCommands+0x78>)
 800ce48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4c:	0800ce75 	.word	0x0800ce75
 800ce50:	0800ce75 	.word	0x0800ce75
 800ce54:	0800ce75 	.word	0x0800ce75
 800ce58:	0800ceeb 	.word	0x0800ceeb
 800ce5c:	0800ceff 	.word	0x0800ceff
 800ce60:	0800cf4b 	.word	0x0800cf4b
 800ce64:	0800ce75 	.word	0x0800ce75
 800ce68:	0800ce75 	.word	0x0800ce75
 800ce6c:	0800ceeb 	.word	0x0800ceeb
 800ce70:	0800ceff 	.word	0x0800ceff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce7a:	f043 0301 	orr.w	r3, r3, #1
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8a:	699b      	ldr	r3, [r3, #24]
 800ce8c:	18d1      	adds	r1, r2, r3
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce94:	f7ff ff5c 	bl	800cd50 <prvInsertTimerInActiveList>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d06c      	beq.n	800cf78 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea0:	6a1b      	ldr	r3, [r3, #32]
 800cea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cea4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ceac:	f003 0304 	and.w	r3, r3, #4
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d061      	beq.n	800cf78 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ceb4:	68ba      	ldr	r2, [r7, #8]
 800ceb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb8:	699b      	ldr	r3, [r3, #24]
 800ceba:	441a      	add	r2, r3
 800cebc:	2300      	movs	r3, #0
 800cebe:	9300      	str	r3, [sp, #0]
 800cec0:	2300      	movs	r3, #0
 800cec2:	2100      	movs	r1, #0
 800cec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cec6:	f7ff fe01 	bl	800cacc <xTimerGenericCommand>
 800ceca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cecc:	6a3b      	ldr	r3, [r7, #32]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d152      	bne.n	800cf78 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	61bb      	str	r3, [r7, #24]
}
 800cee4:	bf00      	nop
 800cee6:	bf00      	nop
 800cee8:	e7fd      	b.n	800cee6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ceea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cef0:	f023 0301 	bic.w	r3, r3, #1
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cefc:	e03d      	b.n	800cf7a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf04:	f043 0301 	orr.w	r3, r3, #1
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf18:	699b      	ldr	r3, [r3, #24]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10b      	bne.n	800cf36 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	617b      	str	r3, [r7, #20]
}
 800cf30:	bf00      	nop
 800cf32:	bf00      	nop
 800cf34:	e7fd      	b.n	800cf32 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf38:	699a      	ldr	r2, [r3, #24]
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3c:	18d1      	adds	r1, r2, r3
 800cf3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf44:	f7ff ff04 	bl	800cd50 <prvInsertTimerInActiveList>
					break;
 800cf48:	e017      	b.n	800cf7a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf50:	f003 0302 	and.w	r3, r3, #2
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d103      	bne.n	800cf60 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cf58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf5a:	f7fd fd3d 	bl	800a9d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cf5e:	e00c      	b.n	800cf7a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf66:	f023 0301 	bic.w	r3, r3, #1
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cf72:	e002      	b.n	800cf7a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cf74:	bf00      	nop
 800cf76:	e000      	b.n	800cf7a <prvProcessReceivedCommands+0x1a6>
					break;
 800cf78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf7a:	4b08      	ldr	r3, [pc, #32]	@ (800cf9c <prvProcessReceivedCommands+0x1c8>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	1d39      	adds	r1, r7, #4
 800cf80:	2200      	movs	r2, #0
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fe fbfc 	bl	800b780 <xQueueReceive>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	f47f af26 	bne.w	800cddc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cf90:	bf00      	nop
 800cf92:	bf00      	nop
 800cf94:	3730      	adds	r7, #48	@ 0x30
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	24004ed8 	.word	0x24004ed8

0800cfa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b088      	sub	sp, #32
 800cfa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cfa6:	e049      	b.n	800d03c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfa8:	4b2e      	ldr	r3, [pc, #184]	@ (800d064 <prvSwitchTimerLists+0xc4>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfb2:	4b2c      	ldr	r3, [pc, #176]	@ (800d064 <prvSwitchTimerLists+0xc4>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fd feb3 	bl	800ad2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cfd4:	f003 0304 	and.w	r3, r3, #4
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d02f      	beq.n	800d03c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	693a      	ldr	r2, [r7, #16]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cfe6:	68ba      	ldr	r2, [r7, #8]
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d90e      	bls.n	800d00c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cffa:	4b1a      	ldr	r3, [pc, #104]	@ (800d064 <prvSwitchTimerLists+0xc4>)
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	3304      	adds	r3, #4
 800d002:	4619      	mov	r1, r3
 800d004:	4610      	mov	r0, r2
 800d006:	f7fd fe58 	bl	800acba <vListInsert>
 800d00a:	e017      	b.n	800d03c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d00c:	2300      	movs	r3, #0
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	2300      	movs	r3, #0
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	2100      	movs	r1, #0
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f7ff fd58 	bl	800cacc <xTimerGenericCommand>
 800d01c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10b      	bne.n	800d03c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	603b      	str	r3, [r7, #0]
}
 800d036:	bf00      	nop
 800d038:	bf00      	nop
 800d03a:	e7fd      	b.n	800d038 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d03c:	4b09      	ldr	r3, [pc, #36]	@ (800d064 <prvSwitchTimerLists+0xc4>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1b0      	bne.n	800cfa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d046:	4b07      	ldr	r3, [pc, #28]	@ (800d064 <prvSwitchTimerLists+0xc4>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d04c:	4b06      	ldr	r3, [pc, #24]	@ (800d068 <prvSwitchTimerLists+0xc8>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a04      	ldr	r2, [pc, #16]	@ (800d064 <prvSwitchTimerLists+0xc4>)
 800d052:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d054:	4a04      	ldr	r2, [pc, #16]	@ (800d068 <prvSwitchTimerLists+0xc8>)
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	6013      	str	r3, [r2, #0]
}
 800d05a:	bf00      	nop
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	24004ed0 	.word	0x24004ed0
 800d068:	24004ed4 	.word	0x24004ed4

0800d06c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d072:	f7fd ffb9 	bl	800afe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d076:	4b15      	ldr	r3, [pc, #84]	@ (800d0cc <prvCheckForValidListAndQueue+0x60>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d120      	bne.n	800d0c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d07e:	4814      	ldr	r0, [pc, #80]	@ (800d0d0 <prvCheckForValidListAndQueue+0x64>)
 800d080:	f7fd fdca 	bl	800ac18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d084:	4813      	ldr	r0, [pc, #76]	@ (800d0d4 <prvCheckForValidListAndQueue+0x68>)
 800d086:	f7fd fdc7 	bl	800ac18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d08a:	4b13      	ldr	r3, [pc, #76]	@ (800d0d8 <prvCheckForValidListAndQueue+0x6c>)
 800d08c:	4a10      	ldr	r2, [pc, #64]	@ (800d0d0 <prvCheckForValidListAndQueue+0x64>)
 800d08e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d090:	4b12      	ldr	r3, [pc, #72]	@ (800d0dc <prvCheckForValidListAndQueue+0x70>)
 800d092:	4a10      	ldr	r2, [pc, #64]	@ (800d0d4 <prvCheckForValidListAndQueue+0x68>)
 800d094:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d096:	2300      	movs	r3, #0
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	4b11      	ldr	r3, [pc, #68]	@ (800d0e0 <prvCheckForValidListAndQueue+0x74>)
 800d09c:	4a11      	ldr	r2, [pc, #68]	@ (800d0e4 <prvCheckForValidListAndQueue+0x78>)
 800d09e:	2110      	movs	r1, #16
 800d0a0:	200a      	movs	r0, #10
 800d0a2:	f7fe f92d 	bl	800b300 <xQueueGenericCreateStatic>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	4a08      	ldr	r2, [pc, #32]	@ (800d0cc <prvCheckForValidListAndQueue+0x60>)
 800d0aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d0ac:	4b07      	ldr	r3, [pc, #28]	@ (800d0cc <prvCheckForValidListAndQueue+0x60>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d005      	beq.n	800d0c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d0b4:	4b05      	ldr	r3, [pc, #20]	@ (800d0cc <prvCheckForValidListAndQueue+0x60>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	490b      	ldr	r1, [pc, #44]	@ (800d0e8 <prvCheckForValidListAndQueue+0x7c>)
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe fd52 	bl	800bb64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0c0:	f7fd ffc4 	bl	800b04c <vPortExitCritical>
}
 800d0c4:	bf00      	nop
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	24004ed8 	.word	0x24004ed8
 800d0d0:	24004ea8 	.word	0x24004ea8
 800d0d4:	24004ebc 	.word	0x24004ebc
 800d0d8:	24004ed0 	.word	0x24004ed0
 800d0dc:	24004ed4 	.word	0x24004ed4
 800d0e0:	24004f84 	.word	0x24004f84
 800d0e4:	24004ee4 	.word	0x24004ee4
 800d0e8:	0800fc20 	.word	0x0800fc20

0800d0ec <cppMain>:
	*/
}



void cppMain() {
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
	// Enable `//printf()` using USART
	RetargetInit(&huart3);
 800d0f2:	4812      	ldr	r0, [pc, #72]	@ (800d13c <cppMain+0x50>)
 800d0f4:	f7f4 f8ae 	bl	8001254 <RetargetInit>
	uint8_t Test[] = "Hello!";
 800d0f8:	4a11      	ldr	r2, [pc, #68]	@ (800d140 <cppMain+0x54>)
 800d0fa:	463b      	mov	r3, r7
 800d0fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d100:	6018      	str	r0, [r3, #0]
 800d102:	3304      	adds	r3, #4
 800d104:	8019      	strh	r1, [r3, #0]
 800d106:	3302      	adds	r3, #2
 800d108:	0c0a      	lsrs	r2, r1, #16
 800d10a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d10c:	f3ef 8310 	mrs	r3, PRIMASK
 800d110:	60bb      	str	r3, [r7, #8]
  return(result);
 800d112:	68bb      	ldr	r3, [r7, #8]
	uint32_t primask = __get_PRIMASK();
 800d114:	60fb      	str	r3, [r7, #12]
	if(primask){
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d003      	beq.n	800d124 <cppMain+0x38>
		printf("disabled");
 800d11c:	4809      	ldr	r0, [pc, #36]	@ (800d144 <cppMain+0x58>)
 800d11e:	f000 fd11 	bl	800db44 <iprintf>
 800d122:	e002      	b.n	800d12a <cppMain+0x3e>
	}else{
		printf("enabled");
 800d124:	4808      	ldr	r0, [pc, #32]	@ (800d148 <cppMain+0x5c>)
 800d126:	f000 fd0d 	bl	800db44 <iprintf>

	for(;;) {
//		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
//		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
//		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
		HAL_Delay(1000);
 800d12a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d12e:	f7f4 fd05 	bl	8001b3c <HAL_Delay>
		//HAL_UART_Transmit(&huart3, Test, sizeof(Test),10);
		printf("Hello from C \n");
 800d132:	4806      	ldr	r0, [pc, #24]	@ (800d14c <cppMain+0x60>)
 800d134:	f000 fd6e 	bl	800dc14 <puts>
		HAL_Delay(1000);
 800d138:	bf00      	nop
 800d13a:	e7f6      	b.n	800d12a <cppMain+0x3e>
 800d13c:	240005ec 	.word	0x240005ec
 800d140:	0800fc90 	.word	0x0800fc90
 800d144:	0800fc6c 	.word	0x0800fc6c
 800d148:	0800fc78 	.word	0x0800fc78
 800d14c:	0800fc80 	.word	0x0800fc80

0800d150 <__cvt>:
 800d150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d152:	ed2d 8b02 	vpush	{d8}
 800d156:	eeb0 8b40 	vmov.f64	d8, d0
 800d15a:	b085      	sub	sp, #20
 800d15c:	4617      	mov	r7, r2
 800d15e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d160:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d162:	ee18 2a90 	vmov	r2, s17
 800d166:	f025 0520 	bic.w	r5, r5, #32
 800d16a:	2a00      	cmp	r2, #0
 800d16c:	bfb6      	itet	lt
 800d16e:	222d      	movlt	r2, #45	@ 0x2d
 800d170:	2200      	movge	r2, #0
 800d172:	eeb1 8b40 	vneglt.f64	d8, d0
 800d176:	2d46      	cmp	r5, #70	@ 0x46
 800d178:	460c      	mov	r4, r1
 800d17a:	701a      	strb	r2, [r3, #0]
 800d17c:	d004      	beq.n	800d188 <__cvt+0x38>
 800d17e:	2d45      	cmp	r5, #69	@ 0x45
 800d180:	d100      	bne.n	800d184 <__cvt+0x34>
 800d182:	3401      	adds	r4, #1
 800d184:	2102      	movs	r1, #2
 800d186:	e000      	b.n	800d18a <__cvt+0x3a>
 800d188:	2103      	movs	r1, #3
 800d18a:	ab03      	add	r3, sp, #12
 800d18c:	9301      	str	r3, [sp, #4]
 800d18e:	ab02      	add	r3, sp, #8
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	4622      	mov	r2, r4
 800d194:	4633      	mov	r3, r6
 800d196:	eeb0 0b48 	vmov.f64	d0, d8
 800d19a:	f000 ffe5 	bl	800e168 <_dtoa_r>
 800d19e:	2d47      	cmp	r5, #71	@ 0x47
 800d1a0:	d114      	bne.n	800d1cc <__cvt+0x7c>
 800d1a2:	07fb      	lsls	r3, r7, #31
 800d1a4:	d50a      	bpl.n	800d1bc <__cvt+0x6c>
 800d1a6:	1902      	adds	r2, r0, r4
 800d1a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b0:	bf08      	it	eq
 800d1b2:	9203      	streq	r2, [sp, #12]
 800d1b4:	2130      	movs	r1, #48	@ 0x30
 800d1b6:	9b03      	ldr	r3, [sp, #12]
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d319      	bcc.n	800d1f0 <__cvt+0xa0>
 800d1bc:	9b03      	ldr	r3, [sp, #12]
 800d1be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1c0:	1a1b      	subs	r3, r3, r0
 800d1c2:	6013      	str	r3, [r2, #0]
 800d1c4:	b005      	add	sp, #20
 800d1c6:	ecbd 8b02 	vpop	{d8}
 800d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1cc:	2d46      	cmp	r5, #70	@ 0x46
 800d1ce:	eb00 0204 	add.w	r2, r0, r4
 800d1d2:	d1e9      	bne.n	800d1a8 <__cvt+0x58>
 800d1d4:	7803      	ldrb	r3, [r0, #0]
 800d1d6:	2b30      	cmp	r3, #48	@ 0x30
 800d1d8:	d107      	bne.n	800d1ea <__cvt+0x9a>
 800d1da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e2:	bf1c      	itt	ne
 800d1e4:	f1c4 0401 	rsbne	r4, r4, #1
 800d1e8:	6034      	strne	r4, [r6, #0]
 800d1ea:	6833      	ldr	r3, [r6, #0]
 800d1ec:	441a      	add	r2, r3
 800d1ee:	e7db      	b.n	800d1a8 <__cvt+0x58>
 800d1f0:	1c5c      	adds	r4, r3, #1
 800d1f2:	9403      	str	r4, [sp, #12]
 800d1f4:	7019      	strb	r1, [r3, #0]
 800d1f6:	e7de      	b.n	800d1b6 <__cvt+0x66>

0800d1f8 <__exponent>:
 800d1f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1fa:	2900      	cmp	r1, #0
 800d1fc:	bfba      	itte	lt
 800d1fe:	4249      	neglt	r1, r1
 800d200:	232d      	movlt	r3, #45	@ 0x2d
 800d202:	232b      	movge	r3, #43	@ 0x2b
 800d204:	2909      	cmp	r1, #9
 800d206:	7002      	strb	r2, [r0, #0]
 800d208:	7043      	strb	r3, [r0, #1]
 800d20a:	dd29      	ble.n	800d260 <__exponent+0x68>
 800d20c:	f10d 0307 	add.w	r3, sp, #7
 800d210:	461d      	mov	r5, r3
 800d212:	270a      	movs	r7, #10
 800d214:	461a      	mov	r2, r3
 800d216:	fbb1 f6f7 	udiv	r6, r1, r7
 800d21a:	fb07 1416 	mls	r4, r7, r6, r1
 800d21e:	3430      	adds	r4, #48	@ 0x30
 800d220:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d224:	460c      	mov	r4, r1
 800d226:	2c63      	cmp	r4, #99	@ 0x63
 800d228:	f103 33ff 	add.w	r3, r3, #4294967295
 800d22c:	4631      	mov	r1, r6
 800d22e:	dcf1      	bgt.n	800d214 <__exponent+0x1c>
 800d230:	3130      	adds	r1, #48	@ 0x30
 800d232:	1e94      	subs	r4, r2, #2
 800d234:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d238:	1c41      	adds	r1, r0, #1
 800d23a:	4623      	mov	r3, r4
 800d23c:	42ab      	cmp	r3, r5
 800d23e:	d30a      	bcc.n	800d256 <__exponent+0x5e>
 800d240:	f10d 0309 	add.w	r3, sp, #9
 800d244:	1a9b      	subs	r3, r3, r2
 800d246:	42ac      	cmp	r4, r5
 800d248:	bf88      	it	hi
 800d24a:	2300      	movhi	r3, #0
 800d24c:	3302      	adds	r3, #2
 800d24e:	4403      	add	r3, r0
 800d250:	1a18      	subs	r0, r3, r0
 800d252:	b003      	add	sp, #12
 800d254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d256:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d25a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d25e:	e7ed      	b.n	800d23c <__exponent+0x44>
 800d260:	2330      	movs	r3, #48	@ 0x30
 800d262:	3130      	adds	r1, #48	@ 0x30
 800d264:	7083      	strb	r3, [r0, #2]
 800d266:	70c1      	strb	r1, [r0, #3]
 800d268:	1d03      	adds	r3, r0, #4
 800d26a:	e7f1      	b.n	800d250 <__exponent+0x58>
 800d26c:	0000      	movs	r0, r0
	...

0800d270 <_printf_float>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	b08d      	sub	sp, #52	@ 0x34
 800d276:	460c      	mov	r4, r1
 800d278:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d27c:	4616      	mov	r6, r2
 800d27e:	461f      	mov	r7, r3
 800d280:	4605      	mov	r5, r0
 800d282:	f000 fe63 	bl	800df4c <_localeconv_r>
 800d286:	f8d0 b000 	ldr.w	fp, [r0]
 800d28a:	4658      	mov	r0, fp
 800d28c:	f7f3 f878 	bl	8000380 <strlen>
 800d290:	2300      	movs	r3, #0
 800d292:	930a      	str	r3, [sp, #40]	@ 0x28
 800d294:	f8d8 3000 	ldr.w	r3, [r8]
 800d298:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d29c:	6822      	ldr	r2, [r4, #0]
 800d29e:	9005      	str	r0, [sp, #20]
 800d2a0:	3307      	adds	r3, #7
 800d2a2:	f023 0307 	bic.w	r3, r3, #7
 800d2a6:	f103 0108 	add.w	r1, r3, #8
 800d2aa:	f8c8 1000 	str.w	r1, [r8]
 800d2ae:	ed93 0b00 	vldr	d0, [r3]
 800d2b2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800d510 <_printf_float+0x2a0>
 800d2b6:	eeb0 7bc0 	vabs.f64	d7, d0
 800d2ba:	eeb4 7b46 	vcmp.f64	d7, d6
 800d2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800d2c6:	dd24      	ble.n	800d312 <_printf_float+0xa2>
 800d2c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d0:	d502      	bpl.n	800d2d8 <_printf_float+0x68>
 800d2d2:	232d      	movs	r3, #45	@ 0x2d
 800d2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2d8:	498f      	ldr	r1, [pc, #572]	@ (800d518 <_printf_float+0x2a8>)
 800d2da:	4b90      	ldr	r3, [pc, #576]	@ (800d51c <_printf_float+0x2ac>)
 800d2dc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800d2e0:	bf94      	ite	ls
 800d2e2:	4688      	movls	r8, r1
 800d2e4:	4698      	movhi	r8, r3
 800d2e6:	f022 0204 	bic.w	r2, r2, #4
 800d2ea:	2303      	movs	r3, #3
 800d2ec:	6123      	str	r3, [r4, #16]
 800d2ee:	6022      	str	r2, [r4, #0]
 800d2f0:	f04f 0a00 	mov.w	sl, #0
 800d2f4:	9700      	str	r7, [sp, #0]
 800d2f6:	4633      	mov	r3, r6
 800d2f8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d2fa:	4621      	mov	r1, r4
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	f000 f9d1 	bl	800d6a4 <_printf_common>
 800d302:	3001      	adds	r0, #1
 800d304:	f040 8089 	bne.w	800d41a <_printf_float+0x1aa>
 800d308:	f04f 30ff 	mov.w	r0, #4294967295
 800d30c:	b00d      	add	sp, #52	@ 0x34
 800d30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d312:	eeb4 0b40 	vcmp.f64	d0, d0
 800d316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d31a:	d709      	bvc.n	800d330 <_printf_float+0xc0>
 800d31c:	ee10 3a90 	vmov	r3, s1
 800d320:	2b00      	cmp	r3, #0
 800d322:	bfbc      	itt	lt
 800d324:	232d      	movlt	r3, #45	@ 0x2d
 800d326:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d32a:	497d      	ldr	r1, [pc, #500]	@ (800d520 <_printf_float+0x2b0>)
 800d32c:	4b7d      	ldr	r3, [pc, #500]	@ (800d524 <_printf_float+0x2b4>)
 800d32e:	e7d5      	b.n	800d2dc <_printf_float+0x6c>
 800d330:	6863      	ldr	r3, [r4, #4]
 800d332:	1c59      	adds	r1, r3, #1
 800d334:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800d338:	d139      	bne.n	800d3ae <_printf_float+0x13e>
 800d33a:	2306      	movs	r3, #6
 800d33c:	6063      	str	r3, [r4, #4]
 800d33e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d342:	2300      	movs	r3, #0
 800d344:	6022      	str	r2, [r4, #0]
 800d346:	9303      	str	r3, [sp, #12]
 800d348:	ab0a      	add	r3, sp, #40	@ 0x28
 800d34a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d34e:	ab09      	add	r3, sp, #36	@ 0x24
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	6861      	ldr	r1, [r4, #4]
 800d354:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d358:	4628      	mov	r0, r5
 800d35a:	f7ff fef9 	bl	800d150 <__cvt>
 800d35e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d362:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d364:	4680      	mov	r8, r0
 800d366:	d129      	bne.n	800d3bc <_printf_float+0x14c>
 800d368:	1cc8      	adds	r0, r1, #3
 800d36a:	db02      	blt.n	800d372 <_printf_float+0x102>
 800d36c:	6863      	ldr	r3, [r4, #4]
 800d36e:	4299      	cmp	r1, r3
 800d370:	dd41      	ble.n	800d3f6 <_printf_float+0x186>
 800d372:	f1a9 0902 	sub.w	r9, r9, #2
 800d376:	fa5f f989 	uxtb.w	r9, r9
 800d37a:	3901      	subs	r1, #1
 800d37c:	464a      	mov	r2, r9
 800d37e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d382:	9109      	str	r1, [sp, #36]	@ 0x24
 800d384:	f7ff ff38 	bl	800d1f8 <__exponent>
 800d388:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d38a:	1813      	adds	r3, r2, r0
 800d38c:	2a01      	cmp	r2, #1
 800d38e:	4682      	mov	sl, r0
 800d390:	6123      	str	r3, [r4, #16]
 800d392:	dc02      	bgt.n	800d39a <_printf_float+0x12a>
 800d394:	6822      	ldr	r2, [r4, #0]
 800d396:	07d2      	lsls	r2, r2, #31
 800d398:	d501      	bpl.n	800d39e <_printf_float+0x12e>
 800d39a:	3301      	adds	r3, #1
 800d39c:	6123      	str	r3, [r4, #16]
 800d39e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d0a6      	beq.n	800d2f4 <_printf_float+0x84>
 800d3a6:	232d      	movs	r3, #45	@ 0x2d
 800d3a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3ac:	e7a2      	b.n	800d2f4 <_printf_float+0x84>
 800d3ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d3b2:	d1c4      	bne.n	800d33e <_printf_float+0xce>
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1c2      	bne.n	800d33e <_printf_float+0xce>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e7bf      	b.n	800d33c <_printf_float+0xcc>
 800d3bc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d3c0:	d9db      	bls.n	800d37a <_printf_float+0x10a>
 800d3c2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800d3c6:	d118      	bne.n	800d3fa <_printf_float+0x18a>
 800d3c8:	2900      	cmp	r1, #0
 800d3ca:	6863      	ldr	r3, [r4, #4]
 800d3cc:	dd0b      	ble.n	800d3e6 <_printf_float+0x176>
 800d3ce:	6121      	str	r1, [r4, #16]
 800d3d0:	b913      	cbnz	r3, 800d3d8 <_printf_float+0x168>
 800d3d2:	6822      	ldr	r2, [r4, #0]
 800d3d4:	07d0      	lsls	r0, r2, #31
 800d3d6:	d502      	bpl.n	800d3de <_printf_float+0x16e>
 800d3d8:	3301      	adds	r3, #1
 800d3da:	440b      	add	r3, r1
 800d3dc:	6123      	str	r3, [r4, #16]
 800d3de:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d3e0:	f04f 0a00 	mov.w	sl, #0
 800d3e4:	e7db      	b.n	800d39e <_printf_float+0x12e>
 800d3e6:	b913      	cbnz	r3, 800d3ee <_printf_float+0x17e>
 800d3e8:	6822      	ldr	r2, [r4, #0]
 800d3ea:	07d2      	lsls	r2, r2, #31
 800d3ec:	d501      	bpl.n	800d3f2 <_printf_float+0x182>
 800d3ee:	3302      	adds	r3, #2
 800d3f0:	e7f4      	b.n	800d3dc <_printf_float+0x16c>
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	e7f2      	b.n	800d3dc <_printf_float+0x16c>
 800d3f6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800d3fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3fc:	4299      	cmp	r1, r3
 800d3fe:	db05      	blt.n	800d40c <_printf_float+0x19c>
 800d400:	6823      	ldr	r3, [r4, #0]
 800d402:	6121      	str	r1, [r4, #16]
 800d404:	07d8      	lsls	r0, r3, #31
 800d406:	d5ea      	bpl.n	800d3de <_printf_float+0x16e>
 800d408:	1c4b      	adds	r3, r1, #1
 800d40a:	e7e7      	b.n	800d3dc <_printf_float+0x16c>
 800d40c:	2900      	cmp	r1, #0
 800d40e:	bfd4      	ite	le
 800d410:	f1c1 0202 	rsble	r2, r1, #2
 800d414:	2201      	movgt	r2, #1
 800d416:	4413      	add	r3, r2
 800d418:	e7e0      	b.n	800d3dc <_printf_float+0x16c>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	055a      	lsls	r2, r3, #21
 800d41e:	d407      	bmi.n	800d430 <_printf_float+0x1c0>
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	4642      	mov	r2, r8
 800d424:	4631      	mov	r1, r6
 800d426:	4628      	mov	r0, r5
 800d428:	47b8      	blx	r7
 800d42a:	3001      	adds	r0, #1
 800d42c:	d12a      	bne.n	800d484 <_printf_float+0x214>
 800d42e:	e76b      	b.n	800d308 <_printf_float+0x98>
 800d430:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d434:	f240 80e0 	bls.w	800d5f8 <_printf_float+0x388>
 800d438:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d43c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d444:	d133      	bne.n	800d4ae <_printf_float+0x23e>
 800d446:	4a38      	ldr	r2, [pc, #224]	@ (800d528 <_printf_float+0x2b8>)
 800d448:	2301      	movs	r3, #1
 800d44a:	4631      	mov	r1, r6
 800d44c:	4628      	mov	r0, r5
 800d44e:	47b8      	blx	r7
 800d450:	3001      	adds	r0, #1
 800d452:	f43f af59 	beq.w	800d308 <_printf_float+0x98>
 800d456:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d45a:	4543      	cmp	r3, r8
 800d45c:	db02      	blt.n	800d464 <_printf_float+0x1f4>
 800d45e:	6823      	ldr	r3, [r4, #0]
 800d460:	07d8      	lsls	r0, r3, #31
 800d462:	d50f      	bpl.n	800d484 <_printf_float+0x214>
 800d464:	9b05      	ldr	r3, [sp, #20]
 800d466:	465a      	mov	r2, fp
 800d468:	4631      	mov	r1, r6
 800d46a:	4628      	mov	r0, r5
 800d46c:	47b8      	blx	r7
 800d46e:	3001      	adds	r0, #1
 800d470:	f43f af4a 	beq.w	800d308 <_printf_float+0x98>
 800d474:	f04f 0900 	mov.w	r9, #0
 800d478:	f108 38ff 	add.w	r8, r8, #4294967295
 800d47c:	f104 0a1a 	add.w	sl, r4, #26
 800d480:	45c8      	cmp	r8, r9
 800d482:	dc09      	bgt.n	800d498 <_printf_float+0x228>
 800d484:	6823      	ldr	r3, [r4, #0]
 800d486:	079b      	lsls	r3, r3, #30
 800d488:	f100 8107 	bmi.w	800d69a <_printf_float+0x42a>
 800d48c:	68e0      	ldr	r0, [r4, #12]
 800d48e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d490:	4298      	cmp	r0, r3
 800d492:	bfb8      	it	lt
 800d494:	4618      	movlt	r0, r3
 800d496:	e739      	b.n	800d30c <_printf_float+0x9c>
 800d498:	2301      	movs	r3, #1
 800d49a:	4652      	mov	r2, sl
 800d49c:	4631      	mov	r1, r6
 800d49e:	4628      	mov	r0, r5
 800d4a0:	47b8      	blx	r7
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	f43f af30 	beq.w	800d308 <_printf_float+0x98>
 800d4a8:	f109 0901 	add.w	r9, r9, #1
 800d4ac:	e7e8      	b.n	800d480 <_printf_float+0x210>
 800d4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	dc3b      	bgt.n	800d52c <_printf_float+0x2bc>
 800d4b4:	4a1c      	ldr	r2, [pc, #112]	@ (800d528 <_printf_float+0x2b8>)
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	47b8      	blx	r7
 800d4be:	3001      	adds	r0, #1
 800d4c0:	f43f af22 	beq.w	800d308 <_printf_float+0x98>
 800d4c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d4c8:	ea59 0303 	orrs.w	r3, r9, r3
 800d4cc:	d102      	bne.n	800d4d4 <_printf_float+0x264>
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	07d9      	lsls	r1, r3, #31
 800d4d2:	d5d7      	bpl.n	800d484 <_printf_float+0x214>
 800d4d4:	9b05      	ldr	r3, [sp, #20]
 800d4d6:	465a      	mov	r2, fp
 800d4d8:	4631      	mov	r1, r6
 800d4da:	4628      	mov	r0, r5
 800d4dc:	47b8      	blx	r7
 800d4de:	3001      	adds	r0, #1
 800d4e0:	f43f af12 	beq.w	800d308 <_printf_float+0x98>
 800d4e4:	f04f 0a00 	mov.w	sl, #0
 800d4e8:	f104 0b1a 	add.w	fp, r4, #26
 800d4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4ee:	425b      	negs	r3, r3
 800d4f0:	4553      	cmp	r3, sl
 800d4f2:	dc01      	bgt.n	800d4f8 <_printf_float+0x288>
 800d4f4:	464b      	mov	r3, r9
 800d4f6:	e794      	b.n	800d422 <_printf_float+0x1b2>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	465a      	mov	r2, fp
 800d4fc:	4631      	mov	r1, r6
 800d4fe:	4628      	mov	r0, r5
 800d500:	47b8      	blx	r7
 800d502:	3001      	adds	r0, #1
 800d504:	f43f af00 	beq.w	800d308 <_printf_float+0x98>
 800d508:	f10a 0a01 	add.w	sl, sl, #1
 800d50c:	e7ee      	b.n	800d4ec <_printf_float+0x27c>
 800d50e:	bf00      	nop
 800d510:	ffffffff 	.word	0xffffffff
 800d514:	7fefffff 	.word	0x7fefffff
 800d518:	0800fcfc 	.word	0x0800fcfc
 800d51c:	0800fd00 	.word	0x0800fd00
 800d520:	0800fd04 	.word	0x0800fd04
 800d524:	0800fd08 	.word	0x0800fd08
 800d528:	0800fd0c 	.word	0x0800fd0c
 800d52c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d52e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d532:	4553      	cmp	r3, sl
 800d534:	bfa8      	it	ge
 800d536:	4653      	movge	r3, sl
 800d538:	2b00      	cmp	r3, #0
 800d53a:	4699      	mov	r9, r3
 800d53c:	dc37      	bgt.n	800d5ae <_printf_float+0x33e>
 800d53e:	2300      	movs	r3, #0
 800d540:	9307      	str	r3, [sp, #28]
 800d542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d546:	f104 021a 	add.w	r2, r4, #26
 800d54a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d54c:	9907      	ldr	r1, [sp, #28]
 800d54e:	9306      	str	r3, [sp, #24]
 800d550:	eba3 0309 	sub.w	r3, r3, r9
 800d554:	428b      	cmp	r3, r1
 800d556:	dc31      	bgt.n	800d5bc <_printf_float+0x34c>
 800d558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d55a:	459a      	cmp	sl, r3
 800d55c:	dc3b      	bgt.n	800d5d6 <_printf_float+0x366>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	07da      	lsls	r2, r3, #31
 800d562:	d438      	bmi.n	800d5d6 <_printf_float+0x366>
 800d564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d566:	ebaa 0903 	sub.w	r9, sl, r3
 800d56a:	9b06      	ldr	r3, [sp, #24]
 800d56c:	ebaa 0303 	sub.w	r3, sl, r3
 800d570:	4599      	cmp	r9, r3
 800d572:	bfa8      	it	ge
 800d574:	4699      	movge	r9, r3
 800d576:	f1b9 0f00 	cmp.w	r9, #0
 800d57a:	dc34      	bgt.n	800d5e6 <_printf_float+0x376>
 800d57c:	f04f 0800 	mov.w	r8, #0
 800d580:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d584:	f104 0b1a 	add.w	fp, r4, #26
 800d588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d58a:	ebaa 0303 	sub.w	r3, sl, r3
 800d58e:	eba3 0309 	sub.w	r3, r3, r9
 800d592:	4543      	cmp	r3, r8
 800d594:	f77f af76 	ble.w	800d484 <_printf_float+0x214>
 800d598:	2301      	movs	r3, #1
 800d59a:	465a      	mov	r2, fp
 800d59c:	4631      	mov	r1, r6
 800d59e:	4628      	mov	r0, r5
 800d5a0:	47b8      	blx	r7
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	f43f aeb0 	beq.w	800d308 <_printf_float+0x98>
 800d5a8:	f108 0801 	add.w	r8, r8, #1
 800d5ac:	e7ec      	b.n	800d588 <_printf_float+0x318>
 800d5ae:	4642      	mov	r2, r8
 800d5b0:	4631      	mov	r1, r6
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	47b8      	blx	r7
 800d5b6:	3001      	adds	r0, #1
 800d5b8:	d1c1      	bne.n	800d53e <_printf_float+0x2ce>
 800d5ba:	e6a5      	b.n	800d308 <_printf_float+0x98>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	4631      	mov	r1, r6
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	9206      	str	r2, [sp, #24]
 800d5c4:	47b8      	blx	r7
 800d5c6:	3001      	adds	r0, #1
 800d5c8:	f43f ae9e 	beq.w	800d308 <_printf_float+0x98>
 800d5cc:	9b07      	ldr	r3, [sp, #28]
 800d5ce:	9a06      	ldr	r2, [sp, #24]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	9307      	str	r3, [sp, #28]
 800d5d4:	e7b9      	b.n	800d54a <_printf_float+0x2da>
 800d5d6:	9b05      	ldr	r3, [sp, #20]
 800d5d8:	465a      	mov	r2, fp
 800d5da:	4631      	mov	r1, r6
 800d5dc:	4628      	mov	r0, r5
 800d5de:	47b8      	blx	r7
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	d1bf      	bne.n	800d564 <_printf_float+0x2f4>
 800d5e4:	e690      	b.n	800d308 <_printf_float+0x98>
 800d5e6:	9a06      	ldr	r2, [sp, #24]
 800d5e8:	464b      	mov	r3, r9
 800d5ea:	4442      	add	r2, r8
 800d5ec:	4631      	mov	r1, r6
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	47b8      	blx	r7
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	d1c2      	bne.n	800d57c <_printf_float+0x30c>
 800d5f6:	e687      	b.n	800d308 <_printf_float+0x98>
 800d5f8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800d5fc:	f1b9 0f01 	cmp.w	r9, #1
 800d600:	dc01      	bgt.n	800d606 <_printf_float+0x396>
 800d602:	07db      	lsls	r3, r3, #31
 800d604:	d536      	bpl.n	800d674 <_printf_float+0x404>
 800d606:	2301      	movs	r3, #1
 800d608:	4642      	mov	r2, r8
 800d60a:	4631      	mov	r1, r6
 800d60c:	4628      	mov	r0, r5
 800d60e:	47b8      	blx	r7
 800d610:	3001      	adds	r0, #1
 800d612:	f43f ae79 	beq.w	800d308 <_printf_float+0x98>
 800d616:	9b05      	ldr	r3, [sp, #20]
 800d618:	465a      	mov	r2, fp
 800d61a:	4631      	mov	r1, r6
 800d61c:	4628      	mov	r0, r5
 800d61e:	47b8      	blx	r7
 800d620:	3001      	adds	r0, #1
 800d622:	f43f ae71 	beq.w	800d308 <_printf_float+0x98>
 800d626:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d62a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d632:	f109 39ff 	add.w	r9, r9, #4294967295
 800d636:	d018      	beq.n	800d66a <_printf_float+0x3fa>
 800d638:	464b      	mov	r3, r9
 800d63a:	f108 0201 	add.w	r2, r8, #1
 800d63e:	4631      	mov	r1, r6
 800d640:	4628      	mov	r0, r5
 800d642:	47b8      	blx	r7
 800d644:	3001      	adds	r0, #1
 800d646:	d10c      	bne.n	800d662 <_printf_float+0x3f2>
 800d648:	e65e      	b.n	800d308 <_printf_float+0x98>
 800d64a:	2301      	movs	r3, #1
 800d64c:	465a      	mov	r2, fp
 800d64e:	4631      	mov	r1, r6
 800d650:	4628      	mov	r0, r5
 800d652:	47b8      	blx	r7
 800d654:	3001      	adds	r0, #1
 800d656:	f43f ae57 	beq.w	800d308 <_printf_float+0x98>
 800d65a:	f108 0801 	add.w	r8, r8, #1
 800d65e:	45c8      	cmp	r8, r9
 800d660:	dbf3      	blt.n	800d64a <_printf_float+0x3da>
 800d662:	4653      	mov	r3, sl
 800d664:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d668:	e6dc      	b.n	800d424 <_printf_float+0x1b4>
 800d66a:	f04f 0800 	mov.w	r8, #0
 800d66e:	f104 0b1a 	add.w	fp, r4, #26
 800d672:	e7f4      	b.n	800d65e <_printf_float+0x3ee>
 800d674:	2301      	movs	r3, #1
 800d676:	4642      	mov	r2, r8
 800d678:	e7e1      	b.n	800d63e <_printf_float+0x3ce>
 800d67a:	2301      	movs	r3, #1
 800d67c:	464a      	mov	r2, r9
 800d67e:	4631      	mov	r1, r6
 800d680:	4628      	mov	r0, r5
 800d682:	47b8      	blx	r7
 800d684:	3001      	adds	r0, #1
 800d686:	f43f ae3f 	beq.w	800d308 <_printf_float+0x98>
 800d68a:	f108 0801 	add.w	r8, r8, #1
 800d68e:	68e3      	ldr	r3, [r4, #12]
 800d690:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d692:	1a5b      	subs	r3, r3, r1
 800d694:	4543      	cmp	r3, r8
 800d696:	dcf0      	bgt.n	800d67a <_printf_float+0x40a>
 800d698:	e6f8      	b.n	800d48c <_printf_float+0x21c>
 800d69a:	f04f 0800 	mov.w	r8, #0
 800d69e:	f104 0919 	add.w	r9, r4, #25
 800d6a2:	e7f4      	b.n	800d68e <_printf_float+0x41e>

0800d6a4 <_printf_common>:
 800d6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6a8:	4616      	mov	r6, r2
 800d6aa:	4698      	mov	r8, r3
 800d6ac:	688a      	ldr	r2, [r1, #8]
 800d6ae:	690b      	ldr	r3, [r1, #16]
 800d6b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	bfb8      	it	lt
 800d6b8:	4613      	movlt	r3, r2
 800d6ba:	6033      	str	r3, [r6, #0]
 800d6bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d6c0:	4607      	mov	r7, r0
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	b10a      	cbz	r2, 800d6ca <_printf_common+0x26>
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	6033      	str	r3, [r6, #0]
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	0699      	lsls	r1, r3, #26
 800d6ce:	bf42      	ittt	mi
 800d6d0:	6833      	ldrmi	r3, [r6, #0]
 800d6d2:	3302      	addmi	r3, #2
 800d6d4:	6033      	strmi	r3, [r6, #0]
 800d6d6:	6825      	ldr	r5, [r4, #0]
 800d6d8:	f015 0506 	ands.w	r5, r5, #6
 800d6dc:	d106      	bne.n	800d6ec <_printf_common+0x48>
 800d6de:	f104 0a19 	add.w	sl, r4, #25
 800d6e2:	68e3      	ldr	r3, [r4, #12]
 800d6e4:	6832      	ldr	r2, [r6, #0]
 800d6e6:	1a9b      	subs	r3, r3, r2
 800d6e8:	42ab      	cmp	r3, r5
 800d6ea:	dc26      	bgt.n	800d73a <_printf_common+0x96>
 800d6ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d6f0:	6822      	ldr	r2, [r4, #0]
 800d6f2:	3b00      	subs	r3, #0
 800d6f4:	bf18      	it	ne
 800d6f6:	2301      	movne	r3, #1
 800d6f8:	0692      	lsls	r2, r2, #26
 800d6fa:	d42b      	bmi.n	800d754 <_printf_common+0xb0>
 800d6fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d700:	4641      	mov	r1, r8
 800d702:	4638      	mov	r0, r7
 800d704:	47c8      	blx	r9
 800d706:	3001      	adds	r0, #1
 800d708:	d01e      	beq.n	800d748 <_printf_common+0xa4>
 800d70a:	6823      	ldr	r3, [r4, #0]
 800d70c:	6922      	ldr	r2, [r4, #16]
 800d70e:	f003 0306 	and.w	r3, r3, #6
 800d712:	2b04      	cmp	r3, #4
 800d714:	bf02      	ittt	eq
 800d716:	68e5      	ldreq	r5, [r4, #12]
 800d718:	6833      	ldreq	r3, [r6, #0]
 800d71a:	1aed      	subeq	r5, r5, r3
 800d71c:	68a3      	ldr	r3, [r4, #8]
 800d71e:	bf0c      	ite	eq
 800d720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d724:	2500      	movne	r5, #0
 800d726:	4293      	cmp	r3, r2
 800d728:	bfc4      	itt	gt
 800d72a:	1a9b      	subgt	r3, r3, r2
 800d72c:	18ed      	addgt	r5, r5, r3
 800d72e:	2600      	movs	r6, #0
 800d730:	341a      	adds	r4, #26
 800d732:	42b5      	cmp	r5, r6
 800d734:	d11a      	bne.n	800d76c <_printf_common+0xc8>
 800d736:	2000      	movs	r0, #0
 800d738:	e008      	b.n	800d74c <_printf_common+0xa8>
 800d73a:	2301      	movs	r3, #1
 800d73c:	4652      	mov	r2, sl
 800d73e:	4641      	mov	r1, r8
 800d740:	4638      	mov	r0, r7
 800d742:	47c8      	blx	r9
 800d744:	3001      	adds	r0, #1
 800d746:	d103      	bne.n	800d750 <_printf_common+0xac>
 800d748:	f04f 30ff 	mov.w	r0, #4294967295
 800d74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d750:	3501      	adds	r5, #1
 800d752:	e7c6      	b.n	800d6e2 <_printf_common+0x3e>
 800d754:	18e1      	adds	r1, r4, r3
 800d756:	1c5a      	adds	r2, r3, #1
 800d758:	2030      	movs	r0, #48	@ 0x30
 800d75a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d75e:	4422      	add	r2, r4
 800d760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d768:	3302      	adds	r3, #2
 800d76a:	e7c7      	b.n	800d6fc <_printf_common+0x58>
 800d76c:	2301      	movs	r3, #1
 800d76e:	4622      	mov	r2, r4
 800d770:	4641      	mov	r1, r8
 800d772:	4638      	mov	r0, r7
 800d774:	47c8      	blx	r9
 800d776:	3001      	adds	r0, #1
 800d778:	d0e6      	beq.n	800d748 <_printf_common+0xa4>
 800d77a:	3601      	adds	r6, #1
 800d77c:	e7d9      	b.n	800d732 <_printf_common+0x8e>
	...

0800d780 <_printf_i>:
 800d780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d784:	7e0f      	ldrb	r7, [r1, #24]
 800d786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d788:	2f78      	cmp	r7, #120	@ 0x78
 800d78a:	4691      	mov	r9, r2
 800d78c:	4680      	mov	r8, r0
 800d78e:	460c      	mov	r4, r1
 800d790:	469a      	mov	sl, r3
 800d792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d796:	d807      	bhi.n	800d7a8 <_printf_i+0x28>
 800d798:	2f62      	cmp	r7, #98	@ 0x62
 800d79a:	d80a      	bhi.n	800d7b2 <_printf_i+0x32>
 800d79c:	2f00      	cmp	r7, #0
 800d79e:	f000 80d2 	beq.w	800d946 <_printf_i+0x1c6>
 800d7a2:	2f58      	cmp	r7, #88	@ 0x58
 800d7a4:	f000 80b9 	beq.w	800d91a <_printf_i+0x19a>
 800d7a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d7b0:	e03a      	b.n	800d828 <_printf_i+0xa8>
 800d7b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d7b6:	2b15      	cmp	r3, #21
 800d7b8:	d8f6      	bhi.n	800d7a8 <_printf_i+0x28>
 800d7ba:	a101      	add	r1, pc, #4	@ (adr r1, 800d7c0 <_printf_i+0x40>)
 800d7bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7c0:	0800d819 	.word	0x0800d819
 800d7c4:	0800d82d 	.word	0x0800d82d
 800d7c8:	0800d7a9 	.word	0x0800d7a9
 800d7cc:	0800d7a9 	.word	0x0800d7a9
 800d7d0:	0800d7a9 	.word	0x0800d7a9
 800d7d4:	0800d7a9 	.word	0x0800d7a9
 800d7d8:	0800d82d 	.word	0x0800d82d
 800d7dc:	0800d7a9 	.word	0x0800d7a9
 800d7e0:	0800d7a9 	.word	0x0800d7a9
 800d7e4:	0800d7a9 	.word	0x0800d7a9
 800d7e8:	0800d7a9 	.word	0x0800d7a9
 800d7ec:	0800d92d 	.word	0x0800d92d
 800d7f0:	0800d857 	.word	0x0800d857
 800d7f4:	0800d8e7 	.word	0x0800d8e7
 800d7f8:	0800d7a9 	.word	0x0800d7a9
 800d7fc:	0800d7a9 	.word	0x0800d7a9
 800d800:	0800d94f 	.word	0x0800d94f
 800d804:	0800d7a9 	.word	0x0800d7a9
 800d808:	0800d857 	.word	0x0800d857
 800d80c:	0800d7a9 	.word	0x0800d7a9
 800d810:	0800d7a9 	.word	0x0800d7a9
 800d814:	0800d8ef 	.word	0x0800d8ef
 800d818:	6833      	ldr	r3, [r6, #0]
 800d81a:	1d1a      	adds	r2, r3, #4
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6032      	str	r2, [r6, #0]
 800d820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d828:	2301      	movs	r3, #1
 800d82a:	e09d      	b.n	800d968 <_printf_i+0x1e8>
 800d82c:	6833      	ldr	r3, [r6, #0]
 800d82e:	6820      	ldr	r0, [r4, #0]
 800d830:	1d19      	adds	r1, r3, #4
 800d832:	6031      	str	r1, [r6, #0]
 800d834:	0606      	lsls	r6, r0, #24
 800d836:	d501      	bpl.n	800d83c <_printf_i+0xbc>
 800d838:	681d      	ldr	r5, [r3, #0]
 800d83a:	e003      	b.n	800d844 <_printf_i+0xc4>
 800d83c:	0645      	lsls	r5, r0, #25
 800d83e:	d5fb      	bpl.n	800d838 <_printf_i+0xb8>
 800d840:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d844:	2d00      	cmp	r5, #0
 800d846:	da03      	bge.n	800d850 <_printf_i+0xd0>
 800d848:	232d      	movs	r3, #45	@ 0x2d
 800d84a:	426d      	negs	r5, r5
 800d84c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d850:	4859      	ldr	r0, [pc, #356]	@ (800d9b8 <_printf_i+0x238>)
 800d852:	230a      	movs	r3, #10
 800d854:	e011      	b.n	800d87a <_printf_i+0xfa>
 800d856:	6821      	ldr	r1, [r4, #0]
 800d858:	6833      	ldr	r3, [r6, #0]
 800d85a:	0608      	lsls	r0, r1, #24
 800d85c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d860:	d402      	bmi.n	800d868 <_printf_i+0xe8>
 800d862:	0649      	lsls	r1, r1, #25
 800d864:	bf48      	it	mi
 800d866:	b2ad      	uxthmi	r5, r5
 800d868:	2f6f      	cmp	r7, #111	@ 0x6f
 800d86a:	4853      	ldr	r0, [pc, #332]	@ (800d9b8 <_printf_i+0x238>)
 800d86c:	6033      	str	r3, [r6, #0]
 800d86e:	bf14      	ite	ne
 800d870:	230a      	movne	r3, #10
 800d872:	2308      	moveq	r3, #8
 800d874:	2100      	movs	r1, #0
 800d876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d87a:	6866      	ldr	r6, [r4, #4]
 800d87c:	60a6      	str	r6, [r4, #8]
 800d87e:	2e00      	cmp	r6, #0
 800d880:	bfa2      	ittt	ge
 800d882:	6821      	ldrge	r1, [r4, #0]
 800d884:	f021 0104 	bicge.w	r1, r1, #4
 800d888:	6021      	strge	r1, [r4, #0]
 800d88a:	b90d      	cbnz	r5, 800d890 <_printf_i+0x110>
 800d88c:	2e00      	cmp	r6, #0
 800d88e:	d04b      	beq.n	800d928 <_printf_i+0x1a8>
 800d890:	4616      	mov	r6, r2
 800d892:	fbb5 f1f3 	udiv	r1, r5, r3
 800d896:	fb03 5711 	mls	r7, r3, r1, r5
 800d89a:	5dc7      	ldrb	r7, [r0, r7]
 800d89c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8a0:	462f      	mov	r7, r5
 800d8a2:	42bb      	cmp	r3, r7
 800d8a4:	460d      	mov	r5, r1
 800d8a6:	d9f4      	bls.n	800d892 <_printf_i+0x112>
 800d8a8:	2b08      	cmp	r3, #8
 800d8aa:	d10b      	bne.n	800d8c4 <_printf_i+0x144>
 800d8ac:	6823      	ldr	r3, [r4, #0]
 800d8ae:	07df      	lsls	r7, r3, #31
 800d8b0:	d508      	bpl.n	800d8c4 <_printf_i+0x144>
 800d8b2:	6923      	ldr	r3, [r4, #16]
 800d8b4:	6861      	ldr	r1, [r4, #4]
 800d8b6:	4299      	cmp	r1, r3
 800d8b8:	bfde      	ittt	le
 800d8ba:	2330      	movle	r3, #48	@ 0x30
 800d8bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d8c4:	1b92      	subs	r2, r2, r6
 800d8c6:	6122      	str	r2, [r4, #16]
 800d8c8:	f8cd a000 	str.w	sl, [sp]
 800d8cc:	464b      	mov	r3, r9
 800d8ce:	aa03      	add	r2, sp, #12
 800d8d0:	4621      	mov	r1, r4
 800d8d2:	4640      	mov	r0, r8
 800d8d4:	f7ff fee6 	bl	800d6a4 <_printf_common>
 800d8d8:	3001      	adds	r0, #1
 800d8da:	d14a      	bne.n	800d972 <_printf_i+0x1f2>
 800d8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e0:	b004      	add	sp, #16
 800d8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	f043 0320 	orr.w	r3, r3, #32
 800d8ec:	6023      	str	r3, [r4, #0]
 800d8ee:	4833      	ldr	r0, [pc, #204]	@ (800d9bc <_printf_i+0x23c>)
 800d8f0:	2778      	movs	r7, #120	@ 0x78
 800d8f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d8f6:	6823      	ldr	r3, [r4, #0]
 800d8f8:	6831      	ldr	r1, [r6, #0]
 800d8fa:	061f      	lsls	r7, r3, #24
 800d8fc:	f851 5b04 	ldr.w	r5, [r1], #4
 800d900:	d402      	bmi.n	800d908 <_printf_i+0x188>
 800d902:	065f      	lsls	r7, r3, #25
 800d904:	bf48      	it	mi
 800d906:	b2ad      	uxthmi	r5, r5
 800d908:	6031      	str	r1, [r6, #0]
 800d90a:	07d9      	lsls	r1, r3, #31
 800d90c:	bf44      	itt	mi
 800d90e:	f043 0320 	orrmi.w	r3, r3, #32
 800d912:	6023      	strmi	r3, [r4, #0]
 800d914:	b11d      	cbz	r5, 800d91e <_printf_i+0x19e>
 800d916:	2310      	movs	r3, #16
 800d918:	e7ac      	b.n	800d874 <_printf_i+0xf4>
 800d91a:	4827      	ldr	r0, [pc, #156]	@ (800d9b8 <_printf_i+0x238>)
 800d91c:	e7e9      	b.n	800d8f2 <_printf_i+0x172>
 800d91e:	6823      	ldr	r3, [r4, #0]
 800d920:	f023 0320 	bic.w	r3, r3, #32
 800d924:	6023      	str	r3, [r4, #0]
 800d926:	e7f6      	b.n	800d916 <_printf_i+0x196>
 800d928:	4616      	mov	r6, r2
 800d92a:	e7bd      	b.n	800d8a8 <_printf_i+0x128>
 800d92c:	6833      	ldr	r3, [r6, #0]
 800d92e:	6825      	ldr	r5, [r4, #0]
 800d930:	6961      	ldr	r1, [r4, #20]
 800d932:	1d18      	adds	r0, r3, #4
 800d934:	6030      	str	r0, [r6, #0]
 800d936:	062e      	lsls	r6, r5, #24
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	d501      	bpl.n	800d940 <_printf_i+0x1c0>
 800d93c:	6019      	str	r1, [r3, #0]
 800d93e:	e002      	b.n	800d946 <_printf_i+0x1c6>
 800d940:	0668      	lsls	r0, r5, #25
 800d942:	d5fb      	bpl.n	800d93c <_printf_i+0x1bc>
 800d944:	8019      	strh	r1, [r3, #0]
 800d946:	2300      	movs	r3, #0
 800d948:	6123      	str	r3, [r4, #16]
 800d94a:	4616      	mov	r6, r2
 800d94c:	e7bc      	b.n	800d8c8 <_printf_i+0x148>
 800d94e:	6833      	ldr	r3, [r6, #0]
 800d950:	1d1a      	adds	r2, r3, #4
 800d952:	6032      	str	r2, [r6, #0]
 800d954:	681e      	ldr	r6, [r3, #0]
 800d956:	6862      	ldr	r2, [r4, #4]
 800d958:	2100      	movs	r1, #0
 800d95a:	4630      	mov	r0, r6
 800d95c:	f7f2 fcc0 	bl	80002e0 <memchr>
 800d960:	b108      	cbz	r0, 800d966 <_printf_i+0x1e6>
 800d962:	1b80      	subs	r0, r0, r6
 800d964:	6060      	str	r0, [r4, #4]
 800d966:	6863      	ldr	r3, [r4, #4]
 800d968:	6123      	str	r3, [r4, #16]
 800d96a:	2300      	movs	r3, #0
 800d96c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d970:	e7aa      	b.n	800d8c8 <_printf_i+0x148>
 800d972:	6923      	ldr	r3, [r4, #16]
 800d974:	4632      	mov	r2, r6
 800d976:	4649      	mov	r1, r9
 800d978:	4640      	mov	r0, r8
 800d97a:	47d0      	blx	sl
 800d97c:	3001      	adds	r0, #1
 800d97e:	d0ad      	beq.n	800d8dc <_printf_i+0x15c>
 800d980:	6823      	ldr	r3, [r4, #0]
 800d982:	079b      	lsls	r3, r3, #30
 800d984:	d413      	bmi.n	800d9ae <_printf_i+0x22e>
 800d986:	68e0      	ldr	r0, [r4, #12]
 800d988:	9b03      	ldr	r3, [sp, #12]
 800d98a:	4298      	cmp	r0, r3
 800d98c:	bfb8      	it	lt
 800d98e:	4618      	movlt	r0, r3
 800d990:	e7a6      	b.n	800d8e0 <_printf_i+0x160>
 800d992:	2301      	movs	r3, #1
 800d994:	4632      	mov	r2, r6
 800d996:	4649      	mov	r1, r9
 800d998:	4640      	mov	r0, r8
 800d99a:	47d0      	blx	sl
 800d99c:	3001      	adds	r0, #1
 800d99e:	d09d      	beq.n	800d8dc <_printf_i+0x15c>
 800d9a0:	3501      	adds	r5, #1
 800d9a2:	68e3      	ldr	r3, [r4, #12]
 800d9a4:	9903      	ldr	r1, [sp, #12]
 800d9a6:	1a5b      	subs	r3, r3, r1
 800d9a8:	42ab      	cmp	r3, r5
 800d9aa:	dcf2      	bgt.n	800d992 <_printf_i+0x212>
 800d9ac:	e7eb      	b.n	800d986 <_printf_i+0x206>
 800d9ae:	2500      	movs	r5, #0
 800d9b0:	f104 0619 	add.w	r6, r4, #25
 800d9b4:	e7f5      	b.n	800d9a2 <_printf_i+0x222>
 800d9b6:	bf00      	nop
 800d9b8:	0800fd0e 	.word	0x0800fd0e
 800d9bc:	0800fd1f 	.word	0x0800fd1f

0800d9c0 <std>:
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	b510      	push	{r4, lr}
 800d9c4:	4604      	mov	r4, r0
 800d9c6:	e9c0 3300 	strd	r3, r3, [r0]
 800d9ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9ce:	6083      	str	r3, [r0, #8]
 800d9d0:	8181      	strh	r1, [r0, #12]
 800d9d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d9d4:	81c2      	strh	r2, [r0, #14]
 800d9d6:	6183      	str	r3, [r0, #24]
 800d9d8:	4619      	mov	r1, r3
 800d9da:	2208      	movs	r2, #8
 800d9dc:	305c      	adds	r0, #92	@ 0x5c
 800d9de:	f000 faad 	bl	800df3c <memset>
 800d9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800da18 <std+0x58>)
 800d9e4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800da1c <std+0x5c>)
 800d9e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9ea:	4b0d      	ldr	r3, [pc, #52]	@ (800da20 <std+0x60>)
 800d9ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800da24 <std+0x64>)
 800d9f0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800da28 <std+0x68>)
 800d9f4:	6224      	str	r4, [r4, #32]
 800d9f6:	429c      	cmp	r4, r3
 800d9f8:	d006      	beq.n	800da08 <std+0x48>
 800d9fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9fe:	4294      	cmp	r4, r2
 800da00:	d002      	beq.n	800da08 <std+0x48>
 800da02:	33d0      	adds	r3, #208	@ 0xd0
 800da04:	429c      	cmp	r4, r3
 800da06:	d105      	bne.n	800da14 <std+0x54>
 800da08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da10:	f000 bb10 	b.w	800e034 <__retarget_lock_init_recursive>
 800da14:	bd10      	pop	{r4, pc}
 800da16:	bf00      	nop
 800da18:	0800dd8d 	.word	0x0800dd8d
 800da1c:	0800ddaf 	.word	0x0800ddaf
 800da20:	0800dde7 	.word	0x0800dde7
 800da24:	0800de0b 	.word	0x0800de0b
 800da28:	24004fd4 	.word	0x24004fd4

0800da2c <stdio_exit_handler>:
 800da2c:	4a02      	ldr	r2, [pc, #8]	@ (800da38 <stdio_exit_handler+0xc>)
 800da2e:	4903      	ldr	r1, [pc, #12]	@ (800da3c <stdio_exit_handler+0x10>)
 800da30:	4803      	ldr	r0, [pc, #12]	@ (800da40 <stdio_exit_handler+0x14>)
 800da32:	f000 b869 	b.w	800db08 <_fwalk_sglue>
 800da36:	bf00      	nop
 800da38:	24000014 	.word	0x24000014
 800da3c:	0800f8a5 	.word	0x0800f8a5
 800da40:	24000024 	.word	0x24000024

0800da44 <cleanup_stdio>:
 800da44:	6841      	ldr	r1, [r0, #4]
 800da46:	4b0c      	ldr	r3, [pc, #48]	@ (800da78 <cleanup_stdio+0x34>)
 800da48:	4299      	cmp	r1, r3
 800da4a:	b510      	push	{r4, lr}
 800da4c:	4604      	mov	r4, r0
 800da4e:	d001      	beq.n	800da54 <cleanup_stdio+0x10>
 800da50:	f001 ff28 	bl	800f8a4 <_fflush_r>
 800da54:	68a1      	ldr	r1, [r4, #8]
 800da56:	4b09      	ldr	r3, [pc, #36]	@ (800da7c <cleanup_stdio+0x38>)
 800da58:	4299      	cmp	r1, r3
 800da5a:	d002      	beq.n	800da62 <cleanup_stdio+0x1e>
 800da5c:	4620      	mov	r0, r4
 800da5e:	f001 ff21 	bl	800f8a4 <_fflush_r>
 800da62:	68e1      	ldr	r1, [r4, #12]
 800da64:	4b06      	ldr	r3, [pc, #24]	@ (800da80 <cleanup_stdio+0x3c>)
 800da66:	4299      	cmp	r1, r3
 800da68:	d004      	beq.n	800da74 <cleanup_stdio+0x30>
 800da6a:	4620      	mov	r0, r4
 800da6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da70:	f001 bf18 	b.w	800f8a4 <_fflush_r>
 800da74:	bd10      	pop	{r4, pc}
 800da76:	bf00      	nop
 800da78:	24004fd4 	.word	0x24004fd4
 800da7c:	2400503c 	.word	0x2400503c
 800da80:	240050a4 	.word	0x240050a4

0800da84 <global_stdio_init.part.0>:
 800da84:	b510      	push	{r4, lr}
 800da86:	4b0b      	ldr	r3, [pc, #44]	@ (800dab4 <global_stdio_init.part.0+0x30>)
 800da88:	4c0b      	ldr	r4, [pc, #44]	@ (800dab8 <global_stdio_init.part.0+0x34>)
 800da8a:	4a0c      	ldr	r2, [pc, #48]	@ (800dabc <global_stdio_init.part.0+0x38>)
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	4620      	mov	r0, r4
 800da90:	2200      	movs	r2, #0
 800da92:	2104      	movs	r1, #4
 800da94:	f7ff ff94 	bl	800d9c0 <std>
 800da98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da9c:	2201      	movs	r2, #1
 800da9e:	2109      	movs	r1, #9
 800daa0:	f7ff ff8e 	bl	800d9c0 <std>
 800daa4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800daa8:	2202      	movs	r2, #2
 800daaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daae:	2112      	movs	r1, #18
 800dab0:	f7ff bf86 	b.w	800d9c0 <std>
 800dab4:	2400510c 	.word	0x2400510c
 800dab8:	24004fd4 	.word	0x24004fd4
 800dabc:	0800da2d 	.word	0x0800da2d

0800dac0 <__sfp_lock_acquire>:
 800dac0:	4801      	ldr	r0, [pc, #4]	@ (800dac8 <__sfp_lock_acquire+0x8>)
 800dac2:	f000 bab8 	b.w	800e036 <__retarget_lock_acquire_recursive>
 800dac6:	bf00      	nop
 800dac8:	24005115 	.word	0x24005115

0800dacc <__sfp_lock_release>:
 800dacc:	4801      	ldr	r0, [pc, #4]	@ (800dad4 <__sfp_lock_release+0x8>)
 800dace:	f000 bab3 	b.w	800e038 <__retarget_lock_release_recursive>
 800dad2:	bf00      	nop
 800dad4:	24005115 	.word	0x24005115

0800dad8 <__sinit>:
 800dad8:	b510      	push	{r4, lr}
 800dada:	4604      	mov	r4, r0
 800dadc:	f7ff fff0 	bl	800dac0 <__sfp_lock_acquire>
 800dae0:	6a23      	ldr	r3, [r4, #32]
 800dae2:	b11b      	cbz	r3, 800daec <__sinit+0x14>
 800dae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dae8:	f7ff bff0 	b.w	800dacc <__sfp_lock_release>
 800daec:	4b04      	ldr	r3, [pc, #16]	@ (800db00 <__sinit+0x28>)
 800daee:	6223      	str	r3, [r4, #32]
 800daf0:	4b04      	ldr	r3, [pc, #16]	@ (800db04 <__sinit+0x2c>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1f5      	bne.n	800dae4 <__sinit+0xc>
 800daf8:	f7ff ffc4 	bl	800da84 <global_stdio_init.part.0>
 800dafc:	e7f2      	b.n	800dae4 <__sinit+0xc>
 800dafe:	bf00      	nop
 800db00:	0800da45 	.word	0x0800da45
 800db04:	2400510c 	.word	0x2400510c

0800db08 <_fwalk_sglue>:
 800db08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db0c:	4607      	mov	r7, r0
 800db0e:	4688      	mov	r8, r1
 800db10:	4614      	mov	r4, r2
 800db12:	2600      	movs	r6, #0
 800db14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db18:	f1b9 0901 	subs.w	r9, r9, #1
 800db1c:	d505      	bpl.n	800db2a <_fwalk_sglue+0x22>
 800db1e:	6824      	ldr	r4, [r4, #0]
 800db20:	2c00      	cmp	r4, #0
 800db22:	d1f7      	bne.n	800db14 <_fwalk_sglue+0xc>
 800db24:	4630      	mov	r0, r6
 800db26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db2a:	89ab      	ldrh	r3, [r5, #12]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d907      	bls.n	800db40 <_fwalk_sglue+0x38>
 800db30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db34:	3301      	adds	r3, #1
 800db36:	d003      	beq.n	800db40 <_fwalk_sglue+0x38>
 800db38:	4629      	mov	r1, r5
 800db3a:	4638      	mov	r0, r7
 800db3c:	47c0      	blx	r8
 800db3e:	4306      	orrs	r6, r0
 800db40:	3568      	adds	r5, #104	@ 0x68
 800db42:	e7e9      	b.n	800db18 <_fwalk_sglue+0x10>

0800db44 <iprintf>:
 800db44:	b40f      	push	{r0, r1, r2, r3}
 800db46:	b507      	push	{r0, r1, r2, lr}
 800db48:	4906      	ldr	r1, [pc, #24]	@ (800db64 <iprintf+0x20>)
 800db4a:	ab04      	add	r3, sp, #16
 800db4c:	6808      	ldr	r0, [r1, #0]
 800db4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db52:	6881      	ldr	r1, [r0, #8]
 800db54:	9301      	str	r3, [sp, #4]
 800db56:	f001 fd09 	bl	800f56c <_vfiprintf_r>
 800db5a:	b003      	add	sp, #12
 800db5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800db60:	b004      	add	sp, #16
 800db62:	4770      	bx	lr
 800db64:	24000020 	.word	0x24000020

0800db68 <_puts_r>:
 800db68:	6a03      	ldr	r3, [r0, #32]
 800db6a:	b570      	push	{r4, r5, r6, lr}
 800db6c:	6884      	ldr	r4, [r0, #8]
 800db6e:	4605      	mov	r5, r0
 800db70:	460e      	mov	r6, r1
 800db72:	b90b      	cbnz	r3, 800db78 <_puts_r+0x10>
 800db74:	f7ff ffb0 	bl	800dad8 <__sinit>
 800db78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db7a:	07db      	lsls	r3, r3, #31
 800db7c:	d405      	bmi.n	800db8a <_puts_r+0x22>
 800db7e:	89a3      	ldrh	r3, [r4, #12]
 800db80:	0598      	lsls	r0, r3, #22
 800db82:	d402      	bmi.n	800db8a <_puts_r+0x22>
 800db84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db86:	f000 fa56 	bl	800e036 <__retarget_lock_acquire_recursive>
 800db8a:	89a3      	ldrh	r3, [r4, #12]
 800db8c:	0719      	lsls	r1, r3, #28
 800db8e:	d502      	bpl.n	800db96 <_puts_r+0x2e>
 800db90:	6923      	ldr	r3, [r4, #16]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d135      	bne.n	800dc02 <_puts_r+0x9a>
 800db96:	4621      	mov	r1, r4
 800db98:	4628      	mov	r0, r5
 800db9a:	f000 f979 	bl	800de90 <__swsetup_r>
 800db9e:	b380      	cbz	r0, 800dc02 <_puts_r+0x9a>
 800dba0:	f04f 35ff 	mov.w	r5, #4294967295
 800dba4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dba6:	07da      	lsls	r2, r3, #31
 800dba8:	d405      	bmi.n	800dbb6 <_puts_r+0x4e>
 800dbaa:	89a3      	ldrh	r3, [r4, #12]
 800dbac:	059b      	lsls	r3, r3, #22
 800dbae:	d402      	bmi.n	800dbb6 <_puts_r+0x4e>
 800dbb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbb2:	f000 fa41 	bl	800e038 <__retarget_lock_release_recursive>
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	bd70      	pop	{r4, r5, r6, pc}
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	da04      	bge.n	800dbc8 <_puts_r+0x60>
 800dbbe:	69a2      	ldr	r2, [r4, #24]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	dc17      	bgt.n	800dbf4 <_puts_r+0x8c>
 800dbc4:	290a      	cmp	r1, #10
 800dbc6:	d015      	beq.n	800dbf4 <_puts_r+0x8c>
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	1c5a      	adds	r2, r3, #1
 800dbcc:	6022      	str	r2, [r4, #0]
 800dbce:	7019      	strb	r1, [r3, #0]
 800dbd0:	68a3      	ldr	r3, [r4, #8]
 800dbd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	60a3      	str	r3, [r4, #8]
 800dbda:	2900      	cmp	r1, #0
 800dbdc:	d1ed      	bne.n	800dbba <_puts_r+0x52>
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	da11      	bge.n	800dc06 <_puts_r+0x9e>
 800dbe2:	4622      	mov	r2, r4
 800dbe4:	210a      	movs	r1, #10
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	f000 f913 	bl	800de12 <__swbuf_r>
 800dbec:	3001      	adds	r0, #1
 800dbee:	d0d7      	beq.n	800dba0 <_puts_r+0x38>
 800dbf0:	250a      	movs	r5, #10
 800dbf2:	e7d7      	b.n	800dba4 <_puts_r+0x3c>
 800dbf4:	4622      	mov	r2, r4
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f000 f90b 	bl	800de12 <__swbuf_r>
 800dbfc:	3001      	adds	r0, #1
 800dbfe:	d1e7      	bne.n	800dbd0 <_puts_r+0x68>
 800dc00:	e7ce      	b.n	800dba0 <_puts_r+0x38>
 800dc02:	3e01      	subs	r6, #1
 800dc04:	e7e4      	b.n	800dbd0 <_puts_r+0x68>
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	1c5a      	adds	r2, r3, #1
 800dc0a:	6022      	str	r2, [r4, #0]
 800dc0c:	220a      	movs	r2, #10
 800dc0e:	701a      	strb	r2, [r3, #0]
 800dc10:	e7ee      	b.n	800dbf0 <_puts_r+0x88>
	...

0800dc14 <puts>:
 800dc14:	4b02      	ldr	r3, [pc, #8]	@ (800dc20 <puts+0xc>)
 800dc16:	4601      	mov	r1, r0
 800dc18:	6818      	ldr	r0, [r3, #0]
 800dc1a:	f7ff bfa5 	b.w	800db68 <_puts_r>
 800dc1e:	bf00      	nop
 800dc20:	24000020 	.word	0x24000020

0800dc24 <setvbuf>:
 800dc24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc28:	461d      	mov	r5, r3
 800dc2a:	4b57      	ldr	r3, [pc, #348]	@ (800dd88 <setvbuf+0x164>)
 800dc2c:	681f      	ldr	r7, [r3, #0]
 800dc2e:	4604      	mov	r4, r0
 800dc30:	460e      	mov	r6, r1
 800dc32:	4690      	mov	r8, r2
 800dc34:	b127      	cbz	r7, 800dc40 <setvbuf+0x1c>
 800dc36:	6a3b      	ldr	r3, [r7, #32]
 800dc38:	b913      	cbnz	r3, 800dc40 <setvbuf+0x1c>
 800dc3a:	4638      	mov	r0, r7
 800dc3c:	f7ff ff4c 	bl	800dad8 <__sinit>
 800dc40:	f1b8 0f02 	cmp.w	r8, #2
 800dc44:	d006      	beq.n	800dc54 <setvbuf+0x30>
 800dc46:	f1b8 0f01 	cmp.w	r8, #1
 800dc4a:	f200 809a 	bhi.w	800dd82 <setvbuf+0x15e>
 800dc4e:	2d00      	cmp	r5, #0
 800dc50:	f2c0 8097 	blt.w	800dd82 <setvbuf+0x15e>
 800dc54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc56:	07d9      	lsls	r1, r3, #31
 800dc58:	d405      	bmi.n	800dc66 <setvbuf+0x42>
 800dc5a:	89a3      	ldrh	r3, [r4, #12]
 800dc5c:	059a      	lsls	r2, r3, #22
 800dc5e:	d402      	bmi.n	800dc66 <setvbuf+0x42>
 800dc60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc62:	f000 f9e8 	bl	800e036 <__retarget_lock_acquire_recursive>
 800dc66:	4621      	mov	r1, r4
 800dc68:	4638      	mov	r0, r7
 800dc6a:	f001 fe1b 	bl	800f8a4 <_fflush_r>
 800dc6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc70:	b141      	cbz	r1, 800dc84 <setvbuf+0x60>
 800dc72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc76:	4299      	cmp	r1, r3
 800dc78:	d002      	beq.n	800dc80 <setvbuf+0x5c>
 800dc7a:	4638      	mov	r0, r7
 800dc7c:	f000 ffca 	bl	800ec14 <_free_r>
 800dc80:	2300      	movs	r3, #0
 800dc82:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc84:	2300      	movs	r3, #0
 800dc86:	61a3      	str	r3, [r4, #24]
 800dc88:	6063      	str	r3, [r4, #4]
 800dc8a:	89a3      	ldrh	r3, [r4, #12]
 800dc8c:	061b      	lsls	r3, r3, #24
 800dc8e:	d503      	bpl.n	800dc98 <setvbuf+0x74>
 800dc90:	6921      	ldr	r1, [r4, #16]
 800dc92:	4638      	mov	r0, r7
 800dc94:	f000 ffbe 	bl	800ec14 <_free_r>
 800dc98:	89a3      	ldrh	r3, [r4, #12]
 800dc9a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800dc9e:	f023 0303 	bic.w	r3, r3, #3
 800dca2:	f1b8 0f02 	cmp.w	r8, #2
 800dca6:	81a3      	strh	r3, [r4, #12]
 800dca8:	d061      	beq.n	800dd6e <setvbuf+0x14a>
 800dcaa:	ab01      	add	r3, sp, #4
 800dcac:	466a      	mov	r2, sp
 800dcae:	4621      	mov	r1, r4
 800dcb0:	4638      	mov	r0, r7
 800dcb2:	f001 fe1f 	bl	800f8f4 <__swhatbuf_r>
 800dcb6:	89a3      	ldrh	r3, [r4, #12]
 800dcb8:	4318      	orrs	r0, r3
 800dcba:	81a0      	strh	r0, [r4, #12]
 800dcbc:	bb2d      	cbnz	r5, 800dd0a <setvbuf+0xe6>
 800dcbe:	9d00      	ldr	r5, [sp, #0]
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	f000 fff1 	bl	800eca8 <malloc>
 800dcc6:	4606      	mov	r6, r0
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d152      	bne.n	800dd72 <setvbuf+0x14e>
 800dccc:	f8dd 9000 	ldr.w	r9, [sp]
 800dcd0:	45a9      	cmp	r9, r5
 800dcd2:	d140      	bne.n	800dd56 <setvbuf+0x132>
 800dcd4:	f04f 35ff 	mov.w	r5, #4294967295
 800dcd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcdc:	f043 0202 	orr.w	r2, r3, #2
 800dce0:	81a2      	strh	r2, [r4, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	60a2      	str	r2, [r4, #8]
 800dce6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800dcea:	6022      	str	r2, [r4, #0]
 800dcec:	6122      	str	r2, [r4, #16]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	6162      	str	r2, [r4, #20]
 800dcf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dcf4:	07d6      	lsls	r6, r2, #31
 800dcf6:	d404      	bmi.n	800dd02 <setvbuf+0xde>
 800dcf8:	0598      	lsls	r0, r3, #22
 800dcfa:	d402      	bmi.n	800dd02 <setvbuf+0xde>
 800dcfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dcfe:	f000 f99b 	bl	800e038 <__retarget_lock_release_recursive>
 800dd02:	4628      	mov	r0, r5
 800dd04:	b003      	add	sp, #12
 800dd06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd0a:	2e00      	cmp	r6, #0
 800dd0c:	d0d8      	beq.n	800dcc0 <setvbuf+0x9c>
 800dd0e:	6a3b      	ldr	r3, [r7, #32]
 800dd10:	b913      	cbnz	r3, 800dd18 <setvbuf+0xf4>
 800dd12:	4638      	mov	r0, r7
 800dd14:	f7ff fee0 	bl	800dad8 <__sinit>
 800dd18:	f1b8 0f01 	cmp.w	r8, #1
 800dd1c:	bf08      	it	eq
 800dd1e:	89a3      	ldrheq	r3, [r4, #12]
 800dd20:	6026      	str	r6, [r4, #0]
 800dd22:	bf04      	itt	eq
 800dd24:	f043 0301 	orreq.w	r3, r3, #1
 800dd28:	81a3      	strheq	r3, [r4, #12]
 800dd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd2e:	f013 0208 	ands.w	r2, r3, #8
 800dd32:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800dd36:	d01e      	beq.n	800dd76 <setvbuf+0x152>
 800dd38:	07d9      	lsls	r1, r3, #31
 800dd3a:	bf41      	itttt	mi
 800dd3c:	2200      	movmi	r2, #0
 800dd3e:	426d      	negmi	r5, r5
 800dd40:	60a2      	strmi	r2, [r4, #8]
 800dd42:	61a5      	strmi	r5, [r4, #24]
 800dd44:	bf58      	it	pl
 800dd46:	60a5      	strpl	r5, [r4, #8]
 800dd48:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd4a:	07d2      	lsls	r2, r2, #31
 800dd4c:	d401      	bmi.n	800dd52 <setvbuf+0x12e>
 800dd4e:	059b      	lsls	r3, r3, #22
 800dd50:	d513      	bpl.n	800dd7a <setvbuf+0x156>
 800dd52:	2500      	movs	r5, #0
 800dd54:	e7d5      	b.n	800dd02 <setvbuf+0xde>
 800dd56:	4648      	mov	r0, r9
 800dd58:	f000 ffa6 	bl	800eca8 <malloc>
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d0b8      	beq.n	800dcd4 <setvbuf+0xb0>
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd68:	81a3      	strh	r3, [r4, #12]
 800dd6a:	464d      	mov	r5, r9
 800dd6c:	e7cf      	b.n	800dd0e <setvbuf+0xea>
 800dd6e:	2500      	movs	r5, #0
 800dd70:	e7b2      	b.n	800dcd8 <setvbuf+0xb4>
 800dd72:	46a9      	mov	r9, r5
 800dd74:	e7f5      	b.n	800dd62 <setvbuf+0x13e>
 800dd76:	60a2      	str	r2, [r4, #8]
 800dd78:	e7e6      	b.n	800dd48 <setvbuf+0x124>
 800dd7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd7c:	f000 f95c 	bl	800e038 <__retarget_lock_release_recursive>
 800dd80:	e7e7      	b.n	800dd52 <setvbuf+0x12e>
 800dd82:	f04f 35ff 	mov.w	r5, #4294967295
 800dd86:	e7bc      	b.n	800dd02 <setvbuf+0xde>
 800dd88:	24000020 	.word	0x24000020

0800dd8c <__sread>:
 800dd8c:	b510      	push	{r4, lr}
 800dd8e:	460c      	mov	r4, r1
 800dd90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd94:	f000 f900 	bl	800df98 <_read_r>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	bfab      	itete	ge
 800dd9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dd9e:	89a3      	ldrhlt	r3, [r4, #12]
 800dda0:	181b      	addge	r3, r3, r0
 800dda2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dda6:	bfac      	ite	ge
 800dda8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ddaa:	81a3      	strhlt	r3, [r4, #12]
 800ddac:	bd10      	pop	{r4, pc}

0800ddae <__swrite>:
 800ddae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb2:	461f      	mov	r7, r3
 800ddb4:	898b      	ldrh	r3, [r1, #12]
 800ddb6:	05db      	lsls	r3, r3, #23
 800ddb8:	4605      	mov	r5, r0
 800ddba:	460c      	mov	r4, r1
 800ddbc:	4616      	mov	r6, r2
 800ddbe:	d505      	bpl.n	800ddcc <__swrite+0x1e>
 800ddc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f000 f8d4 	bl	800df74 <_lseek_r>
 800ddcc:	89a3      	ldrh	r3, [r4, #12]
 800ddce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ddd6:	81a3      	strh	r3, [r4, #12]
 800ddd8:	4632      	mov	r2, r6
 800ddda:	463b      	mov	r3, r7
 800dddc:	4628      	mov	r0, r5
 800ddde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dde2:	f000 b8eb 	b.w	800dfbc <_write_r>

0800dde6 <__sseek>:
 800dde6:	b510      	push	{r4, lr}
 800dde8:	460c      	mov	r4, r1
 800ddea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddee:	f000 f8c1 	bl	800df74 <_lseek_r>
 800ddf2:	1c43      	adds	r3, r0, #1
 800ddf4:	89a3      	ldrh	r3, [r4, #12]
 800ddf6:	bf15      	itete	ne
 800ddf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ddfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ddfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800de02:	81a3      	strheq	r3, [r4, #12]
 800de04:	bf18      	it	ne
 800de06:	81a3      	strhne	r3, [r4, #12]
 800de08:	bd10      	pop	{r4, pc}

0800de0a <__sclose>:
 800de0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de0e:	f000 b8a1 	b.w	800df54 <_close_r>

0800de12 <__swbuf_r>:
 800de12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de14:	460e      	mov	r6, r1
 800de16:	4614      	mov	r4, r2
 800de18:	4605      	mov	r5, r0
 800de1a:	b118      	cbz	r0, 800de24 <__swbuf_r+0x12>
 800de1c:	6a03      	ldr	r3, [r0, #32]
 800de1e:	b90b      	cbnz	r3, 800de24 <__swbuf_r+0x12>
 800de20:	f7ff fe5a 	bl	800dad8 <__sinit>
 800de24:	69a3      	ldr	r3, [r4, #24]
 800de26:	60a3      	str	r3, [r4, #8]
 800de28:	89a3      	ldrh	r3, [r4, #12]
 800de2a:	071a      	lsls	r2, r3, #28
 800de2c:	d501      	bpl.n	800de32 <__swbuf_r+0x20>
 800de2e:	6923      	ldr	r3, [r4, #16]
 800de30:	b943      	cbnz	r3, 800de44 <__swbuf_r+0x32>
 800de32:	4621      	mov	r1, r4
 800de34:	4628      	mov	r0, r5
 800de36:	f000 f82b 	bl	800de90 <__swsetup_r>
 800de3a:	b118      	cbz	r0, 800de44 <__swbuf_r+0x32>
 800de3c:	f04f 37ff 	mov.w	r7, #4294967295
 800de40:	4638      	mov	r0, r7
 800de42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de44:	6823      	ldr	r3, [r4, #0]
 800de46:	6922      	ldr	r2, [r4, #16]
 800de48:	1a98      	subs	r0, r3, r2
 800de4a:	6963      	ldr	r3, [r4, #20]
 800de4c:	b2f6      	uxtb	r6, r6
 800de4e:	4283      	cmp	r3, r0
 800de50:	4637      	mov	r7, r6
 800de52:	dc05      	bgt.n	800de60 <__swbuf_r+0x4e>
 800de54:	4621      	mov	r1, r4
 800de56:	4628      	mov	r0, r5
 800de58:	f001 fd24 	bl	800f8a4 <_fflush_r>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	d1ed      	bne.n	800de3c <__swbuf_r+0x2a>
 800de60:	68a3      	ldr	r3, [r4, #8]
 800de62:	3b01      	subs	r3, #1
 800de64:	60a3      	str	r3, [r4, #8]
 800de66:	6823      	ldr	r3, [r4, #0]
 800de68:	1c5a      	adds	r2, r3, #1
 800de6a:	6022      	str	r2, [r4, #0]
 800de6c:	701e      	strb	r6, [r3, #0]
 800de6e:	6962      	ldr	r2, [r4, #20]
 800de70:	1c43      	adds	r3, r0, #1
 800de72:	429a      	cmp	r2, r3
 800de74:	d004      	beq.n	800de80 <__swbuf_r+0x6e>
 800de76:	89a3      	ldrh	r3, [r4, #12]
 800de78:	07db      	lsls	r3, r3, #31
 800de7a:	d5e1      	bpl.n	800de40 <__swbuf_r+0x2e>
 800de7c:	2e0a      	cmp	r6, #10
 800de7e:	d1df      	bne.n	800de40 <__swbuf_r+0x2e>
 800de80:	4621      	mov	r1, r4
 800de82:	4628      	mov	r0, r5
 800de84:	f001 fd0e 	bl	800f8a4 <_fflush_r>
 800de88:	2800      	cmp	r0, #0
 800de8a:	d0d9      	beq.n	800de40 <__swbuf_r+0x2e>
 800de8c:	e7d6      	b.n	800de3c <__swbuf_r+0x2a>
	...

0800de90 <__swsetup_r>:
 800de90:	b538      	push	{r3, r4, r5, lr}
 800de92:	4b29      	ldr	r3, [pc, #164]	@ (800df38 <__swsetup_r+0xa8>)
 800de94:	4605      	mov	r5, r0
 800de96:	6818      	ldr	r0, [r3, #0]
 800de98:	460c      	mov	r4, r1
 800de9a:	b118      	cbz	r0, 800dea4 <__swsetup_r+0x14>
 800de9c:	6a03      	ldr	r3, [r0, #32]
 800de9e:	b90b      	cbnz	r3, 800dea4 <__swsetup_r+0x14>
 800dea0:	f7ff fe1a 	bl	800dad8 <__sinit>
 800dea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dea8:	0719      	lsls	r1, r3, #28
 800deaa:	d422      	bmi.n	800def2 <__swsetup_r+0x62>
 800deac:	06da      	lsls	r2, r3, #27
 800deae:	d407      	bmi.n	800dec0 <__swsetup_r+0x30>
 800deb0:	2209      	movs	r2, #9
 800deb2:	602a      	str	r2, [r5, #0]
 800deb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deb8:	81a3      	strh	r3, [r4, #12]
 800deba:	f04f 30ff 	mov.w	r0, #4294967295
 800debe:	e033      	b.n	800df28 <__swsetup_r+0x98>
 800dec0:	0758      	lsls	r0, r3, #29
 800dec2:	d512      	bpl.n	800deea <__swsetup_r+0x5a>
 800dec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dec6:	b141      	cbz	r1, 800deda <__swsetup_r+0x4a>
 800dec8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800decc:	4299      	cmp	r1, r3
 800dece:	d002      	beq.n	800ded6 <__swsetup_r+0x46>
 800ded0:	4628      	mov	r0, r5
 800ded2:	f000 fe9f 	bl	800ec14 <_free_r>
 800ded6:	2300      	movs	r3, #0
 800ded8:	6363      	str	r3, [r4, #52]	@ 0x34
 800deda:	89a3      	ldrh	r3, [r4, #12]
 800dedc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dee0:	81a3      	strh	r3, [r4, #12]
 800dee2:	2300      	movs	r3, #0
 800dee4:	6063      	str	r3, [r4, #4]
 800dee6:	6923      	ldr	r3, [r4, #16]
 800dee8:	6023      	str	r3, [r4, #0]
 800deea:	89a3      	ldrh	r3, [r4, #12]
 800deec:	f043 0308 	orr.w	r3, r3, #8
 800def0:	81a3      	strh	r3, [r4, #12]
 800def2:	6923      	ldr	r3, [r4, #16]
 800def4:	b94b      	cbnz	r3, 800df0a <__swsetup_r+0x7a>
 800def6:	89a3      	ldrh	r3, [r4, #12]
 800def8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800defc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df00:	d003      	beq.n	800df0a <__swsetup_r+0x7a>
 800df02:	4621      	mov	r1, r4
 800df04:	4628      	mov	r0, r5
 800df06:	f001 fd1b 	bl	800f940 <__smakebuf_r>
 800df0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df0e:	f013 0201 	ands.w	r2, r3, #1
 800df12:	d00a      	beq.n	800df2a <__swsetup_r+0x9a>
 800df14:	2200      	movs	r2, #0
 800df16:	60a2      	str	r2, [r4, #8]
 800df18:	6962      	ldr	r2, [r4, #20]
 800df1a:	4252      	negs	r2, r2
 800df1c:	61a2      	str	r2, [r4, #24]
 800df1e:	6922      	ldr	r2, [r4, #16]
 800df20:	b942      	cbnz	r2, 800df34 <__swsetup_r+0xa4>
 800df22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800df26:	d1c5      	bne.n	800deb4 <__swsetup_r+0x24>
 800df28:	bd38      	pop	{r3, r4, r5, pc}
 800df2a:	0799      	lsls	r1, r3, #30
 800df2c:	bf58      	it	pl
 800df2e:	6962      	ldrpl	r2, [r4, #20]
 800df30:	60a2      	str	r2, [r4, #8]
 800df32:	e7f4      	b.n	800df1e <__swsetup_r+0x8e>
 800df34:	2000      	movs	r0, #0
 800df36:	e7f7      	b.n	800df28 <__swsetup_r+0x98>
 800df38:	24000020 	.word	0x24000020

0800df3c <memset>:
 800df3c:	4402      	add	r2, r0
 800df3e:	4603      	mov	r3, r0
 800df40:	4293      	cmp	r3, r2
 800df42:	d100      	bne.n	800df46 <memset+0xa>
 800df44:	4770      	bx	lr
 800df46:	f803 1b01 	strb.w	r1, [r3], #1
 800df4a:	e7f9      	b.n	800df40 <memset+0x4>

0800df4c <_localeconv_r>:
 800df4c:	4800      	ldr	r0, [pc, #0]	@ (800df50 <_localeconv_r+0x4>)
 800df4e:	4770      	bx	lr
 800df50:	24000160 	.word	0x24000160

0800df54 <_close_r>:
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	4d06      	ldr	r5, [pc, #24]	@ (800df70 <_close_r+0x1c>)
 800df58:	2300      	movs	r3, #0
 800df5a:	4604      	mov	r4, r0
 800df5c:	4608      	mov	r0, r1
 800df5e:	602b      	str	r3, [r5, #0]
 800df60:	f7f3 f9d2 	bl	8001308 <_close>
 800df64:	1c43      	adds	r3, r0, #1
 800df66:	d102      	bne.n	800df6e <_close_r+0x1a>
 800df68:	682b      	ldr	r3, [r5, #0]
 800df6a:	b103      	cbz	r3, 800df6e <_close_r+0x1a>
 800df6c:	6023      	str	r3, [r4, #0]
 800df6e:	bd38      	pop	{r3, r4, r5, pc}
 800df70:	24005110 	.word	0x24005110

0800df74 <_lseek_r>:
 800df74:	b538      	push	{r3, r4, r5, lr}
 800df76:	4d07      	ldr	r5, [pc, #28]	@ (800df94 <_lseek_r+0x20>)
 800df78:	4604      	mov	r4, r0
 800df7a:	4608      	mov	r0, r1
 800df7c:	4611      	mov	r1, r2
 800df7e:	2200      	movs	r2, #0
 800df80:	602a      	str	r2, [r5, #0]
 800df82:	461a      	mov	r2, r3
 800df84:	f7f3 f9d7 	bl	8001336 <_lseek>
 800df88:	1c43      	adds	r3, r0, #1
 800df8a:	d102      	bne.n	800df92 <_lseek_r+0x1e>
 800df8c:	682b      	ldr	r3, [r5, #0]
 800df8e:	b103      	cbz	r3, 800df92 <_lseek_r+0x1e>
 800df90:	6023      	str	r3, [r4, #0]
 800df92:	bd38      	pop	{r3, r4, r5, pc}
 800df94:	24005110 	.word	0x24005110

0800df98 <_read_r>:
 800df98:	b538      	push	{r3, r4, r5, lr}
 800df9a:	4d07      	ldr	r5, [pc, #28]	@ (800dfb8 <_read_r+0x20>)
 800df9c:	4604      	mov	r4, r0
 800df9e:	4608      	mov	r0, r1
 800dfa0:	4611      	mov	r1, r2
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	602a      	str	r2, [r5, #0]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	f7f3 f9d6 	bl	8001358 <_read>
 800dfac:	1c43      	adds	r3, r0, #1
 800dfae:	d102      	bne.n	800dfb6 <_read_r+0x1e>
 800dfb0:	682b      	ldr	r3, [r5, #0]
 800dfb2:	b103      	cbz	r3, 800dfb6 <_read_r+0x1e>
 800dfb4:	6023      	str	r3, [r4, #0]
 800dfb6:	bd38      	pop	{r3, r4, r5, pc}
 800dfb8:	24005110 	.word	0x24005110

0800dfbc <_write_r>:
 800dfbc:	b538      	push	{r3, r4, r5, lr}
 800dfbe:	4d07      	ldr	r5, [pc, #28]	@ (800dfdc <_write_r+0x20>)
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	4608      	mov	r0, r1
 800dfc4:	4611      	mov	r1, r2
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	602a      	str	r2, [r5, #0]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	f7f3 f970 	bl	80012b0 <_write>
 800dfd0:	1c43      	adds	r3, r0, #1
 800dfd2:	d102      	bne.n	800dfda <_write_r+0x1e>
 800dfd4:	682b      	ldr	r3, [r5, #0]
 800dfd6:	b103      	cbz	r3, 800dfda <_write_r+0x1e>
 800dfd8:	6023      	str	r3, [r4, #0]
 800dfda:	bd38      	pop	{r3, r4, r5, pc}
 800dfdc:	24005110 	.word	0x24005110

0800dfe0 <__errno>:
 800dfe0:	4b01      	ldr	r3, [pc, #4]	@ (800dfe8 <__errno+0x8>)
 800dfe2:	6818      	ldr	r0, [r3, #0]
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	24000020 	.word	0x24000020

0800dfec <__libc_init_array>:
 800dfec:	b570      	push	{r4, r5, r6, lr}
 800dfee:	4d0d      	ldr	r5, [pc, #52]	@ (800e024 <__libc_init_array+0x38>)
 800dff0:	4c0d      	ldr	r4, [pc, #52]	@ (800e028 <__libc_init_array+0x3c>)
 800dff2:	1b64      	subs	r4, r4, r5
 800dff4:	10a4      	asrs	r4, r4, #2
 800dff6:	2600      	movs	r6, #0
 800dff8:	42a6      	cmp	r6, r4
 800dffa:	d109      	bne.n	800e010 <__libc_init_array+0x24>
 800dffc:	4d0b      	ldr	r5, [pc, #44]	@ (800e02c <__libc_init_array+0x40>)
 800dffe:	4c0c      	ldr	r4, [pc, #48]	@ (800e030 <__libc_init_array+0x44>)
 800e000:	f001 fdce 	bl	800fba0 <_init>
 800e004:	1b64      	subs	r4, r4, r5
 800e006:	10a4      	asrs	r4, r4, #2
 800e008:	2600      	movs	r6, #0
 800e00a:	42a6      	cmp	r6, r4
 800e00c:	d105      	bne.n	800e01a <__libc_init_array+0x2e>
 800e00e:	bd70      	pop	{r4, r5, r6, pc}
 800e010:	f855 3b04 	ldr.w	r3, [r5], #4
 800e014:	4798      	blx	r3
 800e016:	3601      	adds	r6, #1
 800e018:	e7ee      	b.n	800dff8 <__libc_init_array+0xc>
 800e01a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e01e:	4798      	blx	r3
 800e020:	3601      	adds	r6, #1
 800e022:	e7f2      	b.n	800e00a <__libc_init_array+0x1e>
 800e024:	08010078 	.word	0x08010078
 800e028:	08010078 	.word	0x08010078
 800e02c:	08010078 	.word	0x08010078
 800e030:	0801007c 	.word	0x0801007c

0800e034 <__retarget_lock_init_recursive>:
 800e034:	4770      	bx	lr

0800e036 <__retarget_lock_acquire_recursive>:
 800e036:	4770      	bx	lr

0800e038 <__retarget_lock_release_recursive>:
 800e038:	4770      	bx	lr

0800e03a <memcpy>:
 800e03a:	440a      	add	r2, r1
 800e03c:	4291      	cmp	r1, r2
 800e03e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e042:	d100      	bne.n	800e046 <memcpy+0xc>
 800e044:	4770      	bx	lr
 800e046:	b510      	push	{r4, lr}
 800e048:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e04c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e050:	4291      	cmp	r1, r2
 800e052:	d1f9      	bne.n	800e048 <memcpy+0xe>
 800e054:	bd10      	pop	{r4, pc}

0800e056 <quorem>:
 800e056:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05a:	6903      	ldr	r3, [r0, #16]
 800e05c:	690c      	ldr	r4, [r1, #16]
 800e05e:	42a3      	cmp	r3, r4
 800e060:	4607      	mov	r7, r0
 800e062:	db7e      	blt.n	800e162 <quorem+0x10c>
 800e064:	3c01      	subs	r4, #1
 800e066:	f101 0814 	add.w	r8, r1, #20
 800e06a:	00a3      	lsls	r3, r4, #2
 800e06c:	f100 0514 	add.w	r5, r0, #20
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e076:	9301      	str	r3, [sp, #4]
 800e078:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e07c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e080:	3301      	adds	r3, #1
 800e082:	429a      	cmp	r2, r3
 800e084:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e088:	fbb2 f6f3 	udiv	r6, r2, r3
 800e08c:	d32e      	bcc.n	800e0ec <quorem+0x96>
 800e08e:	f04f 0a00 	mov.w	sl, #0
 800e092:	46c4      	mov	ip, r8
 800e094:	46ae      	mov	lr, r5
 800e096:	46d3      	mov	fp, sl
 800e098:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e09c:	b298      	uxth	r0, r3
 800e09e:	fb06 a000 	mla	r0, r6, r0, sl
 800e0a2:	0c02      	lsrs	r2, r0, #16
 800e0a4:	0c1b      	lsrs	r3, r3, #16
 800e0a6:	fb06 2303 	mla	r3, r6, r3, r2
 800e0aa:	f8de 2000 	ldr.w	r2, [lr]
 800e0ae:	b280      	uxth	r0, r0
 800e0b0:	b292      	uxth	r2, r2
 800e0b2:	1a12      	subs	r2, r2, r0
 800e0b4:	445a      	add	r2, fp
 800e0b6:	f8de 0000 	ldr.w	r0, [lr]
 800e0ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e0c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e0c8:	b292      	uxth	r2, r2
 800e0ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e0ce:	45e1      	cmp	r9, ip
 800e0d0:	f84e 2b04 	str.w	r2, [lr], #4
 800e0d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e0d8:	d2de      	bcs.n	800e098 <quorem+0x42>
 800e0da:	9b00      	ldr	r3, [sp, #0]
 800e0dc:	58eb      	ldr	r3, [r5, r3]
 800e0de:	b92b      	cbnz	r3, 800e0ec <quorem+0x96>
 800e0e0:	9b01      	ldr	r3, [sp, #4]
 800e0e2:	3b04      	subs	r3, #4
 800e0e4:	429d      	cmp	r5, r3
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	d32f      	bcc.n	800e14a <quorem+0xf4>
 800e0ea:	613c      	str	r4, [r7, #16]
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	f001 f90b 	bl	800f308 <__mcmp>
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	db25      	blt.n	800e142 <quorem+0xec>
 800e0f6:	4629      	mov	r1, r5
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	f858 2b04 	ldr.w	r2, [r8], #4
 800e0fe:	f8d1 c000 	ldr.w	ip, [r1]
 800e102:	fa1f fe82 	uxth.w	lr, r2
 800e106:	fa1f f38c 	uxth.w	r3, ip
 800e10a:	eba3 030e 	sub.w	r3, r3, lr
 800e10e:	4403      	add	r3, r0
 800e110:	0c12      	lsrs	r2, r2, #16
 800e112:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e116:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e120:	45c1      	cmp	r9, r8
 800e122:	f841 3b04 	str.w	r3, [r1], #4
 800e126:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e12a:	d2e6      	bcs.n	800e0fa <quorem+0xa4>
 800e12c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e130:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e134:	b922      	cbnz	r2, 800e140 <quorem+0xea>
 800e136:	3b04      	subs	r3, #4
 800e138:	429d      	cmp	r5, r3
 800e13a:	461a      	mov	r2, r3
 800e13c:	d30b      	bcc.n	800e156 <quorem+0x100>
 800e13e:	613c      	str	r4, [r7, #16]
 800e140:	3601      	adds	r6, #1
 800e142:	4630      	mov	r0, r6
 800e144:	b003      	add	sp, #12
 800e146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14a:	6812      	ldr	r2, [r2, #0]
 800e14c:	3b04      	subs	r3, #4
 800e14e:	2a00      	cmp	r2, #0
 800e150:	d1cb      	bne.n	800e0ea <quorem+0x94>
 800e152:	3c01      	subs	r4, #1
 800e154:	e7c6      	b.n	800e0e4 <quorem+0x8e>
 800e156:	6812      	ldr	r2, [r2, #0]
 800e158:	3b04      	subs	r3, #4
 800e15a:	2a00      	cmp	r2, #0
 800e15c:	d1ef      	bne.n	800e13e <quorem+0xe8>
 800e15e:	3c01      	subs	r4, #1
 800e160:	e7ea      	b.n	800e138 <quorem+0xe2>
 800e162:	2000      	movs	r0, #0
 800e164:	e7ee      	b.n	800e144 <quorem+0xee>
	...

0800e168 <_dtoa_r>:
 800e168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e16c:	ed2d 8b02 	vpush	{d8}
 800e170:	69c7      	ldr	r7, [r0, #28]
 800e172:	b091      	sub	sp, #68	@ 0x44
 800e174:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e178:	ec55 4b10 	vmov	r4, r5, d0
 800e17c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800e17e:	9107      	str	r1, [sp, #28]
 800e180:	4681      	mov	r9, r0
 800e182:	9209      	str	r2, [sp, #36]	@ 0x24
 800e184:	930d      	str	r3, [sp, #52]	@ 0x34
 800e186:	b97f      	cbnz	r7, 800e1a8 <_dtoa_r+0x40>
 800e188:	2010      	movs	r0, #16
 800e18a:	f000 fd8d 	bl	800eca8 <malloc>
 800e18e:	4602      	mov	r2, r0
 800e190:	f8c9 001c 	str.w	r0, [r9, #28]
 800e194:	b920      	cbnz	r0, 800e1a0 <_dtoa_r+0x38>
 800e196:	4ba0      	ldr	r3, [pc, #640]	@ (800e418 <_dtoa_r+0x2b0>)
 800e198:	21ef      	movs	r1, #239	@ 0xef
 800e19a:	48a0      	ldr	r0, [pc, #640]	@ (800e41c <_dtoa_r+0x2b4>)
 800e19c:	f001 fc3e 	bl	800fa1c <__assert_func>
 800e1a0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e1a4:	6007      	str	r7, [r0, #0]
 800e1a6:	60c7      	str	r7, [r0, #12]
 800e1a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e1ac:	6819      	ldr	r1, [r3, #0]
 800e1ae:	b159      	cbz	r1, 800e1c8 <_dtoa_r+0x60>
 800e1b0:	685a      	ldr	r2, [r3, #4]
 800e1b2:	604a      	str	r2, [r1, #4]
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	4093      	lsls	r3, r2
 800e1b8:	608b      	str	r3, [r1, #8]
 800e1ba:	4648      	mov	r0, r9
 800e1bc:	f000 fe6a 	bl	800ee94 <_Bfree>
 800e1c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	601a      	str	r2, [r3, #0]
 800e1c8:	1e2b      	subs	r3, r5, #0
 800e1ca:	bfbb      	ittet	lt
 800e1cc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e1d0:	9303      	strlt	r3, [sp, #12]
 800e1d2:	2300      	movge	r3, #0
 800e1d4:	2201      	movlt	r2, #1
 800e1d6:	bfac      	ite	ge
 800e1d8:	6033      	strge	r3, [r6, #0]
 800e1da:	6032      	strlt	r2, [r6, #0]
 800e1dc:	4b90      	ldr	r3, [pc, #576]	@ (800e420 <_dtoa_r+0x2b8>)
 800e1de:	9e03      	ldr	r6, [sp, #12]
 800e1e0:	43b3      	bics	r3, r6
 800e1e2:	d110      	bne.n	800e206 <_dtoa_r+0x9e>
 800e1e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e1e6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e1ea:	6013      	str	r3, [r2, #0]
 800e1ec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800e1f0:	4323      	orrs	r3, r4
 800e1f2:	f000 84de 	beq.w	800ebb2 <_dtoa_r+0xa4a>
 800e1f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e1f8:	4f8a      	ldr	r7, [pc, #552]	@ (800e424 <_dtoa_r+0x2bc>)
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	f000 84e0 	beq.w	800ebc0 <_dtoa_r+0xa58>
 800e200:	1cfb      	adds	r3, r7, #3
 800e202:	f000 bcdb 	b.w	800ebbc <_dtoa_r+0xa54>
 800e206:	ed9d 8b02 	vldr	d8, [sp, #8]
 800e20a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e212:	d10a      	bne.n	800e22a <_dtoa_r+0xc2>
 800e214:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e216:	2301      	movs	r3, #1
 800e218:	6013      	str	r3, [r2, #0]
 800e21a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e21c:	b113      	cbz	r3, 800e224 <_dtoa_r+0xbc>
 800e21e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e220:	4b81      	ldr	r3, [pc, #516]	@ (800e428 <_dtoa_r+0x2c0>)
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	4f81      	ldr	r7, [pc, #516]	@ (800e42c <_dtoa_r+0x2c4>)
 800e226:	f000 bccb 	b.w	800ebc0 <_dtoa_r+0xa58>
 800e22a:	aa0e      	add	r2, sp, #56	@ 0x38
 800e22c:	a90f      	add	r1, sp, #60	@ 0x3c
 800e22e:	4648      	mov	r0, r9
 800e230:	eeb0 0b48 	vmov.f64	d0, d8
 800e234:	f001 f918 	bl	800f468 <__d2b>
 800e238:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800e23c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e23e:	9001      	str	r0, [sp, #4]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d045      	beq.n	800e2d0 <_dtoa_r+0x168>
 800e244:	eeb0 7b48 	vmov.f64	d7, d8
 800e248:	ee18 1a90 	vmov	r1, s17
 800e24c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e250:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800e254:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800e258:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e25c:	2500      	movs	r5, #0
 800e25e:	ee07 1a90 	vmov	s15, r1
 800e262:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800e266:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800e400 <_dtoa_r+0x298>
 800e26a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e26e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800e408 <_dtoa_r+0x2a0>
 800e272:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e276:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800e410 <_dtoa_r+0x2a8>
 800e27a:	ee07 3a90 	vmov	s15, r3
 800e27e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800e282:	eeb0 7b46 	vmov.f64	d7, d6
 800e286:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e28a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e28e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e296:	ee16 8a90 	vmov	r8, s13
 800e29a:	d508      	bpl.n	800e2ae <_dtoa_r+0x146>
 800e29c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e2a0:	eeb4 6b47 	vcmp.f64	d6, d7
 800e2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a8:	bf18      	it	ne
 800e2aa:	f108 38ff 	addne.w	r8, r8, #4294967295
 800e2ae:	f1b8 0f16 	cmp.w	r8, #22
 800e2b2:	d82b      	bhi.n	800e30c <_dtoa_r+0x1a4>
 800e2b4:	495e      	ldr	r1, [pc, #376]	@ (800e430 <_dtoa_r+0x2c8>)
 800e2b6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800e2ba:	ed91 7b00 	vldr	d7, [r1]
 800e2be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c6:	d501      	bpl.n	800e2cc <_dtoa_r+0x164>
 800e2c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	e01e      	b.n	800e30e <_dtoa_r+0x1a6>
 800e2d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800e2d8:	2920      	cmp	r1, #32
 800e2da:	bfc1      	itttt	gt
 800e2dc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800e2e0:	408e      	lslgt	r6, r1
 800e2e2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800e2e6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800e2ea:	bfd6      	itet	le
 800e2ec:	f1c1 0120 	rsble	r1, r1, #32
 800e2f0:	4331      	orrgt	r1, r6
 800e2f2:	fa04 f101 	lslle.w	r1, r4, r1
 800e2f6:	ee07 1a90 	vmov	s15, r1
 800e2fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e2fe:	3b01      	subs	r3, #1
 800e300:	ee17 1a90 	vmov	r1, s15
 800e304:	2501      	movs	r5, #1
 800e306:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800e30a:	e7a8      	b.n	800e25e <_dtoa_r+0xf6>
 800e30c:	2101      	movs	r1, #1
 800e30e:	1ad2      	subs	r2, r2, r3
 800e310:	1e53      	subs	r3, r2, #1
 800e312:	9306      	str	r3, [sp, #24]
 800e314:	bf45      	ittet	mi
 800e316:	f1c2 0301 	rsbmi	r3, r2, #1
 800e31a:	9305      	strmi	r3, [sp, #20]
 800e31c:	2300      	movpl	r3, #0
 800e31e:	2300      	movmi	r3, #0
 800e320:	bf4c      	ite	mi
 800e322:	9306      	strmi	r3, [sp, #24]
 800e324:	9305      	strpl	r3, [sp, #20]
 800e326:	f1b8 0f00 	cmp.w	r8, #0
 800e32a:	910c      	str	r1, [sp, #48]	@ 0x30
 800e32c:	db18      	blt.n	800e360 <_dtoa_r+0x1f8>
 800e32e:	9b06      	ldr	r3, [sp, #24]
 800e330:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800e334:	4443      	add	r3, r8
 800e336:	9306      	str	r3, [sp, #24]
 800e338:	2300      	movs	r3, #0
 800e33a:	9a07      	ldr	r2, [sp, #28]
 800e33c:	2a09      	cmp	r2, #9
 800e33e:	d849      	bhi.n	800e3d4 <_dtoa_r+0x26c>
 800e340:	2a05      	cmp	r2, #5
 800e342:	bfc4      	itt	gt
 800e344:	3a04      	subgt	r2, #4
 800e346:	9207      	strgt	r2, [sp, #28]
 800e348:	9a07      	ldr	r2, [sp, #28]
 800e34a:	f1a2 0202 	sub.w	r2, r2, #2
 800e34e:	bfcc      	ite	gt
 800e350:	2400      	movgt	r4, #0
 800e352:	2401      	movle	r4, #1
 800e354:	2a03      	cmp	r2, #3
 800e356:	d848      	bhi.n	800e3ea <_dtoa_r+0x282>
 800e358:	e8df f002 	tbb	[pc, r2]
 800e35c:	3a2c2e0b 	.word	0x3a2c2e0b
 800e360:	9b05      	ldr	r3, [sp, #20]
 800e362:	2200      	movs	r2, #0
 800e364:	eba3 0308 	sub.w	r3, r3, r8
 800e368:	9305      	str	r3, [sp, #20]
 800e36a:	920a      	str	r2, [sp, #40]	@ 0x28
 800e36c:	f1c8 0300 	rsb	r3, r8, #0
 800e370:	e7e3      	b.n	800e33a <_dtoa_r+0x1d2>
 800e372:	2200      	movs	r2, #0
 800e374:	9208      	str	r2, [sp, #32]
 800e376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e378:	2a00      	cmp	r2, #0
 800e37a:	dc39      	bgt.n	800e3f0 <_dtoa_r+0x288>
 800e37c:	f04f 0b01 	mov.w	fp, #1
 800e380:	46da      	mov	sl, fp
 800e382:	465a      	mov	r2, fp
 800e384:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800e388:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800e38c:	2100      	movs	r1, #0
 800e38e:	2004      	movs	r0, #4
 800e390:	f100 0614 	add.w	r6, r0, #20
 800e394:	4296      	cmp	r6, r2
 800e396:	d930      	bls.n	800e3fa <_dtoa_r+0x292>
 800e398:	6079      	str	r1, [r7, #4]
 800e39a:	4648      	mov	r0, r9
 800e39c:	9304      	str	r3, [sp, #16]
 800e39e:	f000 fd39 	bl	800ee14 <_Balloc>
 800e3a2:	9b04      	ldr	r3, [sp, #16]
 800e3a4:	4607      	mov	r7, r0
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d146      	bne.n	800e438 <_dtoa_r+0x2d0>
 800e3aa:	4b22      	ldr	r3, [pc, #136]	@ (800e434 <_dtoa_r+0x2cc>)
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800e3b2:	e6f2      	b.n	800e19a <_dtoa_r+0x32>
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	e7dd      	b.n	800e374 <_dtoa_r+0x20c>
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	9208      	str	r2, [sp, #32]
 800e3bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3be:	eb08 0b02 	add.w	fp, r8, r2
 800e3c2:	f10b 0a01 	add.w	sl, fp, #1
 800e3c6:	4652      	mov	r2, sl
 800e3c8:	2a01      	cmp	r2, #1
 800e3ca:	bfb8      	it	lt
 800e3cc:	2201      	movlt	r2, #1
 800e3ce:	e7db      	b.n	800e388 <_dtoa_r+0x220>
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	e7f2      	b.n	800e3ba <_dtoa_r+0x252>
 800e3d4:	2401      	movs	r4, #1
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e3dc:	f04f 3bff 	mov.w	fp, #4294967295
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	46da      	mov	sl, fp
 800e3e4:	2212      	movs	r2, #18
 800e3e6:	9109      	str	r1, [sp, #36]	@ 0x24
 800e3e8:	e7ce      	b.n	800e388 <_dtoa_r+0x220>
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	9208      	str	r2, [sp, #32]
 800e3ee:	e7f5      	b.n	800e3dc <_dtoa_r+0x274>
 800e3f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800e3f4:	46da      	mov	sl, fp
 800e3f6:	465a      	mov	r2, fp
 800e3f8:	e7c6      	b.n	800e388 <_dtoa_r+0x220>
 800e3fa:	3101      	adds	r1, #1
 800e3fc:	0040      	lsls	r0, r0, #1
 800e3fe:	e7c7      	b.n	800e390 <_dtoa_r+0x228>
 800e400:	636f4361 	.word	0x636f4361
 800e404:	3fd287a7 	.word	0x3fd287a7
 800e408:	8b60c8b3 	.word	0x8b60c8b3
 800e40c:	3fc68a28 	.word	0x3fc68a28
 800e410:	509f79fb 	.word	0x509f79fb
 800e414:	3fd34413 	.word	0x3fd34413
 800e418:	0800fd3d 	.word	0x0800fd3d
 800e41c:	0800fd54 	.word	0x0800fd54
 800e420:	7ff00000 	.word	0x7ff00000
 800e424:	0800fd39 	.word	0x0800fd39
 800e428:	0800fd0d 	.word	0x0800fd0d
 800e42c:	0800fd0c 	.word	0x0800fd0c
 800e430:	0800fe50 	.word	0x0800fe50
 800e434:	0800fdac 	.word	0x0800fdac
 800e438:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800e43c:	f1ba 0f0e 	cmp.w	sl, #14
 800e440:	6010      	str	r0, [r2, #0]
 800e442:	d86f      	bhi.n	800e524 <_dtoa_r+0x3bc>
 800e444:	2c00      	cmp	r4, #0
 800e446:	d06d      	beq.n	800e524 <_dtoa_r+0x3bc>
 800e448:	f1b8 0f00 	cmp.w	r8, #0
 800e44c:	f340 80c2 	ble.w	800e5d4 <_dtoa_r+0x46c>
 800e450:	4aca      	ldr	r2, [pc, #808]	@ (800e77c <_dtoa_r+0x614>)
 800e452:	f008 010f 	and.w	r1, r8, #15
 800e456:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e45a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800e45e:	ed92 7b00 	vldr	d7, [r2]
 800e462:	ea4f 1128 	mov.w	r1, r8, asr #4
 800e466:	f000 80a9 	beq.w	800e5bc <_dtoa_r+0x454>
 800e46a:	4ac5      	ldr	r2, [pc, #788]	@ (800e780 <_dtoa_r+0x618>)
 800e46c:	ed92 6b08 	vldr	d6, [r2, #32]
 800e470:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e474:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e478:	f001 010f 	and.w	r1, r1, #15
 800e47c:	2203      	movs	r2, #3
 800e47e:	48c0      	ldr	r0, [pc, #768]	@ (800e780 <_dtoa_r+0x618>)
 800e480:	2900      	cmp	r1, #0
 800e482:	f040 809d 	bne.w	800e5c0 <_dtoa_r+0x458>
 800e486:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e48a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e48e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e492:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e494:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e498:	2900      	cmp	r1, #0
 800e49a:	f000 80c1 	beq.w	800e620 <_dtoa_r+0x4b8>
 800e49e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800e4a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4aa:	f140 80b9 	bpl.w	800e620 <_dtoa_r+0x4b8>
 800e4ae:	f1ba 0f00 	cmp.w	sl, #0
 800e4b2:	f000 80b5 	beq.w	800e620 <_dtoa_r+0x4b8>
 800e4b6:	f1bb 0f00 	cmp.w	fp, #0
 800e4ba:	dd31      	ble.n	800e520 <_dtoa_r+0x3b8>
 800e4bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800e4c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e4c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e4c8:	f108 31ff 	add.w	r1, r8, #4294967295
 800e4cc:	9104      	str	r1, [sp, #16]
 800e4ce:	3201      	adds	r2, #1
 800e4d0:	465c      	mov	r4, fp
 800e4d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e4d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800e4da:	ee07 2a90 	vmov	s15, r2
 800e4de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e4e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e4e6:	ee15 2a90 	vmov	r2, s11
 800e4ea:	ec51 0b15 	vmov	r0, r1, d5
 800e4ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800e4f2:	2c00      	cmp	r4, #0
 800e4f4:	f040 8098 	bne.w	800e628 <_dtoa_r+0x4c0>
 800e4f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e4fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e500:	ec41 0b17 	vmov	d7, r0, r1
 800e504:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e50c:	f300 8261 	bgt.w	800e9d2 <_dtoa_r+0x86a>
 800e510:	eeb1 7b47 	vneg.f64	d7, d7
 800e514:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e51c:	f100 80f5 	bmi.w	800e70a <_dtoa_r+0x5a2>
 800e520:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e524:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e526:	2a00      	cmp	r2, #0
 800e528:	f2c0 812c 	blt.w	800e784 <_dtoa_r+0x61c>
 800e52c:	f1b8 0f0e 	cmp.w	r8, #14
 800e530:	f300 8128 	bgt.w	800e784 <_dtoa_r+0x61c>
 800e534:	4b91      	ldr	r3, [pc, #580]	@ (800e77c <_dtoa_r+0x614>)
 800e536:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e53a:	ed93 6b00 	vldr	d6, [r3]
 800e53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e540:	2b00      	cmp	r3, #0
 800e542:	da03      	bge.n	800e54c <_dtoa_r+0x3e4>
 800e544:	f1ba 0f00 	cmp.w	sl, #0
 800e548:	f340 80d2 	ble.w	800e6f0 <_dtoa_r+0x588>
 800e54c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800e550:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e554:	463e      	mov	r6, r7
 800e556:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e55a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e55e:	ee15 3a10 	vmov	r3, s10
 800e562:	3330      	adds	r3, #48	@ 0x30
 800e564:	f806 3b01 	strb.w	r3, [r6], #1
 800e568:	1bf3      	subs	r3, r6, r7
 800e56a:	459a      	cmp	sl, r3
 800e56c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e570:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e574:	f040 80f8 	bne.w	800e768 <_dtoa_r+0x600>
 800e578:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e57c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e584:	f300 80dd 	bgt.w	800e742 <_dtoa_r+0x5da>
 800e588:	eeb4 7b46 	vcmp.f64	d7, d6
 800e58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e590:	d104      	bne.n	800e59c <_dtoa_r+0x434>
 800e592:	ee15 3a10 	vmov	r3, s10
 800e596:	07db      	lsls	r3, r3, #31
 800e598:	f100 80d3 	bmi.w	800e742 <_dtoa_r+0x5da>
 800e59c:	9901      	ldr	r1, [sp, #4]
 800e59e:	4648      	mov	r0, r9
 800e5a0:	f000 fc78 	bl	800ee94 <_Bfree>
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e5a8:	7033      	strb	r3, [r6, #0]
 800e5aa:	f108 0301 	add.w	r3, r8, #1
 800e5ae:	6013      	str	r3, [r2, #0]
 800e5b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f000 8304 	beq.w	800ebc0 <_dtoa_r+0xa58>
 800e5b8:	601e      	str	r6, [r3, #0]
 800e5ba:	e301      	b.n	800ebc0 <_dtoa_r+0xa58>
 800e5bc:	2202      	movs	r2, #2
 800e5be:	e75e      	b.n	800e47e <_dtoa_r+0x316>
 800e5c0:	07cc      	lsls	r4, r1, #31
 800e5c2:	d504      	bpl.n	800e5ce <_dtoa_r+0x466>
 800e5c4:	ed90 6b00 	vldr	d6, [r0]
 800e5c8:	3201      	adds	r2, #1
 800e5ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e5ce:	1049      	asrs	r1, r1, #1
 800e5d0:	3008      	adds	r0, #8
 800e5d2:	e755      	b.n	800e480 <_dtoa_r+0x318>
 800e5d4:	d022      	beq.n	800e61c <_dtoa_r+0x4b4>
 800e5d6:	f1c8 0100 	rsb	r1, r8, #0
 800e5da:	4a68      	ldr	r2, [pc, #416]	@ (800e77c <_dtoa_r+0x614>)
 800e5dc:	f001 000f 	and.w	r0, r1, #15
 800e5e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e5e4:	ed92 7b00 	vldr	d7, [r2]
 800e5e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e5ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e5f0:	4863      	ldr	r0, [pc, #396]	@ (800e780 <_dtoa_r+0x618>)
 800e5f2:	1109      	asrs	r1, r1, #4
 800e5f4:	2400      	movs	r4, #0
 800e5f6:	2202      	movs	r2, #2
 800e5f8:	b929      	cbnz	r1, 800e606 <_dtoa_r+0x49e>
 800e5fa:	2c00      	cmp	r4, #0
 800e5fc:	f43f af49 	beq.w	800e492 <_dtoa_r+0x32a>
 800e600:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e604:	e745      	b.n	800e492 <_dtoa_r+0x32a>
 800e606:	07ce      	lsls	r6, r1, #31
 800e608:	d505      	bpl.n	800e616 <_dtoa_r+0x4ae>
 800e60a:	ed90 6b00 	vldr	d6, [r0]
 800e60e:	3201      	adds	r2, #1
 800e610:	2401      	movs	r4, #1
 800e612:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e616:	1049      	asrs	r1, r1, #1
 800e618:	3008      	adds	r0, #8
 800e61a:	e7ed      	b.n	800e5f8 <_dtoa_r+0x490>
 800e61c:	2202      	movs	r2, #2
 800e61e:	e738      	b.n	800e492 <_dtoa_r+0x32a>
 800e620:	f8cd 8010 	str.w	r8, [sp, #16]
 800e624:	4654      	mov	r4, sl
 800e626:	e754      	b.n	800e4d2 <_dtoa_r+0x36a>
 800e628:	4a54      	ldr	r2, [pc, #336]	@ (800e77c <_dtoa_r+0x614>)
 800e62a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800e62e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e632:	9a08      	ldr	r2, [sp, #32]
 800e634:	ec41 0b17 	vmov	d7, r0, r1
 800e638:	443c      	add	r4, r7
 800e63a:	b34a      	cbz	r2, 800e690 <_dtoa_r+0x528>
 800e63c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800e640:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800e644:	463e      	mov	r6, r7
 800e646:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e64a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e64e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e652:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e656:	ee14 2a90 	vmov	r2, s9
 800e65a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e65e:	3230      	adds	r2, #48	@ 0x30
 800e660:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e664:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e66c:	f806 2b01 	strb.w	r2, [r6], #1
 800e670:	d438      	bmi.n	800e6e4 <_dtoa_r+0x57c>
 800e672:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e676:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e67e:	d462      	bmi.n	800e746 <_dtoa_r+0x5de>
 800e680:	42a6      	cmp	r6, r4
 800e682:	f43f af4d 	beq.w	800e520 <_dtoa_r+0x3b8>
 800e686:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e68a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e68e:	e7e0      	b.n	800e652 <_dtoa_r+0x4ea>
 800e690:	4621      	mov	r1, r4
 800e692:	463e      	mov	r6, r7
 800e694:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e698:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e69c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e6a0:	ee14 2a90 	vmov	r2, s9
 800e6a4:	3230      	adds	r2, #48	@ 0x30
 800e6a6:	f806 2b01 	strb.w	r2, [r6], #1
 800e6aa:	42a6      	cmp	r6, r4
 800e6ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e6b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e6b4:	d119      	bne.n	800e6ea <_dtoa_r+0x582>
 800e6b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800e6ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e6be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c6:	dc3e      	bgt.n	800e746 <_dtoa_r+0x5de>
 800e6c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e6cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800e6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6d4:	f57f af24 	bpl.w	800e520 <_dtoa_r+0x3b8>
 800e6d8:	460e      	mov	r6, r1
 800e6da:	3901      	subs	r1, #1
 800e6dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e6e0:	2b30      	cmp	r3, #48	@ 0x30
 800e6e2:	d0f9      	beq.n	800e6d8 <_dtoa_r+0x570>
 800e6e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e6e8:	e758      	b.n	800e59c <_dtoa_r+0x434>
 800e6ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e6ee:	e7d5      	b.n	800e69c <_dtoa_r+0x534>
 800e6f0:	d10b      	bne.n	800e70a <_dtoa_r+0x5a2>
 800e6f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e6f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e6fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e6fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e706:	f2c0 8161 	blt.w	800e9cc <_dtoa_r+0x864>
 800e70a:	2400      	movs	r4, #0
 800e70c:	4625      	mov	r5, r4
 800e70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e710:	43db      	mvns	r3, r3
 800e712:	9304      	str	r3, [sp, #16]
 800e714:	463e      	mov	r6, r7
 800e716:	f04f 0800 	mov.w	r8, #0
 800e71a:	4621      	mov	r1, r4
 800e71c:	4648      	mov	r0, r9
 800e71e:	f000 fbb9 	bl	800ee94 <_Bfree>
 800e722:	2d00      	cmp	r5, #0
 800e724:	d0de      	beq.n	800e6e4 <_dtoa_r+0x57c>
 800e726:	f1b8 0f00 	cmp.w	r8, #0
 800e72a:	d005      	beq.n	800e738 <_dtoa_r+0x5d0>
 800e72c:	45a8      	cmp	r8, r5
 800e72e:	d003      	beq.n	800e738 <_dtoa_r+0x5d0>
 800e730:	4641      	mov	r1, r8
 800e732:	4648      	mov	r0, r9
 800e734:	f000 fbae 	bl	800ee94 <_Bfree>
 800e738:	4629      	mov	r1, r5
 800e73a:	4648      	mov	r0, r9
 800e73c:	f000 fbaa 	bl	800ee94 <_Bfree>
 800e740:	e7d0      	b.n	800e6e4 <_dtoa_r+0x57c>
 800e742:	f8cd 8010 	str.w	r8, [sp, #16]
 800e746:	4633      	mov	r3, r6
 800e748:	461e      	mov	r6, r3
 800e74a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e74e:	2a39      	cmp	r2, #57	@ 0x39
 800e750:	d106      	bne.n	800e760 <_dtoa_r+0x5f8>
 800e752:	429f      	cmp	r7, r3
 800e754:	d1f8      	bne.n	800e748 <_dtoa_r+0x5e0>
 800e756:	9a04      	ldr	r2, [sp, #16]
 800e758:	3201      	adds	r2, #1
 800e75a:	9204      	str	r2, [sp, #16]
 800e75c:	2230      	movs	r2, #48	@ 0x30
 800e75e:	703a      	strb	r2, [r7, #0]
 800e760:	781a      	ldrb	r2, [r3, #0]
 800e762:	3201      	adds	r2, #1
 800e764:	701a      	strb	r2, [r3, #0]
 800e766:	e7bd      	b.n	800e6e4 <_dtoa_r+0x57c>
 800e768:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e76c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e774:	f47f aeef 	bne.w	800e556 <_dtoa_r+0x3ee>
 800e778:	e710      	b.n	800e59c <_dtoa_r+0x434>
 800e77a:	bf00      	nop
 800e77c:	0800fe50 	.word	0x0800fe50
 800e780:	0800fe28 	.word	0x0800fe28
 800e784:	9908      	ldr	r1, [sp, #32]
 800e786:	2900      	cmp	r1, #0
 800e788:	f000 80e3 	beq.w	800e952 <_dtoa_r+0x7ea>
 800e78c:	9907      	ldr	r1, [sp, #28]
 800e78e:	2901      	cmp	r1, #1
 800e790:	f300 80c8 	bgt.w	800e924 <_dtoa_r+0x7bc>
 800e794:	2d00      	cmp	r5, #0
 800e796:	f000 80c1 	beq.w	800e91c <_dtoa_r+0x7b4>
 800e79a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e79e:	9e05      	ldr	r6, [sp, #20]
 800e7a0:	461c      	mov	r4, r3
 800e7a2:	9304      	str	r3, [sp, #16]
 800e7a4:	9b05      	ldr	r3, [sp, #20]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	9305      	str	r3, [sp, #20]
 800e7aa:	9b06      	ldr	r3, [sp, #24]
 800e7ac:	2101      	movs	r1, #1
 800e7ae:	4413      	add	r3, r2
 800e7b0:	4648      	mov	r0, r9
 800e7b2:	9306      	str	r3, [sp, #24]
 800e7b4:	f000 fc22 	bl	800effc <__i2b>
 800e7b8:	9b04      	ldr	r3, [sp, #16]
 800e7ba:	4605      	mov	r5, r0
 800e7bc:	b166      	cbz	r6, 800e7d8 <_dtoa_r+0x670>
 800e7be:	9a06      	ldr	r2, [sp, #24]
 800e7c0:	2a00      	cmp	r2, #0
 800e7c2:	dd09      	ble.n	800e7d8 <_dtoa_r+0x670>
 800e7c4:	42b2      	cmp	r2, r6
 800e7c6:	9905      	ldr	r1, [sp, #20]
 800e7c8:	bfa8      	it	ge
 800e7ca:	4632      	movge	r2, r6
 800e7cc:	1a89      	subs	r1, r1, r2
 800e7ce:	9105      	str	r1, [sp, #20]
 800e7d0:	9906      	ldr	r1, [sp, #24]
 800e7d2:	1ab6      	subs	r6, r6, r2
 800e7d4:	1a8a      	subs	r2, r1, r2
 800e7d6:	9206      	str	r2, [sp, #24]
 800e7d8:	b1fb      	cbz	r3, 800e81a <_dtoa_r+0x6b2>
 800e7da:	9a08      	ldr	r2, [sp, #32]
 800e7dc:	2a00      	cmp	r2, #0
 800e7de:	f000 80bc 	beq.w	800e95a <_dtoa_r+0x7f2>
 800e7e2:	b19c      	cbz	r4, 800e80c <_dtoa_r+0x6a4>
 800e7e4:	4629      	mov	r1, r5
 800e7e6:	4622      	mov	r2, r4
 800e7e8:	4648      	mov	r0, r9
 800e7ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7ec:	f000 fcc6 	bl	800f17c <__pow5mult>
 800e7f0:	9a01      	ldr	r2, [sp, #4]
 800e7f2:	4601      	mov	r1, r0
 800e7f4:	4605      	mov	r5, r0
 800e7f6:	4648      	mov	r0, r9
 800e7f8:	f000 fc16 	bl	800f028 <__multiply>
 800e7fc:	9901      	ldr	r1, [sp, #4]
 800e7fe:	9004      	str	r0, [sp, #16]
 800e800:	4648      	mov	r0, r9
 800e802:	f000 fb47 	bl	800ee94 <_Bfree>
 800e806:	9a04      	ldr	r2, [sp, #16]
 800e808:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e80a:	9201      	str	r2, [sp, #4]
 800e80c:	1b1a      	subs	r2, r3, r4
 800e80e:	d004      	beq.n	800e81a <_dtoa_r+0x6b2>
 800e810:	9901      	ldr	r1, [sp, #4]
 800e812:	4648      	mov	r0, r9
 800e814:	f000 fcb2 	bl	800f17c <__pow5mult>
 800e818:	9001      	str	r0, [sp, #4]
 800e81a:	2101      	movs	r1, #1
 800e81c:	4648      	mov	r0, r9
 800e81e:	f000 fbed 	bl	800effc <__i2b>
 800e822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e824:	4604      	mov	r4, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	f000 81d0 	beq.w	800ebcc <_dtoa_r+0xa64>
 800e82c:	461a      	mov	r2, r3
 800e82e:	4601      	mov	r1, r0
 800e830:	4648      	mov	r0, r9
 800e832:	f000 fca3 	bl	800f17c <__pow5mult>
 800e836:	9b07      	ldr	r3, [sp, #28]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	4604      	mov	r4, r0
 800e83c:	f300 8095 	bgt.w	800e96a <_dtoa_r+0x802>
 800e840:	9b02      	ldr	r3, [sp, #8]
 800e842:	2b00      	cmp	r3, #0
 800e844:	f040 808b 	bne.w	800e95e <_dtoa_r+0x7f6>
 800e848:	9b03      	ldr	r3, [sp, #12]
 800e84a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e84e:	2a00      	cmp	r2, #0
 800e850:	f040 8087 	bne.w	800e962 <_dtoa_r+0x7fa>
 800e854:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e858:	0d12      	lsrs	r2, r2, #20
 800e85a:	0512      	lsls	r2, r2, #20
 800e85c:	2a00      	cmp	r2, #0
 800e85e:	f000 8082 	beq.w	800e966 <_dtoa_r+0x7fe>
 800e862:	9b05      	ldr	r3, [sp, #20]
 800e864:	3301      	adds	r3, #1
 800e866:	9305      	str	r3, [sp, #20]
 800e868:	9b06      	ldr	r3, [sp, #24]
 800e86a:	3301      	adds	r3, #1
 800e86c:	9306      	str	r3, [sp, #24]
 800e86e:	2301      	movs	r3, #1
 800e870:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e874:	2b00      	cmp	r3, #0
 800e876:	f000 81af 	beq.w	800ebd8 <_dtoa_r+0xa70>
 800e87a:	6922      	ldr	r2, [r4, #16]
 800e87c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e880:	6910      	ldr	r0, [r2, #16]
 800e882:	f000 fb6f 	bl	800ef64 <__hi0bits>
 800e886:	f1c0 0020 	rsb	r0, r0, #32
 800e88a:	9b06      	ldr	r3, [sp, #24]
 800e88c:	4418      	add	r0, r3
 800e88e:	f010 001f 	ands.w	r0, r0, #31
 800e892:	d076      	beq.n	800e982 <_dtoa_r+0x81a>
 800e894:	f1c0 0220 	rsb	r2, r0, #32
 800e898:	2a04      	cmp	r2, #4
 800e89a:	dd69      	ble.n	800e970 <_dtoa_r+0x808>
 800e89c:	9b05      	ldr	r3, [sp, #20]
 800e89e:	f1c0 001c 	rsb	r0, r0, #28
 800e8a2:	4403      	add	r3, r0
 800e8a4:	9305      	str	r3, [sp, #20]
 800e8a6:	9b06      	ldr	r3, [sp, #24]
 800e8a8:	4406      	add	r6, r0
 800e8aa:	4403      	add	r3, r0
 800e8ac:	9306      	str	r3, [sp, #24]
 800e8ae:	9b05      	ldr	r3, [sp, #20]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	dd05      	ble.n	800e8c0 <_dtoa_r+0x758>
 800e8b4:	9901      	ldr	r1, [sp, #4]
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	4648      	mov	r0, r9
 800e8ba:	f000 fcb9 	bl	800f230 <__lshift>
 800e8be:	9001      	str	r0, [sp, #4]
 800e8c0:	9b06      	ldr	r3, [sp, #24]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	dd05      	ble.n	800e8d2 <_dtoa_r+0x76a>
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	4648      	mov	r0, r9
 800e8cc:	f000 fcb0 	bl	800f230 <__lshift>
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d056      	beq.n	800e986 <_dtoa_r+0x81e>
 800e8d8:	9801      	ldr	r0, [sp, #4]
 800e8da:	4621      	mov	r1, r4
 800e8dc:	f000 fd14 	bl	800f308 <__mcmp>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	da50      	bge.n	800e986 <_dtoa_r+0x81e>
 800e8e4:	f108 33ff 	add.w	r3, r8, #4294967295
 800e8e8:	9304      	str	r3, [sp, #16]
 800e8ea:	9901      	ldr	r1, [sp, #4]
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	220a      	movs	r2, #10
 800e8f0:	4648      	mov	r0, r9
 800e8f2:	f000 faf1 	bl	800eed8 <__multadd>
 800e8f6:	9b08      	ldr	r3, [sp, #32]
 800e8f8:	9001      	str	r0, [sp, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f000 816e 	beq.w	800ebdc <_dtoa_r+0xa74>
 800e900:	4629      	mov	r1, r5
 800e902:	2300      	movs	r3, #0
 800e904:	220a      	movs	r2, #10
 800e906:	4648      	mov	r0, r9
 800e908:	f000 fae6 	bl	800eed8 <__multadd>
 800e90c:	f1bb 0f00 	cmp.w	fp, #0
 800e910:	4605      	mov	r5, r0
 800e912:	dc64      	bgt.n	800e9de <_dtoa_r+0x876>
 800e914:	9b07      	ldr	r3, [sp, #28]
 800e916:	2b02      	cmp	r3, #2
 800e918:	dc3e      	bgt.n	800e998 <_dtoa_r+0x830>
 800e91a:	e060      	b.n	800e9de <_dtoa_r+0x876>
 800e91c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e91e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e922:	e73c      	b.n	800e79e <_dtoa_r+0x636>
 800e924:	f10a 34ff 	add.w	r4, sl, #4294967295
 800e928:	42a3      	cmp	r3, r4
 800e92a:	bfbf      	itttt	lt
 800e92c:	1ae2      	sublt	r2, r4, r3
 800e92e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e930:	189b      	addlt	r3, r3, r2
 800e932:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800e934:	bfae      	itee	ge
 800e936:	1b1c      	subge	r4, r3, r4
 800e938:	4623      	movlt	r3, r4
 800e93a:	2400      	movlt	r4, #0
 800e93c:	f1ba 0f00 	cmp.w	sl, #0
 800e940:	bfb5      	itete	lt
 800e942:	9a05      	ldrlt	r2, [sp, #20]
 800e944:	9e05      	ldrge	r6, [sp, #20]
 800e946:	eba2 060a 	sublt.w	r6, r2, sl
 800e94a:	4652      	movge	r2, sl
 800e94c:	bfb8      	it	lt
 800e94e:	2200      	movlt	r2, #0
 800e950:	e727      	b.n	800e7a2 <_dtoa_r+0x63a>
 800e952:	9e05      	ldr	r6, [sp, #20]
 800e954:	9d08      	ldr	r5, [sp, #32]
 800e956:	461c      	mov	r4, r3
 800e958:	e730      	b.n	800e7bc <_dtoa_r+0x654>
 800e95a:	461a      	mov	r2, r3
 800e95c:	e758      	b.n	800e810 <_dtoa_r+0x6a8>
 800e95e:	2300      	movs	r3, #0
 800e960:	e786      	b.n	800e870 <_dtoa_r+0x708>
 800e962:	9b02      	ldr	r3, [sp, #8]
 800e964:	e784      	b.n	800e870 <_dtoa_r+0x708>
 800e966:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e968:	e783      	b.n	800e872 <_dtoa_r+0x70a>
 800e96a:	2300      	movs	r3, #0
 800e96c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e96e:	e784      	b.n	800e87a <_dtoa_r+0x712>
 800e970:	d09d      	beq.n	800e8ae <_dtoa_r+0x746>
 800e972:	9b05      	ldr	r3, [sp, #20]
 800e974:	321c      	adds	r2, #28
 800e976:	4413      	add	r3, r2
 800e978:	9305      	str	r3, [sp, #20]
 800e97a:	9b06      	ldr	r3, [sp, #24]
 800e97c:	4416      	add	r6, r2
 800e97e:	4413      	add	r3, r2
 800e980:	e794      	b.n	800e8ac <_dtoa_r+0x744>
 800e982:	4602      	mov	r2, r0
 800e984:	e7f5      	b.n	800e972 <_dtoa_r+0x80a>
 800e986:	f1ba 0f00 	cmp.w	sl, #0
 800e98a:	f8cd 8010 	str.w	r8, [sp, #16]
 800e98e:	46d3      	mov	fp, sl
 800e990:	dc21      	bgt.n	800e9d6 <_dtoa_r+0x86e>
 800e992:	9b07      	ldr	r3, [sp, #28]
 800e994:	2b02      	cmp	r3, #2
 800e996:	dd1e      	ble.n	800e9d6 <_dtoa_r+0x86e>
 800e998:	f1bb 0f00 	cmp.w	fp, #0
 800e99c:	f47f aeb7 	bne.w	800e70e <_dtoa_r+0x5a6>
 800e9a0:	4621      	mov	r1, r4
 800e9a2:	465b      	mov	r3, fp
 800e9a4:	2205      	movs	r2, #5
 800e9a6:	4648      	mov	r0, r9
 800e9a8:	f000 fa96 	bl	800eed8 <__multadd>
 800e9ac:	4601      	mov	r1, r0
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	9801      	ldr	r0, [sp, #4]
 800e9b2:	f000 fca9 	bl	800f308 <__mcmp>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	f77f aea9 	ble.w	800e70e <_dtoa_r+0x5a6>
 800e9bc:	463e      	mov	r6, r7
 800e9be:	2331      	movs	r3, #49	@ 0x31
 800e9c0:	f806 3b01 	strb.w	r3, [r6], #1
 800e9c4:	9b04      	ldr	r3, [sp, #16]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	9304      	str	r3, [sp, #16]
 800e9ca:	e6a4      	b.n	800e716 <_dtoa_r+0x5ae>
 800e9cc:	f8cd 8010 	str.w	r8, [sp, #16]
 800e9d0:	4654      	mov	r4, sl
 800e9d2:	4625      	mov	r5, r4
 800e9d4:	e7f2      	b.n	800e9bc <_dtoa_r+0x854>
 800e9d6:	9b08      	ldr	r3, [sp, #32]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	f000 8103 	beq.w	800ebe4 <_dtoa_r+0xa7c>
 800e9de:	2e00      	cmp	r6, #0
 800e9e0:	dd05      	ble.n	800e9ee <_dtoa_r+0x886>
 800e9e2:	4629      	mov	r1, r5
 800e9e4:	4632      	mov	r2, r6
 800e9e6:	4648      	mov	r0, r9
 800e9e8:	f000 fc22 	bl	800f230 <__lshift>
 800e9ec:	4605      	mov	r5, r0
 800e9ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d058      	beq.n	800eaa6 <_dtoa_r+0x93e>
 800e9f4:	6869      	ldr	r1, [r5, #4]
 800e9f6:	4648      	mov	r0, r9
 800e9f8:	f000 fa0c 	bl	800ee14 <_Balloc>
 800e9fc:	4606      	mov	r6, r0
 800e9fe:	b928      	cbnz	r0, 800ea0c <_dtoa_r+0x8a4>
 800ea00:	4b82      	ldr	r3, [pc, #520]	@ (800ec0c <_dtoa_r+0xaa4>)
 800ea02:	4602      	mov	r2, r0
 800ea04:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ea08:	f7ff bbc7 	b.w	800e19a <_dtoa_r+0x32>
 800ea0c:	692a      	ldr	r2, [r5, #16]
 800ea0e:	3202      	adds	r2, #2
 800ea10:	0092      	lsls	r2, r2, #2
 800ea12:	f105 010c 	add.w	r1, r5, #12
 800ea16:	300c      	adds	r0, #12
 800ea18:	f7ff fb0f 	bl	800e03a <memcpy>
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	4631      	mov	r1, r6
 800ea20:	4648      	mov	r0, r9
 800ea22:	f000 fc05 	bl	800f230 <__lshift>
 800ea26:	1c7b      	adds	r3, r7, #1
 800ea28:	9305      	str	r3, [sp, #20]
 800ea2a:	eb07 030b 	add.w	r3, r7, fp
 800ea2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea30:	9b02      	ldr	r3, [sp, #8]
 800ea32:	f003 0301 	and.w	r3, r3, #1
 800ea36:	46a8      	mov	r8, r5
 800ea38:	9308      	str	r3, [sp, #32]
 800ea3a:	4605      	mov	r5, r0
 800ea3c:	9b05      	ldr	r3, [sp, #20]
 800ea3e:	9801      	ldr	r0, [sp, #4]
 800ea40:	4621      	mov	r1, r4
 800ea42:	f103 3bff 	add.w	fp, r3, #4294967295
 800ea46:	f7ff fb06 	bl	800e056 <quorem>
 800ea4a:	4641      	mov	r1, r8
 800ea4c:	9002      	str	r0, [sp, #8]
 800ea4e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ea52:	9801      	ldr	r0, [sp, #4]
 800ea54:	f000 fc58 	bl	800f308 <__mcmp>
 800ea58:	462a      	mov	r2, r5
 800ea5a:	9006      	str	r0, [sp, #24]
 800ea5c:	4621      	mov	r1, r4
 800ea5e:	4648      	mov	r0, r9
 800ea60:	f000 fc6e 	bl	800f340 <__mdiff>
 800ea64:	68c2      	ldr	r2, [r0, #12]
 800ea66:	4606      	mov	r6, r0
 800ea68:	b9fa      	cbnz	r2, 800eaaa <_dtoa_r+0x942>
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	9801      	ldr	r0, [sp, #4]
 800ea6e:	f000 fc4b 	bl	800f308 <__mcmp>
 800ea72:	4602      	mov	r2, r0
 800ea74:	4631      	mov	r1, r6
 800ea76:	4648      	mov	r0, r9
 800ea78:	920a      	str	r2, [sp, #40]	@ 0x28
 800ea7a:	f000 fa0b 	bl	800ee94 <_Bfree>
 800ea7e:	9b07      	ldr	r3, [sp, #28]
 800ea80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea82:	9e05      	ldr	r6, [sp, #20]
 800ea84:	ea43 0102 	orr.w	r1, r3, r2
 800ea88:	9b08      	ldr	r3, [sp, #32]
 800ea8a:	4319      	orrs	r1, r3
 800ea8c:	d10f      	bne.n	800eaae <_dtoa_r+0x946>
 800ea8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ea92:	d028      	beq.n	800eae6 <_dtoa_r+0x97e>
 800ea94:	9b06      	ldr	r3, [sp, #24]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	dd02      	ble.n	800eaa0 <_dtoa_r+0x938>
 800ea9a:	9b02      	ldr	r3, [sp, #8]
 800ea9c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800eaa0:	f88b a000 	strb.w	sl, [fp]
 800eaa4:	e639      	b.n	800e71a <_dtoa_r+0x5b2>
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	e7bd      	b.n	800ea26 <_dtoa_r+0x8be>
 800eaaa:	2201      	movs	r2, #1
 800eaac:	e7e2      	b.n	800ea74 <_dtoa_r+0x90c>
 800eaae:	9b06      	ldr	r3, [sp, #24]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	db04      	blt.n	800eabe <_dtoa_r+0x956>
 800eab4:	9907      	ldr	r1, [sp, #28]
 800eab6:	430b      	orrs	r3, r1
 800eab8:	9908      	ldr	r1, [sp, #32]
 800eaba:	430b      	orrs	r3, r1
 800eabc:	d120      	bne.n	800eb00 <_dtoa_r+0x998>
 800eabe:	2a00      	cmp	r2, #0
 800eac0:	ddee      	ble.n	800eaa0 <_dtoa_r+0x938>
 800eac2:	9901      	ldr	r1, [sp, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	4648      	mov	r0, r9
 800eac8:	f000 fbb2 	bl	800f230 <__lshift>
 800eacc:	4621      	mov	r1, r4
 800eace:	9001      	str	r0, [sp, #4]
 800ead0:	f000 fc1a 	bl	800f308 <__mcmp>
 800ead4:	2800      	cmp	r0, #0
 800ead6:	dc03      	bgt.n	800eae0 <_dtoa_r+0x978>
 800ead8:	d1e2      	bne.n	800eaa0 <_dtoa_r+0x938>
 800eada:	f01a 0f01 	tst.w	sl, #1
 800eade:	d0df      	beq.n	800eaa0 <_dtoa_r+0x938>
 800eae0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800eae4:	d1d9      	bne.n	800ea9a <_dtoa_r+0x932>
 800eae6:	2339      	movs	r3, #57	@ 0x39
 800eae8:	f88b 3000 	strb.w	r3, [fp]
 800eaec:	4633      	mov	r3, r6
 800eaee:	461e      	mov	r6, r3
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eaf6:	2a39      	cmp	r2, #57	@ 0x39
 800eaf8:	d053      	beq.n	800eba2 <_dtoa_r+0xa3a>
 800eafa:	3201      	adds	r2, #1
 800eafc:	701a      	strb	r2, [r3, #0]
 800eafe:	e60c      	b.n	800e71a <_dtoa_r+0x5b2>
 800eb00:	2a00      	cmp	r2, #0
 800eb02:	dd07      	ble.n	800eb14 <_dtoa_r+0x9ac>
 800eb04:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800eb08:	d0ed      	beq.n	800eae6 <_dtoa_r+0x97e>
 800eb0a:	f10a 0301 	add.w	r3, sl, #1
 800eb0e:	f88b 3000 	strb.w	r3, [fp]
 800eb12:	e602      	b.n	800e71a <_dtoa_r+0x5b2>
 800eb14:	9b05      	ldr	r3, [sp, #20]
 800eb16:	9a05      	ldr	r2, [sp, #20]
 800eb18:	f803 ac01 	strb.w	sl, [r3, #-1]
 800eb1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d029      	beq.n	800eb76 <_dtoa_r+0xa0e>
 800eb22:	9901      	ldr	r1, [sp, #4]
 800eb24:	2300      	movs	r3, #0
 800eb26:	220a      	movs	r2, #10
 800eb28:	4648      	mov	r0, r9
 800eb2a:	f000 f9d5 	bl	800eed8 <__multadd>
 800eb2e:	45a8      	cmp	r8, r5
 800eb30:	9001      	str	r0, [sp, #4]
 800eb32:	f04f 0300 	mov.w	r3, #0
 800eb36:	f04f 020a 	mov.w	r2, #10
 800eb3a:	4641      	mov	r1, r8
 800eb3c:	4648      	mov	r0, r9
 800eb3e:	d107      	bne.n	800eb50 <_dtoa_r+0x9e8>
 800eb40:	f000 f9ca 	bl	800eed8 <__multadd>
 800eb44:	4680      	mov	r8, r0
 800eb46:	4605      	mov	r5, r0
 800eb48:	9b05      	ldr	r3, [sp, #20]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	9305      	str	r3, [sp, #20]
 800eb4e:	e775      	b.n	800ea3c <_dtoa_r+0x8d4>
 800eb50:	f000 f9c2 	bl	800eed8 <__multadd>
 800eb54:	4629      	mov	r1, r5
 800eb56:	4680      	mov	r8, r0
 800eb58:	2300      	movs	r3, #0
 800eb5a:	220a      	movs	r2, #10
 800eb5c:	4648      	mov	r0, r9
 800eb5e:	f000 f9bb 	bl	800eed8 <__multadd>
 800eb62:	4605      	mov	r5, r0
 800eb64:	e7f0      	b.n	800eb48 <_dtoa_r+0x9e0>
 800eb66:	f1bb 0f00 	cmp.w	fp, #0
 800eb6a:	bfcc      	ite	gt
 800eb6c:	465e      	movgt	r6, fp
 800eb6e:	2601      	movle	r6, #1
 800eb70:	443e      	add	r6, r7
 800eb72:	f04f 0800 	mov.w	r8, #0
 800eb76:	9901      	ldr	r1, [sp, #4]
 800eb78:	2201      	movs	r2, #1
 800eb7a:	4648      	mov	r0, r9
 800eb7c:	f000 fb58 	bl	800f230 <__lshift>
 800eb80:	4621      	mov	r1, r4
 800eb82:	9001      	str	r0, [sp, #4]
 800eb84:	f000 fbc0 	bl	800f308 <__mcmp>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	dcaf      	bgt.n	800eaec <_dtoa_r+0x984>
 800eb8c:	d102      	bne.n	800eb94 <_dtoa_r+0xa2c>
 800eb8e:	f01a 0f01 	tst.w	sl, #1
 800eb92:	d1ab      	bne.n	800eaec <_dtoa_r+0x984>
 800eb94:	4633      	mov	r3, r6
 800eb96:	461e      	mov	r6, r3
 800eb98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb9c:	2a30      	cmp	r2, #48	@ 0x30
 800eb9e:	d0fa      	beq.n	800eb96 <_dtoa_r+0xa2e>
 800eba0:	e5bb      	b.n	800e71a <_dtoa_r+0x5b2>
 800eba2:	429f      	cmp	r7, r3
 800eba4:	d1a3      	bne.n	800eaee <_dtoa_r+0x986>
 800eba6:	9b04      	ldr	r3, [sp, #16]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	9304      	str	r3, [sp, #16]
 800ebac:	2331      	movs	r3, #49	@ 0x31
 800ebae:	703b      	strb	r3, [r7, #0]
 800ebb0:	e5b3      	b.n	800e71a <_dtoa_r+0x5b2>
 800ebb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ebb4:	4f16      	ldr	r7, [pc, #88]	@ (800ec10 <_dtoa_r+0xaa8>)
 800ebb6:	b11b      	cbz	r3, 800ebc0 <_dtoa_r+0xa58>
 800ebb8:	f107 0308 	add.w	r3, r7, #8
 800ebbc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ebbe:	6013      	str	r3, [r2, #0]
 800ebc0:	4638      	mov	r0, r7
 800ebc2:	b011      	add	sp, #68	@ 0x44
 800ebc4:	ecbd 8b02 	vpop	{d8}
 800ebc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebcc:	9b07      	ldr	r3, [sp, #28]
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	f77f ae36 	ble.w	800e840 <_dtoa_r+0x6d8>
 800ebd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebd8:	2001      	movs	r0, #1
 800ebda:	e656      	b.n	800e88a <_dtoa_r+0x722>
 800ebdc:	f1bb 0f00 	cmp.w	fp, #0
 800ebe0:	f77f aed7 	ble.w	800e992 <_dtoa_r+0x82a>
 800ebe4:	463e      	mov	r6, r7
 800ebe6:	9801      	ldr	r0, [sp, #4]
 800ebe8:	4621      	mov	r1, r4
 800ebea:	f7ff fa34 	bl	800e056 <quorem>
 800ebee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ebf2:	f806 ab01 	strb.w	sl, [r6], #1
 800ebf6:	1bf2      	subs	r2, r6, r7
 800ebf8:	4593      	cmp	fp, r2
 800ebfa:	ddb4      	ble.n	800eb66 <_dtoa_r+0x9fe>
 800ebfc:	9901      	ldr	r1, [sp, #4]
 800ebfe:	2300      	movs	r3, #0
 800ec00:	220a      	movs	r2, #10
 800ec02:	4648      	mov	r0, r9
 800ec04:	f000 f968 	bl	800eed8 <__multadd>
 800ec08:	9001      	str	r0, [sp, #4]
 800ec0a:	e7ec      	b.n	800ebe6 <_dtoa_r+0xa7e>
 800ec0c:	0800fdac 	.word	0x0800fdac
 800ec10:	0800fd30 	.word	0x0800fd30

0800ec14 <_free_r>:
 800ec14:	b538      	push	{r3, r4, r5, lr}
 800ec16:	4605      	mov	r5, r0
 800ec18:	2900      	cmp	r1, #0
 800ec1a:	d041      	beq.n	800eca0 <_free_r+0x8c>
 800ec1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec20:	1f0c      	subs	r4, r1, #4
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	bfb8      	it	lt
 800ec26:	18e4      	addlt	r4, r4, r3
 800ec28:	f000 f8e8 	bl	800edfc <__malloc_lock>
 800ec2c:	4a1d      	ldr	r2, [pc, #116]	@ (800eca4 <_free_r+0x90>)
 800ec2e:	6813      	ldr	r3, [r2, #0]
 800ec30:	b933      	cbnz	r3, 800ec40 <_free_r+0x2c>
 800ec32:	6063      	str	r3, [r4, #4]
 800ec34:	6014      	str	r4, [r2, #0]
 800ec36:	4628      	mov	r0, r5
 800ec38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec3c:	f000 b8e4 	b.w	800ee08 <__malloc_unlock>
 800ec40:	42a3      	cmp	r3, r4
 800ec42:	d908      	bls.n	800ec56 <_free_r+0x42>
 800ec44:	6820      	ldr	r0, [r4, #0]
 800ec46:	1821      	adds	r1, r4, r0
 800ec48:	428b      	cmp	r3, r1
 800ec4a:	bf01      	itttt	eq
 800ec4c:	6819      	ldreq	r1, [r3, #0]
 800ec4e:	685b      	ldreq	r3, [r3, #4]
 800ec50:	1809      	addeq	r1, r1, r0
 800ec52:	6021      	streq	r1, [r4, #0]
 800ec54:	e7ed      	b.n	800ec32 <_free_r+0x1e>
 800ec56:	461a      	mov	r2, r3
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	b10b      	cbz	r3, 800ec60 <_free_r+0x4c>
 800ec5c:	42a3      	cmp	r3, r4
 800ec5e:	d9fa      	bls.n	800ec56 <_free_r+0x42>
 800ec60:	6811      	ldr	r1, [r2, #0]
 800ec62:	1850      	adds	r0, r2, r1
 800ec64:	42a0      	cmp	r0, r4
 800ec66:	d10b      	bne.n	800ec80 <_free_r+0x6c>
 800ec68:	6820      	ldr	r0, [r4, #0]
 800ec6a:	4401      	add	r1, r0
 800ec6c:	1850      	adds	r0, r2, r1
 800ec6e:	4283      	cmp	r3, r0
 800ec70:	6011      	str	r1, [r2, #0]
 800ec72:	d1e0      	bne.n	800ec36 <_free_r+0x22>
 800ec74:	6818      	ldr	r0, [r3, #0]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	6053      	str	r3, [r2, #4]
 800ec7a:	4408      	add	r0, r1
 800ec7c:	6010      	str	r0, [r2, #0]
 800ec7e:	e7da      	b.n	800ec36 <_free_r+0x22>
 800ec80:	d902      	bls.n	800ec88 <_free_r+0x74>
 800ec82:	230c      	movs	r3, #12
 800ec84:	602b      	str	r3, [r5, #0]
 800ec86:	e7d6      	b.n	800ec36 <_free_r+0x22>
 800ec88:	6820      	ldr	r0, [r4, #0]
 800ec8a:	1821      	adds	r1, r4, r0
 800ec8c:	428b      	cmp	r3, r1
 800ec8e:	bf04      	itt	eq
 800ec90:	6819      	ldreq	r1, [r3, #0]
 800ec92:	685b      	ldreq	r3, [r3, #4]
 800ec94:	6063      	str	r3, [r4, #4]
 800ec96:	bf04      	itt	eq
 800ec98:	1809      	addeq	r1, r1, r0
 800ec9a:	6021      	streq	r1, [r4, #0]
 800ec9c:	6054      	str	r4, [r2, #4]
 800ec9e:	e7ca      	b.n	800ec36 <_free_r+0x22>
 800eca0:	bd38      	pop	{r3, r4, r5, pc}
 800eca2:	bf00      	nop
 800eca4:	2400511c 	.word	0x2400511c

0800eca8 <malloc>:
 800eca8:	4b02      	ldr	r3, [pc, #8]	@ (800ecb4 <malloc+0xc>)
 800ecaa:	4601      	mov	r1, r0
 800ecac:	6818      	ldr	r0, [r3, #0]
 800ecae:	f000 b825 	b.w	800ecfc <_malloc_r>
 800ecb2:	bf00      	nop
 800ecb4:	24000020 	.word	0x24000020

0800ecb8 <sbrk_aligned>:
 800ecb8:	b570      	push	{r4, r5, r6, lr}
 800ecba:	4e0f      	ldr	r6, [pc, #60]	@ (800ecf8 <sbrk_aligned+0x40>)
 800ecbc:	460c      	mov	r4, r1
 800ecbe:	6831      	ldr	r1, [r6, #0]
 800ecc0:	4605      	mov	r5, r0
 800ecc2:	b911      	cbnz	r1, 800ecca <sbrk_aligned+0x12>
 800ecc4:	f000 fe9a 	bl	800f9fc <_sbrk_r>
 800ecc8:	6030      	str	r0, [r6, #0]
 800ecca:	4621      	mov	r1, r4
 800eccc:	4628      	mov	r0, r5
 800ecce:	f000 fe95 	bl	800f9fc <_sbrk_r>
 800ecd2:	1c43      	adds	r3, r0, #1
 800ecd4:	d103      	bne.n	800ecde <sbrk_aligned+0x26>
 800ecd6:	f04f 34ff 	mov.w	r4, #4294967295
 800ecda:	4620      	mov	r0, r4
 800ecdc:	bd70      	pop	{r4, r5, r6, pc}
 800ecde:	1cc4      	adds	r4, r0, #3
 800ece0:	f024 0403 	bic.w	r4, r4, #3
 800ece4:	42a0      	cmp	r0, r4
 800ece6:	d0f8      	beq.n	800ecda <sbrk_aligned+0x22>
 800ece8:	1a21      	subs	r1, r4, r0
 800ecea:	4628      	mov	r0, r5
 800ecec:	f000 fe86 	bl	800f9fc <_sbrk_r>
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	d1f2      	bne.n	800ecda <sbrk_aligned+0x22>
 800ecf4:	e7ef      	b.n	800ecd6 <sbrk_aligned+0x1e>
 800ecf6:	bf00      	nop
 800ecf8:	24005118 	.word	0x24005118

0800ecfc <_malloc_r>:
 800ecfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed00:	1ccd      	adds	r5, r1, #3
 800ed02:	f025 0503 	bic.w	r5, r5, #3
 800ed06:	3508      	adds	r5, #8
 800ed08:	2d0c      	cmp	r5, #12
 800ed0a:	bf38      	it	cc
 800ed0c:	250c      	movcc	r5, #12
 800ed0e:	2d00      	cmp	r5, #0
 800ed10:	4606      	mov	r6, r0
 800ed12:	db01      	blt.n	800ed18 <_malloc_r+0x1c>
 800ed14:	42a9      	cmp	r1, r5
 800ed16:	d904      	bls.n	800ed22 <_malloc_r+0x26>
 800ed18:	230c      	movs	r3, #12
 800ed1a:	6033      	str	r3, [r6, #0]
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800edf8 <_malloc_r+0xfc>
 800ed26:	f000 f869 	bl	800edfc <__malloc_lock>
 800ed2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ed2e:	461c      	mov	r4, r3
 800ed30:	bb44      	cbnz	r4, 800ed84 <_malloc_r+0x88>
 800ed32:	4629      	mov	r1, r5
 800ed34:	4630      	mov	r0, r6
 800ed36:	f7ff ffbf 	bl	800ecb8 <sbrk_aligned>
 800ed3a:	1c43      	adds	r3, r0, #1
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	d158      	bne.n	800edf2 <_malloc_r+0xf6>
 800ed40:	f8d8 4000 	ldr.w	r4, [r8]
 800ed44:	4627      	mov	r7, r4
 800ed46:	2f00      	cmp	r7, #0
 800ed48:	d143      	bne.n	800edd2 <_malloc_r+0xd6>
 800ed4a:	2c00      	cmp	r4, #0
 800ed4c:	d04b      	beq.n	800ede6 <_malloc_r+0xea>
 800ed4e:	6823      	ldr	r3, [r4, #0]
 800ed50:	4639      	mov	r1, r7
 800ed52:	4630      	mov	r0, r6
 800ed54:	eb04 0903 	add.w	r9, r4, r3
 800ed58:	f000 fe50 	bl	800f9fc <_sbrk_r>
 800ed5c:	4581      	cmp	r9, r0
 800ed5e:	d142      	bne.n	800ede6 <_malloc_r+0xea>
 800ed60:	6821      	ldr	r1, [r4, #0]
 800ed62:	1a6d      	subs	r5, r5, r1
 800ed64:	4629      	mov	r1, r5
 800ed66:	4630      	mov	r0, r6
 800ed68:	f7ff ffa6 	bl	800ecb8 <sbrk_aligned>
 800ed6c:	3001      	adds	r0, #1
 800ed6e:	d03a      	beq.n	800ede6 <_malloc_r+0xea>
 800ed70:	6823      	ldr	r3, [r4, #0]
 800ed72:	442b      	add	r3, r5
 800ed74:	6023      	str	r3, [r4, #0]
 800ed76:	f8d8 3000 	ldr.w	r3, [r8]
 800ed7a:	685a      	ldr	r2, [r3, #4]
 800ed7c:	bb62      	cbnz	r2, 800edd8 <_malloc_r+0xdc>
 800ed7e:	f8c8 7000 	str.w	r7, [r8]
 800ed82:	e00f      	b.n	800eda4 <_malloc_r+0xa8>
 800ed84:	6822      	ldr	r2, [r4, #0]
 800ed86:	1b52      	subs	r2, r2, r5
 800ed88:	d420      	bmi.n	800edcc <_malloc_r+0xd0>
 800ed8a:	2a0b      	cmp	r2, #11
 800ed8c:	d917      	bls.n	800edbe <_malloc_r+0xc2>
 800ed8e:	1961      	adds	r1, r4, r5
 800ed90:	42a3      	cmp	r3, r4
 800ed92:	6025      	str	r5, [r4, #0]
 800ed94:	bf18      	it	ne
 800ed96:	6059      	strne	r1, [r3, #4]
 800ed98:	6863      	ldr	r3, [r4, #4]
 800ed9a:	bf08      	it	eq
 800ed9c:	f8c8 1000 	streq.w	r1, [r8]
 800eda0:	5162      	str	r2, [r4, r5]
 800eda2:	604b      	str	r3, [r1, #4]
 800eda4:	4630      	mov	r0, r6
 800eda6:	f000 f82f 	bl	800ee08 <__malloc_unlock>
 800edaa:	f104 000b 	add.w	r0, r4, #11
 800edae:	1d23      	adds	r3, r4, #4
 800edb0:	f020 0007 	bic.w	r0, r0, #7
 800edb4:	1ac2      	subs	r2, r0, r3
 800edb6:	bf1c      	itt	ne
 800edb8:	1a1b      	subne	r3, r3, r0
 800edba:	50a3      	strne	r3, [r4, r2]
 800edbc:	e7af      	b.n	800ed1e <_malloc_r+0x22>
 800edbe:	6862      	ldr	r2, [r4, #4]
 800edc0:	42a3      	cmp	r3, r4
 800edc2:	bf0c      	ite	eq
 800edc4:	f8c8 2000 	streq.w	r2, [r8]
 800edc8:	605a      	strne	r2, [r3, #4]
 800edca:	e7eb      	b.n	800eda4 <_malloc_r+0xa8>
 800edcc:	4623      	mov	r3, r4
 800edce:	6864      	ldr	r4, [r4, #4]
 800edd0:	e7ae      	b.n	800ed30 <_malloc_r+0x34>
 800edd2:	463c      	mov	r4, r7
 800edd4:	687f      	ldr	r7, [r7, #4]
 800edd6:	e7b6      	b.n	800ed46 <_malloc_r+0x4a>
 800edd8:	461a      	mov	r2, r3
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	42a3      	cmp	r3, r4
 800edde:	d1fb      	bne.n	800edd8 <_malloc_r+0xdc>
 800ede0:	2300      	movs	r3, #0
 800ede2:	6053      	str	r3, [r2, #4]
 800ede4:	e7de      	b.n	800eda4 <_malloc_r+0xa8>
 800ede6:	230c      	movs	r3, #12
 800ede8:	6033      	str	r3, [r6, #0]
 800edea:	4630      	mov	r0, r6
 800edec:	f000 f80c 	bl	800ee08 <__malloc_unlock>
 800edf0:	e794      	b.n	800ed1c <_malloc_r+0x20>
 800edf2:	6005      	str	r5, [r0, #0]
 800edf4:	e7d6      	b.n	800eda4 <_malloc_r+0xa8>
 800edf6:	bf00      	nop
 800edf8:	2400511c 	.word	0x2400511c

0800edfc <__malloc_lock>:
 800edfc:	4801      	ldr	r0, [pc, #4]	@ (800ee04 <__malloc_lock+0x8>)
 800edfe:	f7ff b91a 	b.w	800e036 <__retarget_lock_acquire_recursive>
 800ee02:	bf00      	nop
 800ee04:	24005114 	.word	0x24005114

0800ee08 <__malloc_unlock>:
 800ee08:	4801      	ldr	r0, [pc, #4]	@ (800ee10 <__malloc_unlock+0x8>)
 800ee0a:	f7ff b915 	b.w	800e038 <__retarget_lock_release_recursive>
 800ee0e:	bf00      	nop
 800ee10:	24005114 	.word	0x24005114

0800ee14 <_Balloc>:
 800ee14:	b570      	push	{r4, r5, r6, lr}
 800ee16:	69c6      	ldr	r6, [r0, #28]
 800ee18:	4604      	mov	r4, r0
 800ee1a:	460d      	mov	r5, r1
 800ee1c:	b976      	cbnz	r6, 800ee3c <_Balloc+0x28>
 800ee1e:	2010      	movs	r0, #16
 800ee20:	f7ff ff42 	bl	800eca8 <malloc>
 800ee24:	4602      	mov	r2, r0
 800ee26:	61e0      	str	r0, [r4, #28]
 800ee28:	b920      	cbnz	r0, 800ee34 <_Balloc+0x20>
 800ee2a:	4b18      	ldr	r3, [pc, #96]	@ (800ee8c <_Balloc+0x78>)
 800ee2c:	4818      	ldr	r0, [pc, #96]	@ (800ee90 <_Balloc+0x7c>)
 800ee2e:	216b      	movs	r1, #107	@ 0x6b
 800ee30:	f000 fdf4 	bl	800fa1c <__assert_func>
 800ee34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee38:	6006      	str	r6, [r0, #0]
 800ee3a:	60c6      	str	r6, [r0, #12]
 800ee3c:	69e6      	ldr	r6, [r4, #28]
 800ee3e:	68f3      	ldr	r3, [r6, #12]
 800ee40:	b183      	cbz	r3, 800ee64 <_Balloc+0x50>
 800ee42:	69e3      	ldr	r3, [r4, #28]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee4a:	b9b8      	cbnz	r0, 800ee7c <_Balloc+0x68>
 800ee4c:	2101      	movs	r1, #1
 800ee4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ee52:	1d72      	adds	r2, r6, #5
 800ee54:	0092      	lsls	r2, r2, #2
 800ee56:	4620      	mov	r0, r4
 800ee58:	f000 fdfe 	bl	800fa58 <_calloc_r>
 800ee5c:	b160      	cbz	r0, 800ee78 <_Balloc+0x64>
 800ee5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee62:	e00e      	b.n	800ee82 <_Balloc+0x6e>
 800ee64:	2221      	movs	r2, #33	@ 0x21
 800ee66:	2104      	movs	r1, #4
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f000 fdf5 	bl	800fa58 <_calloc_r>
 800ee6e:	69e3      	ldr	r3, [r4, #28]
 800ee70:	60f0      	str	r0, [r6, #12]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1e4      	bne.n	800ee42 <_Balloc+0x2e>
 800ee78:	2000      	movs	r0, #0
 800ee7a:	bd70      	pop	{r4, r5, r6, pc}
 800ee7c:	6802      	ldr	r2, [r0, #0]
 800ee7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee82:	2300      	movs	r3, #0
 800ee84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ee88:	e7f7      	b.n	800ee7a <_Balloc+0x66>
 800ee8a:	bf00      	nop
 800ee8c:	0800fd3d 	.word	0x0800fd3d
 800ee90:	0800fdbd 	.word	0x0800fdbd

0800ee94 <_Bfree>:
 800ee94:	b570      	push	{r4, r5, r6, lr}
 800ee96:	69c6      	ldr	r6, [r0, #28]
 800ee98:	4605      	mov	r5, r0
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	b976      	cbnz	r6, 800eebc <_Bfree+0x28>
 800ee9e:	2010      	movs	r0, #16
 800eea0:	f7ff ff02 	bl	800eca8 <malloc>
 800eea4:	4602      	mov	r2, r0
 800eea6:	61e8      	str	r0, [r5, #28]
 800eea8:	b920      	cbnz	r0, 800eeb4 <_Bfree+0x20>
 800eeaa:	4b09      	ldr	r3, [pc, #36]	@ (800eed0 <_Bfree+0x3c>)
 800eeac:	4809      	ldr	r0, [pc, #36]	@ (800eed4 <_Bfree+0x40>)
 800eeae:	218f      	movs	r1, #143	@ 0x8f
 800eeb0:	f000 fdb4 	bl	800fa1c <__assert_func>
 800eeb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eeb8:	6006      	str	r6, [r0, #0]
 800eeba:	60c6      	str	r6, [r0, #12]
 800eebc:	b13c      	cbz	r4, 800eece <_Bfree+0x3a>
 800eebe:	69eb      	ldr	r3, [r5, #28]
 800eec0:	6862      	ldr	r2, [r4, #4]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eec8:	6021      	str	r1, [r4, #0]
 800eeca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eece:	bd70      	pop	{r4, r5, r6, pc}
 800eed0:	0800fd3d 	.word	0x0800fd3d
 800eed4:	0800fdbd 	.word	0x0800fdbd

0800eed8 <__multadd>:
 800eed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eedc:	690d      	ldr	r5, [r1, #16]
 800eede:	4607      	mov	r7, r0
 800eee0:	460c      	mov	r4, r1
 800eee2:	461e      	mov	r6, r3
 800eee4:	f101 0c14 	add.w	ip, r1, #20
 800eee8:	2000      	movs	r0, #0
 800eeea:	f8dc 3000 	ldr.w	r3, [ip]
 800eeee:	b299      	uxth	r1, r3
 800eef0:	fb02 6101 	mla	r1, r2, r1, r6
 800eef4:	0c1e      	lsrs	r6, r3, #16
 800eef6:	0c0b      	lsrs	r3, r1, #16
 800eef8:	fb02 3306 	mla	r3, r2, r6, r3
 800eefc:	b289      	uxth	r1, r1
 800eefe:	3001      	adds	r0, #1
 800ef00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef04:	4285      	cmp	r5, r0
 800ef06:	f84c 1b04 	str.w	r1, [ip], #4
 800ef0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef0e:	dcec      	bgt.n	800eeea <__multadd+0x12>
 800ef10:	b30e      	cbz	r6, 800ef56 <__multadd+0x7e>
 800ef12:	68a3      	ldr	r3, [r4, #8]
 800ef14:	42ab      	cmp	r3, r5
 800ef16:	dc19      	bgt.n	800ef4c <__multadd+0x74>
 800ef18:	6861      	ldr	r1, [r4, #4]
 800ef1a:	4638      	mov	r0, r7
 800ef1c:	3101      	adds	r1, #1
 800ef1e:	f7ff ff79 	bl	800ee14 <_Balloc>
 800ef22:	4680      	mov	r8, r0
 800ef24:	b928      	cbnz	r0, 800ef32 <__multadd+0x5a>
 800ef26:	4602      	mov	r2, r0
 800ef28:	4b0c      	ldr	r3, [pc, #48]	@ (800ef5c <__multadd+0x84>)
 800ef2a:	480d      	ldr	r0, [pc, #52]	@ (800ef60 <__multadd+0x88>)
 800ef2c:	21ba      	movs	r1, #186	@ 0xba
 800ef2e:	f000 fd75 	bl	800fa1c <__assert_func>
 800ef32:	6922      	ldr	r2, [r4, #16]
 800ef34:	3202      	adds	r2, #2
 800ef36:	f104 010c 	add.w	r1, r4, #12
 800ef3a:	0092      	lsls	r2, r2, #2
 800ef3c:	300c      	adds	r0, #12
 800ef3e:	f7ff f87c 	bl	800e03a <memcpy>
 800ef42:	4621      	mov	r1, r4
 800ef44:	4638      	mov	r0, r7
 800ef46:	f7ff ffa5 	bl	800ee94 <_Bfree>
 800ef4a:	4644      	mov	r4, r8
 800ef4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef50:	3501      	adds	r5, #1
 800ef52:	615e      	str	r6, [r3, #20]
 800ef54:	6125      	str	r5, [r4, #16]
 800ef56:	4620      	mov	r0, r4
 800ef58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef5c:	0800fdac 	.word	0x0800fdac
 800ef60:	0800fdbd 	.word	0x0800fdbd

0800ef64 <__hi0bits>:
 800ef64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ef68:	4603      	mov	r3, r0
 800ef6a:	bf36      	itet	cc
 800ef6c:	0403      	lslcc	r3, r0, #16
 800ef6e:	2000      	movcs	r0, #0
 800ef70:	2010      	movcc	r0, #16
 800ef72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ef76:	bf3c      	itt	cc
 800ef78:	021b      	lslcc	r3, r3, #8
 800ef7a:	3008      	addcc	r0, #8
 800ef7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef80:	bf3c      	itt	cc
 800ef82:	011b      	lslcc	r3, r3, #4
 800ef84:	3004      	addcc	r0, #4
 800ef86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef8a:	bf3c      	itt	cc
 800ef8c:	009b      	lslcc	r3, r3, #2
 800ef8e:	3002      	addcc	r0, #2
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	db05      	blt.n	800efa0 <__hi0bits+0x3c>
 800ef94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ef98:	f100 0001 	add.w	r0, r0, #1
 800ef9c:	bf08      	it	eq
 800ef9e:	2020      	moveq	r0, #32
 800efa0:	4770      	bx	lr

0800efa2 <__lo0bits>:
 800efa2:	6803      	ldr	r3, [r0, #0]
 800efa4:	4602      	mov	r2, r0
 800efa6:	f013 0007 	ands.w	r0, r3, #7
 800efaa:	d00b      	beq.n	800efc4 <__lo0bits+0x22>
 800efac:	07d9      	lsls	r1, r3, #31
 800efae:	d421      	bmi.n	800eff4 <__lo0bits+0x52>
 800efb0:	0798      	lsls	r0, r3, #30
 800efb2:	bf49      	itett	mi
 800efb4:	085b      	lsrmi	r3, r3, #1
 800efb6:	089b      	lsrpl	r3, r3, #2
 800efb8:	2001      	movmi	r0, #1
 800efba:	6013      	strmi	r3, [r2, #0]
 800efbc:	bf5c      	itt	pl
 800efbe:	6013      	strpl	r3, [r2, #0]
 800efc0:	2002      	movpl	r0, #2
 800efc2:	4770      	bx	lr
 800efc4:	b299      	uxth	r1, r3
 800efc6:	b909      	cbnz	r1, 800efcc <__lo0bits+0x2a>
 800efc8:	0c1b      	lsrs	r3, r3, #16
 800efca:	2010      	movs	r0, #16
 800efcc:	b2d9      	uxtb	r1, r3
 800efce:	b909      	cbnz	r1, 800efd4 <__lo0bits+0x32>
 800efd0:	3008      	adds	r0, #8
 800efd2:	0a1b      	lsrs	r3, r3, #8
 800efd4:	0719      	lsls	r1, r3, #28
 800efd6:	bf04      	itt	eq
 800efd8:	091b      	lsreq	r3, r3, #4
 800efda:	3004      	addeq	r0, #4
 800efdc:	0799      	lsls	r1, r3, #30
 800efde:	bf04      	itt	eq
 800efe0:	089b      	lsreq	r3, r3, #2
 800efe2:	3002      	addeq	r0, #2
 800efe4:	07d9      	lsls	r1, r3, #31
 800efe6:	d403      	bmi.n	800eff0 <__lo0bits+0x4e>
 800efe8:	085b      	lsrs	r3, r3, #1
 800efea:	f100 0001 	add.w	r0, r0, #1
 800efee:	d003      	beq.n	800eff8 <__lo0bits+0x56>
 800eff0:	6013      	str	r3, [r2, #0]
 800eff2:	4770      	bx	lr
 800eff4:	2000      	movs	r0, #0
 800eff6:	4770      	bx	lr
 800eff8:	2020      	movs	r0, #32
 800effa:	4770      	bx	lr

0800effc <__i2b>:
 800effc:	b510      	push	{r4, lr}
 800effe:	460c      	mov	r4, r1
 800f000:	2101      	movs	r1, #1
 800f002:	f7ff ff07 	bl	800ee14 <_Balloc>
 800f006:	4602      	mov	r2, r0
 800f008:	b928      	cbnz	r0, 800f016 <__i2b+0x1a>
 800f00a:	4b05      	ldr	r3, [pc, #20]	@ (800f020 <__i2b+0x24>)
 800f00c:	4805      	ldr	r0, [pc, #20]	@ (800f024 <__i2b+0x28>)
 800f00e:	f240 1145 	movw	r1, #325	@ 0x145
 800f012:	f000 fd03 	bl	800fa1c <__assert_func>
 800f016:	2301      	movs	r3, #1
 800f018:	6144      	str	r4, [r0, #20]
 800f01a:	6103      	str	r3, [r0, #16]
 800f01c:	bd10      	pop	{r4, pc}
 800f01e:	bf00      	nop
 800f020:	0800fdac 	.word	0x0800fdac
 800f024:	0800fdbd 	.word	0x0800fdbd

0800f028 <__multiply>:
 800f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02c:	4614      	mov	r4, r2
 800f02e:	690a      	ldr	r2, [r1, #16]
 800f030:	6923      	ldr	r3, [r4, #16]
 800f032:	429a      	cmp	r2, r3
 800f034:	bfa8      	it	ge
 800f036:	4623      	movge	r3, r4
 800f038:	460f      	mov	r7, r1
 800f03a:	bfa4      	itt	ge
 800f03c:	460c      	movge	r4, r1
 800f03e:	461f      	movge	r7, r3
 800f040:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f044:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f048:	68a3      	ldr	r3, [r4, #8]
 800f04a:	6861      	ldr	r1, [r4, #4]
 800f04c:	eb0a 0609 	add.w	r6, sl, r9
 800f050:	42b3      	cmp	r3, r6
 800f052:	b085      	sub	sp, #20
 800f054:	bfb8      	it	lt
 800f056:	3101      	addlt	r1, #1
 800f058:	f7ff fedc 	bl	800ee14 <_Balloc>
 800f05c:	b930      	cbnz	r0, 800f06c <__multiply+0x44>
 800f05e:	4602      	mov	r2, r0
 800f060:	4b44      	ldr	r3, [pc, #272]	@ (800f174 <__multiply+0x14c>)
 800f062:	4845      	ldr	r0, [pc, #276]	@ (800f178 <__multiply+0x150>)
 800f064:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f068:	f000 fcd8 	bl	800fa1c <__assert_func>
 800f06c:	f100 0514 	add.w	r5, r0, #20
 800f070:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f074:	462b      	mov	r3, r5
 800f076:	2200      	movs	r2, #0
 800f078:	4543      	cmp	r3, r8
 800f07a:	d321      	bcc.n	800f0c0 <__multiply+0x98>
 800f07c:	f107 0114 	add.w	r1, r7, #20
 800f080:	f104 0214 	add.w	r2, r4, #20
 800f084:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f088:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f08c:	9302      	str	r3, [sp, #8]
 800f08e:	1b13      	subs	r3, r2, r4
 800f090:	3b15      	subs	r3, #21
 800f092:	f023 0303 	bic.w	r3, r3, #3
 800f096:	3304      	adds	r3, #4
 800f098:	f104 0715 	add.w	r7, r4, #21
 800f09c:	42ba      	cmp	r2, r7
 800f09e:	bf38      	it	cc
 800f0a0:	2304      	movcc	r3, #4
 800f0a2:	9301      	str	r3, [sp, #4]
 800f0a4:	9b02      	ldr	r3, [sp, #8]
 800f0a6:	9103      	str	r1, [sp, #12]
 800f0a8:	428b      	cmp	r3, r1
 800f0aa:	d80c      	bhi.n	800f0c6 <__multiply+0x9e>
 800f0ac:	2e00      	cmp	r6, #0
 800f0ae:	dd03      	ble.n	800f0b8 <__multiply+0x90>
 800f0b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d05b      	beq.n	800f170 <__multiply+0x148>
 800f0b8:	6106      	str	r6, [r0, #16]
 800f0ba:	b005      	add	sp, #20
 800f0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c0:	f843 2b04 	str.w	r2, [r3], #4
 800f0c4:	e7d8      	b.n	800f078 <__multiply+0x50>
 800f0c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800f0ca:	f1ba 0f00 	cmp.w	sl, #0
 800f0ce:	d024      	beq.n	800f11a <__multiply+0xf2>
 800f0d0:	f104 0e14 	add.w	lr, r4, #20
 800f0d4:	46a9      	mov	r9, r5
 800f0d6:	f04f 0c00 	mov.w	ip, #0
 800f0da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f0de:	f8d9 3000 	ldr.w	r3, [r9]
 800f0e2:	fa1f fb87 	uxth.w	fp, r7
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f0ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f0f0:	f8d9 7000 	ldr.w	r7, [r9]
 800f0f4:	4463      	add	r3, ip
 800f0f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f0fa:	fb0a c70b 	mla	r7, sl, fp, ip
 800f0fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f102:	b29b      	uxth	r3, r3
 800f104:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f108:	4572      	cmp	r2, lr
 800f10a:	f849 3b04 	str.w	r3, [r9], #4
 800f10e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f112:	d8e2      	bhi.n	800f0da <__multiply+0xb2>
 800f114:	9b01      	ldr	r3, [sp, #4]
 800f116:	f845 c003 	str.w	ip, [r5, r3]
 800f11a:	9b03      	ldr	r3, [sp, #12]
 800f11c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f120:	3104      	adds	r1, #4
 800f122:	f1b9 0f00 	cmp.w	r9, #0
 800f126:	d021      	beq.n	800f16c <__multiply+0x144>
 800f128:	682b      	ldr	r3, [r5, #0]
 800f12a:	f104 0c14 	add.w	ip, r4, #20
 800f12e:	46ae      	mov	lr, r5
 800f130:	f04f 0a00 	mov.w	sl, #0
 800f134:	f8bc b000 	ldrh.w	fp, [ip]
 800f138:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f13c:	fb09 770b 	mla	r7, r9, fp, r7
 800f140:	4457      	add	r7, sl
 800f142:	b29b      	uxth	r3, r3
 800f144:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f148:	f84e 3b04 	str.w	r3, [lr], #4
 800f14c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f154:	f8be 3000 	ldrh.w	r3, [lr]
 800f158:	fb09 330a 	mla	r3, r9, sl, r3
 800f15c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f160:	4562      	cmp	r2, ip
 800f162:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f166:	d8e5      	bhi.n	800f134 <__multiply+0x10c>
 800f168:	9f01      	ldr	r7, [sp, #4]
 800f16a:	51eb      	str	r3, [r5, r7]
 800f16c:	3504      	adds	r5, #4
 800f16e:	e799      	b.n	800f0a4 <__multiply+0x7c>
 800f170:	3e01      	subs	r6, #1
 800f172:	e79b      	b.n	800f0ac <__multiply+0x84>
 800f174:	0800fdac 	.word	0x0800fdac
 800f178:	0800fdbd 	.word	0x0800fdbd

0800f17c <__pow5mult>:
 800f17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f180:	4615      	mov	r5, r2
 800f182:	f012 0203 	ands.w	r2, r2, #3
 800f186:	4607      	mov	r7, r0
 800f188:	460e      	mov	r6, r1
 800f18a:	d007      	beq.n	800f19c <__pow5mult+0x20>
 800f18c:	4c25      	ldr	r4, [pc, #148]	@ (800f224 <__pow5mult+0xa8>)
 800f18e:	3a01      	subs	r2, #1
 800f190:	2300      	movs	r3, #0
 800f192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f196:	f7ff fe9f 	bl	800eed8 <__multadd>
 800f19a:	4606      	mov	r6, r0
 800f19c:	10ad      	asrs	r5, r5, #2
 800f19e:	d03d      	beq.n	800f21c <__pow5mult+0xa0>
 800f1a0:	69fc      	ldr	r4, [r7, #28]
 800f1a2:	b97c      	cbnz	r4, 800f1c4 <__pow5mult+0x48>
 800f1a4:	2010      	movs	r0, #16
 800f1a6:	f7ff fd7f 	bl	800eca8 <malloc>
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	61f8      	str	r0, [r7, #28]
 800f1ae:	b928      	cbnz	r0, 800f1bc <__pow5mult+0x40>
 800f1b0:	4b1d      	ldr	r3, [pc, #116]	@ (800f228 <__pow5mult+0xac>)
 800f1b2:	481e      	ldr	r0, [pc, #120]	@ (800f22c <__pow5mult+0xb0>)
 800f1b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f1b8:	f000 fc30 	bl	800fa1c <__assert_func>
 800f1bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f1c0:	6004      	str	r4, [r0, #0]
 800f1c2:	60c4      	str	r4, [r0, #12]
 800f1c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f1c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f1cc:	b94c      	cbnz	r4, 800f1e2 <__pow5mult+0x66>
 800f1ce:	f240 2171 	movw	r1, #625	@ 0x271
 800f1d2:	4638      	mov	r0, r7
 800f1d4:	f7ff ff12 	bl	800effc <__i2b>
 800f1d8:	2300      	movs	r3, #0
 800f1da:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1de:	4604      	mov	r4, r0
 800f1e0:	6003      	str	r3, [r0, #0]
 800f1e2:	f04f 0900 	mov.w	r9, #0
 800f1e6:	07eb      	lsls	r3, r5, #31
 800f1e8:	d50a      	bpl.n	800f200 <__pow5mult+0x84>
 800f1ea:	4631      	mov	r1, r6
 800f1ec:	4622      	mov	r2, r4
 800f1ee:	4638      	mov	r0, r7
 800f1f0:	f7ff ff1a 	bl	800f028 <__multiply>
 800f1f4:	4631      	mov	r1, r6
 800f1f6:	4680      	mov	r8, r0
 800f1f8:	4638      	mov	r0, r7
 800f1fa:	f7ff fe4b 	bl	800ee94 <_Bfree>
 800f1fe:	4646      	mov	r6, r8
 800f200:	106d      	asrs	r5, r5, #1
 800f202:	d00b      	beq.n	800f21c <__pow5mult+0xa0>
 800f204:	6820      	ldr	r0, [r4, #0]
 800f206:	b938      	cbnz	r0, 800f218 <__pow5mult+0x9c>
 800f208:	4622      	mov	r2, r4
 800f20a:	4621      	mov	r1, r4
 800f20c:	4638      	mov	r0, r7
 800f20e:	f7ff ff0b 	bl	800f028 <__multiply>
 800f212:	6020      	str	r0, [r4, #0]
 800f214:	f8c0 9000 	str.w	r9, [r0]
 800f218:	4604      	mov	r4, r0
 800f21a:	e7e4      	b.n	800f1e6 <__pow5mult+0x6a>
 800f21c:	4630      	mov	r0, r6
 800f21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f222:	bf00      	nop
 800f224:	0800fe18 	.word	0x0800fe18
 800f228:	0800fd3d 	.word	0x0800fd3d
 800f22c:	0800fdbd 	.word	0x0800fdbd

0800f230 <__lshift>:
 800f230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f234:	460c      	mov	r4, r1
 800f236:	6849      	ldr	r1, [r1, #4]
 800f238:	6923      	ldr	r3, [r4, #16]
 800f23a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f23e:	68a3      	ldr	r3, [r4, #8]
 800f240:	4607      	mov	r7, r0
 800f242:	4691      	mov	r9, r2
 800f244:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f248:	f108 0601 	add.w	r6, r8, #1
 800f24c:	42b3      	cmp	r3, r6
 800f24e:	db0b      	blt.n	800f268 <__lshift+0x38>
 800f250:	4638      	mov	r0, r7
 800f252:	f7ff fddf 	bl	800ee14 <_Balloc>
 800f256:	4605      	mov	r5, r0
 800f258:	b948      	cbnz	r0, 800f26e <__lshift+0x3e>
 800f25a:	4602      	mov	r2, r0
 800f25c:	4b28      	ldr	r3, [pc, #160]	@ (800f300 <__lshift+0xd0>)
 800f25e:	4829      	ldr	r0, [pc, #164]	@ (800f304 <__lshift+0xd4>)
 800f260:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f264:	f000 fbda 	bl	800fa1c <__assert_func>
 800f268:	3101      	adds	r1, #1
 800f26a:	005b      	lsls	r3, r3, #1
 800f26c:	e7ee      	b.n	800f24c <__lshift+0x1c>
 800f26e:	2300      	movs	r3, #0
 800f270:	f100 0114 	add.w	r1, r0, #20
 800f274:	f100 0210 	add.w	r2, r0, #16
 800f278:	4618      	mov	r0, r3
 800f27a:	4553      	cmp	r3, sl
 800f27c:	db33      	blt.n	800f2e6 <__lshift+0xb6>
 800f27e:	6920      	ldr	r0, [r4, #16]
 800f280:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f284:	f104 0314 	add.w	r3, r4, #20
 800f288:	f019 091f 	ands.w	r9, r9, #31
 800f28c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f290:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f294:	d02b      	beq.n	800f2ee <__lshift+0xbe>
 800f296:	f1c9 0e20 	rsb	lr, r9, #32
 800f29a:	468a      	mov	sl, r1
 800f29c:	2200      	movs	r2, #0
 800f29e:	6818      	ldr	r0, [r3, #0]
 800f2a0:	fa00 f009 	lsl.w	r0, r0, r9
 800f2a4:	4310      	orrs	r0, r2
 800f2a6:	f84a 0b04 	str.w	r0, [sl], #4
 800f2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ae:	459c      	cmp	ip, r3
 800f2b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f2b4:	d8f3      	bhi.n	800f29e <__lshift+0x6e>
 800f2b6:	ebac 0304 	sub.w	r3, ip, r4
 800f2ba:	3b15      	subs	r3, #21
 800f2bc:	f023 0303 	bic.w	r3, r3, #3
 800f2c0:	3304      	adds	r3, #4
 800f2c2:	f104 0015 	add.w	r0, r4, #21
 800f2c6:	4584      	cmp	ip, r0
 800f2c8:	bf38      	it	cc
 800f2ca:	2304      	movcc	r3, #4
 800f2cc:	50ca      	str	r2, [r1, r3]
 800f2ce:	b10a      	cbz	r2, 800f2d4 <__lshift+0xa4>
 800f2d0:	f108 0602 	add.w	r6, r8, #2
 800f2d4:	3e01      	subs	r6, #1
 800f2d6:	4638      	mov	r0, r7
 800f2d8:	612e      	str	r6, [r5, #16]
 800f2da:	4621      	mov	r1, r4
 800f2dc:	f7ff fdda 	bl	800ee94 <_Bfree>
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	e7c5      	b.n	800f27a <__lshift+0x4a>
 800f2ee:	3904      	subs	r1, #4
 800f2f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f2f8:	459c      	cmp	ip, r3
 800f2fa:	d8f9      	bhi.n	800f2f0 <__lshift+0xc0>
 800f2fc:	e7ea      	b.n	800f2d4 <__lshift+0xa4>
 800f2fe:	bf00      	nop
 800f300:	0800fdac 	.word	0x0800fdac
 800f304:	0800fdbd 	.word	0x0800fdbd

0800f308 <__mcmp>:
 800f308:	690a      	ldr	r2, [r1, #16]
 800f30a:	4603      	mov	r3, r0
 800f30c:	6900      	ldr	r0, [r0, #16]
 800f30e:	1a80      	subs	r0, r0, r2
 800f310:	b530      	push	{r4, r5, lr}
 800f312:	d10e      	bne.n	800f332 <__mcmp+0x2a>
 800f314:	3314      	adds	r3, #20
 800f316:	3114      	adds	r1, #20
 800f318:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f31c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f320:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f324:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f328:	4295      	cmp	r5, r2
 800f32a:	d003      	beq.n	800f334 <__mcmp+0x2c>
 800f32c:	d205      	bcs.n	800f33a <__mcmp+0x32>
 800f32e:	f04f 30ff 	mov.w	r0, #4294967295
 800f332:	bd30      	pop	{r4, r5, pc}
 800f334:	42a3      	cmp	r3, r4
 800f336:	d3f3      	bcc.n	800f320 <__mcmp+0x18>
 800f338:	e7fb      	b.n	800f332 <__mcmp+0x2a>
 800f33a:	2001      	movs	r0, #1
 800f33c:	e7f9      	b.n	800f332 <__mcmp+0x2a>
	...

0800f340 <__mdiff>:
 800f340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f344:	4689      	mov	r9, r1
 800f346:	4606      	mov	r6, r0
 800f348:	4611      	mov	r1, r2
 800f34a:	4648      	mov	r0, r9
 800f34c:	4614      	mov	r4, r2
 800f34e:	f7ff ffdb 	bl	800f308 <__mcmp>
 800f352:	1e05      	subs	r5, r0, #0
 800f354:	d112      	bne.n	800f37c <__mdiff+0x3c>
 800f356:	4629      	mov	r1, r5
 800f358:	4630      	mov	r0, r6
 800f35a:	f7ff fd5b 	bl	800ee14 <_Balloc>
 800f35e:	4602      	mov	r2, r0
 800f360:	b928      	cbnz	r0, 800f36e <__mdiff+0x2e>
 800f362:	4b3f      	ldr	r3, [pc, #252]	@ (800f460 <__mdiff+0x120>)
 800f364:	f240 2137 	movw	r1, #567	@ 0x237
 800f368:	483e      	ldr	r0, [pc, #248]	@ (800f464 <__mdiff+0x124>)
 800f36a:	f000 fb57 	bl	800fa1c <__assert_func>
 800f36e:	2301      	movs	r3, #1
 800f370:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f374:	4610      	mov	r0, r2
 800f376:	b003      	add	sp, #12
 800f378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37c:	bfbc      	itt	lt
 800f37e:	464b      	movlt	r3, r9
 800f380:	46a1      	movlt	r9, r4
 800f382:	4630      	mov	r0, r6
 800f384:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f388:	bfba      	itte	lt
 800f38a:	461c      	movlt	r4, r3
 800f38c:	2501      	movlt	r5, #1
 800f38e:	2500      	movge	r5, #0
 800f390:	f7ff fd40 	bl	800ee14 <_Balloc>
 800f394:	4602      	mov	r2, r0
 800f396:	b918      	cbnz	r0, 800f3a0 <__mdiff+0x60>
 800f398:	4b31      	ldr	r3, [pc, #196]	@ (800f460 <__mdiff+0x120>)
 800f39a:	f240 2145 	movw	r1, #581	@ 0x245
 800f39e:	e7e3      	b.n	800f368 <__mdiff+0x28>
 800f3a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f3a4:	6926      	ldr	r6, [r4, #16]
 800f3a6:	60c5      	str	r5, [r0, #12]
 800f3a8:	f109 0310 	add.w	r3, r9, #16
 800f3ac:	f109 0514 	add.w	r5, r9, #20
 800f3b0:	f104 0e14 	add.w	lr, r4, #20
 800f3b4:	f100 0b14 	add.w	fp, r0, #20
 800f3b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f3bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f3c0:	9301      	str	r3, [sp, #4]
 800f3c2:	46d9      	mov	r9, fp
 800f3c4:	f04f 0c00 	mov.w	ip, #0
 800f3c8:	9b01      	ldr	r3, [sp, #4]
 800f3ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f3ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f3d2:	9301      	str	r3, [sp, #4]
 800f3d4:	fa1f f38a 	uxth.w	r3, sl
 800f3d8:	4619      	mov	r1, r3
 800f3da:	b283      	uxth	r3, r0
 800f3dc:	1acb      	subs	r3, r1, r3
 800f3de:	0c00      	lsrs	r0, r0, #16
 800f3e0:	4463      	add	r3, ip
 800f3e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f3e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f3f0:	4576      	cmp	r6, lr
 800f3f2:	f849 3b04 	str.w	r3, [r9], #4
 800f3f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f3fa:	d8e5      	bhi.n	800f3c8 <__mdiff+0x88>
 800f3fc:	1b33      	subs	r3, r6, r4
 800f3fe:	3b15      	subs	r3, #21
 800f400:	f023 0303 	bic.w	r3, r3, #3
 800f404:	3415      	adds	r4, #21
 800f406:	3304      	adds	r3, #4
 800f408:	42a6      	cmp	r6, r4
 800f40a:	bf38      	it	cc
 800f40c:	2304      	movcc	r3, #4
 800f40e:	441d      	add	r5, r3
 800f410:	445b      	add	r3, fp
 800f412:	461e      	mov	r6, r3
 800f414:	462c      	mov	r4, r5
 800f416:	4544      	cmp	r4, r8
 800f418:	d30e      	bcc.n	800f438 <__mdiff+0xf8>
 800f41a:	f108 0103 	add.w	r1, r8, #3
 800f41e:	1b49      	subs	r1, r1, r5
 800f420:	f021 0103 	bic.w	r1, r1, #3
 800f424:	3d03      	subs	r5, #3
 800f426:	45a8      	cmp	r8, r5
 800f428:	bf38      	it	cc
 800f42a:	2100      	movcc	r1, #0
 800f42c:	440b      	add	r3, r1
 800f42e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f432:	b191      	cbz	r1, 800f45a <__mdiff+0x11a>
 800f434:	6117      	str	r7, [r2, #16]
 800f436:	e79d      	b.n	800f374 <__mdiff+0x34>
 800f438:	f854 1b04 	ldr.w	r1, [r4], #4
 800f43c:	46e6      	mov	lr, ip
 800f43e:	0c08      	lsrs	r0, r1, #16
 800f440:	fa1c fc81 	uxtah	ip, ip, r1
 800f444:	4471      	add	r1, lr
 800f446:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f44a:	b289      	uxth	r1, r1
 800f44c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f450:	f846 1b04 	str.w	r1, [r6], #4
 800f454:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f458:	e7dd      	b.n	800f416 <__mdiff+0xd6>
 800f45a:	3f01      	subs	r7, #1
 800f45c:	e7e7      	b.n	800f42e <__mdiff+0xee>
 800f45e:	bf00      	nop
 800f460:	0800fdac 	.word	0x0800fdac
 800f464:	0800fdbd 	.word	0x0800fdbd

0800f468 <__d2b>:
 800f468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f46c:	460f      	mov	r7, r1
 800f46e:	2101      	movs	r1, #1
 800f470:	ec59 8b10 	vmov	r8, r9, d0
 800f474:	4616      	mov	r6, r2
 800f476:	f7ff fccd 	bl	800ee14 <_Balloc>
 800f47a:	4604      	mov	r4, r0
 800f47c:	b930      	cbnz	r0, 800f48c <__d2b+0x24>
 800f47e:	4602      	mov	r2, r0
 800f480:	4b23      	ldr	r3, [pc, #140]	@ (800f510 <__d2b+0xa8>)
 800f482:	4824      	ldr	r0, [pc, #144]	@ (800f514 <__d2b+0xac>)
 800f484:	f240 310f 	movw	r1, #783	@ 0x30f
 800f488:	f000 fac8 	bl	800fa1c <__assert_func>
 800f48c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f494:	b10d      	cbz	r5, 800f49a <__d2b+0x32>
 800f496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f49a:	9301      	str	r3, [sp, #4]
 800f49c:	f1b8 0300 	subs.w	r3, r8, #0
 800f4a0:	d023      	beq.n	800f4ea <__d2b+0x82>
 800f4a2:	4668      	mov	r0, sp
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	f7ff fd7c 	bl	800efa2 <__lo0bits>
 800f4aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f4ae:	b1d0      	cbz	r0, 800f4e6 <__d2b+0x7e>
 800f4b0:	f1c0 0320 	rsb	r3, r0, #32
 800f4b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f4b8:	430b      	orrs	r3, r1
 800f4ba:	40c2      	lsrs	r2, r0
 800f4bc:	6163      	str	r3, [r4, #20]
 800f4be:	9201      	str	r2, [sp, #4]
 800f4c0:	9b01      	ldr	r3, [sp, #4]
 800f4c2:	61a3      	str	r3, [r4, #24]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	bf0c      	ite	eq
 800f4c8:	2201      	moveq	r2, #1
 800f4ca:	2202      	movne	r2, #2
 800f4cc:	6122      	str	r2, [r4, #16]
 800f4ce:	b1a5      	cbz	r5, 800f4fa <__d2b+0x92>
 800f4d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f4d4:	4405      	add	r5, r0
 800f4d6:	603d      	str	r5, [r7, #0]
 800f4d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f4dc:	6030      	str	r0, [r6, #0]
 800f4de:	4620      	mov	r0, r4
 800f4e0:	b003      	add	sp, #12
 800f4e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4e6:	6161      	str	r1, [r4, #20]
 800f4e8:	e7ea      	b.n	800f4c0 <__d2b+0x58>
 800f4ea:	a801      	add	r0, sp, #4
 800f4ec:	f7ff fd59 	bl	800efa2 <__lo0bits>
 800f4f0:	9b01      	ldr	r3, [sp, #4]
 800f4f2:	6163      	str	r3, [r4, #20]
 800f4f4:	3020      	adds	r0, #32
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	e7e8      	b.n	800f4cc <__d2b+0x64>
 800f4fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f4fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f502:	6038      	str	r0, [r7, #0]
 800f504:	6918      	ldr	r0, [r3, #16]
 800f506:	f7ff fd2d 	bl	800ef64 <__hi0bits>
 800f50a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f50e:	e7e5      	b.n	800f4dc <__d2b+0x74>
 800f510:	0800fdac 	.word	0x0800fdac
 800f514:	0800fdbd 	.word	0x0800fdbd

0800f518 <__sfputc_r>:
 800f518:	6893      	ldr	r3, [r2, #8]
 800f51a:	3b01      	subs	r3, #1
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	b410      	push	{r4}
 800f520:	6093      	str	r3, [r2, #8]
 800f522:	da08      	bge.n	800f536 <__sfputc_r+0x1e>
 800f524:	6994      	ldr	r4, [r2, #24]
 800f526:	42a3      	cmp	r3, r4
 800f528:	db01      	blt.n	800f52e <__sfputc_r+0x16>
 800f52a:	290a      	cmp	r1, #10
 800f52c:	d103      	bne.n	800f536 <__sfputc_r+0x1e>
 800f52e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f532:	f7fe bc6e 	b.w	800de12 <__swbuf_r>
 800f536:	6813      	ldr	r3, [r2, #0]
 800f538:	1c58      	adds	r0, r3, #1
 800f53a:	6010      	str	r0, [r2, #0]
 800f53c:	7019      	strb	r1, [r3, #0]
 800f53e:	4608      	mov	r0, r1
 800f540:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f544:	4770      	bx	lr

0800f546 <__sfputs_r>:
 800f546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f548:	4606      	mov	r6, r0
 800f54a:	460f      	mov	r7, r1
 800f54c:	4614      	mov	r4, r2
 800f54e:	18d5      	adds	r5, r2, r3
 800f550:	42ac      	cmp	r4, r5
 800f552:	d101      	bne.n	800f558 <__sfputs_r+0x12>
 800f554:	2000      	movs	r0, #0
 800f556:	e007      	b.n	800f568 <__sfputs_r+0x22>
 800f558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f55c:	463a      	mov	r2, r7
 800f55e:	4630      	mov	r0, r6
 800f560:	f7ff ffda 	bl	800f518 <__sfputc_r>
 800f564:	1c43      	adds	r3, r0, #1
 800f566:	d1f3      	bne.n	800f550 <__sfputs_r+0xa>
 800f568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f56c <_vfiprintf_r>:
 800f56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f570:	460d      	mov	r5, r1
 800f572:	b09d      	sub	sp, #116	@ 0x74
 800f574:	4614      	mov	r4, r2
 800f576:	4698      	mov	r8, r3
 800f578:	4606      	mov	r6, r0
 800f57a:	b118      	cbz	r0, 800f584 <_vfiprintf_r+0x18>
 800f57c:	6a03      	ldr	r3, [r0, #32]
 800f57e:	b90b      	cbnz	r3, 800f584 <_vfiprintf_r+0x18>
 800f580:	f7fe faaa 	bl	800dad8 <__sinit>
 800f584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f586:	07d9      	lsls	r1, r3, #31
 800f588:	d405      	bmi.n	800f596 <_vfiprintf_r+0x2a>
 800f58a:	89ab      	ldrh	r3, [r5, #12]
 800f58c:	059a      	lsls	r2, r3, #22
 800f58e:	d402      	bmi.n	800f596 <_vfiprintf_r+0x2a>
 800f590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f592:	f7fe fd50 	bl	800e036 <__retarget_lock_acquire_recursive>
 800f596:	89ab      	ldrh	r3, [r5, #12]
 800f598:	071b      	lsls	r3, r3, #28
 800f59a:	d501      	bpl.n	800f5a0 <_vfiprintf_r+0x34>
 800f59c:	692b      	ldr	r3, [r5, #16]
 800f59e:	b99b      	cbnz	r3, 800f5c8 <_vfiprintf_r+0x5c>
 800f5a0:	4629      	mov	r1, r5
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	f7fe fc74 	bl	800de90 <__swsetup_r>
 800f5a8:	b170      	cbz	r0, 800f5c8 <_vfiprintf_r+0x5c>
 800f5aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5ac:	07dc      	lsls	r4, r3, #31
 800f5ae:	d504      	bpl.n	800f5ba <_vfiprintf_r+0x4e>
 800f5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b4:	b01d      	add	sp, #116	@ 0x74
 800f5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ba:	89ab      	ldrh	r3, [r5, #12]
 800f5bc:	0598      	lsls	r0, r3, #22
 800f5be:	d4f7      	bmi.n	800f5b0 <_vfiprintf_r+0x44>
 800f5c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5c2:	f7fe fd39 	bl	800e038 <__retarget_lock_release_recursive>
 800f5c6:	e7f3      	b.n	800f5b0 <_vfiprintf_r+0x44>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5cc:	2320      	movs	r3, #32
 800f5ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5d6:	2330      	movs	r3, #48	@ 0x30
 800f5d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f788 <_vfiprintf_r+0x21c>
 800f5dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f5e0:	f04f 0901 	mov.w	r9, #1
 800f5e4:	4623      	mov	r3, r4
 800f5e6:	469a      	mov	sl, r3
 800f5e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5ec:	b10a      	cbz	r2, 800f5f2 <_vfiprintf_r+0x86>
 800f5ee:	2a25      	cmp	r2, #37	@ 0x25
 800f5f0:	d1f9      	bne.n	800f5e6 <_vfiprintf_r+0x7a>
 800f5f2:	ebba 0b04 	subs.w	fp, sl, r4
 800f5f6:	d00b      	beq.n	800f610 <_vfiprintf_r+0xa4>
 800f5f8:	465b      	mov	r3, fp
 800f5fa:	4622      	mov	r2, r4
 800f5fc:	4629      	mov	r1, r5
 800f5fe:	4630      	mov	r0, r6
 800f600:	f7ff ffa1 	bl	800f546 <__sfputs_r>
 800f604:	3001      	adds	r0, #1
 800f606:	f000 80a7 	beq.w	800f758 <_vfiprintf_r+0x1ec>
 800f60a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f60c:	445a      	add	r2, fp
 800f60e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f610:	f89a 3000 	ldrb.w	r3, [sl]
 800f614:	2b00      	cmp	r3, #0
 800f616:	f000 809f 	beq.w	800f758 <_vfiprintf_r+0x1ec>
 800f61a:	2300      	movs	r3, #0
 800f61c:	f04f 32ff 	mov.w	r2, #4294967295
 800f620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f624:	f10a 0a01 	add.w	sl, sl, #1
 800f628:	9304      	str	r3, [sp, #16]
 800f62a:	9307      	str	r3, [sp, #28]
 800f62c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f630:	931a      	str	r3, [sp, #104]	@ 0x68
 800f632:	4654      	mov	r4, sl
 800f634:	2205      	movs	r2, #5
 800f636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f63a:	4853      	ldr	r0, [pc, #332]	@ (800f788 <_vfiprintf_r+0x21c>)
 800f63c:	f7f0 fe50 	bl	80002e0 <memchr>
 800f640:	9a04      	ldr	r2, [sp, #16]
 800f642:	b9d8      	cbnz	r0, 800f67c <_vfiprintf_r+0x110>
 800f644:	06d1      	lsls	r1, r2, #27
 800f646:	bf44      	itt	mi
 800f648:	2320      	movmi	r3, #32
 800f64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f64e:	0713      	lsls	r3, r2, #28
 800f650:	bf44      	itt	mi
 800f652:	232b      	movmi	r3, #43	@ 0x2b
 800f654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f658:	f89a 3000 	ldrb.w	r3, [sl]
 800f65c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f65e:	d015      	beq.n	800f68c <_vfiprintf_r+0x120>
 800f660:	9a07      	ldr	r2, [sp, #28]
 800f662:	4654      	mov	r4, sl
 800f664:	2000      	movs	r0, #0
 800f666:	f04f 0c0a 	mov.w	ip, #10
 800f66a:	4621      	mov	r1, r4
 800f66c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f670:	3b30      	subs	r3, #48	@ 0x30
 800f672:	2b09      	cmp	r3, #9
 800f674:	d94b      	bls.n	800f70e <_vfiprintf_r+0x1a2>
 800f676:	b1b0      	cbz	r0, 800f6a6 <_vfiprintf_r+0x13a>
 800f678:	9207      	str	r2, [sp, #28]
 800f67a:	e014      	b.n	800f6a6 <_vfiprintf_r+0x13a>
 800f67c:	eba0 0308 	sub.w	r3, r0, r8
 800f680:	fa09 f303 	lsl.w	r3, r9, r3
 800f684:	4313      	orrs	r3, r2
 800f686:	9304      	str	r3, [sp, #16]
 800f688:	46a2      	mov	sl, r4
 800f68a:	e7d2      	b.n	800f632 <_vfiprintf_r+0xc6>
 800f68c:	9b03      	ldr	r3, [sp, #12]
 800f68e:	1d19      	adds	r1, r3, #4
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	9103      	str	r1, [sp, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	bfbb      	ittet	lt
 800f698:	425b      	neglt	r3, r3
 800f69a:	f042 0202 	orrlt.w	r2, r2, #2
 800f69e:	9307      	strge	r3, [sp, #28]
 800f6a0:	9307      	strlt	r3, [sp, #28]
 800f6a2:	bfb8      	it	lt
 800f6a4:	9204      	strlt	r2, [sp, #16]
 800f6a6:	7823      	ldrb	r3, [r4, #0]
 800f6a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6aa:	d10a      	bne.n	800f6c2 <_vfiprintf_r+0x156>
 800f6ac:	7863      	ldrb	r3, [r4, #1]
 800f6ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6b0:	d132      	bne.n	800f718 <_vfiprintf_r+0x1ac>
 800f6b2:	9b03      	ldr	r3, [sp, #12]
 800f6b4:	1d1a      	adds	r2, r3, #4
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	9203      	str	r2, [sp, #12]
 800f6ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6be:	3402      	adds	r4, #2
 800f6c0:	9305      	str	r3, [sp, #20]
 800f6c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f798 <_vfiprintf_r+0x22c>
 800f6c6:	7821      	ldrb	r1, [r4, #0]
 800f6c8:	2203      	movs	r2, #3
 800f6ca:	4650      	mov	r0, sl
 800f6cc:	f7f0 fe08 	bl	80002e0 <memchr>
 800f6d0:	b138      	cbz	r0, 800f6e2 <_vfiprintf_r+0x176>
 800f6d2:	9b04      	ldr	r3, [sp, #16]
 800f6d4:	eba0 000a 	sub.w	r0, r0, sl
 800f6d8:	2240      	movs	r2, #64	@ 0x40
 800f6da:	4082      	lsls	r2, r0
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	3401      	adds	r4, #1
 800f6e0:	9304      	str	r3, [sp, #16]
 800f6e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6e6:	4829      	ldr	r0, [pc, #164]	@ (800f78c <_vfiprintf_r+0x220>)
 800f6e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f6ec:	2206      	movs	r2, #6
 800f6ee:	f7f0 fdf7 	bl	80002e0 <memchr>
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	d03f      	beq.n	800f776 <_vfiprintf_r+0x20a>
 800f6f6:	4b26      	ldr	r3, [pc, #152]	@ (800f790 <_vfiprintf_r+0x224>)
 800f6f8:	bb1b      	cbnz	r3, 800f742 <_vfiprintf_r+0x1d6>
 800f6fa:	9b03      	ldr	r3, [sp, #12]
 800f6fc:	3307      	adds	r3, #7
 800f6fe:	f023 0307 	bic.w	r3, r3, #7
 800f702:	3308      	adds	r3, #8
 800f704:	9303      	str	r3, [sp, #12]
 800f706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f708:	443b      	add	r3, r7
 800f70a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f70c:	e76a      	b.n	800f5e4 <_vfiprintf_r+0x78>
 800f70e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f712:	460c      	mov	r4, r1
 800f714:	2001      	movs	r0, #1
 800f716:	e7a8      	b.n	800f66a <_vfiprintf_r+0xfe>
 800f718:	2300      	movs	r3, #0
 800f71a:	3401      	adds	r4, #1
 800f71c:	9305      	str	r3, [sp, #20]
 800f71e:	4619      	mov	r1, r3
 800f720:	f04f 0c0a 	mov.w	ip, #10
 800f724:	4620      	mov	r0, r4
 800f726:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f72a:	3a30      	subs	r2, #48	@ 0x30
 800f72c:	2a09      	cmp	r2, #9
 800f72e:	d903      	bls.n	800f738 <_vfiprintf_r+0x1cc>
 800f730:	2b00      	cmp	r3, #0
 800f732:	d0c6      	beq.n	800f6c2 <_vfiprintf_r+0x156>
 800f734:	9105      	str	r1, [sp, #20]
 800f736:	e7c4      	b.n	800f6c2 <_vfiprintf_r+0x156>
 800f738:	fb0c 2101 	mla	r1, ip, r1, r2
 800f73c:	4604      	mov	r4, r0
 800f73e:	2301      	movs	r3, #1
 800f740:	e7f0      	b.n	800f724 <_vfiprintf_r+0x1b8>
 800f742:	ab03      	add	r3, sp, #12
 800f744:	9300      	str	r3, [sp, #0]
 800f746:	462a      	mov	r2, r5
 800f748:	4b12      	ldr	r3, [pc, #72]	@ (800f794 <_vfiprintf_r+0x228>)
 800f74a:	a904      	add	r1, sp, #16
 800f74c:	4630      	mov	r0, r6
 800f74e:	f7fd fd8f 	bl	800d270 <_printf_float>
 800f752:	4607      	mov	r7, r0
 800f754:	1c78      	adds	r0, r7, #1
 800f756:	d1d6      	bne.n	800f706 <_vfiprintf_r+0x19a>
 800f758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f75a:	07d9      	lsls	r1, r3, #31
 800f75c:	d405      	bmi.n	800f76a <_vfiprintf_r+0x1fe>
 800f75e:	89ab      	ldrh	r3, [r5, #12]
 800f760:	059a      	lsls	r2, r3, #22
 800f762:	d402      	bmi.n	800f76a <_vfiprintf_r+0x1fe>
 800f764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f766:	f7fe fc67 	bl	800e038 <__retarget_lock_release_recursive>
 800f76a:	89ab      	ldrh	r3, [r5, #12]
 800f76c:	065b      	lsls	r3, r3, #25
 800f76e:	f53f af1f 	bmi.w	800f5b0 <_vfiprintf_r+0x44>
 800f772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f774:	e71e      	b.n	800f5b4 <_vfiprintf_r+0x48>
 800f776:	ab03      	add	r3, sp, #12
 800f778:	9300      	str	r3, [sp, #0]
 800f77a:	462a      	mov	r2, r5
 800f77c:	4b05      	ldr	r3, [pc, #20]	@ (800f794 <_vfiprintf_r+0x228>)
 800f77e:	a904      	add	r1, sp, #16
 800f780:	4630      	mov	r0, r6
 800f782:	f7fd fffd 	bl	800d780 <_printf_i>
 800f786:	e7e4      	b.n	800f752 <_vfiprintf_r+0x1e6>
 800f788:	0800ff18 	.word	0x0800ff18
 800f78c:	0800ff22 	.word	0x0800ff22
 800f790:	0800d271 	.word	0x0800d271
 800f794:	0800f547 	.word	0x0800f547
 800f798:	0800ff1e 	.word	0x0800ff1e

0800f79c <__sflush_r>:
 800f79c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a4:	0716      	lsls	r6, r2, #28
 800f7a6:	4605      	mov	r5, r0
 800f7a8:	460c      	mov	r4, r1
 800f7aa:	d454      	bmi.n	800f856 <__sflush_r+0xba>
 800f7ac:	684b      	ldr	r3, [r1, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	dc02      	bgt.n	800f7b8 <__sflush_r+0x1c>
 800f7b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	dd48      	ble.n	800f84a <__sflush_r+0xae>
 800f7b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f7ba:	2e00      	cmp	r6, #0
 800f7bc:	d045      	beq.n	800f84a <__sflush_r+0xae>
 800f7be:	2300      	movs	r3, #0
 800f7c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f7c4:	682f      	ldr	r7, [r5, #0]
 800f7c6:	6a21      	ldr	r1, [r4, #32]
 800f7c8:	602b      	str	r3, [r5, #0]
 800f7ca:	d030      	beq.n	800f82e <__sflush_r+0x92>
 800f7cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f7ce:	89a3      	ldrh	r3, [r4, #12]
 800f7d0:	0759      	lsls	r1, r3, #29
 800f7d2:	d505      	bpl.n	800f7e0 <__sflush_r+0x44>
 800f7d4:	6863      	ldr	r3, [r4, #4]
 800f7d6:	1ad2      	subs	r2, r2, r3
 800f7d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f7da:	b10b      	cbz	r3, 800f7e0 <__sflush_r+0x44>
 800f7dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f7de:	1ad2      	subs	r2, r2, r3
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f7e4:	6a21      	ldr	r1, [r4, #32]
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	47b0      	blx	r6
 800f7ea:	1c43      	adds	r3, r0, #1
 800f7ec:	89a3      	ldrh	r3, [r4, #12]
 800f7ee:	d106      	bne.n	800f7fe <__sflush_r+0x62>
 800f7f0:	6829      	ldr	r1, [r5, #0]
 800f7f2:	291d      	cmp	r1, #29
 800f7f4:	d82b      	bhi.n	800f84e <__sflush_r+0xb2>
 800f7f6:	4a2a      	ldr	r2, [pc, #168]	@ (800f8a0 <__sflush_r+0x104>)
 800f7f8:	410a      	asrs	r2, r1
 800f7fa:	07d6      	lsls	r6, r2, #31
 800f7fc:	d427      	bmi.n	800f84e <__sflush_r+0xb2>
 800f7fe:	2200      	movs	r2, #0
 800f800:	6062      	str	r2, [r4, #4]
 800f802:	04d9      	lsls	r1, r3, #19
 800f804:	6922      	ldr	r2, [r4, #16]
 800f806:	6022      	str	r2, [r4, #0]
 800f808:	d504      	bpl.n	800f814 <__sflush_r+0x78>
 800f80a:	1c42      	adds	r2, r0, #1
 800f80c:	d101      	bne.n	800f812 <__sflush_r+0x76>
 800f80e:	682b      	ldr	r3, [r5, #0]
 800f810:	b903      	cbnz	r3, 800f814 <__sflush_r+0x78>
 800f812:	6560      	str	r0, [r4, #84]	@ 0x54
 800f814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f816:	602f      	str	r7, [r5, #0]
 800f818:	b1b9      	cbz	r1, 800f84a <__sflush_r+0xae>
 800f81a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f81e:	4299      	cmp	r1, r3
 800f820:	d002      	beq.n	800f828 <__sflush_r+0x8c>
 800f822:	4628      	mov	r0, r5
 800f824:	f7ff f9f6 	bl	800ec14 <_free_r>
 800f828:	2300      	movs	r3, #0
 800f82a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f82c:	e00d      	b.n	800f84a <__sflush_r+0xae>
 800f82e:	2301      	movs	r3, #1
 800f830:	4628      	mov	r0, r5
 800f832:	47b0      	blx	r6
 800f834:	4602      	mov	r2, r0
 800f836:	1c50      	adds	r0, r2, #1
 800f838:	d1c9      	bne.n	800f7ce <__sflush_r+0x32>
 800f83a:	682b      	ldr	r3, [r5, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d0c6      	beq.n	800f7ce <__sflush_r+0x32>
 800f840:	2b1d      	cmp	r3, #29
 800f842:	d001      	beq.n	800f848 <__sflush_r+0xac>
 800f844:	2b16      	cmp	r3, #22
 800f846:	d11e      	bne.n	800f886 <__sflush_r+0xea>
 800f848:	602f      	str	r7, [r5, #0]
 800f84a:	2000      	movs	r0, #0
 800f84c:	e022      	b.n	800f894 <__sflush_r+0xf8>
 800f84e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f852:	b21b      	sxth	r3, r3
 800f854:	e01b      	b.n	800f88e <__sflush_r+0xf2>
 800f856:	690f      	ldr	r7, [r1, #16]
 800f858:	2f00      	cmp	r7, #0
 800f85a:	d0f6      	beq.n	800f84a <__sflush_r+0xae>
 800f85c:	0793      	lsls	r3, r2, #30
 800f85e:	680e      	ldr	r6, [r1, #0]
 800f860:	bf08      	it	eq
 800f862:	694b      	ldreq	r3, [r1, #20]
 800f864:	600f      	str	r7, [r1, #0]
 800f866:	bf18      	it	ne
 800f868:	2300      	movne	r3, #0
 800f86a:	eba6 0807 	sub.w	r8, r6, r7
 800f86e:	608b      	str	r3, [r1, #8]
 800f870:	f1b8 0f00 	cmp.w	r8, #0
 800f874:	dde9      	ble.n	800f84a <__sflush_r+0xae>
 800f876:	6a21      	ldr	r1, [r4, #32]
 800f878:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f87a:	4643      	mov	r3, r8
 800f87c:	463a      	mov	r2, r7
 800f87e:	4628      	mov	r0, r5
 800f880:	47b0      	blx	r6
 800f882:	2800      	cmp	r0, #0
 800f884:	dc08      	bgt.n	800f898 <__sflush_r+0xfc>
 800f886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f88a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f88e:	81a3      	strh	r3, [r4, #12]
 800f890:	f04f 30ff 	mov.w	r0, #4294967295
 800f894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f898:	4407      	add	r7, r0
 800f89a:	eba8 0800 	sub.w	r8, r8, r0
 800f89e:	e7e7      	b.n	800f870 <__sflush_r+0xd4>
 800f8a0:	dfbffffe 	.word	0xdfbffffe

0800f8a4 <_fflush_r>:
 800f8a4:	b538      	push	{r3, r4, r5, lr}
 800f8a6:	690b      	ldr	r3, [r1, #16]
 800f8a8:	4605      	mov	r5, r0
 800f8aa:	460c      	mov	r4, r1
 800f8ac:	b913      	cbnz	r3, 800f8b4 <_fflush_r+0x10>
 800f8ae:	2500      	movs	r5, #0
 800f8b0:	4628      	mov	r0, r5
 800f8b2:	bd38      	pop	{r3, r4, r5, pc}
 800f8b4:	b118      	cbz	r0, 800f8be <_fflush_r+0x1a>
 800f8b6:	6a03      	ldr	r3, [r0, #32]
 800f8b8:	b90b      	cbnz	r3, 800f8be <_fflush_r+0x1a>
 800f8ba:	f7fe f90d 	bl	800dad8 <__sinit>
 800f8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d0f3      	beq.n	800f8ae <_fflush_r+0xa>
 800f8c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f8c8:	07d0      	lsls	r0, r2, #31
 800f8ca:	d404      	bmi.n	800f8d6 <_fflush_r+0x32>
 800f8cc:	0599      	lsls	r1, r3, #22
 800f8ce:	d402      	bmi.n	800f8d6 <_fflush_r+0x32>
 800f8d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8d2:	f7fe fbb0 	bl	800e036 <__retarget_lock_acquire_recursive>
 800f8d6:	4628      	mov	r0, r5
 800f8d8:	4621      	mov	r1, r4
 800f8da:	f7ff ff5f 	bl	800f79c <__sflush_r>
 800f8de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f8e0:	07da      	lsls	r2, r3, #31
 800f8e2:	4605      	mov	r5, r0
 800f8e4:	d4e4      	bmi.n	800f8b0 <_fflush_r+0xc>
 800f8e6:	89a3      	ldrh	r3, [r4, #12]
 800f8e8:	059b      	lsls	r3, r3, #22
 800f8ea:	d4e1      	bmi.n	800f8b0 <_fflush_r+0xc>
 800f8ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8ee:	f7fe fba3 	bl	800e038 <__retarget_lock_release_recursive>
 800f8f2:	e7dd      	b.n	800f8b0 <_fflush_r+0xc>

0800f8f4 <__swhatbuf_r>:
 800f8f4:	b570      	push	{r4, r5, r6, lr}
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8fc:	2900      	cmp	r1, #0
 800f8fe:	b096      	sub	sp, #88	@ 0x58
 800f900:	4615      	mov	r5, r2
 800f902:	461e      	mov	r6, r3
 800f904:	da0d      	bge.n	800f922 <__swhatbuf_r+0x2e>
 800f906:	89a3      	ldrh	r3, [r4, #12]
 800f908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f90c:	f04f 0100 	mov.w	r1, #0
 800f910:	bf14      	ite	ne
 800f912:	2340      	movne	r3, #64	@ 0x40
 800f914:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f918:	2000      	movs	r0, #0
 800f91a:	6031      	str	r1, [r6, #0]
 800f91c:	602b      	str	r3, [r5, #0]
 800f91e:	b016      	add	sp, #88	@ 0x58
 800f920:	bd70      	pop	{r4, r5, r6, pc}
 800f922:	466a      	mov	r2, sp
 800f924:	f000 f848 	bl	800f9b8 <_fstat_r>
 800f928:	2800      	cmp	r0, #0
 800f92a:	dbec      	blt.n	800f906 <__swhatbuf_r+0x12>
 800f92c:	9901      	ldr	r1, [sp, #4]
 800f92e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f932:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f936:	4259      	negs	r1, r3
 800f938:	4159      	adcs	r1, r3
 800f93a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f93e:	e7eb      	b.n	800f918 <__swhatbuf_r+0x24>

0800f940 <__smakebuf_r>:
 800f940:	898b      	ldrh	r3, [r1, #12]
 800f942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f944:	079d      	lsls	r5, r3, #30
 800f946:	4606      	mov	r6, r0
 800f948:	460c      	mov	r4, r1
 800f94a:	d507      	bpl.n	800f95c <__smakebuf_r+0x1c>
 800f94c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f950:	6023      	str	r3, [r4, #0]
 800f952:	6123      	str	r3, [r4, #16]
 800f954:	2301      	movs	r3, #1
 800f956:	6163      	str	r3, [r4, #20]
 800f958:	b003      	add	sp, #12
 800f95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f95c:	ab01      	add	r3, sp, #4
 800f95e:	466a      	mov	r2, sp
 800f960:	f7ff ffc8 	bl	800f8f4 <__swhatbuf_r>
 800f964:	9f00      	ldr	r7, [sp, #0]
 800f966:	4605      	mov	r5, r0
 800f968:	4639      	mov	r1, r7
 800f96a:	4630      	mov	r0, r6
 800f96c:	f7ff f9c6 	bl	800ecfc <_malloc_r>
 800f970:	b948      	cbnz	r0, 800f986 <__smakebuf_r+0x46>
 800f972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f976:	059a      	lsls	r2, r3, #22
 800f978:	d4ee      	bmi.n	800f958 <__smakebuf_r+0x18>
 800f97a:	f023 0303 	bic.w	r3, r3, #3
 800f97e:	f043 0302 	orr.w	r3, r3, #2
 800f982:	81a3      	strh	r3, [r4, #12]
 800f984:	e7e2      	b.n	800f94c <__smakebuf_r+0xc>
 800f986:	89a3      	ldrh	r3, [r4, #12]
 800f988:	6020      	str	r0, [r4, #0]
 800f98a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f98e:	81a3      	strh	r3, [r4, #12]
 800f990:	9b01      	ldr	r3, [sp, #4]
 800f992:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f996:	b15b      	cbz	r3, 800f9b0 <__smakebuf_r+0x70>
 800f998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f99c:	4630      	mov	r0, r6
 800f99e:	f000 f81d 	bl	800f9dc <_isatty_r>
 800f9a2:	b128      	cbz	r0, 800f9b0 <__smakebuf_r+0x70>
 800f9a4:	89a3      	ldrh	r3, [r4, #12]
 800f9a6:	f023 0303 	bic.w	r3, r3, #3
 800f9aa:	f043 0301 	orr.w	r3, r3, #1
 800f9ae:	81a3      	strh	r3, [r4, #12]
 800f9b0:	89a3      	ldrh	r3, [r4, #12]
 800f9b2:	431d      	orrs	r5, r3
 800f9b4:	81a5      	strh	r5, [r4, #12]
 800f9b6:	e7cf      	b.n	800f958 <__smakebuf_r+0x18>

0800f9b8 <_fstat_r>:
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	4d07      	ldr	r5, [pc, #28]	@ (800f9d8 <_fstat_r+0x20>)
 800f9bc:	2300      	movs	r3, #0
 800f9be:	4604      	mov	r4, r0
 800f9c0:	4608      	mov	r0, r1
 800f9c2:	4611      	mov	r1, r2
 800f9c4:	602b      	str	r3, [r5, #0]
 800f9c6:	f7f1 fcef 	bl	80013a8 <_fstat>
 800f9ca:	1c43      	adds	r3, r0, #1
 800f9cc:	d102      	bne.n	800f9d4 <_fstat_r+0x1c>
 800f9ce:	682b      	ldr	r3, [r5, #0]
 800f9d0:	b103      	cbz	r3, 800f9d4 <_fstat_r+0x1c>
 800f9d2:	6023      	str	r3, [r4, #0]
 800f9d4:	bd38      	pop	{r3, r4, r5, pc}
 800f9d6:	bf00      	nop
 800f9d8:	24005110 	.word	0x24005110

0800f9dc <_isatty_r>:
 800f9dc:	b538      	push	{r3, r4, r5, lr}
 800f9de:	4d06      	ldr	r5, [pc, #24]	@ (800f9f8 <_isatty_r+0x1c>)
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	4608      	mov	r0, r1
 800f9e6:	602b      	str	r3, [r5, #0]
 800f9e8:	f7f1 fc4c 	bl	8001284 <_isatty>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	d102      	bne.n	800f9f6 <_isatty_r+0x1a>
 800f9f0:	682b      	ldr	r3, [r5, #0]
 800f9f2:	b103      	cbz	r3, 800f9f6 <_isatty_r+0x1a>
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	24005110 	.word	0x24005110

0800f9fc <_sbrk_r>:
 800f9fc:	b538      	push	{r3, r4, r5, lr}
 800f9fe:	4d06      	ldr	r5, [pc, #24]	@ (800fa18 <_sbrk_r+0x1c>)
 800fa00:	2300      	movs	r3, #0
 800fa02:	4604      	mov	r4, r0
 800fa04:	4608      	mov	r0, r1
 800fa06:	602b      	str	r3, [r5, #0]
 800fa08:	f7f1 fd3a 	bl	8001480 <_sbrk>
 800fa0c:	1c43      	adds	r3, r0, #1
 800fa0e:	d102      	bne.n	800fa16 <_sbrk_r+0x1a>
 800fa10:	682b      	ldr	r3, [r5, #0]
 800fa12:	b103      	cbz	r3, 800fa16 <_sbrk_r+0x1a>
 800fa14:	6023      	str	r3, [r4, #0]
 800fa16:	bd38      	pop	{r3, r4, r5, pc}
 800fa18:	24005110 	.word	0x24005110

0800fa1c <__assert_func>:
 800fa1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa1e:	4614      	mov	r4, r2
 800fa20:	461a      	mov	r2, r3
 800fa22:	4b09      	ldr	r3, [pc, #36]	@ (800fa48 <__assert_func+0x2c>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4605      	mov	r5, r0
 800fa28:	68d8      	ldr	r0, [r3, #12]
 800fa2a:	b954      	cbnz	r4, 800fa42 <__assert_func+0x26>
 800fa2c:	4b07      	ldr	r3, [pc, #28]	@ (800fa4c <__assert_func+0x30>)
 800fa2e:	461c      	mov	r4, r3
 800fa30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa34:	9100      	str	r1, [sp, #0]
 800fa36:	462b      	mov	r3, r5
 800fa38:	4905      	ldr	r1, [pc, #20]	@ (800fa50 <__assert_func+0x34>)
 800fa3a:	f000 f841 	bl	800fac0 <fiprintf>
 800fa3e:	f000 f851 	bl	800fae4 <abort>
 800fa42:	4b04      	ldr	r3, [pc, #16]	@ (800fa54 <__assert_func+0x38>)
 800fa44:	e7f4      	b.n	800fa30 <__assert_func+0x14>
 800fa46:	bf00      	nop
 800fa48:	24000020 	.word	0x24000020
 800fa4c:	0800ff6e 	.word	0x0800ff6e
 800fa50:	0800ff40 	.word	0x0800ff40
 800fa54:	0800ff33 	.word	0x0800ff33

0800fa58 <_calloc_r>:
 800fa58:	b570      	push	{r4, r5, r6, lr}
 800fa5a:	fba1 5402 	umull	r5, r4, r1, r2
 800fa5e:	b93c      	cbnz	r4, 800fa70 <_calloc_r+0x18>
 800fa60:	4629      	mov	r1, r5
 800fa62:	f7ff f94b 	bl	800ecfc <_malloc_r>
 800fa66:	4606      	mov	r6, r0
 800fa68:	b928      	cbnz	r0, 800fa76 <_calloc_r+0x1e>
 800fa6a:	2600      	movs	r6, #0
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	bd70      	pop	{r4, r5, r6, pc}
 800fa70:	220c      	movs	r2, #12
 800fa72:	6002      	str	r2, [r0, #0]
 800fa74:	e7f9      	b.n	800fa6a <_calloc_r+0x12>
 800fa76:	462a      	mov	r2, r5
 800fa78:	4621      	mov	r1, r4
 800fa7a:	f7fe fa5f 	bl	800df3c <memset>
 800fa7e:	e7f5      	b.n	800fa6c <_calloc_r+0x14>

0800fa80 <__ascii_mbtowc>:
 800fa80:	b082      	sub	sp, #8
 800fa82:	b901      	cbnz	r1, 800fa86 <__ascii_mbtowc+0x6>
 800fa84:	a901      	add	r1, sp, #4
 800fa86:	b142      	cbz	r2, 800fa9a <__ascii_mbtowc+0x1a>
 800fa88:	b14b      	cbz	r3, 800fa9e <__ascii_mbtowc+0x1e>
 800fa8a:	7813      	ldrb	r3, [r2, #0]
 800fa8c:	600b      	str	r3, [r1, #0]
 800fa8e:	7812      	ldrb	r2, [r2, #0]
 800fa90:	1e10      	subs	r0, r2, #0
 800fa92:	bf18      	it	ne
 800fa94:	2001      	movne	r0, #1
 800fa96:	b002      	add	sp, #8
 800fa98:	4770      	bx	lr
 800fa9a:	4610      	mov	r0, r2
 800fa9c:	e7fb      	b.n	800fa96 <__ascii_mbtowc+0x16>
 800fa9e:	f06f 0001 	mvn.w	r0, #1
 800faa2:	e7f8      	b.n	800fa96 <__ascii_mbtowc+0x16>

0800faa4 <__ascii_wctomb>:
 800faa4:	4603      	mov	r3, r0
 800faa6:	4608      	mov	r0, r1
 800faa8:	b141      	cbz	r1, 800fabc <__ascii_wctomb+0x18>
 800faaa:	2aff      	cmp	r2, #255	@ 0xff
 800faac:	d904      	bls.n	800fab8 <__ascii_wctomb+0x14>
 800faae:	228a      	movs	r2, #138	@ 0x8a
 800fab0:	601a      	str	r2, [r3, #0]
 800fab2:	f04f 30ff 	mov.w	r0, #4294967295
 800fab6:	4770      	bx	lr
 800fab8:	700a      	strb	r2, [r1, #0]
 800faba:	2001      	movs	r0, #1
 800fabc:	4770      	bx	lr
	...

0800fac0 <fiprintf>:
 800fac0:	b40e      	push	{r1, r2, r3}
 800fac2:	b503      	push	{r0, r1, lr}
 800fac4:	4601      	mov	r1, r0
 800fac6:	ab03      	add	r3, sp, #12
 800fac8:	4805      	ldr	r0, [pc, #20]	@ (800fae0 <fiprintf+0x20>)
 800faca:	f853 2b04 	ldr.w	r2, [r3], #4
 800face:	6800      	ldr	r0, [r0, #0]
 800fad0:	9301      	str	r3, [sp, #4]
 800fad2:	f7ff fd4b 	bl	800f56c <_vfiprintf_r>
 800fad6:	b002      	add	sp, #8
 800fad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fadc:	b003      	add	sp, #12
 800fade:	4770      	bx	lr
 800fae0:	24000020 	.word	0x24000020

0800fae4 <abort>:
 800fae4:	b508      	push	{r3, lr}
 800fae6:	2006      	movs	r0, #6
 800fae8:	f000 f82c 	bl	800fb44 <raise>
 800faec:	2001      	movs	r0, #1
 800faee:	f000 f855 	bl	800fb9c <_exit>

0800faf2 <_raise_r>:
 800faf2:	291f      	cmp	r1, #31
 800faf4:	b538      	push	{r3, r4, r5, lr}
 800faf6:	4605      	mov	r5, r0
 800faf8:	460c      	mov	r4, r1
 800fafa:	d904      	bls.n	800fb06 <_raise_r+0x14>
 800fafc:	2316      	movs	r3, #22
 800fafe:	6003      	str	r3, [r0, #0]
 800fb00:	f04f 30ff 	mov.w	r0, #4294967295
 800fb04:	bd38      	pop	{r3, r4, r5, pc}
 800fb06:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fb08:	b112      	cbz	r2, 800fb10 <_raise_r+0x1e>
 800fb0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb0e:	b94b      	cbnz	r3, 800fb24 <_raise_r+0x32>
 800fb10:	4628      	mov	r0, r5
 800fb12:	f000 f831 	bl	800fb78 <_getpid_r>
 800fb16:	4622      	mov	r2, r4
 800fb18:	4601      	mov	r1, r0
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb20:	f000 b818 	b.w	800fb54 <_kill_r>
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d00a      	beq.n	800fb3e <_raise_r+0x4c>
 800fb28:	1c59      	adds	r1, r3, #1
 800fb2a:	d103      	bne.n	800fb34 <_raise_r+0x42>
 800fb2c:	2316      	movs	r3, #22
 800fb2e:	6003      	str	r3, [r0, #0]
 800fb30:	2001      	movs	r0, #1
 800fb32:	e7e7      	b.n	800fb04 <_raise_r+0x12>
 800fb34:	2100      	movs	r1, #0
 800fb36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	4798      	blx	r3
 800fb3e:	2000      	movs	r0, #0
 800fb40:	e7e0      	b.n	800fb04 <_raise_r+0x12>
	...

0800fb44 <raise>:
 800fb44:	4b02      	ldr	r3, [pc, #8]	@ (800fb50 <raise+0xc>)
 800fb46:	4601      	mov	r1, r0
 800fb48:	6818      	ldr	r0, [r3, #0]
 800fb4a:	f7ff bfd2 	b.w	800faf2 <_raise_r>
 800fb4e:	bf00      	nop
 800fb50:	24000020 	.word	0x24000020

0800fb54 <_kill_r>:
 800fb54:	b538      	push	{r3, r4, r5, lr}
 800fb56:	4d07      	ldr	r5, [pc, #28]	@ (800fb74 <_kill_r+0x20>)
 800fb58:	2300      	movs	r3, #0
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	4608      	mov	r0, r1
 800fb5e:	4611      	mov	r1, r2
 800fb60:	602b      	str	r3, [r5, #0]
 800fb62:	f000 f813 	bl	800fb8c <_kill>
 800fb66:	1c43      	adds	r3, r0, #1
 800fb68:	d102      	bne.n	800fb70 <_kill_r+0x1c>
 800fb6a:	682b      	ldr	r3, [r5, #0]
 800fb6c:	b103      	cbz	r3, 800fb70 <_kill_r+0x1c>
 800fb6e:	6023      	str	r3, [r4, #0]
 800fb70:	bd38      	pop	{r3, r4, r5, pc}
 800fb72:	bf00      	nop
 800fb74:	24005110 	.word	0x24005110

0800fb78 <_getpid_r>:
 800fb78:	f000 b800 	b.w	800fb7c <_getpid>

0800fb7c <_getpid>:
 800fb7c:	4b02      	ldr	r3, [pc, #8]	@ (800fb88 <_getpid+0xc>)
 800fb7e:	2258      	movs	r2, #88	@ 0x58
 800fb80:	601a      	str	r2, [r3, #0]
 800fb82:	f04f 30ff 	mov.w	r0, #4294967295
 800fb86:	4770      	bx	lr
 800fb88:	24005110 	.word	0x24005110

0800fb8c <_kill>:
 800fb8c:	4b02      	ldr	r3, [pc, #8]	@ (800fb98 <_kill+0xc>)
 800fb8e:	2258      	movs	r2, #88	@ 0x58
 800fb90:	601a      	str	r2, [r3, #0]
 800fb92:	f04f 30ff 	mov.w	r0, #4294967295
 800fb96:	4770      	bx	lr
 800fb98:	24005110 	.word	0x24005110

0800fb9c <_exit>:
 800fb9c:	e7fe      	b.n	800fb9c <_exit>
	...

0800fba0 <_init>:
 800fba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba2:	bf00      	nop
 800fba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fba6:	bc08      	pop	{r3}
 800fba8:	469e      	mov	lr, r3
 800fbaa:	4770      	bx	lr

0800fbac <_fini>:
 800fbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbae:	bf00      	nop
 800fbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbb2:	bc08      	pop	{r3}
 800fbb4:	469e      	mov	lr, r3
 800fbb6:	4770      	bx	lr
