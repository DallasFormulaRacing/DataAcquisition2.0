
DAQ_H7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dda4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800e044  0800e044  0000f044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1a4  0800e1a4  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1a4  0800e1a4  0000f1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1ac  0800e1ac  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1ac  0800e1ac  0000f1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e1b0  0800e1b0  0000f1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  0800e1b4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e1c  24000070  0800e224  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004e8c  0800e224  00010e8c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000308f0  00000000  00000000  0001009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b60  00000000  00000000  0004098e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002360  00000000  00000000  000464f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b76  00000000  00000000  00048850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047ae7  00000000  00000000  0004a3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032527  00000000  00000000  00091ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ba116  00000000  00000000  000c43d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0027e4ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f1c  00000000  00000000  0027e530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0028844c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e02c 	.word	0x0800e02c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800e02c 	.word	0x0800e02c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000874 <MX_ADC3_Init+0xd8>)
 80007b8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007cc:	4b28      	ldr	r3, [pc, #160]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007d2:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007d8:	4b25      	ldr	r3, [pc, #148]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007da:	2201      	movs	r2, #1
 80007dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007de:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ea:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <MX_ADC3_Init+0xd4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000802:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_ADC3_Init+0xd4>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 800080a:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_ADC3_Init+0xd4>)
 800080c:	2201      	movs	r2, #1
 800080e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000810:	4817      	ldr	r0, [pc, #92]	@ (8000870 <MX_ADC3_Init+0xd4>)
 8000812:	f001 fa41 	bl	8001c98 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 800081c:	f000 fd28 	bl	8001270 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_ADC3_Init+0xd4>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000826:	4812      	ldr	r0, [pc, #72]	@ (8000870 <MX_ADC3_Init+0xd4>)
 8000828:	f001 fa36 	bl	8001c98 <HAL_ADC_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000832:	f000 fd1d 	bl	8001270 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_ADC3_Init+0xdc>)
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083a:	2306      	movs	r3, #6
 800083c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000842:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000846:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000848:	2304      	movs	r3, #4
 800084a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_ADC3_Init+0xd4>)
 800085a:	f001 fbbf 	bl	8001fdc <HAL_ADC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000864:	f000 fd04 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2400008c 	.word	0x2400008c
 8000874:	58026000 	.word	0x58026000
 8000878:	04300002 	.word	0x04300002

0800087c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b0bc      	sub	sp, #240	@ 0xf0
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	22c0      	movs	r2, #192	@ 0xc0
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f00c fd96 	bl	800d3ce <memset>
  if(adcHandle->Instance==ADC3)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a52      	ldr	r2, [pc, #328]	@ (80009f0 <HAL_ADC_MspInit+0x174>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	f040 809d 	bne.w	80009e8 <HAL_ADC_MspInit+0x16c>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008ae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008b2:	f04f 0300 	mov.w	r3, #0
 80008b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80008be:	230a      	movs	r3, #10
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008ce:	23c0      	movs	r3, #192	@ 0xc0
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008d2:	2320      	movs	r3, #32
 80008d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008da:	2300      	movs	r3, #0
 80008dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	4618      	mov	r0, r3
 80008e6:	f005 fc69 	bl	80061bc <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80008f0:	f000 fcbe 	bl	8001270 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008f4:	4b3f      	ldr	r3, [pc, #252]	@ (80009f4 <HAL_ADC_MspInit+0x178>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fa:	4a3e      	ldr	r2, [pc, #248]	@ (80009f4 <HAL_ADC_MspInit+0x178>)
 80008fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000904:	4b3b      	ldr	r3, [pc, #236]	@ (80009f4 <HAL_ADC_MspInit+0x178>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	4b38      	ldr	r3, [pc, #224]	@ (80009f4 <HAL_ADC_MspInit+0x178>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000918:	4a36      	ldr	r2, [pc, #216]	@ (80009f4 <HAL_ADC_MspInit+0x178>)
 800091a:	f043 0320 	orr.w	r3, r3, #32
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000922:	4b34      	ldr	r3, [pc, #208]	@ (80009f4 <HAL_ADC_MspInit+0x178>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000930:	4b30      	ldr	r3, [pc, #192]	@ (80009f4 <HAL_ADC_MspInit+0x178>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000936:	4a2f      	ldr	r2, [pc, #188]	@ (80009f4 <HAL_ADC_MspInit+0x178>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000940:	4b2c      	ldr	r3, [pc, #176]	@ (80009f4 <HAL_ADC_MspInit+0x178>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    PF7     ------> ADC3_INP3
    PF9     ------> ADC3_INP2
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800094e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000952:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000956:	2303      	movs	r3, #3
 8000958:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000962:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000966:	4619      	mov	r1, r3
 8000968:	4823      	ldr	r0, [pc, #140]	@ (80009f8 <HAL_ADC_MspInit+0x17c>)
 800096a:	f004 f8d5 	bl	8004b18 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800096e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000972:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000976:	f000 ffed 	bl	8001954 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800097a:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800097e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000982:	f000 ffe7 	bl	8001954 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000986:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 8000988:	4a1d      	ldr	r2, [pc, #116]	@ (8000a00 <HAL_ADC_MspInit+0x184>)
 800098a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800098c:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 800098e:	2273      	movs	r2, #115	@ 0x73
 8000990:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000992:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000998:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800099e:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 80009a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 80009a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009ac:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 80009b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009b4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 80009b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009bc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 80009c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009c4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80009cc:	480b      	ldr	r0, [pc, #44]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 80009ce:	f002 f87d 	bl	8002acc <HAL_DMA_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_ADC_MspInit+0x160>
    {
      Error_Handler();
 80009d8:	f000 fc4a 	bl	8001270 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a07      	ldr	r2, [pc, #28]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 80009e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80009e2:	4a06      	ldr	r2, [pc, #24]	@ (80009fc <HAL_ADC_MspInit+0x180>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009e8:	bf00      	nop
 80009ea:	37f0      	adds	r7, #240	@ 0xf0
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	58026000 	.word	0x58026000
 80009f4:	58024400 	.word	0x58024400
 80009f8:	58021400 	.word	0x58021400
 80009fc:	240000f0 	.word	0x240000f0
 8000a00:	40020010 	.word	0x40020010

08000a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <MX_DMA_Init+0x3c>)
 8000a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a10:	4a0b      	ldr	r2, [pc, #44]	@ (8000a40 <MX_DMA_Init+0x3c>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_DMA_Init+0x3c>)
 8000a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	200b      	movs	r0, #11
 8000a2e:	f002 f818 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a32:	200b      	movs	r0, #11
 8000a34:	f002 f82f 	bl	8002a96 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	58024400 	.word	0x58024400

08000a44 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a48:	4b2e      	ldr	r3, [pc, #184]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b08 <MX_FDCAN1_Init+0xc4>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a54:	4b2b      	ldr	r3, [pc, #172]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a60:	4b28      	ldr	r3, [pc, #160]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a66:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000a6c:	4b25      	ldr	r3, [pc, #148]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a6e:	2210      	movs	r2, #16
 8000a70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a72:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000a78:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a80:	2202      	movs	r2, #2
 8000a82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a90:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a9c:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000aba:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000ace:	2204      	movs	r2, #4
 8000ad0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000aec:	2204      	movs	r2, #4
 8000aee:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_FDCAN1_Init+0xc0>)
 8000af2:	f003 fcad 	bl	8004450 <HAL_FDCAN_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000afc:	f000 fbb8 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24000168 	.word	0x24000168
 8000b08:	4000a000 	.word	0x4000a000

08000b0c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b10:	4b2e      	ldr	r3, [pc, #184]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b12:	4a2f      	ldr	r2, [pc, #188]	@ (8000bd0 <MX_FDCAN2_Init+0xc4>)
 8000b14:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b16:	4b2d      	ldr	r3, [pc, #180]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000b22:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b28:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000b34:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b36:	2210      	movs	r2, #16
 8000b38:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b3a:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b52:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b88:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bac:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_FDCAN2_Init+0xc0>)
 8000bba:	f003 fc49 	bl	8004450 <HAL_FDCAN_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000bc4:	f000 fb54 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	24000208 	.word	0x24000208
 8000bd0:	4000a400 	.word	0x4000a400

08000bd4 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0bc      	sub	sp, #240	@ 0xf0
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	22c0      	movs	r2, #192	@ 0xc0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f00c fbea 	bl	800d3ce <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a57      	ldr	r2, [pc, #348]	@ (8000d5c <HAL_FDCAN_MspInit+0x188>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d150      	bne.n	8000ca6 <HAL_FDCAN_MspInit+0xd2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000c10:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f005 facd 	bl	80061bc <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000c28:	f000 fb22 	bl	8001270 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <HAL_FDCAN_MspInit+0x18c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a4b      	ldr	r2, [pc, #300]	@ (8000d60 <HAL_FDCAN_MspInit+0x18c>)
 8000c34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000c36:	4b4a      	ldr	r3, [pc, #296]	@ (8000d60 <HAL_FDCAN_MspInit+0x18c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d10e      	bne.n	8000c5c <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c3e:	4b49      	ldr	r3, [pc, #292]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000c40:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c44:	4a47      	ldr	r2, [pc, #284]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c4a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c4e:	4b45      	ldr	r3, [pc, #276]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000c50:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5c:	4b41      	ldr	r3, [pc, #260]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c62:	4a40      	ldr	r2, [pc, #256]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c92:	2309      	movs	r3, #9
 8000c94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4832      	ldr	r0, [pc, #200]	@ (8000d68 <HAL_FDCAN_MspInit+0x194>)
 8000ca0:	f003 ff3a 	bl	8004b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000ca4:	e055      	b.n	8000d52 <HAL_FDCAN_MspInit+0x17e>
  else if(fdcanHandle->Instance==FDCAN2)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a30      	ldr	r2, [pc, #192]	@ (8000d6c <HAL_FDCAN_MspInit+0x198>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d150      	bne.n	8000d52 <HAL_FDCAN_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cb0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000cbc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc4:	f107 0318 	add.w	r3, r7, #24
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 fa77 	bl	80061bc <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_FDCAN_MspInit+0x104>
      Error_Handler();
 8000cd4:	f000 facc 	bl	8001270 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000cd8:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <HAL_FDCAN_MspInit+0x18c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	4a20      	ldr	r2, [pc, #128]	@ (8000d60 <HAL_FDCAN_MspInit+0x18c>)
 8000ce0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d60 <HAL_FDCAN_MspInit+0x18c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d10e      	bne.n	8000d08 <HAL_FDCAN_MspInit+0x134>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cea:	4b1e      	ldr	r3, [pc, #120]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000cec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000cfc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0e:	4a15      	ldr	r2, [pc, #84]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <HAL_FDCAN_MspInit+0x190>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000d26:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8000d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000d40:	2309      	movs	r3, #9
 8000d42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d46:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <HAL_FDCAN_MspInit+0x19c>)
 8000d4e:	f003 fee3 	bl	8004b18 <HAL_GPIO_Init>
}
 8000d52:	bf00      	nop
 8000d54:	37f0      	adds	r7, #240	@ 0xf0
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	4000a000 	.word	0x4000a000
 8000d60:	240002a8 	.word	0x240002a8
 8000d64:	58024400 	.word	0x58024400
 8000d68:	58020c00 	.word	0x58020c00
 8000d6c:	4000a400 	.word	0x4000a400
 8000d70:	58020400 	.word	0x58020400

08000d74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <MX_FREERTOS_Init+0x18>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_FREERTOS_Init+0x1c>)
 8000d7e:	f009 fbcf 	bl	800a520 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a03      	ldr	r2, [pc, #12]	@ (8000d94 <MX_FREERTOS_Init+0x20>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	0800e11c 	.word	0x0800e11c
 8000d90:	08000d99 	.word	0x08000d99
 8000d94:	240002ac 	.word	0x240002ac

08000d98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f009 fc4f 	bl	800a644 <osDelay>
 8000da6:	e7fb      	b.n	8000da0 <StartDefaultTask+0x8>

08000da8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	@ 0x30
 8000dac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbe:	4b61      	ldr	r3, [pc, #388]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc4:	4a5f      	ldr	r2, [pc, #380]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000dc6:	f043 0320 	orr.w	r3, r3, #32
 8000dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dce:	4b5d      	ldr	r3, [pc, #372]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	f003 0320 	and.w	r3, r3, #32
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ddc:	4b59      	ldr	r3, [pc, #356]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	4a58      	ldr	r2, [pc, #352]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dec:	4b55      	ldr	r3, [pc, #340]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b52      	ldr	r3, [pc, #328]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	4a50      	ldr	r2, [pc, #320]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0a:	4b4e      	ldr	r3, [pc, #312]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	4b4a      	ldr	r3, [pc, #296]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	4a49      	ldr	r2, [pc, #292]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e28:	4b46      	ldr	r3, [pc, #280]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	4b43      	ldr	r3, [pc, #268]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3c:	4a41      	ldr	r2, [pc, #260]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e46:	4b3f      	ldr	r3, [pc, #252]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e54:	4b3b      	ldr	r3, [pc, #236]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e64:	4b37      	ldr	r3, [pc, #220]	@ (8000f44 <MX_GPIO_Init+0x19c>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e72:	2332      	movs	r3, #50	@ 0x32
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e82:	230b      	movs	r3, #11
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482e      	ldr	r0, [pc, #184]	@ (8000f48 <MX_GPIO_Init+0x1a0>)
 8000e8e:	f003 fe43 	bl	8004b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e92:	2386      	movs	r3, #134	@ 0x86
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4827      	ldr	r0, [pc, #156]	@ (8000f4c <MX_GPIO_Init+0x1a4>)
 8000eae:	f003 fe33 	bl	8004b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec4:	230b      	movs	r3, #11
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4820      	ldr	r0, [pc, #128]	@ (8000f50 <MX_GPIO_Init+0x1a8>)
 8000ed0:	f003 fe22 	bl	8004b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ed4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4818      	ldr	r0, [pc, #96]	@ (8000f54 <MX_GPIO_Init+0x1ac>)
 8000ef2:	f003 fe11 	bl	8004b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ef6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	480e      	ldr	r0, [pc, #56]	@ (8000f4c <MX_GPIO_Init+0x1a4>)
 8000f14:	f003 fe00 	bl	8004b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f18:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f2a:	230b      	movs	r3, #11
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <MX_GPIO_Init+0x1b0>)
 8000f36:	f003 fdef 	bl	8004b18 <HAL_GPIO_Init>

}
 8000f3a:	bf00      	nop
 8000f3c:	3730      	adds	r7, #48	@ 0x30
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	58024400 	.word	0x58024400
 8000f48:	58020800 	.word	0x58020800
 8000f4c:	58020000 	.word	0x58020000
 8000f50:	58020400 	.word	0x58020400
 8000f54:	58020c00 	.word	0x58020c00
 8000f58:	58021800 	.word	0x58021800

08000f5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000f62:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd4 <MX_I2C1_Init+0x78>)
 8000f64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000f68:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd8 <MX_I2C1_Init+0x7c>)
 8000f6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f72:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f96:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000f98:	f003 ff9c 	bl	8004ed4 <HAL_I2C_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fa2:	f000 f965 	bl	8001270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000faa:	f004 f82f 	bl	800500c <HAL_I2CEx_ConfigAnalogFilter>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fb4:	f000 f95c 	bl	8001270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_I2C1_Init+0x74>)
 8000fbc:	f004 f871 	bl	80050a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f000 f953 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	240002b0 	.word	0x240002b0
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	00707cbb 	.word	0x00707cbb

08000fdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0ba      	sub	sp, #232	@ 0xe8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	22c0      	movs	r2, #192	@ 0xc0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f00c f9e6 	bl	800d3ce <memset>
  if(i2cHandle->Instance==I2C1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a27      	ldr	r2, [pc, #156]	@ (80010a4 <HAL_I2C_MspInit+0xc8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d146      	bne.n	800109a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800100c:	f04f 0208 	mov.w	r2, #8
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	4618      	mov	r0, r3
 8001024:	f005 f8ca 	bl	80061bc <HAL_RCCEx_PeriphCLKConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800102e:	f000 f91f 	bl	8001270 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_I2C_MspInit+0xcc>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	4a1b      	ldr	r2, [pc, #108]	@ (80010a8 <HAL_I2C_MspInit+0xcc>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <HAL_I2C_MspInit+0xcc>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001050:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001054:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001058:	2312      	movs	r3, #18
 800105a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800106a:	2304      	movs	r3, #4
 800106c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001074:	4619      	mov	r1, r3
 8001076:	480d      	ldr	r0, [pc, #52]	@ (80010ac <HAL_I2C_MspInit+0xd0>)
 8001078:	f003 fd4e 	bl	8004b18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_I2C_MspInit+0xcc>)
 800107e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001082:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <HAL_I2C_MspInit+0xcc>)
 8001084:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001088:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_I2C_MspInit+0xcc>)
 800108e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001092:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	37e8      	adds	r7, #232	@ 0xe8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40005400 	.word	0x40005400
 80010a8:	58024400 	.word	0x58024400
 80010ac:	58020400 	.word	0x58020400

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80010b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ba:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80010bc:	bf00      	nop
 80010be:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <main+0xc0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <main+0x24>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dcf4      	bgt.n	80010be <main+0xe>
  if ( timeout < 0 )
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	da01      	bge.n	80010de <main+0x2e>
  {
  Error_Handler();
 80010da:	f000 f8c9 	bl	8001270 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010de:	f000 fb77 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e2:	f000 f847 	bl	8001174 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80010e6:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <main+0xc0>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ec:	4a20      	ldr	r2, [pc, #128]	@ (8001170 <main+0xc0>)
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <main+0xc0>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001104:	2000      	movs	r0, #0
 8001106:	f003 feb7 	bl	8004e78 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800110a:	2100      	movs	r1, #0
 800110c:	2000      	movs	r0, #0
 800110e:	f003 fecd 	bl	8004eac <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001112:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001116:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001118:	bf00      	nop
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <main+0xc0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d104      	bne.n	8001130 <main+0x80>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	1e5a      	subs	r2, r3, #1
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dcf4      	bgt.n	800111a <main+0x6a>
if ( timeout < 0 )
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da01      	bge.n	800113a <main+0x8a>
{
Error_Handler();
 8001136:	f000 f89b 	bl	8001270 <Error_Handler>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113a:	f7ff fe35 	bl	8000da8 <MX_GPIO_Init>
  MX_DMA_Init();
 800113e:	f7ff fc61 	bl	8000a04 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001142:	f7ff fc7f 	bl	8000a44 <MX_FDCAN1_Init>
  MX_TIM7_Init();
 8001146:	f000 f9e5 	bl	8001514 <MX_TIM7_Init>
  MX_ADC3_Init();
 800114a:	f7ff fb27 	bl	800079c <MX_ADC3_Init>
  MX_FDCAN2_Init();
 800114e:	f7ff fcdd 	bl	8000b0c <MX_FDCAN2_Init>
  MX_UART4_Init();
 8001152:	f000 fa37 	bl	80015c4 <MX_UART4_Init>
  MX_I2C1_Init();
 8001156:	f7ff ff01 	bl	8000f5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  cppMain();
 800115a:	f00b ff3b 	bl	800cfd4 <cppMain>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800115e:	f009 f995 	bl	800a48c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001162:	f7ff fe07 	bl	8000d74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001166:	f009 f9b5 	bl	800a4d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <main+0xba>
 800116e:	bf00      	nop
 8001170:	58024400 	.word	0x58024400

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09c      	sub	sp, #112	@ 0x70
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117e:	224c      	movs	r2, #76	@ 0x4c
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00c f923 	bl	800d3ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2220      	movs	r2, #32
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f00c f91d 	bl	800d3ce <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001194:	2004      	movs	r0, #4
 8001196:	f003 ffd1 	bl	800513c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b32      	ldr	r3, [pc, #200]	@ (8001268 <SystemClock_Config+0xf4>)
 80011a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a2:	4a31      	ldr	r2, [pc, #196]	@ (8001268 <SystemClock_Config+0xf4>)
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001268 <SystemClock_Config+0xf4>)
 80011ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <SystemClock_Config+0xf8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011bc:	4a2b      	ldr	r2, [pc, #172]	@ (800126c <SystemClock_Config+0xf8>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b29      	ldr	r3, [pc, #164]	@ (800126c <SystemClock_Config+0xf8>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011d0:	bf00      	nop
 80011d2:	4b26      	ldr	r3, [pc, #152]	@ (800126c <SystemClock_Config+0xf8>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011de:	d1f8      	bne.n	80011d2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e0:	2302      	movs	r3, #2
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e8:	2340      	movs	r3, #64	@ 0x40
 80011ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ec:	2302      	movs	r3, #2
 80011ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f0:	2300      	movs	r3, #0
 80011f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011f4:	2304      	movs	r3, #4
 80011f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80011f8:	2309      	movs	r3, #9
 80011fa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001200:	2303      	movs	r3, #3
 8001202:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001204:	2302      	movs	r3, #2
 8001206:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001208:	230c      	movs	r3, #12
 800120a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800120c:	2302      	movs	r3, #2
 800120e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8001210:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001214:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121a:	4618      	mov	r0, r3
 800121c:	f003 ffe8 	bl	80051f0 <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001226:	f000 f823 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	233f      	movs	r3, #63	@ 0x3f
 800122c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800123e:	2340      	movs	r3, #64	@ 0x40
 8001240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fc28 	bl	8005aa4 <HAL_RCC_ClockConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800125a:	f000 f809 	bl	8001270 <Error_Handler>
  }
}
 800125e:	bf00      	nop
 8001260:	3770      	adds	r7, #112	@ 0x70
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	58000400 	.word	0x58000400
 800126c:	58024800 	.word	0x58024800

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <Error_Handler+0x8>

0800127c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001284:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <RetargetInit+0x28>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800128a:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <RetargetInit+0x2c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6898      	ldr	r0, [r3, #8]
 8001290:	2300      	movs	r3, #0
 8001292:	2202      	movs	r2, #2
 8001294:	2100      	movs	r1, #0
 8001296:	f00b ffa3 	bl	800d1e0 <setvbuf>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	24000304 	.word	0x24000304
 80012a8:	24000020 	.word	0x24000020

080012ac <_isatty>:

int _isatty(int fd) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db04      	blt.n	80012c4 <_isatty+0x18>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	dc01      	bgt.n	80012c4 <_isatty+0x18>
    return 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e005      	b.n	80012d0 <_isatty+0x24>

  errno = EBADF;
 80012c4:	f00c f8d2 	bl	800d46c <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2209      	movs	r2, #9
 80012cc:	601a      	str	r2, [r3, #0]
  return 0;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_write>:

int _write(int fd, char* ptr, int len) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d002      	beq.n	80012f0 <_write+0x18>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d111      	bne.n	8001314 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80012f0:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <_write+0x54>)
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	f007 feaf 	bl	8009060 <HAL_UART_Transmit>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <_write+0x38>
      return len;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	e008      	b.n	8001322 <_write+0x4a>
    else
      return EIO;
 8001310:	2305      	movs	r3, #5
 8001312:	e006      	b.n	8001322 <_write+0x4a>
  }
  errno = EBADF;
 8001314:	f00c f8aa 	bl	800d46c <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	2209      	movs	r2, #9
 800131c:	601a      	str	r2, [r3, #0]
  return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	24000304 	.word	0x24000304

08001330 <_close>:

int _close(int fd) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db04      	blt.n	8001348 <_close+0x18>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b02      	cmp	r3, #2
 8001342:	dc01      	bgt.n	8001348 <_close+0x18>
    return 0;
 8001344:	2300      	movs	r3, #0
 8001346:	e006      	b.n	8001356 <_close+0x26>

  errno = EBADF;
 8001348:	f00c f890 	bl	800d46c <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	2209      	movs	r2, #9
 8001350:	601a      	str	r2, [r3, #0]
  return -1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800135e:	b580      	push	{r7, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800136a:	f00c f87f 	bl	800d46c <__errno>
 800136e:	4603      	mov	r3, r0
 8001370:	2209      	movs	r2, #9
 8001372:	601a      	str	r2, [r3, #0]
  return -1;
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_read>:

int _read(int fd, char* ptr, int len) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d110      	bne.n	80013b4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <_read+0x4c>)
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	2201      	movs	r2, #1
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	f007 feed 	bl	800917c <HAL_UART_Receive>
 80013a2:	4603      	mov	r3, r0
 80013a4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <_read+0x30>
      return 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e008      	b.n	80013c2 <_read+0x42>
    else
      return EIO;
 80013b0:	2305      	movs	r3, #5
 80013b2:	e006      	b.n	80013c2 <_read+0x42>
  }
  errno = EBADF;
 80013b4:	f00c f85a 	bl	800d46c <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2209      	movs	r2, #9
 80013bc:	601a      	str	r2, [r3, #0]
  return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24000304 	.word	0x24000304

080013d0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db08      	blt.n	80013f2 <_fstat+0x22>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	dc05      	bgt.n	80013f2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ec:	605a      	str	r2, [r3, #4]
    return 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e005      	b.n	80013fe <_fstat+0x2e>
  }

  errno = EBADF;
 80013f2:	f00c f83b 	bl	800d46c <__errno>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2209      	movs	r2, #9
 80013fa:	601a      	str	r2, [r3, #0]
  return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <HAL_MspInit+0x38>)
 8001410:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001414:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <HAL_MspInit+0x38>)
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <HAL_MspInit+0x38>)
 8001420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	210f      	movs	r1, #15
 8001430:	f06f 0001 	mvn.w	r0, #1
 8001434:	f001 fb15 	bl	8002a62 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	58024400 	.word	0x58024400

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <NMI_Handler+0x4>

0800144c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <MemManage_Handler+0x4>

0800145c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <UsageFault_Handler+0x4>

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147e:	f000 fa19 	bl	80018b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001482:	f00b f947 	bl	800c714 <xTaskGetSchedulerState>
 8001486:	4603      	mov	r3, r0
 8001488:	2b01      	cmp	r3, #1
 800148a:	d001      	beq.n	8001490 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800148c:	f009 fd8c 	bl	800afa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <DMA1_Stream0_IRQHandler+0x10>)
 800149a:	f001 fe73 	bl	8003184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	240000f0 	.word	0x240000f0

080014a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a14      	ldr	r2, [pc, #80]	@ (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014bc:	4b13      	ldr	r3, [pc, #76]	@ (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d8:	f00b ffc8 	bl	800d46c <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	24080000 	.word	0x24080000
 8001508:	00000400 	.word	0x00000400
 800150c:	24000308 	.word	0x24000308
 8001510:	24004e90 	.word	0x24004e90

08001514 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_TIM7_Init+0x64>)
 8001526:	4a15      	ldr	r2, [pc, #84]	@ (800157c <MX_TIM7_Init+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <MX_TIM7_Init+0x64>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_TIM7_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <MX_TIM7_Init+0x64>)
 8001538:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800153c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_TIM7_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001544:	480c      	ldr	r0, [pc, #48]	@ (8001578 <MX_TIM7_Init+0x64>)
 8001546:	f007 fb37 	bl	8008bb8 <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001550:	f7ff fe8e 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_TIM7_Init+0x64>)
 8001562:	f007 fc9f 	bl	8008ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800156c:	f7ff fe80 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2400030c 	.word	0x2400030c
 800157c:	40001400 	.word	0x40001400

08001580 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0b      	ldr	r2, [pc, #44]	@ (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10e      	bne.n	80015b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 8001594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001598:	4a09      	ldr	r2, [pc, #36]	@ (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 800159a:	f043 0320 	orr.w	r3, r3, #32
 800159e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015a2:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 80015a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a8:	f003 0320 	and.w	r3, r3, #32
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40001400 	.word	0x40001400
 80015c0:	58024400 	.word	0x58024400

080015c4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015c8:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <MX_UART4_Init+0x90>)
 80015ca:	4a23      	ldr	r2, [pc, #140]	@ (8001658 <MX_UART4_Init+0x94>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015ce:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <MX_UART4_Init+0x90>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <MX_UART4_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <MX_UART4_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <MX_UART4_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_UART4_Init+0x90>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <MX_UART4_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <MX_UART4_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <MX_UART4_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001600:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <MX_UART4_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <MX_UART4_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800160c:	4811      	ldr	r0, [pc, #68]	@ (8001654 <MX_UART4_Init+0x90>)
 800160e:	f007 fcd7 	bl	8008fc0 <HAL_UART_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001618:	f7ff fe2a 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	480d      	ldr	r0, [pc, #52]	@ (8001654 <MX_UART4_Init+0x90>)
 8001620:	f008 fe35 	bl	800a28e <HAL_UARTEx_SetTxFifoThreshold>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800162a:	f7ff fe21 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4808      	ldr	r0, [pc, #32]	@ (8001654 <MX_UART4_Init+0x90>)
 8001632:	f008 fe6a 	bl	800a30a <HAL_UARTEx_SetRxFifoThreshold>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800163c:	f7ff fe18 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	@ (8001654 <MX_UART4_Init+0x90>)
 8001642:	f008 fdeb 	bl	800a21c <HAL_UARTEx_DisableFifoMode>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800164c:	f7ff fe10 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	24000358 	.word	0x24000358
 8001658:	40004c00 	.word	0x40004c00

0800165c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b0bc      	sub	sp, #240	@ 0xf0
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001674:	f107 0318 	add.w	r3, r7, #24
 8001678:	22c0      	movs	r2, #192	@ 0xc0
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f00b fea6 	bl	800d3ce <memset>
  if(uartHandle->Instance==UART4)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a39      	ldr	r2, [pc, #228]	@ (800176c <HAL_UART_MspInit+0x110>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d16a      	bne.n	8001762 <HAL_UART_MspInit+0x106>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800168c:	f04f 0202 	mov.w	r2, #2
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169e:	f107 0318 	add.w	r3, r7, #24
 80016a2:	4618      	mov	r0, r3
 80016a4:	f004 fd8a 	bl	80061bc <HAL_RCCEx_PeriphCLKConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016ae:	f7ff fddf 	bl	8001270 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <HAL_UART_MspInit+0x114>)
 80016b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001770 <HAL_UART_MspInit+0x114>)
 80016ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <HAL_UART_MspInit+0x114>)
 80016c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <HAL_UART_MspInit+0x114>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d6:	4a26      	ldr	r2, [pc, #152]	@ (8001770 <HAL_UART_MspInit+0x114>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e0:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <HAL_UART_MspInit+0x114>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HAL_UART_MspInit+0x114>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001770 <HAL_UART_MspInit+0x114>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <HAL_UART_MspInit+0x114>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800170c:	2301      	movs	r3, #1
 800170e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001724:	2308      	movs	r3, #8
 8001726:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800172e:	4619      	mov	r1, r3
 8001730:	4810      	ldr	r0, [pc, #64]	@ (8001774 <HAL_UART_MspInit+0x118>)
 8001732:	f003 f9f1 	bl	8004b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001736:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800173a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001750:	2308      	movs	r3, #8
 8001752:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001756:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800175a:	4619      	mov	r1, r3
 800175c:	4806      	ldr	r0, [pc, #24]	@ (8001778 <HAL_UART_MspInit+0x11c>)
 800175e:	f003 f9db 	bl	8004b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001762:	bf00      	nop
 8001764:	37f0      	adds	r7, #240	@ 0xf0
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40004c00 	.word	0x40004c00
 8001770:	58024400 	.word	0x58024400
 8001774:	58020000 	.word	0x58020000
 8001778:	58020800 	.word	0x58020800

0800177c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800177c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001780:	f7fe ff76 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001786:	490d      	ldr	r1, [pc, #52]	@ (80017bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001788:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800179c:	4c0a      	ldr	r4, [pc, #40]	@ (80017c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017aa:	f00b fe65 	bl	800d478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ae:	f7ff fc7f 	bl	80010b0 <main>
  bx  lr
 80017b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017bc:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80017c0:	0800e1b4 	.word	0x0800e1b4
  ldr r2, =_sbss
 80017c4:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80017c8:	24004e8c 	.word	0x24004e8c

080017cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC3_IRQHandler>
	...

080017d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d6:	2003      	movs	r0, #3
 80017d8:	f001 f938 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017dc:	f004 fb18 	bl	8005e10 <HAL_RCC_GetSysClockFreq>
 80017e0:	4602      	mov	r2, r0
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_Init+0x68>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	4913      	ldr	r1, [pc, #76]	@ (800183c <HAL_Init+0x6c>)
 80017ee:	5ccb      	ldrb	r3, [r1, r3]
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <HAL_Init+0x68>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	4a0e      	ldr	r2, [pc, #56]	@ (800183c <HAL_Init+0x6c>)
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <HAL_Init+0x70>)
 8001812:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001814:	4a0b      	ldr	r2, [pc, #44]	@ (8001844 <HAL_Init+0x74>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181a:	200f      	movs	r0, #15
 800181c:	f000 f814 	bl	8001848 <HAL_InitTick>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e002      	b.n	8001830 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800182a:	f7ff fded 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	58024400 	.word	0x58024400
 800183c:	0800e10c 	.word	0x0800e10c
 8001840:	24000004 	.word	0x24000004
 8001844:	24000000 	.word	0x24000000

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_InitTick+0x60>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e021      	b.n	80018a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <HAL_InitTick+0x64>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_InitTick+0x60>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f001 f91d 	bl	8002ab2 <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f001 f8e7 	bl	8002a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	@ (80018b0 <HAL_InitTick+0x68>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2400000c 	.word	0x2400000c
 80018ac:	24000000 	.word	0x24000000
 80018b0:	24000008 	.word	0x24000008

080018b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	2400000c 	.word	0x2400000c
 80018d8:	240003ec 	.word	0x240003ec

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	240003ec 	.word	0x240003ec

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffde 	bl	80018dc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2400000c 	.word	0x2400000c

0800193c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <HAL_GetREVID+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0c1b      	lsrs	r3, r3, #16
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	5c001000 	.word	0x5c001000

08001954 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	4904      	ldr	r1, [pc, #16]	@ (800197c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	58000400 	.word	0x58000400

08001980 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	609a      	str	r2, [r3, #8]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3360      	adds	r3, #96	@ 0x60
 80019fa:	461a      	mov	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	430b      	orrs	r3, r1
 8001a16:	431a      	orrs	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	611a      	str	r2, [r3, #16]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b087      	sub	sp, #28
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3360      	adds	r3, #96	@ 0x60
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]
  }
}
 8001a84:	bf00      	nop
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3330      	adds	r3, #48	@ 0x30
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	211f      	movs	r1, #31
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0e9b      	lsrs	r3, r3, #26
 8001ac8:	f003 011f 	and.w	r1, r3, #31
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001adc:	bf00      	nop
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3314      	adds	r3, #20
 8001af8:	461a      	mov	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	0e5b      	lsrs	r3, r3, #25
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	0d1b      	lsrs	r3, r3, #20
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	2107      	movs	r1, #7
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	0d1b      	lsrs	r3, r3, #20
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0318 	and.w	r3, r3, #24
 8001b62:	4908      	ldr	r1, [pc, #32]	@ (8001b84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b64:	40d9      	lsrs	r1, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	400b      	ands	r3, r1
 8001b6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	000fffff 	.word	0x000fffff

08001b88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6093      	str	r3, [r2, #8]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	5fffffc0 	.word	0x5fffffc0

08001bac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bc0:	d101      	bne.n	8001bc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	6fffffc0 	.word	0x6fffffc0

08001bfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c10:	d101      	bne.n	8001c16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <LL_ADC_IsEnabled+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_ADC_IsEnabled+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d101      	bne.n	8001c62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d101      	bne.n	8001c88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b089      	sub	sp, #36	@ 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e18f      	b.n	8001fd2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7fe fddb 	bl	800087c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff67 	bl	8001bac <LL_ADC_IsDeepPowerDownEnabled>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff4d 	bl	8001b88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff82 	bl	8001bfc <LL_ADC_IsInternalRegulatorEnabled>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d114      	bne.n	8001d28 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff66 	bl	8001bd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d08:	4b87      	ldr	r3, [pc, #540]	@ (8001f28 <HAL_ADC_Init+0x290>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	4a87      	ldr	r2, [pc, #540]	@ (8001f2c <HAL_ADC_Init+0x294>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	099b      	lsrs	r3, r3, #6
 8001d16:	3301      	adds	r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d1a:	e002      	b.n	8001d22 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f9      	bne.n	8001d1c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff65 	bl	8001bfc <LL_ADC_IsInternalRegulatorEnabled>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10d      	bne.n	8001d54 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3c:	f043 0210 	orr.w	r2, r3, #16
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d48:	f043 0201 	orr.w	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff76 	bl	8001c4a <LL_ADC_REG_IsConversionOngoing>
 8001d5e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f040 8129 	bne.w	8001fc0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 8125 	bne.w	8001fc0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d7e:	f043 0202 	orr.w	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff4a 	bl	8001c24 <LL_ADC_IsEnabled>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d136      	bne.n	8001e04 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a65      	ldr	r2, [pc, #404]	@ (8001f30 <HAL_ADC_Init+0x298>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d004      	beq.n	8001daa <HAL_ADC_Init+0x112>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a63      	ldr	r2, [pc, #396]	@ (8001f34 <HAL_ADC_Init+0x29c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10e      	bne.n	8001dc8 <HAL_ADC_Init+0x130>
 8001daa:	4861      	ldr	r0, [pc, #388]	@ (8001f30 <HAL_ADC_Init+0x298>)
 8001dac:	f7ff ff3a 	bl	8001c24 <LL_ADC_IsEnabled>
 8001db0:	4604      	mov	r4, r0
 8001db2:	4860      	ldr	r0, [pc, #384]	@ (8001f34 <HAL_ADC_Init+0x29c>)
 8001db4:	f7ff ff36 	bl	8001c24 <LL_ADC_IsEnabled>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4323      	orrs	r3, r4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	e008      	b.n	8001dda <HAL_ADC_Init+0x142>
 8001dc8:	485b      	ldr	r0, [pc, #364]	@ (8001f38 <HAL_ADC_Init+0x2a0>)
 8001dca:	f7ff ff2b 	bl	8001c24 <LL_ADC_IsEnabled>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d012      	beq.n	8001e04 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a53      	ldr	r2, [pc, #332]	@ (8001f30 <HAL_ADC_Init+0x298>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d004      	beq.n	8001df2 <HAL_ADC_Init+0x15a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a51      	ldr	r2, [pc, #324]	@ (8001f34 <HAL_ADC_Init+0x29c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Init+0x15e>
 8001df2:	4a52      	ldr	r2, [pc, #328]	@ (8001f3c <HAL_ADC_Init+0x2a4>)
 8001df4:	e000      	b.n	8001df8 <HAL_ADC_Init+0x160>
 8001df6:	4a52      	ldr	r2, [pc, #328]	@ (8001f40 <HAL_ADC_Init+0x2a8>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	f7ff fdbe 	bl	8001980 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e04:	f7ff fd9a 	bl	800193c <HAL_GetREVID>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d914      	bls.n	8001e3c <HAL_ADC_Init+0x1a4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d110      	bne.n	8001e3c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7d5b      	ldrb	r3, [r3, #21]
 8001e1e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e24:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e2a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7f1b      	ldrb	r3, [r3, #28]
 8001e30:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e32:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e34:	f043 030c 	orr.w	r3, r3, #12
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	e00d      	b.n	8001e58 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7d5b      	ldrb	r3, [r3, #21]
 8001e40:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e46:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e4c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7f1b      	ldrb	r3, [r3, #28]
 8001e52:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7f1b      	ldrb	r3, [r3, #28]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	045b      	lsls	r3, r3, #17
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e82:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4b2c      	ldr	r3, [pc, #176]	@ (8001f44 <HAL_ADC_Init+0x2ac>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	69b9      	ldr	r1, [r7, #24]
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fed1 	bl	8001c4a <LL_ADC_REG_IsConversionOngoing>
 8001ea8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fede 	bl	8001c70 <LL_ADC_INJ_IsConversionOngoing>
 8001eb4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d15f      	bne.n	8001f7c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d15c      	bne.n	8001f7c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7d1b      	ldrb	r3, [r3, #20]
 8001ec6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <HAL_ADC_Init+0x2b0>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	69b9      	ldr	r1, [r7, #24]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d130      	bne.n	8001f50 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <HAL_ADC_Init+0x2b4>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f02:	3a01      	subs	r2, #1
 8001f04:	0411      	lsls	r1, r2, #16
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f0a:	4311      	orrs	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f10:	4311      	orrs	r1, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f16:	430a      	orrs	r2, r1
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	611a      	str	r2, [r3, #16]
 8001f24:	e01c      	b.n	8001f60 <HAL_ADC_Init+0x2c8>
 8001f26:	bf00      	nop
 8001f28:	24000000 	.word	0x24000000
 8001f2c:	053e2d63 	.word	0x053e2d63
 8001f30:	40022000 	.word	0x40022000
 8001f34:	40022100 	.word	0x40022100
 8001f38:	58026000 	.word	0x58026000
 8001f3c:	40022300 	.word	0x40022300
 8001f40:	58026300 	.word	0x58026300
 8001f44:	fff0c003 	.word	0xfff0c003
 8001f48:	ffffbffc 	.word	0xffffbffc
 8001f4c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fb8c 	bl	8002694 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10c      	bne.n	8001f9e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f023 010f 	bic.w	r1, r3, #15
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	1e5a      	subs	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f9c:	e007      	b.n	8001fae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 020f 	bic.w	r2, r2, #15
 8001fac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb2:	f023 0303 	bic.w	r3, r3, #3
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fbe:	e007      	b.n	8001fd0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc4:	f043 0210 	orr.w	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	@ 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}
 8001fda:	bf00      	nop

08001fdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b0a1      	sub	sp, #132	@ 0x84
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a65      	ldr	r2, [pc, #404]	@ (800218c <HAL_ADC_ConfigChannel+0x1b0>)
 8001ff6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x2a>
 8002002:	2302      	movs	r3, #2
 8002004:	e32e      	b.n	8002664 <HAL_ADC_ConfigChannel+0x688>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fe19 	bl	8001c4a <LL_ADC_REG_IsConversionOngoing>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 8313 	bne.w	8002646 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db2c      	blt.n	8002082 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002030:	2b00      	cmp	r3, #0
 8002032:	d108      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x6a>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	2201      	movs	r2, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	e016      	b.n	8002074 <HAL_ADC_ConfigChannel+0x98>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002054:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002056:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002058:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800205e:	2320      	movs	r3, #32
 8002060:	e003      	b.n	800206a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002062:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	2201      	movs	r2, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	69d1      	ldr	r1, [r2, #28]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	430b      	orrs	r3, r1
 8002080:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6859      	ldr	r1, [r3, #4]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	f7ff fcfe 	bl	8001a90 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fdd6 	bl	8001c4a <LL_ADC_REG_IsConversionOngoing>
 800209e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fde3 	bl	8001c70 <LL_ADC_INJ_IsConversionOngoing>
 80020aa:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 80b8 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 80b4 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6819      	ldr	r1, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	461a      	mov	r2, r3
 80020ca:	f7ff fd0d 	bl	8001ae8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020ce:	4b30      	ldr	r3, [pc, #192]	@ (8002190 <HAL_ADC_ConfigChannel+0x1b4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80020d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020da:	d10b      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x118>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	e01d      	b.n	8002130 <HAL_ADC_ConfigChannel+0x154>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10b      	bne.n	800211a <HAL_ADC_ConfigChannel+0x13e>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	e00a      	b.n	8002130 <HAL_ADC_ConfigChannel+0x154>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b04      	cmp	r3, #4
 8002138:	d02c      	beq.n	8002194 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6919      	ldr	r1, [r3, #16]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002148:	f7ff fc4e 	bl	80019e8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6919      	ldr	r1, [r3, #16]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	7e5b      	ldrb	r3, [r3, #25]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d102      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x186>
 800215c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002160:	e000      	b.n	8002164 <HAL_ADC_ConfigChannel+0x188>
 8002162:	2300      	movs	r3, #0
 8002164:	461a      	mov	r2, r3
 8002166:	f7ff fc78 	bl	8001a5a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6919      	ldr	r1, [r3, #16]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	7e1b      	ldrb	r3, [r3, #24]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x1a4>
 800217a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800217e:	e000      	b.n	8002182 <HAL_ADC_ConfigChannel+0x1a6>
 8002180:	2300      	movs	r3, #0
 8002182:	461a      	mov	r2, r3
 8002184:	f7ff fc50 	bl	8001a28 <LL_ADC_SetDataRightShift>
 8002188:	e04c      	b.n	8002224 <HAL_ADC_ConfigChannel+0x248>
 800218a:	bf00      	nop
 800218c:	47ff0000 	.word	0x47ff0000
 8002190:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	069b      	lsls	r3, r3, #26
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d107      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021b6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	069b      	lsls	r3, r3, #26
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d107      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021da:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	069b      	lsls	r3, r3, #26
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d107      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021fe:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	069b      	lsls	r3, r3, #26
 8002210:	429a      	cmp	r2, r3
 8002212:	d107      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002222:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fcfb 	bl	8001c24 <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	f040 8211 	bne.w	8002658 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6819      	ldr	r1, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	461a      	mov	r2, r3
 8002244:	f7ff fc7c 	bl	8001b40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4aa1      	ldr	r2, [pc, #644]	@ (80024d4 <HAL_ADC_ConfigChannel+0x4f8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	f040 812e 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <HAL_ADC_ConfigChannel+0x2a0>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	3301      	adds	r3, #1
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	2b09      	cmp	r3, #9
 8002272:	bf94      	ite	ls
 8002274:	2301      	movls	r3, #1
 8002276:	2300      	movhi	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e019      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x2d4>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800228a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800228e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e003      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	2b09      	cmp	r3, #9
 80022a8:	bf94      	ite	ls
 80022aa:	2301      	movls	r3, #1
 80022ac:	2300      	movhi	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d079      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x2f4>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0e9b      	lsrs	r3, r3, #26
 80022c6:	3301      	adds	r3, #1
 80022c8:	069b      	lsls	r3, r3, #26
 80022ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022ce:	e015      	b.n	80022fc <HAL_ADC_ConfigChannel+0x320>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80022de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80022e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80022e8:	2320      	movs	r3, #32
 80022ea:	e003      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80022ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	069b      	lsls	r3, r3, #26
 80022f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ADC_ConfigChannel+0x340>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	3301      	adds	r3, #1
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	e017      	b.n	800234c <HAL_ADC_ConfigChannel+0x370>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800232a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800232c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800232e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002334:	2320      	movs	r3, #32
 8002336:	e003      	b.n	8002340 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3301      	adds	r3, #1
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	ea42 0103 	orr.w	r1, r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x396>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	3301      	adds	r3, #1
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	051b      	lsls	r3, r3, #20
 8002370:	e018      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x3c8>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002382:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e003      	b.n	8002396 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800238e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a4:	430b      	orrs	r3, r1
 80023a6:	e07e      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x3e8>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e9b      	lsrs	r3, r3, #26
 80023ba:	3301      	adds	r3, #1
 80023bc:	069b      	lsls	r3, r3, #26
 80023be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023c2:	e015      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x414>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80023d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e003      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80023e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	069b      	lsls	r3, r3, #26
 80023ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x434>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0e9b      	lsrs	r3, r3, #26
 8002402:	3301      	adds	r3, #1
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	e017      	b.n	8002440 <HAL_ADC_ConfigChannel+0x464>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	61bb      	str	r3, [r7, #24]
  return result;
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002428:	2320      	movs	r3, #32
 800242a:	e003      	b.n	8002434 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	3301      	adds	r3, #1
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	ea42 0103 	orr.w	r1, r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10d      	bne.n	800246c <HAL_ADC_ConfigChannel+0x490>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	3b1e      	subs	r3, #30
 8002464:	051b      	lsls	r3, r3, #20
 8002466:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800246a:	e01b      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x4c8>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	60fb      	str	r3, [r7, #12]
  return result;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e003      	b.n	8002490 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	3b1e      	subs	r3, #30
 800249e:	051b      	lsls	r3, r3, #20
 80024a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a4:	430b      	orrs	r3, r1
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	6892      	ldr	r2, [r2, #8]
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7ff fb1c 	bl	8001ae8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f280 80cf 	bge.w	8002658 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a06      	ldr	r2, [pc, #24]	@ (80024d8 <HAL_ADC_ConfigChannel+0x4fc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_ADC_ConfigChannel+0x4f2>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <HAL_ADC_ConfigChannel+0x500>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10a      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x508>
 80024ce:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <HAL_ADC_ConfigChannel+0x504>)
 80024d0:	e009      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x50a>
 80024d2:	bf00      	nop
 80024d4:	47ff0000 	.word	0x47ff0000
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40022100 	.word	0x40022100
 80024e0:	40022300 	.word	0x40022300
 80024e4:	4b61      	ldr	r3, [pc, #388]	@ (800266c <HAL_ADC_ConfigChannel+0x690>)
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fa70 	bl	80019cc <LL_ADC_GetCommonPathInternalCh>
 80024ec:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002670 <HAL_ADC_ConfigChannel+0x694>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_ADC_ConfigChannel+0x526>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002674 <HAL_ADC_ConfigChannel+0x698>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10e      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x544>
 8002502:	485b      	ldr	r0, [pc, #364]	@ (8002670 <HAL_ADC_ConfigChannel+0x694>)
 8002504:	f7ff fb8e 	bl	8001c24 <LL_ADC_IsEnabled>
 8002508:	4604      	mov	r4, r0
 800250a:	485a      	ldr	r0, [pc, #360]	@ (8002674 <HAL_ADC_ConfigChannel+0x698>)
 800250c:	f7ff fb8a 	bl	8001c24 <LL_ADC_IsEnabled>
 8002510:	4603      	mov	r3, r0
 8002512:	4323      	orrs	r3, r4
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf0c      	ite	eq
 8002518:	2301      	moveq	r3, #1
 800251a:	2300      	movne	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	e008      	b.n	8002532 <HAL_ADC_ConfigChannel+0x556>
 8002520:	4855      	ldr	r0, [pc, #340]	@ (8002678 <HAL_ADC_ConfigChannel+0x69c>)
 8002522:	f7ff fb7f 	bl	8001c24 <LL_ADC_IsEnabled>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d07d      	beq.n	8002632 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a50      	ldr	r2, [pc, #320]	@ (800267c <HAL_ADC_ConfigChannel+0x6a0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d130      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x5c6>
 8002540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d12b      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a4a      	ldr	r2, [pc, #296]	@ (8002678 <HAL_ADC_ConfigChannel+0x69c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	f040 8081 	bne.w	8002658 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a45      	ldr	r2, [pc, #276]	@ (8002670 <HAL_ADC_ConfigChannel+0x694>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <HAL_ADC_ConfigChannel+0x58e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a43      	ldr	r2, [pc, #268]	@ (8002674 <HAL_ADC_ConfigChannel+0x698>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x592>
 800256a:	4a45      	ldr	r2, [pc, #276]	@ (8002680 <HAL_ADC_ConfigChannel+0x6a4>)
 800256c:	e000      	b.n	8002570 <HAL_ADC_ConfigChannel+0x594>
 800256e:	4a3f      	ldr	r2, [pc, #252]	@ (800266c <HAL_ADC_ConfigChannel+0x690>)
 8002570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002572:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002576:	4619      	mov	r1, r3
 8002578:	4610      	mov	r0, r2
 800257a:	f7ff fa14 	bl	80019a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800257e:	4b41      	ldr	r3, [pc, #260]	@ (8002684 <HAL_ADC_ConfigChannel+0x6a8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	099b      	lsrs	r3, r3, #6
 8002584:	4a40      	ldr	r2, [pc, #256]	@ (8002688 <HAL_ADC_ConfigChannel+0x6ac>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	3301      	adds	r3, #1
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002592:	e002      	b.n	800259a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	3b01      	subs	r3, #1
 8002598:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025a0:	e05a      	b.n	8002658 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a39      	ldr	r2, [pc, #228]	@ (800268c <HAL_ADC_ConfigChannel+0x6b0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d11e      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x60e>
 80025ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d119      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002678 <HAL_ADC_ConfigChannel+0x69c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d14b      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002670 <HAL_ADC_ConfigChannel+0x694>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0x5f8>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a29      	ldr	r2, [pc, #164]	@ (8002674 <HAL_ADC_ConfigChannel+0x698>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x5fc>
 80025d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002680 <HAL_ADC_ConfigChannel+0x6a4>)
 80025d6:	e000      	b.n	80025da <HAL_ADC_ConfigChannel+0x5fe>
 80025d8:	4a24      	ldr	r2, [pc, #144]	@ (800266c <HAL_ADC_ConfigChannel+0x690>)
 80025da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f7ff f9df 	bl	80019a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025e8:	e036      	b.n	8002658 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a28      	ldr	r2, [pc, #160]	@ (8002690 <HAL_ADC_ConfigChannel+0x6b4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d131      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x67c>
 80025f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d12c      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a1d      	ldr	r2, [pc, #116]	@ (8002678 <HAL_ADC_ConfigChannel+0x69c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d127      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a18      	ldr	r2, [pc, #96]	@ (8002670 <HAL_ADC_ConfigChannel+0x694>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_ADC_ConfigChannel+0x640>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a17      	ldr	r2, [pc, #92]	@ (8002674 <HAL_ADC_ConfigChannel+0x698>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x644>
 800261c:	4a18      	ldr	r2, [pc, #96]	@ (8002680 <HAL_ADC_ConfigChannel+0x6a4>)
 800261e:	e000      	b.n	8002622 <HAL_ADC_ConfigChannel+0x646>
 8002620:	4a12      	ldr	r2, [pc, #72]	@ (800266c <HAL_ADC_ConfigChannel+0x690>)
 8002622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002624:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f7ff f9bb 	bl	80019a6 <LL_ADC_SetCommonPathInternalCh>
 8002630:	e012      	b.n	8002658 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002636:	f043 0220 	orr.w	r2, r3, #32
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002644:	e008      	b.n	8002658 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264a:	f043 0220 	orr.w	r2, r3, #32
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002660:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002664:	4618      	mov	r0, r3
 8002666:	3784      	adds	r7, #132	@ 0x84
 8002668:	46bd      	mov	sp, r7
 800266a:	bd90      	pop	{r4, r7, pc}
 800266c:	58026300 	.word	0x58026300
 8002670:	40022000 	.word	0x40022000
 8002674:	40022100 	.word	0x40022100
 8002678:	58026000 	.word	0x58026000
 800267c:	cb840000 	.word	0xcb840000
 8002680:	40022300 	.word	0x40022300
 8002684:	24000000 	.word	0x24000000
 8002688:	053e2d63 	.word	0x053e2d63
 800268c:	c7520000 	.word	0xc7520000
 8002690:	cfb80000 	.word	0xcfb80000

08002694 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7a      	ldr	r2, [pc, #488]	@ (800288c <ADC_ConfigureBoostMode+0x1f8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d004      	beq.n	80026b0 <ADC_ConfigureBoostMode+0x1c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a79      	ldr	r2, [pc, #484]	@ (8002890 <ADC_ConfigureBoostMode+0x1fc>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d109      	bne.n	80026c4 <ADC_ConfigureBoostMode+0x30>
 80026b0:	4b78      	ldr	r3, [pc, #480]	@ (8002894 <ADC_ConfigureBoostMode+0x200>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf14      	ite	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	2300      	moveq	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e008      	b.n	80026d6 <ADC_ConfigureBoostMode+0x42>
 80026c4:	4b74      	ldr	r3, [pc, #464]	@ (8002898 <ADC_ConfigureBoostMode+0x204>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf14      	ite	ne
 80026d0:	2301      	movne	r3, #1
 80026d2:	2300      	moveq	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d01c      	beq.n	8002714 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026da:	f003 fd13 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 80026de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026e8:	d010      	beq.n	800270c <ADC_ConfigureBoostMode+0x78>
 80026ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026ee:	d873      	bhi.n	80027d8 <ADC_ConfigureBoostMode+0x144>
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f4:	d002      	beq.n	80026fc <ADC_ConfigureBoostMode+0x68>
 80026f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026fa:	d16d      	bne.n	80027d8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	60fb      	str	r3, [r7, #12]
        break;
 800270a:	e068      	b.n	80027de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	60fb      	str	r3, [r7, #12]
        break;
 8002712:	e064      	b.n	80027de <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002714:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002718:	f04f 0100 	mov.w	r1, #0
 800271c:	f004 ff58 	bl	80075d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002720:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800272a:	d051      	beq.n	80027d0 <ADC_ConfigureBoostMode+0x13c>
 800272c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002730:	d854      	bhi.n	80027dc <ADC_ConfigureBoostMode+0x148>
 8002732:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002736:	d047      	beq.n	80027c8 <ADC_ConfigureBoostMode+0x134>
 8002738:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800273c:	d84e      	bhi.n	80027dc <ADC_ConfigureBoostMode+0x148>
 800273e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002742:	d03d      	beq.n	80027c0 <ADC_ConfigureBoostMode+0x12c>
 8002744:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002748:	d848      	bhi.n	80027dc <ADC_ConfigureBoostMode+0x148>
 800274a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800274e:	d033      	beq.n	80027b8 <ADC_ConfigureBoostMode+0x124>
 8002750:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002754:	d842      	bhi.n	80027dc <ADC_ConfigureBoostMode+0x148>
 8002756:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800275a:	d029      	beq.n	80027b0 <ADC_ConfigureBoostMode+0x11c>
 800275c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002760:	d83c      	bhi.n	80027dc <ADC_ConfigureBoostMode+0x148>
 8002762:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002766:	d01a      	beq.n	800279e <ADC_ConfigureBoostMode+0x10a>
 8002768:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800276c:	d836      	bhi.n	80027dc <ADC_ConfigureBoostMode+0x148>
 800276e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002772:	d014      	beq.n	800279e <ADC_ConfigureBoostMode+0x10a>
 8002774:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002778:	d830      	bhi.n	80027dc <ADC_ConfigureBoostMode+0x148>
 800277a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800277e:	d00e      	beq.n	800279e <ADC_ConfigureBoostMode+0x10a>
 8002780:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002784:	d82a      	bhi.n	80027dc <ADC_ConfigureBoostMode+0x148>
 8002786:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800278a:	d008      	beq.n	800279e <ADC_ConfigureBoostMode+0x10a>
 800278c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002790:	d824      	bhi.n	80027dc <ADC_ConfigureBoostMode+0x148>
 8002792:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002796:	d002      	beq.n	800279e <ADC_ConfigureBoostMode+0x10a>
 8002798:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800279c:	d11e      	bne.n	80027dc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	0c9b      	lsrs	r3, r3, #18
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	60fb      	str	r3, [r7, #12]
        break;
 80027ae:	e016      	b.n	80027de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	60fb      	str	r3, [r7, #12]
        break;
 80027b6:	e012      	b.n	80027de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	60fb      	str	r3, [r7, #12]
        break;
 80027be:	e00e      	b.n	80027de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	099b      	lsrs	r3, r3, #6
 80027c4:	60fb      	str	r3, [r7, #12]
        break;
 80027c6:	e00a      	b.n	80027de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	09db      	lsrs	r3, r3, #7
 80027cc:	60fb      	str	r3, [r7, #12]
        break;
 80027ce:	e006      	b.n	80027de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	60fb      	str	r3, [r7, #12]
        break;
 80027d6:	e002      	b.n	80027de <ADC_ConfigureBoostMode+0x14a>
        break;
 80027d8:	bf00      	nop
 80027da:	e000      	b.n	80027de <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80027dc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027de:	f7ff f8ad 	bl	800193c <HAL_GetREVID>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d815      	bhi.n	8002818 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a2b      	ldr	r2, [pc, #172]	@ (800289c <ADC_ConfigureBoostMode+0x208>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d908      	bls.n	8002806 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002802:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002804:	e03e      	b.n	8002884 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002814:	609a      	str	r2, [r3, #8]
}
 8002816:	e035      	b.n	8002884 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	085b      	lsrs	r3, r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a1f      	ldr	r2, [pc, #124]	@ (80028a0 <ADC_ConfigureBoostMode+0x20c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d808      	bhi.n	8002838 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002834:	609a      	str	r2, [r3, #8]
}
 8002836:	e025      	b.n	8002884 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a1a      	ldr	r2, [pc, #104]	@ (80028a4 <ADC_ConfigureBoostMode+0x210>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d80a      	bhi.n	8002856 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002852:	609a      	str	r2, [r3, #8]
}
 8002854:	e016      	b.n	8002884 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4a13      	ldr	r2, [pc, #76]	@ (80028a8 <ADC_ConfigureBoostMode+0x214>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d80a      	bhi.n	8002874 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002870:	609a      	str	r2, [r3, #8]
}
 8002872:	e007      	b.n	8002884 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40022000 	.word	0x40022000
 8002890:	40022100 	.word	0x40022100
 8002894:	40022300 	.word	0x40022300
 8002898:	58026300 	.word	0x58026300
 800289c:	01312d00 	.word	0x01312d00
 80028a0:	005f5e10 	.word	0x005f5e10
 80028a4:	00bebc20 	.word	0x00bebc20
 80028a8:	017d7840 	.word	0x017d7840

080028ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028bc:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <__NVIC_SetPriorityGrouping+0x40>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028d4:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028da:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <__NVIC_SetPriorityGrouping+0x40>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60d3      	str	r3, [r2, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00
 80028f0:	05fa0000 	.word	0x05fa0000

080028f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f8:	4b04      	ldr	r3, [pc, #16]	@ (800290c <__NVIC_GetPriorityGrouping+0x18>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 0307 	and.w	r3, r3, #7
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db0b      	blt.n	800293a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	4907      	ldr	r1, [pc, #28]	@ (8002948 <__NVIC_EnableIRQ+0x38>)
 800292a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000e100 	.word	0xe000e100

0800294c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800295c:	2b00      	cmp	r3, #0
 800295e:	db0a      	blt.n	8002976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	490c      	ldr	r1, [pc, #48]	@ (8002998 <__NVIC_SetPriority+0x4c>)
 8002966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002974:	e00a      	b.n	800298c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4908      	ldr	r1, [pc, #32]	@ (800299c <__NVIC_SetPriority+0x50>)
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3b04      	subs	r3, #4
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	440b      	add	r3, r1
 800298a:	761a      	strb	r2, [r3, #24]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f1c3 0307 	rsb	r3, r3, #7
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	bf28      	it	cs
 80029be:	2304      	movcs	r3, #4
 80029c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d902      	bls.n	80029d0 <NVIC_EncodePriority+0x30>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	e000      	b.n	80029d2 <NVIC_EncodePriority+0x32>
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	401a      	ands	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	4313      	orrs	r3, r2
         );
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	@ 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a18:	d301      	bcc.n	8002a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00f      	b.n	8002a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a48 <SysTick_Config+0x40>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a26:	210f      	movs	r1, #15
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f7ff ff8e 	bl	800294c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <SysTick_Config+0x40>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <SysTick_Config+0x40>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff29 	bl	80028ac <__NVIC_SetPriorityGrouping>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a70:	f7ff ff40 	bl	80028f4 <__NVIC_GetPriorityGrouping>
 8002a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f7ff ff90 	bl	80029a0 <NVIC_EncodePriority>
 8002a80:	4602      	mov	r2, r0
 8002a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff5f 	bl	800294c <__NVIC_SetPriority>
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff33 	bl	8002910 <__NVIC_EnableIRQ>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ffa4 	bl	8002a08 <SysTick_Config>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7fe ff02 	bl	80018dc <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e316      	b.n	8003112 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a66      	ldr	r2, [pc, #408]	@ (8002c84 <HAL_DMA_Init+0x1b8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d04a      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a65      	ldr	r2, [pc, #404]	@ (8002c88 <HAL_DMA_Init+0x1bc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d045      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a63      	ldr	r2, [pc, #396]	@ (8002c8c <HAL_DMA_Init+0x1c0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d040      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a62      	ldr	r2, [pc, #392]	@ (8002c90 <HAL_DMA_Init+0x1c4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d03b      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a60      	ldr	r2, [pc, #384]	@ (8002c94 <HAL_DMA_Init+0x1c8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d036      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a5f      	ldr	r2, [pc, #380]	@ (8002c98 <HAL_DMA_Init+0x1cc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d031      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a5d      	ldr	r2, [pc, #372]	@ (8002c9c <HAL_DMA_Init+0x1d0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02c      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ca0 <HAL_DMA_Init+0x1d4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d027      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca4 <HAL_DMA_Init+0x1d8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d022      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a59      	ldr	r2, [pc, #356]	@ (8002ca8 <HAL_DMA_Init+0x1dc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d01d      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a57      	ldr	r2, [pc, #348]	@ (8002cac <HAL_DMA_Init+0x1e0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d018      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a56      	ldr	r2, [pc, #344]	@ (8002cb0 <HAL_DMA_Init+0x1e4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a54      	ldr	r2, [pc, #336]	@ (8002cb4 <HAL_DMA_Init+0x1e8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00e      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a53      	ldr	r2, [pc, #332]	@ (8002cb8 <HAL_DMA_Init+0x1ec>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d009      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a51      	ldr	r2, [pc, #324]	@ (8002cbc <HAL_DMA_Init+0x1f0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_DMA_Init+0xb8>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a50      	ldr	r2, [pc, #320]	@ (8002cc0 <HAL_DMA_Init+0x1f4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_DMA_Init+0xbc>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_DMA_Init+0xbe>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 813b 	beq.w	8002e06 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a37      	ldr	r2, [pc, #220]	@ (8002c84 <HAL_DMA_Init+0x1b8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d04a      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a36      	ldr	r2, [pc, #216]	@ (8002c88 <HAL_DMA_Init+0x1bc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d045      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a34      	ldr	r2, [pc, #208]	@ (8002c8c <HAL_DMA_Init+0x1c0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d040      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a33      	ldr	r2, [pc, #204]	@ (8002c90 <HAL_DMA_Init+0x1c4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d03b      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a31      	ldr	r2, [pc, #196]	@ (8002c94 <HAL_DMA_Init+0x1c8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d036      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a30      	ldr	r2, [pc, #192]	@ (8002c98 <HAL_DMA_Init+0x1cc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d031      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c9c <HAL_DMA_Init+0x1d0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02c      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca0 <HAL_DMA_Init+0x1d4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d027      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca4 <HAL_DMA_Init+0x1d8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d022      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca8 <HAL_DMA_Init+0x1dc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d01d      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a28      	ldr	r2, [pc, #160]	@ (8002cac <HAL_DMA_Init+0x1e0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d018      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <HAL_DMA_Init+0x1e4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a25      	ldr	r2, [pc, #148]	@ (8002cb4 <HAL_DMA_Init+0x1e8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00e      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a24      	ldr	r2, [pc, #144]	@ (8002cb8 <HAL_DMA_Init+0x1ec>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d009      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a22      	ldr	r2, [pc, #136]	@ (8002cbc <HAL_DMA_Init+0x1f0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_DMA_Init+0x174>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a21      	ldr	r2, [pc, #132]	@ (8002cc0 <HAL_DMA_Init+0x1f4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d108      	bne.n	8002c52 <HAL_DMA_Init+0x186>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e007      	b.n	8002c62 <HAL_DMA_Init+0x196>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c62:	e02f      	b.n	8002cc4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c64:	f7fe fe3a 	bl	80018dc <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d928      	bls.n	8002cc4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e246      	b.n	8003112 <HAL_DMA_Init+0x646>
 8002c84:	40020010 	.word	0x40020010
 8002c88:	40020028 	.word	0x40020028
 8002c8c:	40020040 	.word	0x40020040
 8002c90:	40020058 	.word	0x40020058
 8002c94:	40020070 	.word	0x40020070
 8002c98:	40020088 	.word	0x40020088
 8002c9c:	400200a0 	.word	0x400200a0
 8002ca0:	400200b8 	.word	0x400200b8
 8002ca4:	40020410 	.word	0x40020410
 8002ca8:	40020428 	.word	0x40020428
 8002cac:	40020440 	.word	0x40020440
 8002cb0:	40020458 	.word	0x40020458
 8002cb4:	40020470 	.word	0x40020470
 8002cb8:	40020488 	.word	0x40020488
 8002cbc:	400204a0 	.word	0x400204a0
 8002cc0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1c8      	bne.n	8002c64 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4b83      	ldr	r3, [pc, #524]	@ (8002eec <HAL_DMA_Init+0x420>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002cea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d02:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d107      	bne.n	8002d28 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d20:	4313      	orrs	r3, r2
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002d28:	4b71      	ldr	r3, [pc, #452]	@ (8002ef0 <HAL_DMA_Init+0x424>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b71      	ldr	r3, [pc, #452]	@ (8002ef4 <HAL_DMA_Init+0x428>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d34:	d328      	bcc.n	8002d88 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b28      	cmp	r3, #40	@ 0x28
 8002d3c:	d903      	bls.n	8002d46 <HAL_DMA_Init+0x27a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d44:	d917      	bls.n	8002d76 <HAL_DMA_Init+0x2aa>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d4c:	d903      	bls.n	8002d56 <HAL_DMA_Init+0x28a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b42      	cmp	r3, #66	@ 0x42
 8002d54:	d90f      	bls.n	8002d76 <HAL_DMA_Init+0x2aa>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b46      	cmp	r3, #70	@ 0x46
 8002d5c:	d903      	bls.n	8002d66 <HAL_DMA_Init+0x29a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b48      	cmp	r3, #72	@ 0x48
 8002d64:	d907      	bls.n	8002d76 <HAL_DMA_Init+0x2aa>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b4e      	cmp	r3, #78	@ 0x4e
 8002d6c:	d905      	bls.n	8002d7a <HAL_DMA_Init+0x2ae>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b52      	cmp	r3, #82	@ 0x52
 8002d74:	d801      	bhi.n	8002d7a <HAL_DMA_Init+0x2ae>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_DMA_Init+0x2b0>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d86:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f023 0307 	bic.w	r3, r3, #7
 8002d9e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d117      	bne.n	8002de2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00e      	beq.n	8002de2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f001 f9b9 	bl	800413c <DMA_CheckFifoParam>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2240      	movs	r2, #64	@ 0x40
 8002dd4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e197      	b.n	8003112 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f001 f8f4 	bl	8003fd8 <DMA_CalcBaseAndBitshift>
 8002df0:	4603      	mov	r3, r0
 8002df2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	223f      	movs	r2, #63	@ 0x3f
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	e0cd      	b.n	8002fa2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef8 <HAL_DMA_Init+0x42c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d022      	beq.n	8002e56 <HAL_DMA_Init+0x38a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a39      	ldr	r2, [pc, #228]	@ (8002efc <HAL_DMA_Init+0x430>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01d      	beq.n	8002e56 <HAL_DMA_Init+0x38a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a38      	ldr	r2, [pc, #224]	@ (8002f00 <HAL_DMA_Init+0x434>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d018      	beq.n	8002e56 <HAL_DMA_Init+0x38a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a36      	ldr	r2, [pc, #216]	@ (8002f04 <HAL_DMA_Init+0x438>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_DMA_Init+0x38a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a35      	ldr	r2, [pc, #212]	@ (8002f08 <HAL_DMA_Init+0x43c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00e      	beq.n	8002e56 <HAL_DMA_Init+0x38a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a33      	ldr	r2, [pc, #204]	@ (8002f0c <HAL_DMA_Init+0x440>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d009      	beq.n	8002e56 <HAL_DMA_Init+0x38a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a32      	ldr	r2, [pc, #200]	@ (8002f10 <HAL_DMA_Init+0x444>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d004      	beq.n	8002e56 <HAL_DMA_Init+0x38a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a30      	ldr	r2, [pc, #192]	@ (8002f14 <HAL_DMA_Init+0x448>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_DMA_Init+0x38e>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_DMA_Init+0x390>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8097 	beq.w	8002f90 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a24      	ldr	r2, [pc, #144]	@ (8002ef8 <HAL_DMA_Init+0x42c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d021      	beq.n	8002eb0 <HAL_DMA_Init+0x3e4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a22      	ldr	r2, [pc, #136]	@ (8002efc <HAL_DMA_Init+0x430>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d01c      	beq.n	8002eb0 <HAL_DMA_Init+0x3e4>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a21      	ldr	r2, [pc, #132]	@ (8002f00 <HAL_DMA_Init+0x434>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d017      	beq.n	8002eb0 <HAL_DMA_Init+0x3e4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1f      	ldr	r2, [pc, #124]	@ (8002f04 <HAL_DMA_Init+0x438>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d012      	beq.n	8002eb0 <HAL_DMA_Init+0x3e4>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f08 <HAL_DMA_Init+0x43c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00d      	beq.n	8002eb0 <HAL_DMA_Init+0x3e4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1c      	ldr	r2, [pc, #112]	@ (8002f0c <HAL_DMA_Init+0x440>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d008      	beq.n	8002eb0 <HAL_DMA_Init+0x3e4>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f10 <HAL_DMA_Init+0x444>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <HAL_DMA_Init+0x3e4>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a19      	ldr	r2, [pc, #100]	@ (8002f14 <HAL_DMA_Init+0x448>)
 8002eae:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4b13      	ldr	r3, [pc, #76]	@ (8002f18 <HAL_DMA_Init+0x44c>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b40      	cmp	r3, #64	@ 0x40
 8002ed6:	d021      	beq.n	8002f1c <HAL_DMA_Init+0x450>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b80      	cmp	r3, #128	@ 0x80
 8002ede:	d102      	bne.n	8002ee6 <HAL_DMA_Init+0x41a>
 8002ee0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ee4:	e01b      	b.n	8002f1e <HAL_DMA_Init+0x452>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e019      	b.n	8002f1e <HAL_DMA_Init+0x452>
 8002eea:	bf00      	nop
 8002eec:	fe10803f 	.word	0xfe10803f
 8002ef0:	5c001000 	.word	0x5c001000
 8002ef4:	ffff0000 	.word	0xffff0000
 8002ef8:	58025408 	.word	0x58025408
 8002efc:	5802541c 	.word	0x5802541c
 8002f00:	58025430 	.word	0x58025430
 8002f04:	58025444 	.word	0x58025444
 8002f08:	58025458 	.word	0x58025458
 8002f0c:	5802546c 	.word	0x5802546c
 8002f10:	58025480 	.word	0x58025480
 8002f14:	58025494 	.word	0x58025494
 8002f18:	fffe000f 	.word	0xfffe000f
 8002f1c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68d2      	ldr	r2, [r2, #12]
 8002f22:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f4c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b6e      	ldr	r3, [pc, #440]	@ (800311c <HAL_DMA_Init+0x650>)
 8002f64:	4413      	add	r3, r2
 8002f66:	4a6e      	ldr	r2, [pc, #440]	@ (8003120 <HAL_DMA_Init+0x654>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	009a      	lsls	r2, r3, #2
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f001 f82f 	bl	8003fd8 <DMA_CalcBaseAndBitshift>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	2201      	movs	r2, #1
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e008      	b.n	8002fa2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2240      	movs	r2, #64	@ 0x40
 8002f94:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0b7      	b.n	8003112 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8003124 <HAL_DMA_Init+0x658>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d072      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a5d      	ldr	r2, [pc, #372]	@ (8003128 <HAL_DMA_Init+0x65c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d06d      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a5c      	ldr	r2, [pc, #368]	@ (800312c <HAL_DMA_Init+0x660>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d068      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a5a      	ldr	r2, [pc, #360]	@ (8003130 <HAL_DMA_Init+0x664>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d063      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a59      	ldr	r2, [pc, #356]	@ (8003134 <HAL_DMA_Init+0x668>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d05e      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a57      	ldr	r2, [pc, #348]	@ (8003138 <HAL_DMA_Init+0x66c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d059      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a56      	ldr	r2, [pc, #344]	@ (800313c <HAL_DMA_Init+0x670>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d054      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a54      	ldr	r2, [pc, #336]	@ (8003140 <HAL_DMA_Init+0x674>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d04f      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a53      	ldr	r2, [pc, #332]	@ (8003144 <HAL_DMA_Init+0x678>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d04a      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a51      	ldr	r2, [pc, #324]	@ (8003148 <HAL_DMA_Init+0x67c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d045      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a50      	ldr	r2, [pc, #320]	@ (800314c <HAL_DMA_Init+0x680>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d040      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a4e      	ldr	r2, [pc, #312]	@ (8003150 <HAL_DMA_Init+0x684>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d03b      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a4d      	ldr	r2, [pc, #308]	@ (8003154 <HAL_DMA_Init+0x688>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d036      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a4b      	ldr	r2, [pc, #300]	@ (8003158 <HAL_DMA_Init+0x68c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d031      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a4a      	ldr	r2, [pc, #296]	@ (800315c <HAL_DMA_Init+0x690>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d02c      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a48      	ldr	r2, [pc, #288]	@ (8003160 <HAL_DMA_Init+0x694>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d027      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a47      	ldr	r2, [pc, #284]	@ (8003164 <HAL_DMA_Init+0x698>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a45      	ldr	r2, [pc, #276]	@ (8003168 <HAL_DMA_Init+0x69c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01d      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a44      	ldr	r2, [pc, #272]	@ (800316c <HAL_DMA_Init+0x6a0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d018      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a42      	ldr	r2, [pc, #264]	@ (8003170 <HAL_DMA_Init+0x6a4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a41      	ldr	r2, [pc, #260]	@ (8003174 <HAL_DMA_Init+0x6a8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a3f      	ldr	r2, [pc, #252]	@ (8003178 <HAL_DMA_Init+0x6ac>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a3e      	ldr	r2, [pc, #248]	@ (800317c <HAL_DMA_Init+0x6b0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_DMA_Init+0x5c6>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a3c      	ldr	r2, [pc, #240]	@ (8003180 <HAL_DMA_Init+0x6b4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_DMA_Init+0x5ca>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_DMA_Init+0x5cc>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d032      	beq.n	8003102 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f001 f8c9 	bl	8004234 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b80      	cmp	r3, #128	@ 0x80
 80030a8:	d102      	bne.n	80030b0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80030c4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d010      	beq.n	80030f0 <HAL_DMA_Init+0x624>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d80c      	bhi.n	80030f0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f001 f946 	bl	8004368 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	e008      	b.n	8003102 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	a7fdabf8 	.word	0xa7fdabf8
 8003120:	cccccccd 	.word	0xcccccccd
 8003124:	40020010 	.word	0x40020010
 8003128:	40020028 	.word	0x40020028
 800312c:	40020040 	.word	0x40020040
 8003130:	40020058 	.word	0x40020058
 8003134:	40020070 	.word	0x40020070
 8003138:	40020088 	.word	0x40020088
 800313c:	400200a0 	.word	0x400200a0
 8003140:	400200b8 	.word	0x400200b8
 8003144:	40020410 	.word	0x40020410
 8003148:	40020428 	.word	0x40020428
 800314c:	40020440 	.word	0x40020440
 8003150:	40020458 	.word	0x40020458
 8003154:	40020470 	.word	0x40020470
 8003158:	40020488 	.word	0x40020488
 800315c:	400204a0 	.word	0x400204a0
 8003160:	400204b8 	.word	0x400204b8
 8003164:	58025408 	.word	0x58025408
 8003168:	5802541c 	.word	0x5802541c
 800316c:	58025430 	.word	0x58025430
 8003170:	58025444 	.word	0x58025444
 8003174:	58025458 	.word	0x58025458
 8003178:	5802546c 	.word	0x5802546c
 800317c:	58025480 	.word	0x58025480
 8003180:	58025494 	.word	0x58025494

08003184 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	@ 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003190:	4b67      	ldr	r3, [pc, #412]	@ (8003330 <HAL_DMA_IRQHandler+0x1ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a67      	ldr	r2, [pc, #412]	@ (8003334 <HAL_DMA_IRQHandler+0x1b0>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0a9b      	lsrs	r3, r3, #10
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003338 <HAL_DMA_IRQHandler+0x1b4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d04a      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5d      	ldr	r2, [pc, #372]	@ (800333c <HAL_DMA_IRQHandler+0x1b8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d045      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003340 <HAL_DMA_IRQHandler+0x1bc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d040      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003344 <HAL_DMA_IRQHandler+0x1c0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d03b      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a59      	ldr	r2, [pc, #356]	@ (8003348 <HAL_DMA_IRQHandler+0x1c4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d036      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a57      	ldr	r2, [pc, #348]	@ (800334c <HAL_DMA_IRQHandler+0x1c8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d031      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a56      	ldr	r2, [pc, #344]	@ (8003350 <HAL_DMA_IRQHandler+0x1cc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d02c      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a54      	ldr	r2, [pc, #336]	@ (8003354 <HAL_DMA_IRQHandler+0x1d0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d027      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a53      	ldr	r2, [pc, #332]	@ (8003358 <HAL_DMA_IRQHandler+0x1d4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d022      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a51      	ldr	r2, [pc, #324]	@ (800335c <HAL_DMA_IRQHandler+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01d      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a50      	ldr	r2, [pc, #320]	@ (8003360 <HAL_DMA_IRQHandler+0x1dc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d018      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a4e      	ldr	r2, [pc, #312]	@ (8003364 <HAL_DMA_IRQHandler+0x1e0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a4d      	ldr	r2, [pc, #308]	@ (8003368 <HAL_DMA_IRQHandler+0x1e4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a4b      	ldr	r2, [pc, #300]	@ (800336c <HAL_DMA_IRQHandler+0x1e8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a4a      	ldr	r2, [pc, #296]	@ (8003370 <HAL_DMA_IRQHandler+0x1ec>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_DMA_IRQHandler+0xd2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a48      	ldr	r2, [pc, #288]	@ (8003374 <HAL_DMA_IRQHandler+0x1f0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_DMA_IRQHandler+0xd6>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_DMA_IRQHandler+0xd8>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 842b 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2208      	movs	r2, #8
 800326c:	409a      	lsls	r2, r3
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80a2 	beq.w	80033bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2e      	ldr	r2, [pc, #184]	@ (8003338 <HAL_DMA_IRQHandler+0x1b4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d04a      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a2d      	ldr	r2, [pc, #180]	@ (800333c <HAL_DMA_IRQHandler+0x1b8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d045      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a2b      	ldr	r2, [pc, #172]	@ (8003340 <HAL_DMA_IRQHandler+0x1bc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d040      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2a      	ldr	r2, [pc, #168]	@ (8003344 <HAL_DMA_IRQHandler+0x1c0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d03b      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a28      	ldr	r2, [pc, #160]	@ (8003348 <HAL_DMA_IRQHandler+0x1c4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d036      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a27      	ldr	r2, [pc, #156]	@ (800334c <HAL_DMA_IRQHandler+0x1c8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d031      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a25      	ldr	r2, [pc, #148]	@ (8003350 <HAL_DMA_IRQHandler+0x1cc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d02c      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a24      	ldr	r2, [pc, #144]	@ (8003354 <HAL_DMA_IRQHandler+0x1d0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d027      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a22      	ldr	r2, [pc, #136]	@ (8003358 <HAL_DMA_IRQHandler+0x1d4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d022      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a21      	ldr	r2, [pc, #132]	@ (800335c <HAL_DMA_IRQHandler+0x1d8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d01d      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003360 <HAL_DMA_IRQHandler+0x1dc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d018      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003364 <HAL_DMA_IRQHandler+0x1e0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d013      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003368 <HAL_DMA_IRQHandler+0x1e4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00e      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1b      	ldr	r2, [pc, #108]	@ (800336c <HAL_DMA_IRQHandler+0x1e8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d009      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a19      	ldr	r2, [pc, #100]	@ (8003370 <HAL_DMA_IRQHandler+0x1ec>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d004      	beq.n	8003318 <HAL_DMA_IRQHandler+0x194>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a18      	ldr	r2, [pc, #96]	@ (8003374 <HAL_DMA_IRQHandler+0x1f0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d12f      	bne.n	8003378 <HAL_DMA_IRQHandler+0x1f4>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf14      	ite	ne
 8003326:	2301      	movne	r3, #1
 8003328:	2300      	moveq	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	e02e      	b.n	800338c <HAL_DMA_IRQHandler+0x208>
 800332e:	bf00      	nop
 8003330:	24000000 	.word	0x24000000
 8003334:	1b4e81b5 	.word	0x1b4e81b5
 8003338:	40020010 	.word	0x40020010
 800333c:	40020028 	.word	0x40020028
 8003340:	40020040 	.word	0x40020040
 8003344:	40020058 	.word	0x40020058
 8003348:	40020070 	.word	0x40020070
 800334c:	40020088 	.word	0x40020088
 8003350:	400200a0 	.word	0x400200a0
 8003354:	400200b8 	.word	0x400200b8
 8003358:	40020410 	.word	0x40020410
 800335c:	40020428 	.word	0x40020428
 8003360:	40020440 	.word	0x40020440
 8003364:	40020458 	.word	0x40020458
 8003368:	40020470 	.word	0x40020470
 800336c:	40020488 	.word	0x40020488
 8003370:	400204a0 	.word	0x400204a0
 8003374:	400204b8 	.word	0x400204b8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf14      	ite	ne
 8003386:	2301      	movne	r3, #1
 8003388:	2300      	moveq	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d015      	beq.n	80033bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0204 	bic.w	r2, r2, #4
 800339e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	2208      	movs	r2, #8
 80033aa:	409a      	lsls	r2, r3
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d06e      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a69      	ldr	r2, [pc, #420]	@ (800357c <HAL_DMA_IRQHandler+0x3f8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d04a      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a67      	ldr	r2, [pc, #412]	@ (8003580 <HAL_DMA_IRQHandler+0x3fc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d045      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a66      	ldr	r2, [pc, #408]	@ (8003584 <HAL_DMA_IRQHandler+0x400>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d040      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a64      	ldr	r2, [pc, #400]	@ (8003588 <HAL_DMA_IRQHandler+0x404>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d03b      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a63      	ldr	r2, [pc, #396]	@ (800358c <HAL_DMA_IRQHandler+0x408>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d036      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a61      	ldr	r2, [pc, #388]	@ (8003590 <HAL_DMA_IRQHandler+0x40c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d031      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a60      	ldr	r2, [pc, #384]	@ (8003594 <HAL_DMA_IRQHandler+0x410>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d02c      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5e      	ldr	r2, [pc, #376]	@ (8003598 <HAL_DMA_IRQHandler+0x414>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d027      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a5d      	ldr	r2, [pc, #372]	@ (800359c <HAL_DMA_IRQHandler+0x418>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d022      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a5b      	ldr	r2, [pc, #364]	@ (80035a0 <HAL_DMA_IRQHandler+0x41c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01d      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5a      	ldr	r2, [pc, #360]	@ (80035a4 <HAL_DMA_IRQHandler+0x420>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d018      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a58      	ldr	r2, [pc, #352]	@ (80035a8 <HAL_DMA_IRQHandler+0x424>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a57      	ldr	r2, [pc, #348]	@ (80035ac <HAL_DMA_IRQHandler+0x428>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00e      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a55      	ldr	r2, [pc, #340]	@ (80035b0 <HAL_DMA_IRQHandler+0x42c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d009      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a54      	ldr	r2, [pc, #336]	@ (80035b4 <HAL_DMA_IRQHandler+0x430>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2ee>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a52      	ldr	r2, [pc, #328]	@ (80035b8 <HAL_DMA_IRQHandler+0x434>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10a      	bne.n	8003488 <HAL_DMA_IRQHandler+0x304>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e003      	b.n	8003490 <HAL_DMA_IRQHandler+0x30c>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2300      	movs	r3, #0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00d      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2201      	movs	r2, #1
 800349e:	409a      	lsls	r2, r3
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a8:	f043 0202 	orr.w	r2, r3, #2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	2204      	movs	r2, #4
 80034ba:	409a      	lsls	r2, r3
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 808f 	beq.w	80035e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2c      	ldr	r2, [pc, #176]	@ (800357c <HAL_DMA_IRQHandler+0x3f8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d04a      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003580 <HAL_DMA_IRQHandler+0x3fc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d045      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a29      	ldr	r2, [pc, #164]	@ (8003584 <HAL_DMA_IRQHandler+0x400>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d040      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a27      	ldr	r2, [pc, #156]	@ (8003588 <HAL_DMA_IRQHandler+0x404>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d03b      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a26      	ldr	r2, [pc, #152]	@ (800358c <HAL_DMA_IRQHandler+0x408>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d036      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a24      	ldr	r2, [pc, #144]	@ (8003590 <HAL_DMA_IRQHandler+0x40c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d031      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a23      	ldr	r2, [pc, #140]	@ (8003594 <HAL_DMA_IRQHandler+0x410>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d02c      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a21      	ldr	r2, [pc, #132]	@ (8003598 <HAL_DMA_IRQHandler+0x414>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d027      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a20      	ldr	r2, [pc, #128]	@ (800359c <HAL_DMA_IRQHandler+0x418>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d022      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1e      	ldr	r2, [pc, #120]	@ (80035a0 <HAL_DMA_IRQHandler+0x41c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01d      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1d      	ldr	r2, [pc, #116]	@ (80035a4 <HAL_DMA_IRQHandler+0x420>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d018      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1b      	ldr	r2, [pc, #108]	@ (80035a8 <HAL_DMA_IRQHandler+0x424>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1a      	ldr	r2, [pc, #104]	@ (80035ac <HAL_DMA_IRQHandler+0x428>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00e      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a18      	ldr	r2, [pc, #96]	@ (80035b0 <HAL_DMA_IRQHandler+0x42c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d009      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a17      	ldr	r2, [pc, #92]	@ (80035b4 <HAL_DMA_IRQHandler+0x430>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d004      	beq.n	8003566 <HAL_DMA_IRQHandler+0x3e2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a15      	ldr	r2, [pc, #84]	@ (80035b8 <HAL_DMA_IRQHandler+0x434>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d12a      	bne.n	80035bc <HAL_DMA_IRQHandler+0x438>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e023      	b.n	80035c4 <HAL_DMA_IRQHandler+0x440>
 800357c:	40020010 	.word	0x40020010
 8003580:	40020028 	.word	0x40020028
 8003584:	40020040 	.word	0x40020040
 8003588:	40020058 	.word	0x40020058
 800358c:	40020070 	.word	0x40020070
 8003590:	40020088 	.word	0x40020088
 8003594:	400200a0 	.word	0x400200a0
 8003598:	400200b8 	.word	0x400200b8
 800359c:	40020410 	.word	0x40020410
 80035a0:	40020428 	.word	0x40020428
 80035a4:	40020440 	.word	0x40020440
 80035a8:	40020458 	.word	0x40020458
 80035ac:	40020470 	.word	0x40020470
 80035b0:	40020488 	.word	0x40020488
 80035b4:	400204a0 	.word	0x400204a0
 80035b8:	400204b8 	.word	0x400204b8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2300      	movs	r3, #0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00d      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	2204      	movs	r2, #4
 80035d2:	409a      	lsls	r2, r3
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035dc:	f043 0204 	orr.w	r2, r3, #4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2210      	movs	r2, #16
 80035ee:	409a      	lsls	r2, r3
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80a6 	beq.w	8003746 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a85      	ldr	r2, [pc, #532]	@ (8003814 <HAL_DMA_IRQHandler+0x690>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d04a      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a83      	ldr	r2, [pc, #524]	@ (8003818 <HAL_DMA_IRQHandler+0x694>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d045      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a82      	ldr	r2, [pc, #520]	@ (800381c <HAL_DMA_IRQHandler+0x698>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d040      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a80      	ldr	r2, [pc, #512]	@ (8003820 <HAL_DMA_IRQHandler+0x69c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d03b      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7f      	ldr	r2, [pc, #508]	@ (8003824 <HAL_DMA_IRQHandler+0x6a0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d036      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a7d      	ldr	r2, [pc, #500]	@ (8003828 <HAL_DMA_IRQHandler+0x6a4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d031      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a7c      	ldr	r2, [pc, #496]	@ (800382c <HAL_DMA_IRQHandler+0x6a8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d02c      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a7a      	ldr	r2, [pc, #488]	@ (8003830 <HAL_DMA_IRQHandler+0x6ac>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d027      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a79      	ldr	r2, [pc, #484]	@ (8003834 <HAL_DMA_IRQHandler+0x6b0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a77      	ldr	r2, [pc, #476]	@ (8003838 <HAL_DMA_IRQHandler+0x6b4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01d      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a76      	ldr	r2, [pc, #472]	@ (800383c <HAL_DMA_IRQHandler+0x6b8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d018      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a74      	ldr	r2, [pc, #464]	@ (8003840 <HAL_DMA_IRQHandler+0x6bc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a73      	ldr	r2, [pc, #460]	@ (8003844 <HAL_DMA_IRQHandler+0x6c0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a71      	ldr	r2, [pc, #452]	@ (8003848 <HAL_DMA_IRQHandler+0x6c4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a70      	ldr	r2, [pc, #448]	@ (800384c <HAL_DMA_IRQHandler+0x6c8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_DMA_IRQHandler+0x516>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6e      	ldr	r2, [pc, #440]	@ (8003850 <HAL_DMA_IRQHandler+0x6cc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d10a      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x52c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf14      	ite	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	2300      	moveq	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e009      	b.n	80036c4 <HAL_DMA_IRQHandler+0x540>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d03e      	beq.n	8003746 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	2210      	movs	r2, #16
 80036d2:	409a      	lsls	r2, r3
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d018      	beq.n	8003718 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d108      	bne.n	8003706 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d024      	beq.n	8003746 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
 8003704:	e01f      	b.n	8003746 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01b      	beq.n	8003746 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
 8003716:	e016      	b.n	8003746 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d107      	bne.n	8003736 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0208 	bic.w	r2, r2, #8
 8003734:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	2220      	movs	r2, #32
 8003750:	409a      	lsls	r2, r3
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8110 	beq.w	800397c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2c      	ldr	r2, [pc, #176]	@ (8003814 <HAL_DMA_IRQHandler+0x690>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d04a      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2b      	ldr	r2, [pc, #172]	@ (8003818 <HAL_DMA_IRQHandler+0x694>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d045      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a29      	ldr	r2, [pc, #164]	@ (800381c <HAL_DMA_IRQHandler+0x698>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d040      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a28      	ldr	r2, [pc, #160]	@ (8003820 <HAL_DMA_IRQHandler+0x69c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d03b      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a26      	ldr	r2, [pc, #152]	@ (8003824 <HAL_DMA_IRQHandler+0x6a0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d036      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a25      	ldr	r2, [pc, #148]	@ (8003828 <HAL_DMA_IRQHandler+0x6a4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d031      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a23      	ldr	r2, [pc, #140]	@ (800382c <HAL_DMA_IRQHandler+0x6a8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d02c      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a22      	ldr	r2, [pc, #136]	@ (8003830 <HAL_DMA_IRQHandler+0x6ac>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d027      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a20      	ldr	r2, [pc, #128]	@ (8003834 <HAL_DMA_IRQHandler+0x6b0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d022      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003838 <HAL_DMA_IRQHandler+0x6b4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d01d      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1d      	ldr	r2, [pc, #116]	@ (800383c <HAL_DMA_IRQHandler+0x6b8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d018      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003840 <HAL_DMA_IRQHandler+0x6bc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003844 <HAL_DMA_IRQHandler+0x6c0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00e      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a19      	ldr	r2, [pc, #100]	@ (8003848 <HAL_DMA_IRQHandler+0x6c4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d009      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a17      	ldr	r2, [pc, #92]	@ (800384c <HAL_DMA_IRQHandler+0x6c8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_DMA_IRQHandler+0x678>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a16      	ldr	r2, [pc, #88]	@ (8003850 <HAL_DMA_IRQHandler+0x6cc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d12b      	bne.n	8003854 <HAL_DMA_IRQHandler+0x6d0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	e02a      	b.n	8003868 <HAL_DMA_IRQHandler+0x6e4>
 8003812:	bf00      	nop
 8003814:	40020010 	.word	0x40020010
 8003818:	40020028 	.word	0x40020028
 800381c:	40020040 	.word	0x40020040
 8003820:	40020058 	.word	0x40020058
 8003824:	40020070 	.word	0x40020070
 8003828:	40020088 	.word	0x40020088
 800382c:	400200a0 	.word	0x400200a0
 8003830:	400200b8 	.word	0x400200b8
 8003834:	40020410 	.word	0x40020410
 8003838:	40020428 	.word	0x40020428
 800383c:	40020440 	.word	0x40020440
 8003840:	40020458 	.word	0x40020458
 8003844:	40020470 	.word	0x40020470
 8003848:	40020488 	.word	0x40020488
 800384c:	400204a0 	.word	0x400204a0
 8003850:	400204b8 	.word	0x400204b8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	bf14      	ite	ne
 8003862:	2301      	movne	r3, #1
 8003864:	2300      	moveq	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8087 	beq.w	800397c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2220      	movs	r2, #32
 8003878:	409a      	lsls	r2, r3
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b04      	cmp	r3, #4
 8003888:	d139      	bne.n	80038fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0216 	bic.w	r2, r2, #22
 8003898:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <HAL_DMA_IRQHandler+0x736>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0208 	bic.w	r2, r2, #8
 80038c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	223f      	movs	r2, #63	@ 0x3f
 80038d4:	409a      	lsls	r2, r3
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 834a 	beq.w	8003f88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
          }
          return;
 80038fc:	e344      	b.n	8003f88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d018      	beq.n	800393e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	2b00      	cmp	r3, #0
 8003920:	d02c      	beq.n	800397c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
 800392a:	e027      	b.n	800397c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d023      	beq.n	800397c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	4798      	blx	r3
 800393c:	e01e      	b.n	800397c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10f      	bne.n	800396c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0210 	bic.w	r2, r2, #16
 800395a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8306 	beq.w	8003f92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8088 	beq.w	8003aa4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2204      	movs	r2, #4
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a7a      	ldr	r2, [pc, #488]	@ (8003b8c <HAL_DMA_IRQHandler+0xa08>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d04a      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a79      	ldr	r2, [pc, #484]	@ (8003b90 <HAL_DMA_IRQHandler+0xa0c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d045      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a77      	ldr	r2, [pc, #476]	@ (8003b94 <HAL_DMA_IRQHandler+0xa10>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d040      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a76      	ldr	r2, [pc, #472]	@ (8003b98 <HAL_DMA_IRQHandler+0xa14>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d03b      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a74      	ldr	r2, [pc, #464]	@ (8003b9c <HAL_DMA_IRQHandler+0xa18>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d036      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a73      	ldr	r2, [pc, #460]	@ (8003ba0 <HAL_DMA_IRQHandler+0xa1c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d031      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a71      	ldr	r2, [pc, #452]	@ (8003ba4 <HAL_DMA_IRQHandler+0xa20>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02c      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a70      	ldr	r2, [pc, #448]	@ (8003ba8 <HAL_DMA_IRQHandler+0xa24>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d027      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6e      	ldr	r2, [pc, #440]	@ (8003bac <HAL_DMA_IRQHandler+0xa28>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d022      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6d      	ldr	r2, [pc, #436]	@ (8003bb0 <HAL_DMA_IRQHandler+0xa2c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d01d      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a6b      	ldr	r2, [pc, #428]	@ (8003bb4 <HAL_DMA_IRQHandler+0xa30>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6a      	ldr	r2, [pc, #424]	@ (8003bb8 <HAL_DMA_IRQHandler+0xa34>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a68      	ldr	r2, [pc, #416]	@ (8003bbc <HAL_DMA_IRQHandler+0xa38>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a67      	ldr	r2, [pc, #412]	@ (8003bc0 <HAL_DMA_IRQHandler+0xa3c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a65      	ldr	r2, [pc, #404]	@ (8003bc4 <HAL_DMA_IRQHandler+0xa40>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x8b8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a64      	ldr	r2, [pc, #400]	@ (8003bc8 <HAL_DMA_IRQHandler+0xa44>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d108      	bne.n	8003a4e <HAL_DMA_IRQHandler+0x8ca>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e007      	b.n	8003a5e <HAL_DMA_IRQHandler+0x8da>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3301      	adds	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d307      	bcc.n	8003a7a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f2      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x8da>
 8003a78:	e000      	b.n	8003a7c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a7a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003a92:	e003      	b.n	8003a9c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8272 	beq.w	8003f92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
 8003ab6:	e26c      	b.n	8003f92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a43      	ldr	r2, [pc, #268]	@ (8003bcc <HAL_DMA_IRQHandler+0xa48>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d022      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x984>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a42      	ldr	r2, [pc, #264]	@ (8003bd0 <HAL_DMA_IRQHandler+0xa4c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d01d      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x984>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a40      	ldr	r2, [pc, #256]	@ (8003bd4 <HAL_DMA_IRQHandler+0xa50>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d018      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x984>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a3f      	ldr	r2, [pc, #252]	@ (8003bd8 <HAL_DMA_IRQHandler+0xa54>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d013      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x984>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3d      	ldr	r2, [pc, #244]	@ (8003bdc <HAL_DMA_IRQHandler+0xa58>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00e      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x984>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a3c      	ldr	r2, [pc, #240]	@ (8003be0 <HAL_DMA_IRQHandler+0xa5c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x984>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3a      	ldr	r2, [pc, #232]	@ (8003be4 <HAL_DMA_IRQHandler+0xa60>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x984>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a39      	ldr	r2, [pc, #228]	@ (8003be8 <HAL_DMA_IRQHandler+0xa64>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x988>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_DMA_IRQHandler+0x98a>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 823f 	beq.w	8003f92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2204      	movs	r2, #4
 8003b26:	409a      	lsls	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80cd 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xb48>
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80c7 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2204      	movs	r2, #4
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d049      	beq.n	8003bec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8210 	beq.w	8003f8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b74:	e20a      	b.n	8003f8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8206 	beq.w	8003f8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b88:	e200      	b.n	8003f8c <HAL_DMA_IRQHandler+0xe08>
 8003b8a:	bf00      	nop
 8003b8c:	40020010 	.word	0x40020010
 8003b90:	40020028 	.word	0x40020028
 8003b94:	40020040 	.word	0x40020040
 8003b98:	40020058 	.word	0x40020058
 8003b9c:	40020070 	.word	0x40020070
 8003ba0:	40020088 	.word	0x40020088
 8003ba4:	400200a0 	.word	0x400200a0
 8003ba8:	400200b8 	.word	0x400200b8
 8003bac:	40020410 	.word	0x40020410
 8003bb0:	40020428 	.word	0x40020428
 8003bb4:	40020440 	.word	0x40020440
 8003bb8:	40020458 	.word	0x40020458
 8003bbc:	40020470 	.word	0x40020470
 8003bc0:	40020488 	.word	0x40020488
 8003bc4:	400204a0 	.word	0x400204a0
 8003bc8:	400204b8 	.word	0x400204b8
 8003bcc:	58025408 	.word	0x58025408
 8003bd0:	5802541c 	.word	0x5802541c
 8003bd4:	58025430 	.word	0x58025430
 8003bd8:	58025444 	.word	0x58025444
 8003bdc:	58025458 	.word	0x58025458
 8003be0:	5802546c 	.word	0x5802546c
 8003be4:	58025480 	.word	0x58025480
 8003be8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d160      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a7f      	ldr	r2, [pc, #508]	@ (8003df8 <HAL_DMA_IRQHandler+0xc74>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d04a      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a7d      	ldr	r2, [pc, #500]	@ (8003dfc <HAL_DMA_IRQHandler+0xc78>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d045      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e00 <HAL_DMA_IRQHandler+0xc7c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d040      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a7a      	ldr	r2, [pc, #488]	@ (8003e04 <HAL_DMA_IRQHandler+0xc80>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d03b      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a79      	ldr	r2, [pc, #484]	@ (8003e08 <HAL_DMA_IRQHandler+0xc84>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d036      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a77      	ldr	r2, [pc, #476]	@ (8003e0c <HAL_DMA_IRQHandler+0xc88>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d031      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a76      	ldr	r2, [pc, #472]	@ (8003e10 <HAL_DMA_IRQHandler+0xc8c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d02c      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a74      	ldr	r2, [pc, #464]	@ (8003e14 <HAL_DMA_IRQHandler+0xc90>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d027      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a73      	ldr	r2, [pc, #460]	@ (8003e18 <HAL_DMA_IRQHandler+0xc94>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d022      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a71      	ldr	r2, [pc, #452]	@ (8003e1c <HAL_DMA_IRQHandler+0xc98>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01d      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a70      	ldr	r2, [pc, #448]	@ (8003e20 <HAL_DMA_IRQHandler+0xc9c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d018      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a6e      	ldr	r2, [pc, #440]	@ (8003e24 <HAL_DMA_IRQHandler+0xca0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a6d      	ldr	r2, [pc, #436]	@ (8003e28 <HAL_DMA_IRQHandler+0xca4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a6b      	ldr	r2, [pc, #428]	@ (8003e2c <HAL_DMA_IRQHandler+0xca8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6a      	ldr	r2, [pc, #424]	@ (8003e30 <HAL_DMA_IRQHandler+0xcac>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xb12>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a68      	ldr	r2, [pc, #416]	@ (8003e34 <HAL_DMA_IRQHandler+0xcb0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d108      	bne.n	8003ca8 <HAL_DMA_IRQHandler+0xb24>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0208 	bic.w	r2, r2, #8
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	e007      	b.n	8003cb8 <HAL_DMA_IRQHandler+0xb34>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0204 	bic.w	r2, r2, #4
 8003cb6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8165 	beq.w	8003f8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cca:	e15f      	b.n	8003f8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80c5 	beq.w	8003e6c <HAL_DMA_IRQHandler+0xce8>
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80bf 	beq.w	8003e6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d018      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 813a 	beq.w	8003f90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d24:	e134      	b.n	8003f90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8130 	beq.w	8003f90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d38:	e12a      	b.n	8003f90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f040 8089 	bne.w	8003e58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003df8 <HAL_DMA_IRQHandler+0xc74>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d04a      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a29      	ldr	r2, [pc, #164]	@ (8003dfc <HAL_DMA_IRQHandler+0xc78>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d045      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a28      	ldr	r2, [pc, #160]	@ (8003e00 <HAL_DMA_IRQHandler+0xc7c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d040      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a26      	ldr	r2, [pc, #152]	@ (8003e04 <HAL_DMA_IRQHandler+0xc80>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d03b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a25      	ldr	r2, [pc, #148]	@ (8003e08 <HAL_DMA_IRQHandler+0xc84>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d036      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a23      	ldr	r2, [pc, #140]	@ (8003e0c <HAL_DMA_IRQHandler+0xc88>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d031      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a22      	ldr	r2, [pc, #136]	@ (8003e10 <HAL_DMA_IRQHandler+0xc8c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d02c      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a20      	ldr	r2, [pc, #128]	@ (8003e14 <HAL_DMA_IRQHandler+0xc90>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d027      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e18 <HAL_DMA_IRQHandler+0xc94>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e1c <HAL_DMA_IRQHandler+0xc98>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1c      	ldr	r2, [pc, #112]	@ (8003e20 <HAL_DMA_IRQHandler+0xc9c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e24 <HAL_DMA_IRQHandler+0xca0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a19      	ldr	r2, [pc, #100]	@ (8003e28 <HAL_DMA_IRQHandler+0xca4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <HAL_DMA_IRQHandler+0xca8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a16      	ldr	r2, [pc, #88]	@ (8003e30 <HAL_DMA_IRQHandler+0xcac>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xc62>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a14      	ldr	r2, [pc, #80]	@ (8003e34 <HAL_DMA_IRQHandler+0xcb0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d128      	bne.n	8003e38 <HAL_DMA_IRQHandler+0xcb4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0214 	bic.w	r2, r2, #20
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e027      	b.n	8003e48 <HAL_DMA_IRQHandler+0xcc4>
 8003df8:	40020010 	.word	0x40020010
 8003dfc:	40020028 	.word	0x40020028
 8003e00:	40020040 	.word	0x40020040
 8003e04:	40020058 	.word	0x40020058
 8003e08:	40020070 	.word	0x40020070
 8003e0c:	40020088 	.word	0x40020088
 8003e10:	400200a0 	.word	0x400200a0
 8003e14:	400200b8 	.word	0x400200b8
 8003e18:	40020410 	.word	0x40020410
 8003e1c:	40020428 	.word	0x40020428
 8003e20:	40020440 	.word	0x40020440
 8003e24:	40020458 	.word	0x40020458
 8003e28:	40020470 	.word	0x40020470
 8003e2c:	40020488 	.word	0x40020488
 8003e30:	400204a0 	.word	0x400204a0
 8003e34:	400204b8 	.word	0x400204b8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 020a 	bic.w	r2, r2, #10
 8003e46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8097 	beq.w	8003f90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e6a:	e091      	b.n	8003f90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	2208      	movs	r2, #8
 8003e76:	409a      	lsls	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 8088 	beq.w	8003f92 <HAL_DMA_IRQHandler+0xe0e>
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8082 	beq.w	8003f92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a41      	ldr	r2, [pc, #260]	@ (8003f98 <HAL_DMA_IRQHandler+0xe14>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d04a      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8003f9c <HAL_DMA_IRQHandler+0xe18>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d045      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a3e      	ldr	r2, [pc, #248]	@ (8003fa0 <HAL_DMA_IRQHandler+0xe1c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d040      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fa4 <HAL_DMA_IRQHandler+0xe20>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d03b      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a3b      	ldr	r2, [pc, #236]	@ (8003fa8 <HAL_DMA_IRQHandler+0xe24>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d036      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a39      	ldr	r2, [pc, #228]	@ (8003fac <HAL_DMA_IRQHandler+0xe28>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d031      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a38      	ldr	r2, [pc, #224]	@ (8003fb0 <HAL_DMA_IRQHandler+0xe2c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d02c      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a36      	ldr	r2, [pc, #216]	@ (8003fb4 <HAL_DMA_IRQHandler+0xe30>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d027      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a35      	ldr	r2, [pc, #212]	@ (8003fb8 <HAL_DMA_IRQHandler+0xe34>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a33      	ldr	r2, [pc, #204]	@ (8003fbc <HAL_DMA_IRQHandler+0xe38>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a32      	ldr	r2, [pc, #200]	@ (8003fc0 <HAL_DMA_IRQHandler+0xe3c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a30      	ldr	r2, [pc, #192]	@ (8003fc4 <HAL_DMA_IRQHandler+0xe40>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc8 <HAL_DMA_IRQHandler+0xe44>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2d      	ldr	r2, [pc, #180]	@ (8003fcc <HAL_DMA_IRQHandler+0xe48>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003fd0 <HAL_DMA_IRQHandler+0xe4c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xdaa>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd4 <HAL_DMA_IRQHandler+0xe50>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <HAL_DMA_IRQHandler+0xdbc>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 021c 	bic.w	r2, r2, #28
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e007      	b.n	8003f50 <HAL_DMA_IRQHandler+0xdcc>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 020e 	bic.w	r2, r2, #14
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	2201      	movs	r2, #1
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	4798      	blx	r3
 8003f86:	e004      	b.n	8003f92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f88:	bf00      	nop
 8003f8a:	e002      	b.n	8003f92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f8c:	bf00      	nop
 8003f8e:	e000      	b.n	8003f92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f92:	3728      	adds	r7, #40	@ 0x28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40020010 	.word	0x40020010
 8003f9c:	40020028 	.word	0x40020028
 8003fa0:	40020040 	.word	0x40020040
 8003fa4:	40020058 	.word	0x40020058
 8003fa8:	40020070 	.word	0x40020070
 8003fac:	40020088 	.word	0x40020088
 8003fb0:	400200a0 	.word	0x400200a0
 8003fb4:	400200b8 	.word	0x400200b8
 8003fb8:	40020410 	.word	0x40020410
 8003fbc:	40020428 	.word	0x40020428
 8003fc0:	40020440 	.word	0x40020440
 8003fc4:	40020458 	.word	0x40020458
 8003fc8:	40020470 	.word	0x40020470
 8003fcc:	40020488 	.word	0x40020488
 8003fd0:	400204a0 	.word	0x400204a0
 8003fd4:	400204b8 	.word	0x400204b8

08003fd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a42      	ldr	r2, [pc, #264]	@ (80040f0 <DMA_CalcBaseAndBitshift+0x118>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d04a      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a41      	ldr	r2, [pc, #260]	@ (80040f4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d045      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a3f      	ldr	r2, [pc, #252]	@ (80040f8 <DMA_CalcBaseAndBitshift+0x120>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d040      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a3e      	ldr	r2, [pc, #248]	@ (80040fc <DMA_CalcBaseAndBitshift+0x124>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d03b      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3c      	ldr	r2, [pc, #240]	@ (8004100 <DMA_CalcBaseAndBitshift+0x128>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d036      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3b      	ldr	r2, [pc, #236]	@ (8004104 <DMA_CalcBaseAndBitshift+0x12c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d031      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a39      	ldr	r2, [pc, #228]	@ (8004108 <DMA_CalcBaseAndBitshift+0x130>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d02c      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a38      	ldr	r2, [pc, #224]	@ (800410c <DMA_CalcBaseAndBitshift+0x134>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d027      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a36      	ldr	r2, [pc, #216]	@ (8004110 <DMA_CalcBaseAndBitshift+0x138>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d022      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a35      	ldr	r2, [pc, #212]	@ (8004114 <DMA_CalcBaseAndBitshift+0x13c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d01d      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a33      	ldr	r2, [pc, #204]	@ (8004118 <DMA_CalcBaseAndBitshift+0x140>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d018      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a32      	ldr	r2, [pc, #200]	@ (800411c <DMA_CalcBaseAndBitshift+0x144>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d013      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a30      	ldr	r2, [pc, #192]	@ (8004120 <DMA_CalcBaseAndBitshift+0x148>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00e      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2f      	ldr	r2, [pc, #188]	@ (8004124 <DMA_CalcBaseAndBitshift+0x14c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d009      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2d      	ldr	r2, [pc, #180]	@ (8004128 <DMA_CalcBaseAndBitshift+0x150>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <DMA_CalcBaseAndBitshift+0xa8>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a2c      	ldr	r2, [pc, #176]	@ (800412c <DMA_CalcBaseAndBitshift+0x154>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d101      	bne.n	8004084 <DMA_CalcBaseAndBitshift+0xac>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <DMA_CalcBaseAndBitshift+0xae>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d024      	beq.n	80040d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	3b10      	subs	r3, #16
 8004092:	4a27      	ldr	r2, [pc, #156]	@ (8004130 <DMA_CalcBaseAndBitshift+0x158>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	4a24      	ldr	r2, [pc, #144]	@ (8004134 <DMA_CalcBaseAndBitshift+0x15c>)
 80040a4:	5cd3      	ldrb	r3, [r2, r3]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d908      	bls.n	80040c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004138 <DMA_CalcBaseAndBitshift+0x160>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	1d1a      	adds	r2, r3, #4
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80040c2:	e00d      	b.n	80040e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004138 <DMA_CalcBaseAndBitshift+0x160>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d2:	e005      	b.n	80040e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40020010 	.word	0x40020010
 80040f4:	40020028 	.word	0x40020028
 80040f8:	40020040 	.word	0x40020040
 80040fc:	40020058 	.word	0x40020058
 8004100:	40020070 	.word	0x40020070
 8004104:	40020088 	.word	0x40020088
 8004108:	400200a0 	.word	0x400200a0
 800410c:	400200b8 	.word	0x400200b8
 8004110:	40020410 	.word	0x40020410
 8004114:	40020428 	.word	0x40020428
 8004118:	40020440 	.word	0x40020440
 800411c:	40020458 	.word	0x40020458
 8004120:	40020470 	.word	0x40020470
 8004124:	40020488 	.word	0x40020488
 8004128:	400204a0 	.word	0x400204a0
 800412c:	400204b8 	.word	0x400204b8
 8004130:	aaaaaaab 	.word	0xaaaaaaab
 8004134:	0800e140 	.word	0x0800e140
 8004138:	fffffc00 	.word	0xfffffc00

0800413c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d120      	bne.n	8004192 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	2b03      	cmp	r3, #3
 8004156:	d858      	bhi.n	800420a <DMA_CheckFifoParam+0xce>
 8004158:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <DMA_CheckFifoParam+0x24>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004171 	.word	0x08004171
 8004164:	08004183 	.word	0x08004183
 8004168:	08004171 	.word	0x08004171
 800416c:	0800420b 	.word	0x0800420b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d048      	beq.n	800420e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004180:	e045      	b.n	800420e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004186:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800418a:	d142      	bne.n	8004212 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004190:	e03f      	b.n	8004212 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800419a:	d123      	bne.n	80041e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d838      	bhi.n	8004216 <DMA_CheckFifoParam+0xda>
 80041a4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ac <DMA_CheckFifoParam+0x70>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041bd 	.word	0x080041bd
 80041b0:	080041c3 	.word	0x080041c3
 80041b4:	080041bd 	.word	0x080041bd
 80041b8:	080041d5 	.word	0x080041d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
        break;
 80041c0:	e030      	b.n	8004224 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d025      	beq.n	800421a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041d2:	e022      	b.n	800421a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041dc:	d11f      	bne.n	800421e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041e2:	e01c      	b.n	800421e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d902      	bls.n	80041f2 <DMA_CheckFifoParam+0xb6>
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d003      	beq.n	80041f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80041f0:	e018      	b.n	8004224 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
        break;
 80041f6:	e015      	b.n	8004224 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
    break;
 8004208:	e00b      	b.n	8004222 <DMA_CheckFifoParam+0xe6>
        break;
 800420a:	bf00      	nop
 800420c:	e00a      	b.n	8004224 <DMA_CheckFifoParam+0xe8>
        break;
 800420e:	bf00      	nop
 8004210:	e008      	b.n	8004224 <DMA_CheckFifoParam+0xe8>
        break;
 8004212:	bf00      	nop
 8004214:	e006      	b.n	8004224 <DMA_CheckFifoParam+0xe8>
        break;
 8004216:	bf00      	nop
 8004218:	e004      	b.n	8004224 <DMA_CheckFifoParam+0xe8>
        break;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <DMA_CheckFifoParam+0xe8>
        break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <DMA_CheckFifoParam+0xe8>
    break;
 8004222:	bf00      	nop
    }
  }

  return status;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop

08004234 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a38      	ldr	r2, [pc, #224]	@ (8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d022      	beq.n	8004292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a36      	ldr	r2, [pc, #216]	@ (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01d      	beq.n	8004292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a35      	ldr	r2, [pc, #212]	@ (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d018      	beq.n	8004292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a33      	ldr	r2, [pc, #204]	@ (8004334 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a32      	ldr	r2, [pc, #200]	@ (8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a30      	ldr	r2, [pc, #192]	@ (800433c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d009      	beq.n	8004292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a2f      	ldr	r2, [pc, #188]	@ (8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2d      	ldr	r2, [pc, #180]	@ (8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01a      	beq.n	80042d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	3b08      	subs	r3, #8
 80042a4:	4a28      	ldr	r2, [pc, #160]	@ (8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	091b      	lsrs	r3, r3, #4
 80042ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4b26      	ldr	r3, [pc, #152]	@ (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	461a      	mov	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a24      	ldr	r2, [pc, #144]	@ (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	2201      	movs	r2, #1
 80042ca:	409a      	lsls	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042d0:	e024      	b.n	800431c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	3b10      	subs	r3, #16
 80042da:	4a1e      	ldr	r2, [pc, #120]	@ (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d806      	bhi.n	80042fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4a1b      	ldr	r2, [pc, #108]	@ (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d902      	bls.n	80042fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3308      	adds	r3, #8
 80042f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4b18      	ldr	r3, [pc, #96]	@ (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	461a      	mov	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a16      	ldr	r2, [pc, #88]	@ (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800430c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2201      	movs	r2, #1
 8004316:	409a      	lsls	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	58025408 	.word	0x58025408
 800432c:	5802541c 	.word	0x5802541c
 8004330:	58025430 	.word	0x58025430
 8004334:	58025444 	.word	0x58025444
 8004338:	58025458 	.word	0x58025458
 800433c:	5802546c 	.word	0x5802546c
 8004340:	58025480 	.word	0x58025480
 8004344:	58025494 	.word	0x58025494
 8004348:	cccccccd 	.word	0xcccccccd
 800434c:	16009600 	.word	0x16009600
 8004350:	58025880 	.word	0x58025880
 8004354:	aaaaaaab 	.word	0xaaaaaaab
 8004358:	400204b8 	.word	0x400204b8
 800435c:	4002040f 	.word	0x4002040f
 8004360:	10008200 	.word	0x10008200
 8004364:	40020880 	.word	0x40020880

08004368 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d04a      	beq.n	8004414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d847      	bhi.n	8004414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a25      	ldr	r2, [pc, #148]	@ (8004420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d022      	beq.n	80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a24      	ldr	r2, [pc, #144]	@ (8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d01d      	beq.n	80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a22      	ldr	r2, [pc, #136]	@ (8004428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a21      	ldr	r2, [pc, #132]	@ (800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1b      	ldr	r2, [pc, #108]	@ (800443c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d101      	bne.n	80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043d8:	2300      	movs	r3, #0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4b17      	ldr	r3, [pc, #92]	@ (8004440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	461a      	mov	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a15      	ldr	r2, [pc, #84]	@ (8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80043f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80043f2:	e009      	b.n	8004408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4b14      	ldr	r3, [pc, #80]	@ (8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	461a      	mov	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a11      	ldr	r2, [pc, #68]	@ (800444c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004406:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3b01      	subs	r3, #1
 800440c:	2201      	movs	r2, #1
 800440e:	409a      	lsls	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	58025408 	.word	0x58025408
 8004424:	5802541c 	.word	0x5802541c
 8004428:	58025430 	.word	0x58025430
 800442c:	58025444 	.word	0x58025444
 8004430:	58025458 	.word	0x58025458
 8004434:	5802546c 	.word	0x5802546c
 8004438:	58025480 	.word	0x58025480
 800443c:	58025494 	.word	0x58025494
 8004440:	1600963f 	.word	0x1600963f
 8004444:	58025940 	.word	0x58025940
 8004448:	1000823f 	.word	0x1000823f
 800444c:	40020940 	.word	0x40020940

08004450 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b098      	sub	sp, #96	@ 0x60
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004458:	4a84      	ldr	r2, [pc, #528]	@ (800466c <HAL_FDCAN_Init+0x21c>)
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	4611      	mov	r1, r2
 8004460:	224c      	movs	r2, #76	@ 0x4c
 8004462:	4618      	mov	r0, r3
 8004464:	f009 f82f 	bl	800d4c6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1c6      	b.n	8004800 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a7e      	ldr	r2, [pc, #504]	@ (8004670 <HAL_FDCAN_Init+0x220>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d106      	bne.n	800448a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004484:	461a      	mov	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc fb98 	bl	8000bd4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0210 	bic.w	r2, r2, #16
 80044b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044b4:	f7fd fa12 	bl	80018dc <HAL_GetTick>
 80044b8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044ba:	e014      	b.n	80044e6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80044bc:	f7fd fa0e 	bl	80018dc <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b0a      	cmp	r3, #10
 80044c8:	d90d      	bls.n	80044e6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2203      	movs	r2, #3
 80044de:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e18c      	b.n	8004800 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d0e3      	beq.n	80044bc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004504:	f7fd f9ea 	bl	80018dc <HAL_GetTick>
 8004508:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800450a:	e014      	b.n	8004536 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800450c:	f7fd f9e6 	bl	80018dc <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b0a      	cmp	r3, #10
 8004518:	d90d      	bls.n	8004536 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2203      	movs	r2, #3
 800452e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e164      	b.n	8004800 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0e3      	beq.n	800450c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0202 	orr.w	r2, r2, #2
 8004552:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7c1b      	ldrb	r3, [r3, #16]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d108      	bne.n	800456e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800456a:	619a      	str	r2, [r3, #24]
 800456c:	e007      	b.n	800457e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699a      	ldr	r2, [r3, #24]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800457c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7c5b      	ldrb	r3, [r3, #17]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d108      	bne.n	8004598 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699a      	ldr	r2, [r3, #24]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004594:	619a      	str	r2, [r3, #24]
 8004596:	e007      	b.n	80045a8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	7c9b      	ldrb	r3, [r3, #18]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d108      	bne.n	80045c2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045be:	619a      	str	r2, [r3, #24]
 80045c0:	e007      	b.n	80045d2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045d0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80045f6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0210 	bic.w	r2, r2, #16
 8004606:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d108      	bne.n	8004622 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0204 	orr.w	r2, r2, #4
 800461e:	619a      	str	r2, [r3, #24]
 8004620:	e030      	b.n	8004684 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d02c      	beq.n	8004684 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d020      	beq.n	8004674 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004640:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0210 	orr.w	r2, r2, #16
 8004650:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b03      	cmp	r3, #3
 8004658:	d114      	bne.n	8004684 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699a      	ldr	r2, [r3, #24]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0220 	orr.w	r2, r2, #32
 8004668:	619a      	str	r2, [r3, #24]
 800466a:	e00b      	b.n	8004684 <HAL_FDCAN_Init+0x234>
 800466c:	0800e050 	.word	0x0800e050
 8004670:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0220 	orr.w	r2, r2, #32
 8004682:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	3b01      	subs	r3, #1
 800468a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	3b01      	subs	r3, #1
 8004692:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004694:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800469c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046ac:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046ae:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046b8:	d115      	bne.n	80046e6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	3b01      	subs	r3, #1
 80046c6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046c8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ce:	3b01      	subs	r3, #1
 80046d0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80046d2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	3b01      	subs	r3, #1
 80046dc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80046e2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046e4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470c:	4413      	add	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d011      	beq.n	8004736 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800471a:	f023 0107 	bic.w	r1, r3, #7
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	3360      	adds	r3, #96	@ 0x60
 8004726:	443b      	add	r3, r7
 8004728:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d011      	beq.n	8004762 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004746:	f023 0107 	bic.w	r1, r3, #7
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	3360      	adds	r3, #96	@ 0x60
 8004752:	443b      	add	r3, r7
 8004754:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004766:	2b00      	cmp	r3, #0
 8004768:	d012      	beq.n	8004790 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004772:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	3360      	adds	r3, #96	@ 0x60
 800477e:	443b      	add	r3, r7
 8004780:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004784:	011a      	lsls	r2, r3, #4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004794:	2b00      	cmp	r3, #0
 8004796:	d012      	beq.n	80047be <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047a0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	3360      	adds	r3, #96	@ 0x60
 80047ac:	443b      	add	r3, r7
 80047ae:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80047b2:	021a      	lsls	r2, r3, #8
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a11      	ldr	r2, [pc, #68]	@ (8004808 <HAL_FDCAN_Init+0x3b8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d107      	bne.n	80047d8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f022 0203 	bic.w	r2, r2, #3
 80047d6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f80b 	bl	800480c <FDCAN_CalcultateRamBlockAddresses>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80047fc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004800:	4618      	mov	r0, r3
 8004802:	3760      	adds	r7, #96	@ 0x60
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	4000a000 	.word	0x4000a000

0800480c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004818:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004822:	4ba7      	ldr	r3, [pc, #668]	@ (8004ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004824:	4013      	ands	r3, r2
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	0091      	lsls	r1, r2, #2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	430b      	orrs	r3, r1
 8004830:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800483c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004844:	041a      	lsls	r2, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	4413      	add	r3, r2
 8004858:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004862:	4b97      	ldr	r3, [pc, #604]	@ (8004ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004864:	4013      	ands	r3, r2
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	0091      	lsls	r1, r2, #2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	430b      	orrs	r3, r1
 8004870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004884:	041a      	lsls	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4413      	add	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80048a4:	4b86      	ldr	r3, [pc, #536]	@ (8004ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	0091      	lsls	r1, r2, #2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	430b      	orrs	r3, r1
 80048b2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048be:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	041a      	lsls	r2, r3, #16
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	4413      	add	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80048ec:	4b74      	ldr	r3, [pc, #464]	@ (8004ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	0091      	lsls	r1, r2, #2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004906:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490e:	041a      	lsls	r2, r3, #16
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4413      	add	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004934:	4b62      	ldr	r3, [pc, #392]	@ (8004ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004936:	4013      	ands	r3, r2
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	0091      	lsls	r1, r2, #2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	430b      	orrs	r3, r1
 8004942:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4413      	add	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004960:	4b57      	ldr	r3, [pc, #348]	@ (8004ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004962:	4013      	ands	r3, r2
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	0091      	lsls	r1, r2, #2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	430b      	orrs	r3, r1
 800496e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800497a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004982:	041a      	lsls	r2, r3, #16
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	4413      	add	r3, r2
 8004998:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80049a2:	4b47      	ldr	r3, [pc, #284]	@ (8004ac0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	0091      	lsls	r1, r2, #2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	430b      	orrs	r3, r1
 80049b0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80049bc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c4:	041a      	lsls	r2, r3, #16
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80049d8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e0:	061a      	lsls	r2, r3, #24
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049f0:	4b34      	ldr	r3, [pc, #208]	@ (8004ac4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80049f2:	4413      	add	r3, r2
 80049f4:	009a      	lsls	r2, r3, #2
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	441a      	add	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004a2c:	441a      	add	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004a44:	441a      	add	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004a5c:	441a      	add	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	441a      	add	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	441a      	add	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004aa8:	441a      	add	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab6:	4a04      	ldr	r2, [pc, #16]	@ (8004ac8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d915      	bls.n	8004ae8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004abc:	e006      	b.n	8004acc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004abe:	bf00      	nop
 8004ac0:	ffff0003 	.word	0xffff0003
 8004ac4:	10002b00 	.word	0x10002b00
 8004ac8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2203      	movs	r2, #3
 8004ae0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e010      	b.n	8004b0a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e005      	b.n	8004afc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3304      	adds	r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d3f3      	bcc.n	8004af0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop

08004b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b089      	sub	sp, #36	@ 0x24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b26:	4b89      	ldr	r3, [pc, #548]	@ (8004d4c <HAL_GPIO_Init+0x234>)
 8004b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b2a:	e194      	b.n	8004e56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	2101      	movs	r1, #1
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	fa01 f303 	lsl.w	r3, r1, r3
 8004b38:	4013      	ands	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8186 	beq.w	8004e50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d005      	beq.n	8004b5c <HAL_GPIO_Init+0x44>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d130      	bne.n	8004bbe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	2203      	movs	r2, #3
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b92:	2201      	movs	r2, #1
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	f003 0201 	and.w	r2, r3, #1
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d017      	beq.n	8004bfa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4013      	ands	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d123      	bne.n	8004c4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	08da      	lsrs	r2, r3, #3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3208      	adds	r2, #8
 8004c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	220f      	movs	r2, #15
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	08da      	lsrs	r2, r3, #3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3208      	adds	r2, #8
 8004c48:	69b9      	ldr	r1, [r7, #24]
 8004c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	2203      	movs	r2, #3
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 0203 	and.w	r2, r3, #3
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80e0 	beq.w	8004e50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c90:	4b2f      	ldr	r3, [pc, #188]	@ (8004d50 <HAL_GPIO_Init+0x238>)
 8004c92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c96:	4a2e      	ldr	r2, [pc, #184]	@ (8004d50 <HAL_GPIO_Init+0x238>)
 8004c98:	f043 0302 	orr.w	r3, r3, #2
 8004c9c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d50 <HAL_GPIO_Init+0x238>)
 8004ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cae:	4a29      	ldr	r2, [pc, #164]	@ (8004d54 <HAL_GPIO_Init+0x23c>)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	220f      	movs	r2, #15
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a20      	ldr	r2, [pc, #128]	@ (8004d58 <HAL_GPIO_Init+0x240>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d052      	beq.n	8004d80 <HAL_GPIO_Init+0x268>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d5c <HAL_GPIO_Init+0x244>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d031      	beq.n	8004d46 <HAL_GPIO_Init+0x22e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d60 <HAL_GPIO_Init+0x248>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d02b      	beq.n	8004d42 <HAL_GPIO_Init+0x22a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	@ (8004d64 <HAL_GPIO_Init+0x24c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d025      	beq.n	8004d3e <HAL_GPIO_Init+0x226>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <HAL_GPIO_Init+0x250>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01f      	beq.n	8004d3a <HAL_GPIO_Init+0x222>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d6c <HAL_GPIO_Init+0x254>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d019      	beq.n	8004d36 <HAL_GPIO_Init+0x21e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1a      	ldr	r2, [pc, #104]	@ (8004d70 <HAL_GPIO_Init+0x258>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_GPIO_Init+0x21a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a19      	ldr	r2, [pc, #100]	@ (8004d74 <HAL_GPIO_Init+0x25c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00d      	beq.n	8004d2e <HAL_GPIO_Init+0x216>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a18      	ldr	r2, [pc, #96]	@ (8004d78 <HAL_GPIO_Init+0x260>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <HAL_GPIO_Init+0x212>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a17      	ldr	r2, [pc, #92]	@ (8004d7c <HAL_GPIO_Init+0x264>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_GPIO_Init+0x20e>
 8004d22:	2309      	movs	r3, #9
 8004d24:	e02d      	b.n	8004d82 <HAL_GPIO_Init+0x26a>
 8004d26:	230a      	movs	r3, #10
 8004d28:	e02b      	b.n	8004d82 <HAL_GPIO_Init+0x26a>
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	e029      	b.n	8004d82 <HAL_GPIO_Init+0x26a>
 8004d2e:	2307      	movs	r3, #7
 8004d30:	e027      	b.n	8004d82 <HAL_GPIO_Init+0x26a>
 8004d32:	2306      	movs	r3, #6
 8004d34:	e025      	b.n	8004d82 <HAL_GPIO_Init+0x26a>
 8004d36:	2305      	movs	r3, #5
 8004d38:	e023      	b.n	8004d82 <HAL_GPIO_Init+0x26a>
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	e021      	b.n	8004d82 <HAL_GPIO_Init+0x26a>
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e01f      	b.n	8004d82 <HAL_GPIO_Init+0x26a>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e01d      	b.n	8004d82 <HAL_GPIO_Init+0x26a>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e01b      	b.n	8004d82 <HAL_GPIO_Init+0x26a>
 8004d4a:	bf00      	nop
 8004d4c:	58000080 	.word	0x58000080
 8004d50:	58024400 	.word	0x58024400
 8004d54:	58000400 	.word	0x58000400
 8004d58:	58020000 	.word	0x58020000
 8004d5c:	58020400 	.word	0x58020400
 8004d60:	58020800 	.word	0x58020800
 8004d64:	58020c00 	.word	0x58020c00
 8004d68:	58021000 	.word	0x58021000
 8004d6c:	58021400 	.word	0x58021400
 8004d70:	58021800 	.word	0x58021800
 8004d74:	58021c00 	.word	0x58021c00
 8004d78:	58022000 	.word	0x58022000
 8004d7c:	58022400 	.word	0x58022400
 8004d80:	2300      	movs	r3, #0
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	f002 0203 	and.w	r2, r2, #3
 8004d88:	0092      	lsls	r2, r2, #2
 8004d8a:	4093      	lsls	r3, r2
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d92:	4938      	ldr	r1, [pc, #224]	@ (8004e74 <HAL_GPIO_Init+0x35c>)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	3302      	adds	r3, #2
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004dc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	3301      	adds	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f47f ae63 	bne.w	8004b2c <HAL_GPIO_Init+0x14>
  }
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	3724      	adds	r7, #36	@ 0x24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	58000400 	.word	0x58000400

08004e78 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004e80:	4a08      	ldr	r2, [pc, #32]	@ (8004ea4 <HAL_HSEM_FastTake+0x2c>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3320      	adds	r3, #32
 8004e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8a:	4a07      	ldr	r2, [pc, #28]	@ (8004ea8 <HAL_HSEM_FastTake+0x30>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d101      	bne.n	8004e94 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e000      	b.n	8004e96 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	58026400 	.word	0x58026400
 8004ea8:	80000300 	.word	0x80000300

08004eac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004eb6:	4906      	ldr	r1, [pc, #24]	@ (8004ed0 <HAL_HSEM_Release+0x24>)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	58026400 	.word	0x58026400

08004ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e08b      	b.n	8004ffe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fc f86e 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2224      	movs	r2, #36	@ 0x24
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0201 	bic.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d107      	bne.n	8004f4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	e006      	b.n	8004f5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004f5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d108      	bne.n	8004f76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f72:	605a      	str	r2, [r3, #4]
 8004f74:	e007      	b.n	8004f86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6859      	ldr	r1, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b1d      	ldr	r3, [pc, #116]	@ (8005008 <HAL_I2C_Init+0x134>)
 8004f92:	430b      	orrs	r3, r1
 8004f94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69d9      	ldr	r1, [r3, #28]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1a      	ldr	r2, [r3, #32]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	02008000 	.word	0x02008000

0800500c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b20      	cmp	r3, #32
 8005020:	d138      	bne.n	8005094 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800502c:	2302      	movs	r3, #2
 800502e:	e032      	b.n	8005096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2224      	movs	r2, #36	@ 0x24
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800505e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6819      	ldr	r1, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	e000      	b.n	8005096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005094:	2302      	movs	r3, #2
  }
}
 8005096:	4618      	mov	r0, r3
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d139      	bne.n	800512c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e033      	b.n	800512e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2224      	movs	r2, #36	@ 0x24
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e000      	b.n	800512e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005144:	4b29      	ldr	r3, [pc, #164]	@ (80051ec <HAL_PWREx_ConfigSupply+0xb0>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	2b06      	cmp	r3, #6
 800514e:	d00a      	beq.n	8005166 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005150:	4b26      	ldr	r3, [pc, #152]	@ (80051ec <HAL_PWREx_ConfigSupply+0xb0>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	429a      	cmp	r2, r3
 800515c:	d001      	beq.n	8005162 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e040      	b.n	80051e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e03e      	b.n	80051e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005166:	4b21      	ldr	r3, [pc, #132]	@ (80051ec <HAL_PWREx_ConfigSupply+0xb0>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800516e:	491f      	ldr	r1, [pc, #124]	@ (80051ec <HAL_PWREx_ConfigSupply+0xb0>)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005176:	f7fc fbb1 	bl	80018dc <HAL_GetTick>
 800517a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800517c:	e009      	b.n	8005192 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800517e:	f7fc fbad 	bl	80018dc <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800518c:	d901      	bls.n	8005192 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e028      	b.n	80051e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005192:	4b16      	ldr	r3, [pc, #88]	@ (80051ec <HAL_PWREx_ConfigSupply+0xb0>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800519a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800519e:	d1ee      	bne.n	800517e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b1e      	cmp	r3, #30
 80051a4:	d008      	beq.n	80051b8 <HAL_PWREx_ConfigSupply+0x7c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80051aa:	d005      	beq.n	80051b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b1d      	cmp	r3, #29
 80051b0:	d002      	beq.n	80051b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b2d      	cmp	r3, #45	@ 0x2d
 80051b6:	d114      	bne.n	80051e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80051b8:	f7fc fb90 	bl	80018dc <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80051be:	e009      	b.n	80051d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051c0:	f7fc fb8c 	bl	80018dc <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051ce:	d901      	bls.n	80051d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e007      	b.n	80051e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80051d4:	4b05      	ldr	r3, [pc, #20]	@ (80051ec <HAL_PWREx_ConfigSupply+0xb0>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e0:	d1ee      	bne.n	80051c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	58024800 	.word	0x58024800

080051f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	@ 0x30
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f000 bc48 	b.w	8005a94 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8088 	beq.w	8005322 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005212:	4b99      	ldr	r3, [pc, #612]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800521a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800521c:	4b96      	ldr	r3, [pc, #600]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 800521e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005220:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005224:	2b10      	cmp	r3, #16
 8005226:	d007      	beq.n	8005238 <HAL_RCC_OscConfig+0x48>
 8005228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522a:	2b18      	cmp	r3, #24
 800522c:	d111      	bne.n	8005252 <HAL_RCC_OscConfig+0x62>
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d10c      	bne.n	8005252 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005238:	4b8f      	ldr	r3, [pc, #572]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d06d      	beq.n	8005320 <HAL_RCC_OscConfig+0x130>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d169      	bne.n	8005320 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	f000 bc21 	b.w	8005a94 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525a:	d106      	bne.n	800526a <HAL_RCC_OscConfig+0x7a>
 800525c:	4b86      	ldr	r3, [pc, #536]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a85      	ldr	r2, [pc, #532]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	e02e      	b.n	80052c8 <HAL_RCC_OscConfig+0xd8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10c      	bne.n	800528c <HAL_RCC_OscConfig+0x9c>
 8005272:	4b81      	ldr	r3, [pc, #516]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a80      	ldr	r2, [pc, #512]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	4b7e      	ldr	r3, [pc, #504]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a7d      	ldr	r2, [pc, #500]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005284:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e01d      	b.n	80052c8 <HAL_RCC_OscConfig+0xd8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCC_OscConfig+0xc0>
 8005296:	4b78      	ldr	r3, [pc, #480]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a77      	ldr	r2, [pc, #476]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 800529c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b75      	ldr	r3, [pc, #468]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a74      	ldr	r2, [pc, #464]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e00b      	b.n	80052c8 <HAL_RCC_OscConfig+0xd8>
 80052b0:	4b71      	ldr	r3, [pc, #452]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a70      	ldr	r2, [pc, #448]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b6e      	ldr	r3, [pc, #440]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a6d      	ldr	r2, [pc, #436]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80052c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d0:	f7fc fb04 	bl	80018dc <HAL_GetTick>
 80052d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fc fb00 	bl	80018dc <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	@ 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e3d4      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052ea:	4b63      	ldr	r3, [pc, #396]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0xe8>
 80052f6:	e014      	b.n	8005322 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fc faf0 	bl	80018dc <HAL_GetTick>
 80052fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005300:	f7fc faec 	bl	80018dc <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	@ 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e3c0      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005312:	4b59      	ldr	r3, [pc, #356]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x110>
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 80ca 	beq.w	80054c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005330:	4b51      	ldr	r3, [pc, #324]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005338:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800533a:	4b4f      	ldr	r3, [pc, #316]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 800533c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <HAL_RCC_OscConfig+0x166>
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	2b18      	cmp	r3, #24
 800534a:	d156      	bne.n	80053fa <HAL_RCC_OscConfig+0x20a>
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d151      	bne.n	80053fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005356:	4b48      	ldr	r3, [pc, #288]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <HAL_RCC_OscConfig+0x17e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e392      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800536e:	4b42      	ldr	r3, [pc, #264]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 0219 	bic.w	r2, r3, #25
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	493f      	ldr	r1, [pc, #252]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 800537c:	4313      	orrs	r3, r2
 800537e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fc faac 	bl	80018dc <HAL_GetTick>
 8005384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005388:	f7fc faa8 	bl	80018dc <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e37c      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800539a:	4b37      	ldr	r3, [pc, #220]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a6:	f7fc fac9 	bl	800193c <HAL_GetREVID>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d817      	bhi.n	80053e4 <HAL_RCC_OscConfig+0x1f4>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b40      	cmp	r3, #64	@ 0x40
 80053ba:	d108      	bne.n	80053ce <HAL_RCC_OscConfig+0x1de>
 80053bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80053c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80053c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053cc:	e07a      	b.n	80054c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	031b      	lsls	r3, r3, #12
 80053dc:	4926      	ldr	r1, [pc, #152]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053e2:	e06f      	b.n	80054c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e4:	4b24      	ldr	r3, [pc, #144]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	061b      	lsls	r3, r3, #24
 80053f2:	4921      	ldr	r1, [pc, #132]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053f8:	e064      	b.n	80054c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d047      	beq.n	8005492 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005402:	4b1d      	ldr	r3, [pc, #116]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 0219 	bic.w	r2, r3, #25
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	491a      	ldr	r1, [pc, #104]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005410:	4313      	orrs	r3, r2
 8005412:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fc fa62 	bl	80018dc <HAL_GetTick>
 8005418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800541c:	f7fc fa5e 	bl	80018dc <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e332      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800542e:	4b12      	ldr	r3, [pc, #72]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800543a:	f7fc fa7f 	bl	800193c <HAL_GetREVID>
 800543e:	4603      	mov	r3, r0
 8005440:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005444:	4293      	cmp	r3, r2
 8005446:	d819      	bhi.n	800547c <HAL_RCC_OscConfig+0x28c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b40      	cmp	r3, #64	@ 0x40
 800544e:	d108      	bne.n	8005462 <HAL_RCC_OscConfig+0x272>
 8005450:	4b09      	ldr	r3, [pc, #36]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005458:	4a07      	ldr	r2, [pc, #28]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 800545a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800545e:	6053      	str	r3, [r2, #4]
 8005460:	e030      	b.n	80054c4 <HAL_RCC_OscConfig+0x2d4>
 8005462:	4b05      	ldr	r3, [pc, #20]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	031b      	lsls	r3, r3, #12
 8005470:	4901      	ldr	r1, [pc, #4]	@ (8005478 <HAL_RCC_OscConfig+0x288>)
 8005472:	4313      	orrs	r3, r2
 8005474:	604b      	str	r3, [r1, #4]
 8005476:	e025      	b.n	80054c4 <HAL_RCC_OscConfig+0x2d4>
 8005478:	58024400 	.word	0x58024400
 800547c:	4b9a      	ldr	r3, [pc, #616]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	061b      	lsls	r3, r3, #24
 800548a:	4997      	ldr	r1, [pc, #604]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 800548c:	4313      	orrs	r3, r2
 800548e:	604b      	str	r3, [r1, #4]
 8005490:	e018      	b.n	80054c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005492:	4b95      	ldr	r3, [pc, #596]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a94      	ldr	r2, [pc, #592]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549e:	f7fc fa1d 	bl	80018dc <HAL_GetTick>
 80054a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a6:	f7fc fa19 	bl	80018dc <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e2ed      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054b8:	4b8b      	ldr	r3, [pc, #556]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f0      	bne.n	80054a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80a9 	beq.w	8005624 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054d2:	4b85      	ldr	r3, [pc, #532]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054dc:	4b82      	ldr	r3, [pc, #520]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80054de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d007      	beq.n	80054f8 <HAL_RCC_OscConfig+0x308>
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b18      	cmp	r3, #24
 80054ec:	d13a      	bne.n	8005564 <HAL_RCC_OscConfig+0x374>
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d135      	bne.n	8005564 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054f8:	4b7b      	ldr	r3, [pc, #492]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_RCC_OscConfig+0x320>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	2b80      	cmp	r3, #128	@ 0x80
 800550a:	d001      	beq.n	8005510 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e2c1      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005510:	f7fc fa14 	bl	800193c <HAL_GetREVID>
 8005514:	4603      	mov	r3, r0
 8005516:	f241 0203 	movw	r2, #4099	@ 0x1003
 800551a:	4293      	cmp	r3, r2
 800551c:	d817      	bhi.n	800554e <HAL_RCC_OscConfig+0x35e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	2b20      	cmp	r3, #32
 8005524:	d108      	bne.n	8005538 <HAL_RCC_OscConfig+0x348>
 8005526:	4b70      	ldr	r3, [pc, #448]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800552e:	4a6e      	ldr	r2, [pc, #440]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 8005530:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005534:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005536:	e075      	b.n	8005624 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005538:	4b6b      	ldr	r3, [pc, #428]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	069b      	lsls	r3, r3, #26
 8005546:	4968      	ldr	r1, [pc, #416]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 8005548:	4313      	orrs	r3, r2
 800554a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800554c:	e06a      	b.n	8005624 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800554e:	4b66      	ldr	r3, [pc, #408]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	061b      	lsls	r3, r3, #24
 800555c:	4962      	ldr	r1, [pc, #392]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 800555e:	4313      	orrs	r3, r2
 8005560:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005562:	e05f      	b.n	8005624 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d042      	beq.n	80055f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800556c:	4b5e      	ldr	r3, [pc, #376]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a5d      	ldr	r2, [pc, #372]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 8005572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fc f9b0 	bl	80018dc <HAL_GetTick>
 800557c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005580:	f7fc f9ac 	bl	80018dc <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e280      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005592:	4b55      	ldr	r3, [pc, #340]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800559e:	f7fc f9cd 	bl	800193c <HAL_GetREVID>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d817      	bhi.n	80055dc <HAL_RCC_OscConfig+0x3ec>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d108      	bne.n	80055c6 <HAL_RCC_OscConfig+0x3d6>
 80055b4:	4b4c      	ldr	r3, [pc, #304]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80055bc:	4a4a      	ldr	r2, [pc, #296]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80055be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055c2:	6053      	str	r3, [r2, #4]
 80055c4:	e02e      	b.n	8005624 <HAL_RCC_OscConfig+0x434>
 80055c6:	4b48      	ldr	r3, [pc, #288]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	069b      	lsls	r3, r3, #26
 80055d4:	4944      	ldr	r1, [pc, #272]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	604b      	str	r3, [r1, #4]
 80055da:	e023      	b.n	8005624 <HAL_RCC_OscConfig+0x434>
 80055dc:	4b42      	ldr	r3, [pc, #264]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	061b      	lsls	r3, r3, #24
 80055ea:	493f      	ldr	r1, [pc, #252]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60cb      	str	r3, [r1, #12]
 80055f0:	e018      	b.n	8005624 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055f2:	4b3d      	ldr	r3, [pc, #244]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a3c      	ldr	r2, [pc, #240]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80055f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fe:	f7fc f96d 	bl	80018dc <HAL_GetTick>
 8005602:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005606:	f7fc f969 	bl	80018dc <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e23d      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005618:	4b33      	ldr	r3, [pc, #204]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1f0      	bne.n	8005606 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b00      	cmp	r3, #0
 800562e:	d036      	beq.n	800569e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d019      	beq.n	800566c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005638:	4b2b      	ldr	r3, [pc, #172]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 800563a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800563c:	4a2a      	ldr	r2, [pc, #168]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 800563e:	f043 0301 	orr.w	r3, r3, #1
 8005642:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005644:	f7fc f94a 	bl	80018dc <HAL_GetTick>
 8005648:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800564c:	f7fc f946 	bl	80018dc <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e21a      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800565e:	4b22      	ldr	r3, [pc, #136]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 8005660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <HAL_RCC_OscConfig+0x45c>
 800566a:	e018      	b.n	800569e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800566c:	4b1e      	ldr	r3, [pc, #120]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 800566e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005670:	4a1d      	ldr	r2, [pc, #116]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 8005672:	f023 0301 	bic.w	r3, r3, #1
 8005676:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fc f930 	bl	80018dc <HAL_GetTick>
 800567c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005680:	f7fc f92c 	bl	80018dc <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e200      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005692:	4b15      	ldr	r3, [pc, #84]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 8005694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f0      	bne.n	8005680 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d039      	beq.n	800571e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01c      	beq.n	80056ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056b2:	4b0d      	ldr	r3, [pc, #52]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a0c      	ldr	r2, [pc, #48]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80056b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056be:	f7fc f90d 	bl	80018dc <HAL_GetTick>
 80056c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056c6:	f7fc f909 	bl	80018dc <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e1dd      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056d8:	4b03      	ldr	r3, [pc, #12]	@ (80056e8 <HAL_RCC_OscConfig+0x4f8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x4d6>
 80056e4:	e01b      	b.n	800571e <HAL_RCC_OscConfig+0x52e>
 80056e6:	bf00      	nop
 80056e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056ec:	4b9b      	ldr	r3, [pc, #620]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a9a      	ldr	r2, [pc, #616]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80056f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056f8:	f7fc f8f0 	bl	80018dc <HAL_GetTick>
 80056fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005700:	f7fc f8ec 	bl	80018dc <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e1c0      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005712:	4b92      	ldr	r3, [pc, #584]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 8081 	beq.w	800582e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800572c:	4b8c      	ldr	r3, [pc, #560]	@ (8005960 <HAL_RCC_OscConfig+0x770>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a8b      	ldr	r2, [pc, #556]	@ (8005960 <HAL_RCC_OscConfig+0x770>)
 8005732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005738:	f7fc f8d0 	bl	80018dc <HAL_GetTick>
 800573c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005740:	f7fc f8cc 	bl	80018dc <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b64      	cmp	r3, #100	@ 0x64
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e1a0      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005752:	4b83      	ldr	r3, [pc, #524]	@ (8005960 <HAL_RCC_OscConfig+0x770>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d106      	bne.n	8005774 <HAL_RCC_OscConfig+0x584>
 8005766:	4b7d      	ldr	r3, [pc, #500]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576a:	4a7c      	ldr	r2, [pc, #496]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	6713      	str	r3, [r2, #112]	@ 0x70
 8005772:	e02d      	b.n	80057d0 <HAL_RCC_OscConfig+0x5e0>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10c      	bne.n	8005796 <HAL_RCC_OscConfig+0x5a6>
 800577c:	4b77      	ldr	r3, [pc, #476]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 800577e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005780:	4a76      	ldr	r2, [pc, #472]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	6713      	str	r3, [r2, #112]	@ 0x70
 8005788:	4b74      	ldr	r3, [pc, #464]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578c:	4a73      	ldr	r2, [pc, #460]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 800578e:	f023 0304 	bic.w	r3, r3, #4
 8005792:	6713      	str	r3, [r2, #112]	@ 0x70
 8005794:	e01c      	b.n	80057d0 <HAL_RCC_OscConfig+0x5e0>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b05      	cmp	r3, #5
 800579c:	d10c      	bne.n	80057b8 <HAL_RCC_OscConfig+0x5c8>
 800579e:	4b6f      	ldr	r3, [pc, #444]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a2:	4a6e      	ldr	r2, [pc, #440]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80057a4:	f043 0304 	orr.w	r3, r3, #4
 80057a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057aa:	4b6c      	ldr	r3, [pc, #432]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ae:	4a6b      	ldr	r2, [pc, #428]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b6:	e00b      	b.n	80057d0 <HAL_RCC_OscConfig+0x5e0>
 80057b8:	4b68      	ldr	r3, [pc, #416]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057bc:	4a67      	ldr	r2, [pc, #412]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80057be:	f023 0301 	bic.w	r3, r3, #1
 80057c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c4:	4b65      	ldr	r3, [pc, #404]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c8:	4a64      	ldr	r2, [pc, #400]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80057ca:	f023 0304 	bic.w	r3, r3, #4
 80057ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d015      	beq.n	8005804 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fc f880 	bl	80018dc <HAL_GetTick>
 80057dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057de:	e00a      	b.n	80057f6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e0:	f7fc f87c 	bl	80018dc <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e14e      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057f6:	4b59      	ldr	r3, [pc, #356]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0ee      	beq.n	80057e0 <HAL_RCC_OscConfig+0x5f0>
 8005802:	e014      	b.n	800582e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005804:	f7fc f86a 	bl	80018dc <HAL_GetTick>
 8005808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800580a:	e00a      	b.n	8005822 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580c:	f7fc f866 	bl	80018dc <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800581a:	4293      	cmp	r3, r2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e138      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005822:	4b4e      	ldr	r3, [pc, #312]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1ee      	bne.n	800580c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 812d 	beq.w	8005a92 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005838:	4b48      	ldr	r3, [pc, #288]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005840:	2b18      	cmp	r3, #24
 8005842:	f000 80bd 	beq.w	80059c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	2b02      	cmp	r3, #2
 800584c:	f040 809e 	bne.w	800598c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005850:	4b42      	ldr	r3, [pc, #264]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a41      	ldr	r2, [pc, #260]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800585a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585c:	f7fc f83e 	bl	80018dc <HAL_GetTick>
 8005860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005864:	f7fc f83a 	bl	80018dc <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e10e      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005876:	4b39      	ldr	r3, [pc, #228]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005882:	4b36      	ldr	r3, [pc, #216]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005884:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005886:	4b37      	ldr	r3, [pc, #220]	@ (8005964 <HAL_RCC_OscConfig+0x774>)
 8005888:	4013      	ands	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005892:	0112      	lsls	r2, r2, #4
 8005894:	430a      	orrs	r2, r1
 8005896:	4931      	ldr	r1, [pc, #196]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005898:	4313      	orrs	r3, r2
 800589a:	628b      	str	r3, [r1, #40]	@ 0x28
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a0:	3b01      	subs	r3, #1
 80058a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058aa:	3b01      	subs	r3, #1
 80058ac:	025b      	lsls	r3, r3, #9
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b6:	3b01      	subs	r3, #1
 80058b8:	041b      	lsls	r3, r3, #16
 80058ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c4:	3b01      	subs	r3, #1
 80058c6:	061b      	lsls	r3, r3, #24
 80058c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058cc:	4923      	ldr	r1, [pc, #140]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80058d2:	4b22      	ldr	r3, [pc, #136]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80058d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d6:	4a21      	ldr	r2, [pc, #132]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80058d8:	f023 0301 	bic.w	r3, r3, #1
 80058dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058de:	4b1f      	ldr	r3, [pc, #124]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80058e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058e2:	4b21      	ldr	r3, [pc, #132]	@ (8005968 <HAL_RCC_OscConfig+0x778>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80058ea:	00d2      	lsls	r2, r2, #3
 80058ec:	491b      	ldr	r1, [pc, #108]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058f2:	4b1a      	ldr	r3, [pc, #104]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	f023 020c 	bic.w	r2, r3, #12
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	4917      	ldr	r1, [pc, #92]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005900:	4313      	orrs	r3, r2
 8005902:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005904:	4b15      	ldr	r3, [pc, #84]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005908:	f023 0202 	bic.w	r2, r3, #2
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005910:	4912      	ldr	r1, [pc, #72]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005916:	4b11      	ldr	r3, [pc, #68]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591a:	4a10      	ldr	r2, [pc, #64]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 800591c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005920:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005922:	4b0e      	ldr	r3, [pc, #56]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	4a0d      	ldr	r2, [pc, #52]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800592c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800592e:	4b0b      	ldr	r3, [pc, #44]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	4a0a      	ldr	r2, [pc, #40]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005938:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800593a:	4b08      	ldr	r3, [pc, #32]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	4a07      	ldr	r2, [pc, #28]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005946:	4b05      	ldr	r3, [pc, #20]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a04      	ldr	r2, [pc, #16]	@ (800595c <HAL_RCC_OscConfig+0x76c>)
 800594c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005952:	f7fb ffc3 	bl	80018dc <HAL_GetTick>
 8005956:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005958:	e011      	b.n	800597e <HAL_RCC_OscConfig+0x78e>
 800595a:	bf00      	nop
 800595c:	58024400 	.word	0x58024400
 8005960:	58024800 	.word	0x58024800
 8005964:	fffffc0c 	.word	0xfffffc0c
 8005968:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596c:	f7fb ffb6 	bl	80018dc <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e08a      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800597e:	4b47      	ldr	r3, [pc, #284]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0x77c>
 800598a:	e082      	b.n	8005a92 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800598c:	4b43      	ldr	r3, [pc, #268]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a42      	ldr	r2, [pc, #264]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 8005992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005998:	f7fb ffa0 	bl	80018dc <HAL_GetTick>
 800599c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a0:	f7fb ff9c 	bl	80018dc <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e070      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059b2:	4b3a      	ldr	r3, [pc, #232]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0x7b0>
 80059be:	e068      	b.n	8005a92 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059c0:	4b36      	ldr	r3, [pc, #216]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 80059c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059c6:	4b35      	ldr	r3, [pc, #212]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d031      	beq.n	8005a38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f003 0203 	and.w	r2, r3, #3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059de:	429a      	cmp	r2, r3
 80059e0:	d12a      	bne.n	8005a38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d122      	bne.n	8005a38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d11a      	bne.n	8005a38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	0a5b      	lsrs	r3, r3, #9
 8005a06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d111      	bne.n	8005a38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a20:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d108      	bne.n	8005a38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	0e1b      	lsrs	r3, r3, #24
 8005a2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d001      	beq.n	8005a3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e02b      	b.n	8005a94 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a3c:	4b17      	ldr	r3, [pc, #92]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a40:	08db      	lsrs	r3, r3, #3
 8005a42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a46:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d01f      	beq.n	8005a92 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a52:	4b12      	ldr	r3, [pc, #72]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 8005a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a56:	4a11      	ldr	r2, [pc, #68]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 8005a58:	f023 0301 	bic.w	r3, r3, #1
 8005a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a5e:	f7fb ff3d 	bl	80018dc <HAL_GetTick>
 8005a62:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005a64:	bf00      	nop
 8005a66:	f7fb ff39 	bl	80018dc <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d0f9      	beq.n	8005a66 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 8005a74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a76:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <HAL_RCC_OscConfig+0x8b0>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a7e:	00d2      	lsls	r2, r2, #3
 8005a80:	4906      	ldr	r1, [pc, #24]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005a86:	4b05      	ldr	r3, [pc, #20]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8a:	4a04      	ldr	r2, [pc, #16]	@ (8005a9c <HAL_RCC_OscConfig+0x8ac>)
 8005a8c:	f043 0301 	orr.w	r3, r3, #1
 8005a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3730      	adds	r7, #48	@ 0x30
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	58024400 	.word	0x58024400
 8005aa0:	ffff0007 	.word	0xffff0007

08005aa4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e19c      	b.n	8005df2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab8:	4b8a      	ldr	r3, [pc, #552]	@ (8005ce4 <HAL_RCC_ClockConfig+0x240>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d910      	bls.n	8005ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac6:	4b87      	ldr	r3, [pc, #540]	@ (8005ce4 <HAL_RCC_ClockConfig+0x240>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f023 020f 	bic.w	r2, r3, #15
 8005ace:	4985      	ldr	r1, [pc, #532]	@ (8005ce4 <HAL_RCC_ClockConfig+0x240>)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad6:	4b83      	ldr	r3, [pc, #524]	@ (8005ce4 <HAL_RCC_ClockConfig+0x240>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e184      	b.n	8005df2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d010      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	4b7b      	ldr	r3, [pc, #492]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d908      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b04:	4b78      	ldr	r3, [pc, #480]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	4975      	ldr	r1, [pc, #468]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d010      	beq.n	8005b44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695a      	ldr	r2, [r3, #20]
 8005b26:	4b70      	ldr	r3, [pc, #448]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d908      	bls.n	8005b44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b32:	4b6d      	ldr	r3, [pc, #436]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	496a      	ldr	r1, [pc, #424]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d010      	beq.n	8005b72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699a      	ldr	r2, [r3, #24]
 8005b54:	4b64      	ldr	r3, [pc, #400]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d908      	bls.n	8005b72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b60:	4b61      	ldr	r3, [pc, #388]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	495e      	ldr	r1, [pc, #376]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d010      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69da      	ldr	r2, [r3, #28]
 8005b82:	4b59      	ldr	r3, [pc, #356]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d908      	bls.n	8005ba0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b8e:	4b56      	ldr	r3, [pc, #344]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	4953      	ldr	r1, [pc, #332]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d010      	beq.n	8005bce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d908      	bls.n	8005bce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f023 020f 	bic.w	r2, r3, #15
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4947      	ldr	r1, [pc, #284]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d055      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bda:	4b43      	ldr	r3, [pc, #268]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4940      	ldr	r1, [pc, #256]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d107      	bne.n	8005c04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d121      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0f6      	b.n	8005df2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d107      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c0c:	4b36      	ldr	r3, [pc, #216]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d115      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0ea      	b.n	8005df2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d107      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c24:	4b30      	ldr	r3, [pc, #192]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d109      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e0de      	b.n	8005df2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c34:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0d6      	b.n	8005df2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c44:	4b28      	ldr	r3, [pc, #160]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f023 0207 	bic.w	r2, r3, #7
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4925      	ldr	r1, [pc, #148]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c56:	f7fb fe41 	bl	80018dc <HAL_GetTick>
 8005c5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c5c:	e00a      	b.n	8005c74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c5e:	f7fb fe3d 	bl	80018dc <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e0be      	b.n	8005df2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c74:	4b1c      	ldr	r3, [pc, #112]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d1eb      	bne.n	8005c5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d010      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	4b14      	ldr	r3, [pc, #80]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d208      	bcs.n	8005cb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca2:	4b11      	ldr	r3, [pc, #68]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f023 020f 	bic.w	r2, r3, #15
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	490e      	ldr	r1, [pc, #56]	@ (8005ce8 <HAL_RCC_ClockConfig+0x244>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce4 <HAL_RCC_ClockConfig+0x240>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d214      	bcs.n	8005cec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc2:	4b08      	ldr	r3, [pc, #32]	@ (8005ce4 <HAL_RCC_ClockConfig+0x240>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f023 020f 	bic.w	r2, r3, #15
 8005cca:	4906      	ldr	r1, [pc, #24]	@ (8005ce4 <HAL_RCC_ClockConfig+0x240>)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd2:	4b04      	ldr	r3, [pc, #16]	@ (8005ce4 <HAL_RCC_ClockConfig+0x240>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d005      	beq.n	8005cec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e086      	b.n	8005df2 <HAL_RCC_ClockConfig+0x34e>
 8005ce4:	52002000 	.word	0x52002000
 8005ce8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d208      	bcs.n	8005d1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d08:	4b3c      	ldr	r3, [pc, #240]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	4939      	ldr	r1, [pc, #228]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d010      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	4b34      	ldr	r3, [pc, #208]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d208      	bcs.n	8005d48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d36:	4b31      	ldr	r3, [pc, #196]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	492e      	ldr	r1, [pc, #184]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d010      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	699a      	ldr	r2, [r3, #24]
 8005d58:	4b28      	ldr	r3, [pc, #160]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d208      	bcs.n	8005d76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d64:	4b25      	ldr	r3, [pc, #148]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	4922      	ldr	r1, [pc, #136]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d010      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69da      	ldr	r2, [r3, #28]
 8005d86:	4b1d      	ldr	r3, [pc, #116]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d208      	bcs.n	8005da4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d92:	4b1a      	ldr	r3, [pc, #104]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	4917      	ldr	r1, [pc, #92]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005da4:	f000 f834 	bl	8005e10 <HAL_RCC_GetSysClockFreq>
 8005da8:	4602      	mov	r2, r0
 8005daa:	4b14      	ldr	r3, [pc, #80]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	4912      	ldr	r1, [pc, #72]	@ (8005e00 <HAL_RCC_ClockConfig+0x35c>)
 8005db6:	5ccb      	ldrb	r3, [r1, r3]
 8005db8:	f003 031f 	and.w	r3, r3, #31
 8005dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8005dfc <HAL_RCC_ClockConfig+0x358>)
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	4a0d      	ldr	r2, [pc, #52]	@ (8005e00 <HAL_RCC_ClockConfig+0x35c>)
 8005dcc:	5cd3      	ldrb	r3, [r2, r3]
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005e04 <HAL_RCC_ClockConfig+0x360>)
 8005dda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8005e08 <HAL_RCC_ClockConfig+0x364>)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005de2:	4b0a      	ldr	r3, [pc, #40]	@ (8005e0c <HAL_RCC_ClockConfig+0x368>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fb fd2e 	bl	8001848 <HAL_InitTick>
 8005dec:	4603      	mov	r3, r0
 8005dee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	58024400 	.word	0x58024400
 8005e00:	0800e10c 	.word	0x0800e10c
 8005e04:	24000004 	.word	0x24000004
 8005e08:	24000000 	.word	0x24000000
 8005e0c:	24000008 	.word	0x24000008

08005e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b089      	sub	sp, #36	@ 0x24
 8005e14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e16:	4bb3      	ldr	r3, [pc, #716]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e1e:	2b18      	cmp	r3, #24
 8005e20:	f200 8155 	bhi.w	80060ce <HAL_RCC_GetSysClockFreq+0x2be>
 8005e24:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e91 	.word	0x08005e91
 8005e30:	080060cf 	.word	0x080060cf
 8005e34:	080060cf 	.word	0x080060cf
 8005e38:	080060cf 	.word	0x080060cf
 8005e3c:	080060cf 	.word	0x080060cf
 8005e40:	080060cf 	.word	0x080060cf
 8005e44:	080060cf 	.word	0x080060cf
 8005e48:	080060cf 	.word	0x080060cf
 8005e4c:	08005eb7 	.word	0x08005eb7
 8005e50:	080060cf 	.word	0x080060cf
 8005e54:	080060cf 	.word	0x080060cf
 8005e58:	080060cf 	.word	0x080060cf
 8005e5c:	080060cf 	.word	0x080060cf
 8005e60:	080060cf 	.word	0x080060cf
 8005e64:	080060cf 	.word	0x080060cf
 8005e68:	080060cf 	.word	0x080060cf
 8005e6c:	08005ebd 	.word	0x08005ebd
 8005e70:	080060cf 	.word	0x080060cf
 8005e74:	080060cf 	.word	0x080060cf
 8005e78:	080060cf 	.word	0x080060cf
 8005e7c:	080060cf 	.word	0x080060cf
 8005e80:	080060cf 	.word	0x080060cf
 8005e84:	080060cf 	.word	0x080060cf
 8005e88:	080060cf 	.word	0x080060cf
 8005e8c:	08005ec3 	.word	0x08005ec3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e90:	4b94      	ldr	r3, [pc, #592]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d009      	beq.n	8005eb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e9c:	4b91      	ldr	r3, [pc, #580]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	08db      	lsrs	r3, r3, #3
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	4a90      	ldr	r2, [pc, #576]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8005eac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005eae:	e111      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005eb0:	4b8d      	ldr	r3, [pc, #564]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005eb2:	61bb      	str	r3, [r7, #24]
      break;
 8005eb4:	e10e      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80060ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005eb8:	61bb      	str	r3, [r7, #24]
      break;
 8005eba:	e10b      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005ebc:	4b8c      	ldr	r3, [pc, #560]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ebe:	61bb      	str	r3, [r7, #24]
      break;
 8005ec0:	e108      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ec2:	4b88      	ldr	r3, [pc, #544]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ecc:	4b85      	ldr	r3, [pc, #532]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed0:	091b      	lsrs	r3, r3, #4
 8005ed2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ed8:	4b82      	ldr	r3, [pc, #520]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005ee2:	4b80      	ldr	r3, [pc, #512]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80e1 	beq.w	80060c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	f000 8083 	beq.w	8006014 <HAL_RCC_GetSysClockFreq+0x204>
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	f200 80a1 	bhi.w	8006058 <HAL_RCC_GetSysClockFreq+0x248>
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_RCC_GetSysClockFreq+0x114>
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d056      	beq.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f22:	e099      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f24:	4b6f      	ldr	r3, [pc, #444]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d02d      	beq.n	8005f8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f30:	4b6c      	ldr	r3, [pc, #432]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	08db      	lsrs	r3, r3, #3
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	4a6b      	ldr	r2, [pc, #428]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5a:	4b62      	ldr	r3, [pc, #392]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f6e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80060f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f8a:	e087      	b.n	800609c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80060f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9e:	4b51      	ldr	r3, [pc, #324]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fb2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80060f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fce:	e065      	b.n	800609c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fda:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80060fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe2:	4b40      	ldr	r3, [pc, #256]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ff6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80060f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006012:	e043      	b.n	800609c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006100 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	4b2f      	ldr	r3, [pc, #188]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a02 	vldr	s12, [r7, #8]
 800603a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80060f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006056:	e021      	b.n	800609c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80060fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b1e      	ldr	r3, [pc, #120]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a02 	vldr	s12, [r7, #8]
 800607e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80060f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800609a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800609c:	4b11      	ldr	r3, [pc, #68]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800609e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a0:	0a5b      	lsrs	r3, r3, #9
 80060a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060a6:	3301      	adds	r3, #1
 80060a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	ee07 3a90 	vmov	s15, r3
 80060b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c0:	ee17 3a90 	vmov	r3, s15
 80060c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80060c6:	e005      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
      break;
 80060cc:	e002      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80060ce:	4b07      	ldr	r3, [pc, #28]	@ (80060ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060d0:	61bb      	str	r3, [r7, #24]
      break;
 80060d2:	bf00      	nop
  }

  return sysclockfreq;
 80060d4:	69bb      	ldr	r3, [r7, #24]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3724      	adds	r7, #36	@ 0x24
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	58024400 	.word	0x58024400
 80060e8:	03d09000 	.word	0x03d09000
 80060ec:	003d0900 	.word	0x003d0900
 80060f0:	017d7840 	.word	0x017d7840
 80060f4:	46000000 	.word	0x46000000
 80060f8:	4c742400 	.word	0x4c742400
 80060fc:	4a742400 	.word	0x4a742400
 8006100:	4bbebc20 	.word	0x4bbebc20

08006104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800610a:	f7ff fe81 	bl	8005e10 <HAL_RCC_GetSysClockFreq>
 800610e:	4602      	mov	r2, r0
 8006110:	4b10      	ldr	r3, [pc, #64]	@ (8006154 <HAL_RCC_GetHCLKFreq+0x50>)
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	0a1b      	lsrs	r3, r3, #8
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	490f      	ldr	r1, [pc, #60]	@ (8006158 <HAL_RCC_GetHCLKFreq+0x54>)
 800611c:	5ccb      	ldrb	r3, [r1, r3]
 800611e:	f003 031f 	and.w	r3, r3, #31
 8006122:	fa22 f303 	lsr.w	r3, r2, r3
 8006126:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006128:	4b0a      	ldr	r3, [pc, #40]	@ (8006154 <HAL_RCC_GetHCLKFreq+0x50>)
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	4a09      	ldr	r2, [pc, #36]	@ (8006158 <HAL_RCC_GetHCLKFreq+0x54>)
 8006132:	5cd3      	ldrb	r3, [r2, r3]
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	fa22 f303 	lsr.w	r3, r2, r3
 800613e:	4a07      	ldr	r2, [pc, #28]	@ (800615c <HAL_RCC_GetHCLKFreq+0x58>)
 8006140:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006142:	4a07      	ldr	r2, [pc, #28]	@ (8006160 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006148:	4b04      	ldr	r3, [pc, #16]	@ (800615c <HAL_RCC_GetHCLKFreq+0x58>)
 800614a:	681b      	ldr	r3, [r3, #0]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	58024400 	.word	0x58024400
 8006158:	0800e10c 	.word	0x0800e10c
 800615c:	24000004 	.word	0x24000004
 8006160:	24000000 	.word	0x24000000

08006164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006168:	f7ff ffcc 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 800616c:	4602      	mov	r2, r0
 800616e:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	091b      	lsrs	r3, r3, #4
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	4904      	ldr	r1, [pc, #16]	@ (800618c <HAL_RCC_GetPCLK1Freq+0x28>)
 800617a:	5ccb      	ldrb	r3, [r1, r3]
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006184:	4618      	mov	r0, r3
 8006186:	bd80      	pop	{r7, pc}
 8006188:	58024400 	.word	0x58024400
 800618c:	0800e10c 	.word	0x0800e10c

08006190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006194:	f7ff ffb6 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 8006198:	4602      	mov	r2, r0
 800619a:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	0a1b      	lsrs	r3, r3, #8
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	4904      	ldr	r1, [pc, #16]	@ (80061b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061a6:	5ccb      	ldrb	r3, [r1, r3]
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	58024400 	.word	0x58024400
 80061b8:	0800e10c 	.word	0x0800e10c

080061bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c0:	b0ca      	sub	sp, #296	@ 0x128
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061c8:	2300      	movs	r3, #0
 80061ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061ce:	2300      	movs	r3, #0
 80061d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80061e0:	2500      	movs	r5, #0
 80061e2:	ea54 0305 	orrs.w	r3, r4, r5
 80061e6:	d049      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061f2:	d02f      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80061f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061f8:	d828      	bhi.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061fe:	d01a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006200:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006204:	d822      	bhi.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800620a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800620e:	d007      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006210:	e01c      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006212:	4bb8      	ldr	r3, [pc, #736]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006216:	4ab7      	ldr	r2, [pc, #732]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800621c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800621e:	e01a      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006224:	3308      	adds	r3, #8
 8006226:	2102      	movs	r1, #2
 8006228:	4618      	mov	r0, r3
 800622a:	f002 fb61 	bl	80088f0 <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006234:	e00f      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623a:	3328      	adds	r3, #40	@ 0x28
 800623c:	2102      	movs	r1, #2
 800623e:	4618      	mov	r0, r3
 8006240:	f002 fc08 	bl	8008a54 <RCCEx_PLL3_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800624a:	e004      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006252:	e000      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800625e:	4ba5      	ldr	r3, [pc, #660]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006262:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800626c:	4aa1      	ldr	r2, [pc, #644]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800626e:	430b      	orrs	r3, r1
 8006270:	6513      	str	r3, [r2, #80]	@ 0x50
 8006272:	e003      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006288:	f04f 0900 	mov.w	r9, #0
 800628c:	ea58 0309 	orrs.w	r3, r8, r9
 8006290:	d047      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006298:	2b04      	cmp	r3, #4
 800629a:	d82a      	bhi.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800629c:	a201      	add	r2, pc, #4	@ (adr r2, 80062a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062b9 	.word	0x080062b9
 80062a8:	080062c7 	.word	0x080062c7
 80062ac:	080062dd 	.word	0x080062dd
 80062b0:	080062fb 	.word	0x080062fb
 80062b4:	080062fb 	.word	0x080062fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b8:	4b8e      	ldr	r3, [pc, #568]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062bc:	4a8d      	ldr	r2, [pc, #564]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062c4:	e01a      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ca:	3308      	adds	r3, #8
 80062cc:	2100      	movs	r1, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f002 fb0e 	bl	80088f0 <RCCEx_PLL2_Config>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062da:	e00f      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e0:	3328      	adds	r3, #40	@ 0x28
 80062e2:	2100      	movs	r1, #0
 80062e4:	4618      	mov	r0, r3
 80062e6:	f002 fbb5 	bl	8008a54 <RCCEx_PLL3_Config>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062f0:	e004      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062f8:	e000      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80062fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006304:	4b7b      	ldr	r3, [pc, #492]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006308:	f023 0107 	bic.w	r1, r3, #7
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006312:	4a78      	ldr	r2, [pc, #480]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006314:	430b      	orrs	r3, r1
 8006316:	6513      	str	r3, [r2, #80]	@ 0x50
 8006318:	e003      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800631e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800632e:	f04f 0b00 	mov.w	fp, #0
 8006332:	ea5a 030b 	orrs.w	r3, sl, fp
 8006336:	d04c      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800633e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006342:	d030      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006348:	d829      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800634a:	2bc0      	cmp	r3, #192	@ 0xc0
 800634c:	d02d      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800634e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006350:	d825      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006352:	2b80      	cmp	r3, #128	@ 0x80
 8006354:	d018      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006356:	2b80      	cmp	r3, #128	@ 0x80
 8006358:	d821      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800635e:	2b40      	cmp	r3, #64	@ 0x40
 8006360:	d007      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006362:	e01c      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006364:	4b63      	ldr	r3, [pc, #396]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	4a62      	ldr	r2, [pc, #392]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800636a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800636e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006370:	e01c      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006376:	3308      	adds	r3, #8
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f002 fab8 	bl	80088f0 <RCCEx_PLL2_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006386:	e011      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638c:	3328      	adds	r3, #40	@ 0x28
 800638e:	2100      	movs	r1, #0
 8006390:	4618      	mov	r0, r3
 8006392:	f002 fb5f 	bl	8008a54 <RCCEx_PLL3_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800639c:	e006      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063a4:	e002      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80063aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063b4:	4b4f      	ldr	r3, [pc, #316]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063c2:	4a4c      	ldr	r2, [pc, #304]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80063c8:	e003      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80063de:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80063e2:	2300      	movs	r3, #0
 80063e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80063e8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80063ec:	460b      	mov	r3, r1
 80063ee:	4313      	orrs	r3, r2
 80063f0:	d053      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80063fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063fe:	d035      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006400:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006404:	d82e      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006406:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800640a:	d031      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800640c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006410:	d828      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006416:	d01a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006418:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800641c:	d822      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006426:	d007      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006428:	e01c      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800642a:	4b32      	ldr	r3, [pc, #200]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	4a31      	ldr	r2, [pc, #196]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006434:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006436:	e01c      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643c:	3308      	adds	r3, #8
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f002 fa55 	bl	80088f0 <RCCEx_PLL2_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800644c:	e011      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006452:	3328      	adds	r3, #40	@ 0x28
 8006454:	2100      	movs	r1, #0
 8006456:	4618      	mov	r0, r3
 8006458:	f002 fafc 	bl	8008a54 <RCCEx_PLL3_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006462:	e006      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800646a:	e002      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800646c:	bf00      	nop
 800646e:	e000      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800647a:	4b1e      	ldr	r3, [pc, #120]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800647c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006486:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800648a:	4a1a      	ldr	r2, [pc, #104]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800648c:	430b      	orrs	r3, r1
 800648e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006490:	e003      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006496:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80064a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064aa:	2300      	movs	r3, #0
 80064ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80064b0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80064b4:	460b      	mov	r3, r1
 80064b6:	4313      	orrs	r3, r2
 80064b8:	d056      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80064c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064c6:	d038      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80064c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064cc:	d831      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064d2:	d034      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80064d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064d8:	d82b      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064de:	d01d      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80064e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064e4:	d825      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d006      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80064ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064ee:	d00a      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064f0:	e01f      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064f2:	bf00      	nop
 80064f4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f8:	4ba2      	ldr	r3, [pc, #648]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fc:	4aa1      	ldr	r2, [pc, #644]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006504:	e01c      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650a:	3308      	adds	r3, #8
 800650c:	2100      	movs	r1, #0
 800650e:	4618      	mov	r0, r3
 8006510:	f002 f9ee 	bl	80088f0 <RCCEx_PLL2_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800651a:	e011      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800651c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006520:	3328      	adds	r3, #40	@ 0x28
 8006522:	2100      	movs	r1, #0
 8006524:	4618      	mov	r0, r3
 8006526:	f002 fa95 	bl	8008a54 <RCCEx_PLL3_Config>
 800652a:	4603      	mov	r3, r0
 800652c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006530:	e006      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006538:	e002      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800653e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10b      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006548:	4b8e      	ldr	r3, [pc, #568]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800654a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006554:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006558:	4a8a      	ldr	r2, [pc, #552]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800655a:	430b      	orrs	r3, r1
 800655c:	6593      	str	r3, [r2, #88]	@ 0x58
 800655e:	e003      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006564:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006574:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006578:	2300      	movs	r3, #0
 800657a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800657e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006582:	460b      	mov	r3, r1
 8006584:	4313      	orrs	r3, r2
 8006586:	d03a      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800658e:	2b30      	cmp	r3, #48	@ 0x30
 8006590:	d01f      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006592:	2b30      	cmp	r3, #48	@ 0x30
 8006594:	d819      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006596:	2b20      	cmp	r3, #32
 8006598:	d00c      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800659a:	2b20      	cmp	r3, #32
 800659c:	d815      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d019      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80065a2:	2b10      	cmp	r3, #16
 80065a4:	d111      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a6:	4b77      	ldr	r3, [pc, #476]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065aa:	4a76      	ldr	r2, [pc, #472]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80065b2:	e011      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b8:	3308      	adds	r3, #8
 80065ba:	2102      	movs	r1, #2
 80065bc:	4618      	mov	r0, r3
 80065be:	f002 f997 	bl	80088f0 <RCCEx_PLL2_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80065c8:	e006      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065d0:	e002      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065d2:	bf00      	nop
 80065d4:	e000      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065e0:	4b68      	ldr	r3, [pc, #416]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065e4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ee:	4a65      	ldr	r2, [pc, #404]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065f0:	430b      	orrs	r3, r1
 80065f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065f4:	e003      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800660a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800660e:	2300      	movs	r3, #0
 8006610:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006614:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006618:	460b      	mov	r3, r1
 800661a:	4313      	orrs	r3, r2
 800661c:	d051      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006624:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006628:	d035      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800662a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800662e:	d82e      	bhi.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006630:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006634:	d031      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006636:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800663a:	d828      	bhi.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800663c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006640:	d01a      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006646:	d822      	bhi.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800664c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006650:	d007      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006652:	e01c      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006654:	4b4b      	ldr	r3, [pc, #300]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006658:	4a4a      	ldr	r2, [pc, #296]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800665a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800665e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006660:	e01c      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006666:	3308      	adds	r3, #8
 8006668:	2100      	movs	r1, #0
 800666a:	4618      	mov	r0, r3
 800666c:	f002 f940 	bl	80088f0 <RCCEx_PLL2_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006676:	e011      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667c:	3328      	adds	r3, #40	@ 0x28
 800667e:	2100      	movs	r1, #0
 8006680:	4618      	mov	r0, r3
 8006682:	f002 f9e7 	bl	8008a54 <RCCEx_PLL3_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800668c:	e006      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006694:	e002      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006696:	bf00      	nop
 8006698:	e000      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800669a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800669c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066a4:	4b37      	ldr	r3, [pc, #220]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80066ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b2:	4a34      	ldr	r2, [pc, #208]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066b4:	430b      	orrs	r3, r1
 80066b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80066b8:	e003      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80066ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066d2:	2300      	movs	r3, #0
 80066d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80066d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80066dc:	460b      	mov	r3, r1
 80066de:	4313      	orrs	r3, r2
 80066e0:	d056      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066ec:	d033      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80066ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066f2:	d82c      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066f8:	d02f      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80066fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066fe:	d826      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006700:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006704:	d02b      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006706:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800670a:	d820      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800670c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006710:	d012      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006716:	d81a      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006718:	2b00      	cmp	r3, #0
 800671a:	d022      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006720:	d115      	bne.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006726:	3308      	adds	r3, #8
 8006728:	2101      	movs	r1, #1
 800672a:	4618      	mov	r0, r3
 800672c:	f002 f8e0 	bl	80088f0 <RCCEx_PLL2_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006736:	e015      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	3328      	adds	r3, #40	@ 0x28
 800673e:	2101      	movs	r1, #1
 8006740:	4618      	mov	r0, r3
 8006742:	f002 f987 	bl	8008a54 <RCCEx_PLL3_Config>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800674c:	e00a      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006754:	e006      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006756:	bf00      	nop
 8006758:	e004      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800675a:	bf00      	nop
 800675c:	e002      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800675e:	bf00      	nop
 8006760:	e000      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10d      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800676c:	4b05      	ldr	r3, [pc, #20]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800676e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006770:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800677a:	4a02      	ldr	r2, [pc, #8]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800677c:	430b      	orrs	r3, r1
 800677e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006780:	e006      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006782:	bf00      	nop
 8006784:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800679c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067a6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4313      	orrs	r3, r2
 80067ae:	d055      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80067b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067bc:	d033      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80067be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067c2:	d82c      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c8:	d02f      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80067ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ce:	d826      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067d4:	d02b      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80067d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067da:	d820      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e0:	d012      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80067e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e6:	d81a      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d022      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80067ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067f0:	d115      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f6:	3308      	adds	r3, #8
 80067f8:	2101      	movs	r1, #1
 80067fa:	4618      	mov	r0, r3
 80067fc:	f002 f878 	bl	80088f0 <RCCEx_PLL2_Config>
 8006800:	4603      	mov	r3, r0
 8006802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006806:	e015      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680c:	3328      	adds	r3, #40	@ 0x28
 800680e:	2101      	movs	r1, #1
 8006810:	4618      	mov	r0, r3
 8006812:	f002 f91f 	bl	8008a54 <RCCEx_PLL3_Config>
 8006816:	4603      	mov	r3, r0
 8006818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800681c:	e00a      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006824:	e006      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006826:	bf00      	nop
 8006828:	e004      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800682a:	bf00      	nop
 800682c:	e002      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800683c:	4ba3      	ldr	r3, [pc, #652]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800683e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006840:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006848:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800684c:	4a9f      	ldr	r2, [pc, #636]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800684e:	430b      	orrs	r3, r1
 8006850:	6593      	str	r3, [r2, #88]	@ 0x58
 8006852:	e003      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800685c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006868:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800686c:	2300      	movs	r3, #0
 800686e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006872:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006876:	460b      	mov	r3, r1
 8006878:	4313      	orrs	r3, r2
 800687a:	d037      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800687c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006886:	d00e      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800688c:	d816      	bhi.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d018      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006896:	d111      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006898:	4b8c      	ldr	r3, [pc, #560]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800689a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689c:	4a8b      	ldr	r2, [pc, #556]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800689e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068a4:	e00f      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068aa:	3308      	adds	r3, #8
 80068ac:	2101      	movs	r1, #1
 80068ae:	4618      	mov	r0, r3
 80068b0:	f002 f81e 	bl	80088f0 <RCCEx_PLL2_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068ba:	e004      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068c2:	e000      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80068c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068ce:	4b7f      	ldr	r3, [pc, #508]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80068d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068dc:	4a7b      	ldr	r2, [pc, #492]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068de:	430b      	orrs	r3, r1
 80068e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80068e2:	e003      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80068f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068fc:	2300      	movs	r3, #0
 80068fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006902:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006906:	460b      	mov	r3, r1
 8006908:	4313      	orrs	r3, r2
 800690a:	d039      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800690c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006912:	2b03      	cmp	r3, #3
 8006914:	d81c      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006916:	a201      	add	r2, pc, #4	@ (adr r2, 800691c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	08006959 	.word	0x08006959
 8006920:	0800692d 	.word	0x0800692d
 8006924:	0800693b 	.word	0x0800693b
 8006928:	08006959 	.word	0x08006959
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800692c:	4b67      	ldr	r3, [pc, #412]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800692e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006930:	4a66      	ldr	r2, [pc, #408]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006936:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006938:	e00f      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800693a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693e:	3308      	adds	r3, #8
 8006940:	2102      	movs	r1, #2
 8006942:	4618      	mov	r0, r3
 8006944:	f001 ffd4 	bl	80088f0 <RCCEx_PLL2_Config>
 8006948:	4603      	mov	r3, r0
 800694a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800694e:	e004      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006956:	e000      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800695a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006962:	4b5a      	ldr	r3, [pc, #360]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006966:	f023 0103 	bic.w	r1, r3, #3
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006970:	4a56      	ldr	r2, [pc, #344]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006972:	430b      	orrs	r3, r1
 8006974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006976:	e003      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800698c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006990:	2300      	movs	r3, #0
 8006992:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006996:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800699a:	460b      	mov	r3, r1
 800699c:	4313      	orrs	r3, r2
 800699e:	f000 809f 	beq.w	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069a2:	4b4b      	ldr	r3, [pc, #300]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a4a      	ldr	r2, [pc, #296]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069ae:	f7fa ff95 	bl	80018dc <HAL_GetTick>
 80069b2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069b6:	e00b      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069b8:	f7fa ff90 	bl	80018dc <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b64      	cmp	r3, #100	@ 0x64
 80069c6:	d903      	bls.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069ce:	e005      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069d0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0ed      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80069dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d179      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80069e4:	4b39      	ldr	r3, [pc, #228]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069f0:	4053      	eors	r3, r2
 80069f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d015      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069fa:	4b34      	ldr	r3, [pc, #208]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a02:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a06:	4b31      	ldr	r3, [pc, #196]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0a:	4a30      	ldr	r2, [pc, #192]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a10:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a12:	4b2e      	ldr	r3, [pc, #184]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a16:	4a2d      	ldr	r2, [pc, #180]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a1c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a1e:	4a2b      	ldr	r2, [pc, #172]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a24:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a32:	d118      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a34:	f7fa ff52 	bl	80018dc <HAL_GetTick>
 8006a38:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a3c:	e00d      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a3e:	f7fa ff4d 	bl	80018dc <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006a48:	1ad2      	subs	r2, r2, r3
 8006a4a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d903      	bls.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006a58:	e005      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0eb      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d129      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a7e:	d10e      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006a80:	4b12      	ldr	r3, [pc, #72]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a90:	091a      	lsrs	r2, r3, #4
 8006a92:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	4a0d      	ldr	r2, [pc, #52]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6113      	str	r3, [r2, #16]
 8006a9c:	e005      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aa4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006aa8:	6113      	str	r3, [r2, #16]
 8006aaa:	4b08      	ldr	r3, [pc, #32]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aac:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aba:	4a04      	ldr	r2, [pc, #16]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006abc:	430b      	orrs	r3, r1
 8006abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ac0:	e00e      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006aca:	e009      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006acc:	58024400 	.word	0x58024400
 8006ad0:	58024800 	.word	0x58024800
 8006ad4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006adc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f002 0301 	and.w	r3, r2, #1
 8006aec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006af0:	2300      	movs	r3, #0
 8006af2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006af6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f000 8089 	beq.w	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b08:	2b28      	cmp	r3, #40	@ 0x28
 8006b0a:	d86b      	bhi.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006bed 	.word	0x08006bed
 8006b18:	08006be5 	.word	0x08006be5
 8006b1c:	08006be5 	.word	0x08006be5
 8006b20:	08006be5 	.word	0x08006be5
 8006b24:	08006be5 	.word	0x08006be5
 8006b28:	08006be5 	.word	0x08006be5
 8006b2c:	08006be5 	.word	0x08006be5
 8006b30:	08006be5 	.word	0x08006be5
 8006b34:	08006bb9 	.word	0x08006bb9
 8006b38:	08006be5 	.word	0x08006be5
 8006b3c:	08006be5 	.word	0x08006be5
 8006b40:	08006be5 	.word	0x08006be5
 8006b44:	08006be5 	.word	0x08006be5
 8006b48:	08006be5 	.word	0x08006be5
 8006b4c:	08006be5 	.word	0x08006be5
 8006b50:	08006be5 	.word	0x08006be5
 8006b54:	08006bcf 	.word	0x08006bcf
 8006b58:	08006be5 	.word	0x08006be5
 8006b5c:	08006be5 	.word	0x08006be5
 8006b60:	08006be5 	.word	0x08006be5
 8006b64:	08006be5 	.word	0x08006be5
 8006b68:	08006be5 	.word	0x08006be5
 8006b6c:	08006be5 	.word	0x08006be5
 8006b70:	08006be5 	.word	0x08006be5
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006be5 	.word	0x08006be5
 8006b7c:	08006be5 	.word	0x08006be5
 8006b80:	08006be5 	.word	0x08006be5
 8006b84:	08006be5 	.word	0x08006be5
 8006b88:	08006be5 	.word	0x08006be5
 8006b8c:	08006be5 	.word	0x08006be5
 8006b90:	08006be5 	.word	0x08006be5
 8006b94:	08006bed 	.word	0x08006bed
 8006b98:	08006be5 	.word	0x08006be5
 8006b9c:	08006be5 	.word	0x08006be5
 8006ba0:	08006be5 	.word	0x08006be5
 8006ba4:	08006be5 	.word	0x08006be5
 8006ba8:	08006be5 	.word	0x08006be5
 8006bac:	08006be5 	.word	0x08006be5
 8006bb0:	08006be5 	.word	0x08006be5
 8006bb4:	08006bed 	.word	0x08006bed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 fe95 	bl	80088f0 <RCCEx_PLL2_Config>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006bcc:	e00f      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	3328      	adds	r3, #40	@ 0x28
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 ff3c 	bl	8008a54 <RCCEx_PLL3_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006be2:	e004      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bea:	e000      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006bf6:	4bbf      	ldr	r3, [pc, #764]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c04:	4abb      	ldr	r2, [pc, #748]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c06:	430b      	orrs	r3, r1
 8006c08:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c0a:	e003      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f002 0302 	and.w	r3, r2, #2
 8006c20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c24:	2300      	movs	r3, #0
 8006c26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006c2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4313      	orrs	r3, r2
 8006c32:	d041      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c3a:	2b05      	cmp	r3, #5
 8006c3c:	d824      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c44 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c91 	.word	0x08006c91
 8006c48:	08006c5d 	.word	0x08006c5d
 8006c4c:	08006c73 	.word	0x08006c73
 8006c50:	08006c91 	.word	0x08006c91
 8006c54:	08006c91 	.word	0x08006c91
 8006c58:	08006c91 	.word	0x08006c91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c60:	3308      	adds	r3, #8
 8006c62:	2101      	movs	r1, #1
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 fe43 	bl	80088f0 <RCCEx_PLL2_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c70:	e00f      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c76:	3328      	adds	r3, #40	@ 0x28
 8006c78:	2101      	movs	r1, #1
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 feea 	bl	8008a54 <RCCEx_PLL3_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c86:	e004      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c8e:	e000      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c9a:	4b96      	ldr	r3, [pc, #600]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c9e:	f023 0107 	bic.w	r1, r3, #7
 8006ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ca8:	4a92      	ldr	r2, [pc, #584]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006caa:	430b      	orrs	r3, r1
 8006cac:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cae:	e003      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f002 0304 	and.w	r3, r2, #4
 8006cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	d044      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ce0:	2b05      	cmp	r3, #5
 8006ce2:	d825      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d39 	.word	0x08006d39
 8006cf0:	08006d05 	.word	0x08006d05
 8006cf4:	08006d1b 	.word	0x08006d1b
 8006cf8:	08006d39 	.word	0x08006d39
 8006cfc:	08006d39 	.word	0x08006d39
 8006d00:	08006d39 	.word	0x08006d39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d08:	3308      	adds	r3, #8
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 fdef 	bl	80088f0 <RCCEx_PLL2_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d18:	e00f      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1e:	3328      	adds	r3, #40	@ 0x28
 8006d20:	2101      	movs	r1, #1
 8006d22:	4618      	mov	r0, r3
 8006d24:	f001 fe96 	bl	8008a54 <RCCEx_PLL3_Config>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d2e:	e004      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d36:	e000      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10b      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d42:	4b6c      	ldr	r3, [pc, #432]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d46:	f023 0107 	bic.w	r1, r3, #7
 8006d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d52:	4a68      	ldr	r2, [pc, #416]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d54:	430b      	orrs	r3, r1
 8006d56:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d58:	e003      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f002 0320 	and.w	r3, r2, #32
 8006d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d72:	2300      	movs	r3, #0
 8006d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	d055      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d8e:	d033      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d94:	d82c      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d9a:	d02f      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da0:	d826      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006da2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006da6:	d02b      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006da8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dac:	d820      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006dae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006db2:	d012      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006db4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006db8:	d81a      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d022      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006dbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dc2:	d115      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc8:	3308      	adds	r3, #8
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 fd8f 	bl	80088f0 <RCCEx_PLL2_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006dd8:	e015      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dde:	3328      	adds	r3, #40	@ 0x28
 8006de0:	2102      	movs	r1, #2
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 fe36 	bl	8008a54 <RCCEx_PLL3_Config>
 8006de8:	4603      	mov	r3, r0
 8006dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006dee:	e00a      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006df6:	e006      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006df8:	bf00      	nop
 8006dfa:	e004      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006dfc:	bf00      	nop
 8006dfe:	e002      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e00:	bf00      	nop
 8006e02:	e000      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10b      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e0e:	4b39      	ldr	r3, [pc, #228]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e12:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e1e:	4a35      	ldr	r2, [pc, #212]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e20:	430b      	orrs	r3, r1
 8006e22:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e24:	e003      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e44:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	d058      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e56:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e5a:	d033      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006e5c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e60:	d82c      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e66:	d02f      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e6c:	d826      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e72:	d02b      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006e74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e78:	d820      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e7e:	d012      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e84:	d81a      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d022      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e8e:	d115      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e94:	3308      	adds	r3, #8
 8006e96:	2100      	movs	r1, #0
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 fd29 	bl	80088f0 <RCCEx_PLL2_Config>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ea4:	e015      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eaa:	3328      	adds	r3, #40	@ 0x28
 8006eac:	2102      	movs	r1, #2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 fdd0 	bl	8008a54 <RCCEx_PLL3_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006eba:	e00a      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ec2:	e006      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ec4:	bf00      	nop
 8006ec6:	e004      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ec8:	bf00      	nop
 8006eca:	e002      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ecc:	bf00      	nop
 8006ece:	e000      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10e      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006eda:	4b06      	ldr	r3, [pc, #24]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ede:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006eea:	4a02      	ldr	r2, [pc, #8]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006eec:	430b      	orrs	r3, r1
 8006eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ef0:	e006      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006ef2:	bf00      	nop
 8006ef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006efc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f10:	2300      	movs	r3, #0
 8006f12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f16:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	d055      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f28:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f2c:	d033      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006f2e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f32:	d82c      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f38:	d02f      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f3e:	d826      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f40:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f44:	d02b      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006f46:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f4a:	d820      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f50:	d012      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006f52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f56:	d81a      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d022      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f60:	d115      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f66:	3308      	adds	r3, #8
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f001 fcc0 	bl	80088f0 <RCCEx_PLL2_Config>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f76:	e015      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7c:	3328      	adds	r3, #40	@ 0x28
 8006f7e:	2102      	movs	r1, #2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f001 fd67 	bl	8008a54 <RCCEx_PLL3_Config>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f8c:	e00a      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f94:	e006      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f96:	bf00      	nop
 8006f98:	e004      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f9a:	bf00      	nop
 8006f9c:	e002      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f9e:	bf00      	nop
 8006fa0:	e000      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006fac:	4ba1      	ldr	r3, [pc, #644]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fbc:	4a9d      	ldr	r2, [pc, #628]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fc2:	e003      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	f002 0308 	and.w	r3, r2, #8
 8006fd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006fe2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	d01e      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ff8:	d10c      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffe:	3328      	adds	r3, #40	@ 0x28
 8007000:	2102      	movs	r1, #2
 8007002:	4618      	mov	r0, r3
 8007004:	f001 fd26 	bl	8008a54 <RCCEx_PLL3_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007014:	4b87      	ldr	r3, [pc, #540]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007018:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007024:	4a83      	ldr	r2, [pc, #524]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007026:	430b      	orrs	r3, r1
 8007028:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800702a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f002 0310 	and.w	r3, r2, #16
 8007036:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800703a:	2300      	movs	r3, #0
 800703c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007040:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007044:	460b      	mov	r3, r1
 8007046:	4313      	orrs	r3, r2
 8007048:	d01e      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800704a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007056:	d10c      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705c:	3328      	adds	r3, #40	@ 0x28
 800705e:	2102      	movs	r1, #2
 8007060:	4618      	mov	r0, r3
 8007062:	f001 fcf7 	bl	8008a54 <RCCEx_PLL3_Config>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007072:	4b70      	ldr	r3, [pc, #448]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007076:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007082:	4a6c      	ldr	r2, [pc, #432]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007084:	430b      	orrs	r3, r1
 8007086:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007094:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007098:	2300      	movs	r3, #0
 800709a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800709e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80070a2:	460b      	mov	r3, r1
 80070a4:	4313      	orrs	r3, r2
 80070a6:	d03e      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80070a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80070b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070b4:	d022      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80070b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070ba:	d81b      	bhi.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80070c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070c4:	d00b      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80070c6:	e015      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070cc:	3308      	adds	r3, #8
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 fc0d 	bl	80088f0 <RCCEx_PLL2_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070dc:	e00f      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e2:	3328      	adds	r3, #40	@ 0x28
 80070e4:	2102      	movs	r1, #2
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 fcb4 	bl	8008a54 <RCCEx_PLL3_Config>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070f2:	e004      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070fa:	e000      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80070fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10b      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007106:	4b4b      	ldr	r3, [pc, #300]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800710a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007116:	4a47      	ldr	r2, [pc, #284]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007118:	430b      	orrs	r3, r1
 800711a:	6593      	str	r3, [r2, #88]	@ 0x58
 800711c:	e003      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007132:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007134:	2300      	movs	r3, #0
 8007136:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007138:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800713c:	460b      	mov	r3, r1
 800713e:	4313      	orrs	r3, r2
 8007140:	d03b      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800714a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800714e:	d01f      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007150:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007154:	d818      	bhi.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800715a:	d003      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800715c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007160:	d007      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007162:	e011      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007164:	4b33      	ldr	r3, [pc, #204]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007168:	4a32      	ldr	r2, [pc, #200]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800716a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800716e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007170:	e00f      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007176:	3328      	adds	r3, #40	@ 0x28
 8007178:	2101      	movs	r1, #1
 800717a:	4618      	mov	r0, r3
 800717c:	f001 fc6a 	bl	8008a54 <RCCEx_PLL3_Config>
 8007180:	4603      	mov	r3, r0
 8007182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007186:	e004      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800718e:	e000      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10b      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800719a:	4b26      	ldr	r3, [pc, #152]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800719c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800719e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071aa:	4a22      	ldr	r2, [pc, #136]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071ac:	430b      	orrs	r3, r1
 80071ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80071b0:	e003      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80071ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80071c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80071c8:	2300      	movs	r3, #0
 80071ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80071cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80071d0:	460b      	mov	r3, r1
 80071d2:	4313      	orrs	r3, r2
 80071d4:	d034      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80071e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071e4:	d007      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80071e6:	e011      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e8:	4b12      	ldr	r3, [pc, #72]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ec:	4a11      	ldr	r2, [pc, #68]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071f4:	e00e      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fa:	3308      	adds	r3, #8
 80071fc:	2102      	movs	r1, #2
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 fb76 	bl	80088f0 <RCCEx_PLL2_Config>
 8007204:	4603      	mov	r3, r0
 8007206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800720a:	e003      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10d      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800721c:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800721e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007220:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800722a:	4a02      	ldr	r2, [pc, #8]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800722c:	430b      	orrs	r3, r1
 800722e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007230:	e006      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007232:	bf00      	nop
 8007234:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007238:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800723c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800724c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800724e:	2300      	movs	r3, #0
 8007250:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007252:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007256:	460b      	mov	r3, r1
 8007258:	4313      	orrs	r3, r2
 800725a:	d00c      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800725c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007260:	3328      	adds	r3, #40	@ 0x28
 8007262:	2102      	movs	r1, #2
 8007264:	4618      	mov	r0, r3
 8007266:	f001 fbf5 	bl	8008a54 <RCCEx_PLL3_Config>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007282:	663b      	str	r3, [r7, #96]	@ 0x60
 8007284:	2300      	movs	r3, #0
 8007286:	667b      	str	r3, [r7, #100]	@ 0x64
 8007288:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800728c:	460b      	mov	r3, r1
 800728e:	4313      	orrs	r3, r2
 8007290:	d038      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800729a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800729e:	d018      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80072a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072a4:	d811      	bhi.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80072a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072aa:	d014      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80072ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072b0:	d80b      	bhi.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d011      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80072b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ba:	d106      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072bc:	4bc3      	ldr	r3, [pc, #780]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c0:	4ac2      	ldr	r2, [pc, #776]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80072c8:	e008      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072d0:	e004      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072d2:	bf00      	nop
 80072d4:	e002      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072d6:	bf00      	nop
 80072d8:	e000      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10b      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072e4:	4bb9      	ldr	r3, [pc, #740]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072f4:	4ab5      	ldr	r2, [pc, #724]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072f6:	430b      	orrs	r3, r1
 80072f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80072fa:	e003      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007310:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007312:	2300      	movs	r3, #0
 8007314:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007316:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800731a:	460b      	mov	r3, r1
 800731c:	4313      	orrs	r3, r2
 800731e:	d009      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007320:	4baa      	ldr	r3, [pc, #680]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007324:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732e:	4aa7      	ldr	r2, [pc, #668]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007330:	430b      	orrs	r3, r1
 8007332:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007340:	653b      	str	r3, [r7, #80]	@ 0x50
 8007342:	2300      	movs	r3, #0
 8007344:	657b      	str	r3, [r7, #84]	@ 0x54
 8007346:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800734a:	460b      	mov	r3, r1
 800734c:	4313      	orrs	r3, r2
 800734e:	d00a      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007350:	4b9e      	ldr	r3, [pc, #632]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007360:	4a9a      	ldr	r2, [pc, #616]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007362:	430b      	orrs	r3, r1
 8007364:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007374:	2300      	movs	r3, #0
 8007376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007378:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800737c:	460b      	mov	r3, r1
 800737e:	4313      	orrs	r3, r2
 8007380:	d009      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007382:	4b92      	ldr	r3, [pc, #584]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007386:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800738a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800738e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007390:	4a8e      	ldr	r2, [pc, #568]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007392:	430b      	orrs	r3, r1
 8007394:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80073a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80073a4:	2300      	movs	r3, #0
 80073a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80073a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80073ac:	460b      	mov	r3, r1
 80073ae:	4313      	orrs	r3, r2
 80073b0:	d00e      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073b2:	4b86      	ldr	r3, [pc, #536]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	4a85      	ldr	r2, [pc, #532]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073bc:	6113      	str	r3, [r2, #16]
 80073be:	4b83      	ldr	r3, [pc, #524]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073c0:	6919      	ldr	r1, [r3, #16]
 80073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80073ca:	4a80      	ldr	r2, [pc, #512]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073cc:	430b      	orrs	r3, r1
 80073ce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80073dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073de:	2300      	movs	r3, #0
 80073e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80073e6:	460b      	mov	r3, r1
 80073e8:	4313      	orrs	r3, r2
 80073ea:	d009      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073ec:	4b77      	ldr	r3, [pc, #476]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073f0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073fa:	4a74      	ldr	r2, [pc, #464]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073fc:	430b      	orrs	r3, r1
 80073fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800740c:	633b      	str	r3, [r7, #48]	@ 0x30
 800740e:	2300      	movs	r3, #0
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
 8007412:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007416:	460b      	mov	r3, r1
 8007418:	4313      	orrs	r3, r2
 800741a:	d00a      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800741c:	4b6b      	ldr	r3, [pc, #428]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800741e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007420:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800742c:	4a67      	ldr	r2, [pc, #412]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800742e:	430b      	orrs	r3, r1
 8007430:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	2100      	movs	r1, #0
 800743c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007444:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007448:	460b      	mov	r3, r1
 800744a:	4313      	orrs	r3, r2
 800744c:	d011      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800744e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007452:	3308      	adds	r3, #8
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f001 fa4a 	bl	80088f0 <RCCEx_PLL2_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	2100      	movs	r1, #0
 800747c:	6239      	str	r1, [r7, #32]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
 8007484:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007488:	460b      	mov	r3, r1
 800748a:	4313      	orrs	r3, r2
 800748c:	d011      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007492:	3308      	adds	r3, #8
 8007494:	2101      	movs	r1, #1
 8007496:	4618      	mov	r0, r3
 8007498:	f001 fa2a 	bl	80088f0 <RCCEx_PLL2_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80074a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	2100      	movs	r1, #0
 80074bc:	61b9      	str	r1, [r7, #24]
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	61fb      	str	r3, [r7, #28]
 80074c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80074c8:	460b      	mov	r3, r1
 80074ca:	4313      	orrs	r3, r2
 80074cc:	d011      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d2:	3308      	adds	r3, #8
 80074d4:	2102      	movs	r1, #2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 fa0a 	bl	80088f0 <RCCEx_PLL2_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80074e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80074f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	2100      	movs	r1, #0
 80074fc:	6139      	str	r1, [r7, #16]
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007508:	460b      	mov	r3, r1
 800750a:	4313      	orrs	r3, r2
 800750c:	d011      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007512:	3328      	adds	r3, #40	@ 0x28
 8007514:	2100      	movs	r1, #0
 8007516:	4618      	mov	r0, r3
 8007518:	f001 fa9c 	bl	8008a54 <RCCEx_PLL3_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800752e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	2100      	movs	r1, #0
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007548:	460b      	mov	r3, r1
 800754a:	4313      	orrs	r3, r2
 800754c:	d011      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800754e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007552:	3328      	adds	r3, #40	@ 0x28
 8007554:	2101      	movs	r1, #1
 8007556:	4618      	mov	r0, r3
 8007558:	f001 fa7c 	bl	8008a54 <RCCEx_PLL3_Config>
 800755c:	4603      	mov	r3, r0
 800755e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800756e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	2100      	movs	r1, #0
 800757c:	6039      	str	r1, [r7, #0]
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007588:	460b      	mov	r3, r1
 800758a:	4313      	orrs	r3, r2
 800758c:	d011      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007592:	3328      	adds	r3, #40	@ 0x28
 8007594:	2102      	movs	r1, #2
 8007596:	4618      	mov	r0, r3
 8007598:	f001 fa5c 	bl	8008a54 <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80075a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80075b2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e000      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80075c6:	46bd      	mov	sp, r7
 80075c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075cc:	58024400 	.word	0x58024400

080075d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b090      	sub	sp, #64	@ 0x40
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80075da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075de:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80075e2:	430b      	orrs	r3, r1
 80075e4:	f040 8094 	bne.w	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80075e8:	4b9e      	ldr	r3, [pc, #632]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ec:	f003 0307 	and.w	r3, r3, #7
 80075f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80075f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	f200 8087 	bhi.w	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80075fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	08007615 	.word	0x08007615
 8007604:	0800763d 	.word	0x0800763d
 8007608:	08007665 	.word	0x08007665
 800760c:	08007701 	.word	0x08007701
 8007610:	0800768d 	.word	0x0800768d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007614:	4b93      	ldr	r3, [pc, #588]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800761c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007620:	d108      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007626:	4618      	mov	r0, r3
 8007628:	f001 f810 	bl	800864c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007630:	f000 bd45 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007638:	f000 bd41 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800763c:	4b89      	ldr	r3, [pc, #548]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007648:	d108      	bne.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800764a:	f107 0318 	add.w	r3, r7, #24
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fd54 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007658:	f000 bd31 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007660:	f000 bd2d 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007664:	4b7f      	ldr	r3, [pc, #508]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800766c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007670:	d108      	bne.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007672:	f107 030c 	add.w	r3, r7, #12
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fe94 	bl	80083a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007680:	f000 bd1d 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007684:	2300      	movs	r3, #0
 8007686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007688:	f000 bd19 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800768c:	4b75      	ldr	r3, [pc, #468]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800768e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007690:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007694:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007696:	4b73      	ldr	r3, [pc, #460]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d10c      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80076a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d109      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076a8:	4b6e      	ldr	r3, [pc, #440]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	08db      	lsrs	r3, r3, #3
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	4a6d      	ldr	r2, [pc, #436]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076b4:	fa22 f303 	lsr.w	r3, r2, r3
 80076b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076ba:	e01f      	b.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076bc:	4b69      	ldr	r3, [pc, #420]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076c8:	d106      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80076ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076d0:	d102      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076d2:	4b66      	ldr	r3, [pc, #408]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80076d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076d6:	e011      	b.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076d8:	4b62      	ldr	r3, [pc, #392]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076e4:	d106      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80076e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076ec:	d102      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076ee:	4b60      	ldr	r3, [pc, #384]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80076f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076f2:	e003      	b.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80076f8:	f000 bce1 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076fc:	f000 bcdf 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007700:	4b5c      	ldr	r3, [pc, #368]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007704:	f000 bcdb 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770c:	f000 bcd7 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007714:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007718:	430b      	orrs	r3, r1
 800771a:	f040 80ad 	bne.w	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800771e:	4b51      	ldr	r3, [pc, #324]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007722:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007726:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800772e:	d056      	beq.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007736:	f200 8090 	bhi.w	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773c:	2bc0      	cmp	r3, #192	@ 0xc0
 800773e:	f000 8088 	beq.w	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2bc0      	cmp	r3, #192	@ 0xc0
 8007746:	f200 8088 	bhi.w	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	2b80      	cmp	r3, #128	@ 0x80
 800774e:	d032      	beq.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	2b80      	cmp	r3, #128	@ 0x80
 8007754:	f200 8081 	bhi.w	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800775e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007760:	2b40      	cmp	r3, #64	@ 0x40
 8007762:	d014      	beq.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007764:	e079      	b.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007766:	4b3f      	ldr	r3, [pc, #252]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800776e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007772:	d108      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007778:	4618      	mov	r0, r3
 800777a:	f000 ff67 	bl	800864c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800777e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007782:	f000 bc9c 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800778a:	f000 bc98 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800778e:	4b35      	ldr	r3, [pc, #212]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007796:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800779a:	d108      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800779c:	f107 0318 	add.w	r3, r7, #24
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 fcab 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077aa:	f000 bc88 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077b2:	f000 bc84 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077b6:	4b2b      	ldr	r3, [pc, #172]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077c2:	d108      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077c4:	f107 030c 	add.w	r3, r7, #12
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fdeb 	bl	80083a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077d2:	f000 bc74 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077da:	f000 bc70 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077de:	4b21      	ldr	r3, [pc, #132]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d10c      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80077f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	08db      	lsrs	r3, r3, #3
 8007800:	f003 0303 	and.w	r3, r3, #3
 8007804:	4a18      	ldr	r2, [pc, #96]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007806:	fa22 f303 	lsr.w	r3, r2, r3
 800780a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800780c:	e01f      	b.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800780e:	4b15      	ldr	r3, [pc, #84]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800781a:	d106      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800781c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007822:	d102      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007824:	4b11      	ldr	r3, [pc, #68]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007828:	e011      	b.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800782a:	4b0e      	ldr	r3, [pc, #56]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007836:	d106      	bne.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800783a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800783e:	d102      	bne.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007840:	4b0b      	ldr	r3, [pc, #44]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007844:	e003      	b.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800784a:	f000 bc38 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800784e:	f000 bc36 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007852:	4b08      	ldr	r3, [pc, #32]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007856:	f000 bc32 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800785a:	2300      	movs	r3, #0
 800785c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800785e:	f000 bc2e 	b.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007862:	bf00      	nop
 8007864:	58024400 	.word	0x58024400
 8007868:	03d09000 	.word	0x03d09000
 800786c:	003d0900 	.word	0x003d0900
 8007870:	017d7840 	.word	0x017d7840
 8007874:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007880:	430b      	orrs	r3, r1
 8007882:	f040 809c 	bne.w	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007886:	4b9e      	ldr	r3, [pc, #632]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800788a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800788e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007892:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007896:	d054      	beq.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800789e:	f200 808b 	bhi.w	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80078a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80078a8:	f000 8083 	beq.w	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80078b2:	f200 8081 	bhi.w	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078bc:	d02f      	beq.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078c4:	d878      	bhi.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d004      	beq.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078d2:	d012      	beq.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80078d4:	e070      	b.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078d6:	4b8a      	ldr	r3, [pc, #552]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078e2:	d107      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 feaf 	bl	800864c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078f2:	e3e4      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f8:	e3e1      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078fa:	4b81      	ldr	r3, [pc, #516]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007902:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007906:	d107      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007908:	f107 0318 	add.w	r3, r7, #24
 800790c:	4618      	mov	r0, r3
 800790e:	f000 fbf5 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007916:	e3d2      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800791c:	e3cf      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800791e:	4b78      	ldr	r3, [pc, #480]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800792a:	d107      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800792c:	f107 030c 	add.w	r3, r7, #12
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fd37 	bl	80083a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800793a:	e3c0      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007940:	e3bd      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007942:	4b6f      	ldr	r3, [pc, #444]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007946:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800794a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800794c:	4b6c      	ldr	r3, [pc, #432]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b04      	cmp	r3, #4
 8007956:	d10c      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795a:	2b00      	cmp	r3, #0
 800795c:	d109      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800795e:	4b68      	ldr	r3, [pc, #416]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	08db      	lsrs	r3, r3, #3
 8007964:	f003 0303 	and.w	r3, r3, #3
 8007968:	4a66      	ldr	r2, [pc, #408]	@ (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800796a:	fa22 f303 	lsr.w	r3, r2, r3
 800796e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007970:	e01e      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007972:	4b63      	ldr	r3, [pc, #396]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800797a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800797e:	d106      	bne.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007986:	d102      	bne.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007988:	4b5f      	ldr	r3, [pc, #380]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800798a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800798c:	e010      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800798e:	4b5c      	ldr	r3, [pc, #368]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800799a:	d106      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800799c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079a2:	d102      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80079a4:	4b59      	ldr	r3, [pc, #356]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80079a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079a8:	e002      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80079ae:	e386      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079b0:	e385      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80079b2:	4b57      	ldr	r3, [pc, #348]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80079b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079b6:	e382      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079bc:	e37f      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80079be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80079c6:	430b      	orrs	r3, r1
 80079c8:	f040 80a7 	bne.w	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80079cc:	4b4c      	ldr	r3, [pc, #304]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80079d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079dc:	d055      	beq.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079e4:	f200 8096 	bhi.w	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80079ee:	f000 8084 	beq.w	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80079f8:	f200 808c 	bhi.w	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80079fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a02:	d030      	beq.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a0a:	f200 8083 	bhi.w	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d004      	beq.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a1a:	d012      	beq.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007a1c:	e07a      	b.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a1e:	4b38      	ldr	r3, [pc, #224]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a2a:	d107      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fe0b 	bl	800864c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a3a:	e340      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a40:	e33d      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a42:	4b2f      	ldr	r3, [pc, #188]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a4e:	d107      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a50:	f107 0318 	add.w	r3, r7, #24
 8007a54:	4618      	mov	r0, r3
 8007a56:	f000 fb51 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a5e:	e32e      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a64:	e32b      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a66:	4b26      	ldr	r3, [pc, #152]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a72:	d107      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a74:	f107 030c 	add.w	r3, r7, #12
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fc93 	bl	80083a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a82:	e31c      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a88:	e319      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a94:	4b1a      	ldr	r3, [pc, #104]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d10c      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007aa6:	4b16      	ldr	r3, [pc, #88]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	08db      	lsrs	r3, r3, #3
 8007aac:	f003 0303 	and.w	r3, r3, #3
 8007ab0:	4a14      	ldr	r2, [pc, #80]	@ (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ab8:	e01e      	b.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007aba:	4b11      	ldr	r3, [pc, #68]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ac6:	d106      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ace:	d102      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ad4:	e010      	b.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ae2:	d106      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007aea:	d102      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007aec:	4b07      	ldr	r3, [pc, #28]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af0:	e002      	b.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007af6:	e2e2      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007af8:	e2e1      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007afa:	4b05      	ldr	r3, [pc, #20]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007afe:	e2de      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b00:	58024400 	.word	0x58024400
 8007b04:	03d09000 	.word	0x03d09000
 8007b08:	003d0900 	.word	0x003d0900
 8007b0c:	017d7840 	.word	0x017d7840
 8007b10:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b18:	e2d1      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b1e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007b22:	430b      	orrs	r3, r1
 8007b24:	f040 809c 	bne.w	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007b28:	4b93      	ldr	r3, [pc, #588]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b2c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007b30:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b38:	d054      	beq.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b40:	f200 808b 	bhi.w	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b4a:	f000 8083 	beq.w	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b54:	f200 8081 	bhi.w	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b5e:	d02f      	beq.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b66:	d878      	bhi.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d004      	beq.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b74:	d012      	beq.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007b76:	e070      	b.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b78:	4b7f      	ldr	r3, [pc, #508]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b84:	d107      	bne.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fd5e 	bl	800864c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b94:	e293      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b9a:	e290      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b9c:	4b76      	ldr	r3, [pc, #472]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ba8:	d107      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007baa:	f107 0318 	add.w	r3, r7, #24
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 faa4 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bb8:	e281      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bbe:	e27e      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bc0:	4b6d      	ldr	r3, [pc, #436]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bcc:	d107      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bce:	f107 030c 	add.w	r3, r7, #12
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fbe6 	bl	80083a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bdc:	e26f      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007be2:	e26c      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007be4:	4b64      	ldr	r3, [pc, #400]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007bec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bee:	4b62      	ldr	r3, [pc, #392]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0304 	and.w	r3, r3, #4
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d10c      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d109      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c00:	4b5d      	ldr	r3, [pc, #372]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	08db      	lsrs	r3, r3, #3
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	4a5c      	ldr	r2, [pc, #368]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c12:	e01e      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c14:	4b58      	ldr	r3, [pc, #352]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c20:	d106      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c28:	d102      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c2a:	4b55      	ldr	r3, [pc, #340]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c2e:	e010      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c30:	4b51      	ldr	r3, [pc, #324]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c3c:	d106      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c44:	d102      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c46:	4b4f      	ldr	r3, [pc, #316]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c4a:	e002      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c50:	e235      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c52:	e234      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c54:	4b4c      	ldr	r3, [pc, #304]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c58:	e231      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c5e:	e22e      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c64:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	f040 808f 	bne.w	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007c6e:	4b42      	ldr	r3, [pc, #264]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c72:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007c76:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c7e:	d06b      	beq.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c86:	d874      	bhi.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c8e:	d056      	beq.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c96:	d86c      	bhi.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c9e:	d03b      	beq.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ca6:	d864      	bhi.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007caa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cae:	d021      	beq.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cb6:	d85c      	bhi.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d004      	beq.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc4:	d004      	beq.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007cc6:	e054      	b.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007cc8:	f7fe fa4c 	bl	8006164 <HAL_RCC_GetPCLK1Freq>
 8007ccc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cce:	e1f6      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cd0:	4b29      	ldr	r3, [pc, #164]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cdc:	d107      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cde:	f107 0318 	add.w	r3, r7, #24
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 fa0a 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cec:	e1e7      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf2:	e1e4      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cf4:	4b20      	ldr	r3, [pc, #128]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d00:	d107      	bne.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d02:	f107 030c 	add.w	r3, r7, #12
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 fb4c 	bl	80083a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d10:	e1d5      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d16:	e1d2      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d18:	4b17      	ldr	r3, [pc, #92]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d109      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d24:	4b14      	ldr	r3, [pc, #80]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	08db      	lsrs	r3, r3, #3
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	4a13      	ldr	r2, [pc, #76]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007d30:	fa22 f303 	lsr.w	r3, r2, r3
 8007d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d36:	e1c2      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d3c:	e1bf      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d4a:	d102      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d50:	e1b5      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d56:	e1b2      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d58:	4b07      	ldr	r3, [pc, #28]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d64:	d102      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007d66:	4b07      	ldr	r3, [pc, #28]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d6a:	e1a8      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d70:	e1a5      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d76:	e1a2      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d78:	58024400 	.word	0x58024400
 8007d7c:	03d09000 	.word	0x03d09000
 8007d80:	003d0900 	.word	0x003d0900
 8007d84:	017d7840 	.word	0x017d7840
 8007d88:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d90:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007d94:	430b      	orrs	r3, r1
 8007d96:	d173      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007d98:	4b9c      	ldr	r3, [pc, #624]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007da0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007da8:	d02f      	beq.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007db0:	d863      	bhi.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dbe:	d012      	beq.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007dc0:	e05b      	b.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dc2:	4b92      	ldr	r3, [pc, #584]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dce:	d107      	bne.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dd0:	f107 0318 	add.w	r3, r7, #24
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 f991 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dde:	e16e      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de4:	e16b      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007de6:	4b89      	ldr	r3, [pc, #548]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007df2:	d107      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007df4:	f107 030c 	add.w	r3, r7, #12
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 fad3 	bl	80083a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e02:	e15c      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e08:	e159      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e0a:	4b80      	ldr	r3, [pc, #512]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e14:	4b7d      	ldr	r3, [pc, #500]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d10c      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d109      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e26:	4b79      	ldr	r3, [pc, #484]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	08db      	lsrs	r3, r3, #3
 8007e2c:	f003 0303 	and.w	r3, r3, #3
 8007e30:	4a77      	ldr	r2, [pc, #476]	@ (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007e32:	fa22 f303 	lsr.w	r3, r2, r3
 8007e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e38:	e01e      	b.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e3a:	4b74      	ldr	r3, [pc, #464]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e46:	d106      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e4e:	d102      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e50:	4b70      	ldr	r3, [pc, #448]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e54:	e010      	b.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e56:	4b6d      	ldr	r3, [pc, #436]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e62:	d106      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e6a:	d102      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e70:	e002      	b.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e76:	e122      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e78:	e121      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7e:	e11e      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e84:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	d133      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007e8c:	4b5f      	ldr	r3, [pc, #380]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e94:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d004      	beq.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ea2:	d012      	beq.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007ea4:	e023      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ea6:	4b59      	ldr	r3, [pc, #356]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007eb2:	d107      	bne.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 fbc7 	bl	800864c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec2:	e0fc      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec8:	e0f9      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eca:	4b50      	ldr	r3, [pc, #320]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ed6:	d107      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ed8:	f107 0318 	add.w	r3, r7, #24
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 f90d 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ee6:	e0ea      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eec:	e0e7      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef2:	e0e4      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ef8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007efc:	430b      	orrs	r3, r1
 8007efe:	f040 808d 	bne.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007f02:	4b42      	ldr	r3, [pc, #264]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f06:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007f0a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f12:	d06b      	beq.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f1a:	d874      	bhi.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f22:	d056      	beq.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f2a:	d86c      	bhi.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f32:	d03b      	beq.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f3a:	d864      	bhi.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f42:	d021      	beq.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f4a:	d85c      	bhi.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d004      	beq.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f58:	d004      	beq.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007f5a:	e054      	b.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007f5c:	f000 f8b8 	bl	80080d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f60:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f62:	e0ac      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f64:	4b29      	ldr	r3, [pc, #164]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f70:	d107      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f72:	f107 0318 	add.w	r3, r7, #24
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 f8c0 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f80:	e09d      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f86:	e09a      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f88:	4b20      	ldr	r3, [pc, #128]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f94:	d107      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f96:	f107 030c 	add.w	r3, r7, #12
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fa02 	bl	80083a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fa4:	e08b      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007faa:	e088      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fac:	4b17      	ldr	r3, [pc, #92]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d109      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fb8:	4b14      	ldr	r3, [pc, #80]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	08db      	lsrs	r3, r3, #3
 8007fbe:	f003 0303 	and.w	r3, r3, #3
 8007fc2:	4a13      	ldr	r2, [pc, #76]	@ (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fca:	e078      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd0:	e075      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fde:	d102      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fe4:	e06b      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fea:	e068      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007fec:	4b07      	ldr	r3, [pc, #28]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ff8:	d102      	bne.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007ffa:	4b07      	ldr	r3, [pc, #28]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ffe:	e05e      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008004:	e05b      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800800a:	e058      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800800c:	58024400 	.word	0x58024400
 8008010:	03d09000 	.word	0x03d09000
 8008014:	003d0900 	.word	0x003d0900
 8008018:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800801c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008020:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008024:	430b      	orrs	r3, r1
 8008026:	d148      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008028:	4b27      	ldr	r3, [pc, #156]	@ (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800802a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008030:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008038:	d02a      	beq.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008040:	d838      	bhi.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800804e:	d00d      	beq.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008050:	e030      	b.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008052:	4b1d      	ldr	r3, [pc, #116]	@ (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800805a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800805e:	d102      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008060:	4b1a      	ldr	r3, [pc, #104]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008064:	e02b      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800806a:	e028      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800806c:	4b16      	ldr	r3, [pc, #88]	@ (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008074:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008078:	d107      	bne.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800807a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800807e:	4618      	mov	r0, r3
 8008080:	f000 fae4 	bl	800864c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008088:	e019      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800808e:	e016      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008090:	4b0d      	ldr	r3, [pc, #52]	@ (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800809c:	d107      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800809e:	f107 0318 	add.w	r3, r7, #24
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f82a 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ac:	e007      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b2:	e004      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b8:	e001      	b.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80080be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3740      	adds	r7, #64	@ 0x40
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	58024400 	.word	0x58024400
 80080cc:	017d7840 	.word	0x017d7840

080080d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80080d4:	f7fe f816 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 80080d8:	4602      	mov	r2, r0
 80080da:	4b06      	ldr	r3, [pc, #24]	@ (80080f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	091b      	lsrs	r3, r3, #4
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	4904      	ldr	r1, [pc, #16]	@ (80080f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80080e6:	5ccb      	ldrb	r3, [r1, r3]
 80080e8:	f003 031f 	and.w	r3, r3, #31
 80080ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	58024400 	.word	0x58024400
 80080f8:	0800e10c 	.word	0x0800e10c

080080fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b089      	sub	sp, #36	@ 0x24
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008104:	4ba1      	ldr	r3, [pc, #644]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008108:	f003 0303 	and.w	r3, r3, #3
 800810c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800810e:	4b9f      	ldr	r3, [pc, #636]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	0b1b      	lsrs	r3, r3, #12
 8008114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008118:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800811a:	4b9c      	ldr	r3, [pc, #624]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800811c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811e:	091b      	lsrs	r3, r3, #4
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008126:	4b99      	ldr	r3, [pc, #612]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812a:	08db      	lsrs	r3, r3, #3
 800812c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	fb02 f303 	mul.w	r3, r2, r3
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8111 	beq.w	800836c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b02      	cmp	r3, #2
 800814e:	f000 8083 	beq.w	8008258 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	2b02      	cmp	r3, #2
 8008156:	f200 80a1 	bhi.w	800829c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d056      	beq.n	8008214 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008166:	e099      	b.n	800829c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008168:	4b88      	ldr	r3, [pc, #544]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0320 	and.w	r3, r3, #32
 8008170:	2b00      	cmp	r3, #0
 8008172:	d02d      	beq.n	80081d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008174:	4b85      	ldr	r3, [pc, #532]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	08db      	lsrs	r3, r3, #3
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	4a84      	ldr	r2, [pc, #528]	@ (8008390 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008180:	fa22 f303 	lsr.w	r3, r2, r3
 8008184:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	ee07 3a90 	vmov	s15, r3
 800818c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800819e:	4b7b      	ldr	r3, [pc, #492]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a6:	ee07 3a90 	vmov	s15, r3
 80081aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80081b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081ce:	e087      	b.n	80082e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80081de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e2:	4b6a      	ldr	r3, [pc, #424]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008212:	e065      	b.n	80082e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008226:	4b59      	ldr	r3, [pc, #356]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800822a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008236:	ed97 6a03 	vldr	s12, [r7, #12]
 800823a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800823e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800824a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800824e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008256:	e043      	b.n	80082e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008262:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800826a:	4b48      	ldr	r3, [pc, #288]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800827a:	ed97 6a03 	vldr	s12, [r7, #12]
 800827e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800828a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800828e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800829a:	e021      	b.n	80082e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ae:	4b37      	ldr	r3, [pc, #220]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082be:	ed97 6a03 	vldr	s12, [r7, #12]
 80082c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80082e0:	4b2a      	ldr	r3, [pc, #168]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e4:	0a5b      	lsrs	r3, r3, #9
 80082e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80082fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008306:	ee17 2a90 	vmov	r2, s15
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800830e:	4b1f      	ldr	r3, [pc, #124]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008312:	0c1b      	lsrs	r3, r3, #16
 8008314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008318:	ee07 3a90 	vmov	s15, r3
 800831c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008324:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008328:	edd7 6a07 	vldr	s13, [r7, #28]
 800832c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008334:	ee17 2a90 	vmov	r2, s15
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800833c:	4b13      	ldr	r3, [pc, #76]	@ (800838c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800833e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008340:	0e1b      	lsrs	r3, r3, #24
 8008342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008356:	edd7 6a07 	vldr	s13, [r7, #28]
 800835a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800835e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008362:	ee17 2a90 	vmov	r2, s15
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800836a:	e008      	b.n	800837e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	609a      	str	r2, [r3, #8]
}
 800837e:	bf00      	nop
 8008380:	3724      	adds	r7, #36	@ 0x24
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	58024400 	.word	0x58024400
 8008390:	03d09000 	.word	0x03d09000
 8008394:	46000000 	.word	0x46000000
 8008398:	4c742400 	.word	0x4c742400
 800839c:	4a742400 	.word	0x4a742400
 80083a0:	4bbebc20 	.word	0x4bbebc20

080083a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b089      	sub	sp, #36	@ 0x24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083ac:	4ba1      	ldr	r3, [pc, #644]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80083b6:	4b9f      	ldr	r3, [pc, #636]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ba:	0d1b      	lsrs	r3, r3, #20
 80083bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083c2:	4b9c      	ldr	r3, [pc, #624]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c6:	0a1b      	lsrs	r3, r3, #8
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80083ce:	4b99      	ldr	r3, [pc, #612]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d2:	08db      	lsrs	r3, r3, #3
 80083d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	fb02 f303 	mul.w	r3, r2, r3
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 8111 	beq.w	8008614 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	f000 8083 	beq.w	8008500 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	f200 80a1 	bhi.w	8008544 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d056      	beq.n	80084bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800840e:	e099      	b.n	8008544 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008410:	4b88      	ldr	r3, [pc, #544]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0320 	and.w	r3, r3, #32
 8008418:	2b00      	cmp	r3, #0
 800841a:	d02d      	beq.n	8008478 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800841c:	4b85      	ldr	r3, [pc, #532]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	08db      	lsrs	r3, r3, #3
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	4a84      	ldr	r2, [pc, #528]	@ (8008638 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008428:	fa22 f303 	lsr.w	r3, r2, r3
 800842c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	ee07 3a90 	vmov	s15, r3
 8008434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008446:	4b7b      	ldr	r3, [pc, #492]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008456:	ed97 6a03 	vldr	s12, [r7, #12]
 800845a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800863c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800845e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800846a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008472:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008476:	e087      	b.n	8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	ee07 3a90 	vmov	s15, r3
 800847e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008482:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848a:	4b6a      	ldr	r3, [pc, #424]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800848c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800848e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849a:	ed97 6a03 	vldr	s12, [r7, #12]
 800849e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800863c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084ba:	e065      	b.n	8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ce:	4b59      	ldr	r3, [pc, #356]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084de:	ed97 6a03 	vldr	s12, [r7, #12]
 80084e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800863c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084fe:	e043      	b.n	8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800850e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008512:	4b48      	ldr	r3, [pc, #288]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008522:	ed97 6a03 	vldr	s12, [r7, #12]
 8008526:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800863c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800852a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008542:	e021      	b.n	8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008556:	4b37      	ldr	r3, [pc, #220]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008566:	ed97 6a03 	vldr	s12, [r7, #12]
 800856a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800863c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800856e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800857a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008586:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008588:	4b2a      	ldr	r3, [pc, #168]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800858a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800858c:	0a5b      	lsrs	r3, r3, #9
 800858e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800859e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80085a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ae:	ee17 2a90 	vmov	r2, s15
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80085b6:	4b1f      	ldr	r3, [pc, #124]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ba:	0c1b      	lsrs	r3, r3, #16
 80085bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085c0:	ee07 3a90 	vmov	s15, r3
 80085c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80085d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085dc:	ee17 2a90 	vmov	r2, s15
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80085e4:	4b13      	ldr	r3, [pc, #76]	@ (8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e8:	0e1b      	lsrs	r3, r3, #24
 80085ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ee:	ee07 3a90 	vmov	s15, r3
 80085f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800860a:	ee17 2a90 	vmov	r2, s15
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008612:	e008      	b.n	8008626 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	609a      	str	r2, [r3, #8]
}
 8008626:	bf00      	nop
 8008628:	3724      	adds	r7, #36	@ 0x24
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	58024400 	.word	0x58024400
 8008638:	03d09000 	.word	0x03d09000
 800863c:	46000000 	.word	0x46000000
 8008640:	4c742400 	.word	0x4c742400
 8008644:	4a742400 	.word	0x4a742400
 8008648:	4bbebc20 	.word	0x4bbebc20

0800864c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800864c:	b480      	push	{r7}
 800864e:	b089      	sub	sp, #36	@ 0x24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008654:	4ba0      	ldr	r3, [pc, #640]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008658:	f003 0303 	and.w	r3, r3, #3
 800865c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800865e:	4b9e      	ldr	r3, [pc, #632]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008662:	091b      	lsrs	r3, r3, #4
 8008664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008668:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800866a:	4b9b      	ldr	r3, [pc, #620]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800866c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008674:	4b98      	ldr	r3, [pc, #608]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008678:	08db      	lsrs	r3, r3, #3
 800867a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	fb02 f303 	mul.w	r3, r2, r3
 8008684:	ee07 3a90 	vmov	s15, r3
 8008688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 8111 	beq.w	80088ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	2b02      	cmp	r3, #2
 800869c:	f000 8083 	beq.w	80087a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	f200 80a1 	bhi.w	80087ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d056      	beq.n	8008762 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80086b4:	e099      	b.n	80087ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086b6:	4b88      	ldr	r3, [pc, #544]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d02d      	beq.n	800871e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086c2:	4b85      	ldr	r3, [pc, #532]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	08db      	lsrs	r3, r3, #3
 80086c8:	f003 0303 	and.w	r3, r3, #3
 80086cc:	4a83      	ldr	r2, [pc, #524]	@ (80088dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80086ce:	fa22 f303 	lsr.w	r3, r2, r3
 80086d2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	ee07 3a90 	vmov	s15, r3
 80086e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ec:	4b7a      	ldr	r3, [pc, #488]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008700:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008718:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800871c:	e087      	b.n	800882e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	ee07 3a90 	vmov	s15, r3
 8008724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008728:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800872c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008730:	4b69      	ldr	r3, [pc, #420]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008738:	ee07 3a90 	vmov	s15, r3
 800873c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008740:	ed97 6a03 	vldr	s12, [r7, #12]
 8008744:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008748:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800874c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008750:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008760:	e065      	b.n	800882e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	ee07 3a90 	vmov	s15, r3
 8008768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008774:	4b58      	ldr	r3, [pc, #352]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877c:	ee07 3a90 	vmov	s15, r3
 8008780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008784:	ed97 6a03 	vldr	s12, [r7, #12]
 8008788:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800878c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008794:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800879c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087a4:	e043      	b.n	800882e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	ee07 3a90 	vmov	s15, r3
 80087ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80087b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b8:	4b47      	ldr	r3, [pc, #284]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c0:	ee07 3a90 	vmov	s15, r3
 80087c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80087cc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087e8:	e021      	b.n	800882e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80087f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fc:	4b36      	ldr	r3, [pc, #216]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008810:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800881c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008828:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800882c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800882e:	4b2a      	ldr	r3, [pc, #168]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008832:	0a5b      	lsrs	r3, r3, #9
 8008834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008838:	ee07 3a90 	vmov	s15, r3
 800883c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008840:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008844:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008848:	edd7 6a07 	vldr	s13, [r7, #28]
 800884c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008854:	ee17 2a90 	vmov	r2, s15
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800885c:	4b1e      	ldr	r3, [pc, #120]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800885e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008860:	0c1b      	lsrs	r3, r3, #16
 8008862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008872:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008876:	edd7 6a07 	vldr	s13, [r7, #28]
 800887a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800887e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008882:	ee17 2a90 	vmov	r2, s15
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800888a:	4b13      	ldr	r3, [pc, #76]	@ (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800888c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800888e:	0e1b      	lsrs	r3, r3, #24
 8008890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008894:	ee07 3a90 	vmov	s15, r3
 8008898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088b0:	ee17 2a90 	vmov	r2, s15
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80088b8:	e008      	b.n	80088cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	609a      	str	r2, [r3, #8]
}
 80088cc:	bf00      	nop
 80088ce:	3724      	adds	r7, #36	@ 0x24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	58024400 	.word	0x58024400
 80088dc:	03d09000 	.word	0x03d09000
 80088e0:	46000000 	.word	0x46000000
 80088e4:	4c742400 	.word	0x4c742400
 80088e8:	4a742400 	.word	0x4a742400
 80088ec:	4bbebc20 	.word	0x4bbebc20

080088f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088fe:	4b53      	ldr	r3, [pc, #332]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	2b03      	cmp	r3, #3
 8008908:	d101      	bne.n	800890e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e099      	b.n	8008a42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800890e:	4b4f      	ldr	r3, [pc, #316]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a4e      	ldr	r2, [pc, #312]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008914:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800891a:	f7f8 ffdf 	bl	80018dc <HAL_GetTick>
 800891e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008920:	e008      	b.n	8008934 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008922:	f7f8 ffdb 	bl	80018dc <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	2b02      	cmp	r3, #2
 800892e:	d901      	bls.n	8008934 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e086      	b.n	8008a42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008934:	4b45      	ldr	r3, [pc, #276]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1f0      	bne.n	8008922 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008940:	4b42      	ldr	r3, [pc, #264]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008944:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	031b      	lsls	r3, r3, #12
 800894e:	493f      	ldr	r1, [pc, #252]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008950:	4313      	orrs	r3, r2
 8008952:	628b      	str	r3, [r1, #40]	@ 0x28
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	3b01      	subs	r3, #1
 800895a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	3b01      	subs	r3, #1
 8008964:	025b      	lsls	r3, r3, #9
 8008966:	b29b      	uxth	r3, r3
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	3b01      	subs	r3, #1
 8008970:	041b      	lsls	r3, r3, #16
 8008972:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008976:	431a      	orrs	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	3b01      	subs	r3, #1
 800897e:	061b      	lsls	r3, r3, #24
 8008980:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008984:	4931      	ldr	r1, [pc, #196]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008986:	4313      	orrs	r3, r2
 8008988:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800898a:	4b30      	ldr	r3, [pc, #192]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 800898c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	492d      	ldr	r1, [pc, #180]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008998:	4313      	orrs	r3, r2
 800899a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800899c:	4b2b      	ldr	r3, [pc, #172]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 800899e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a0:	f023 0220 	bic.w	r2, r3, #32
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	4928      	ldr	r1, [pc, #160]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80089ae:	4b27      	ldr	r3, [pc, #156]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 80089b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b2:	4a26      	ldr	r2, [pc, #152]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 80089b4:	f023 0310 	bic.w	r3, r3, #16
 80089b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80089ba:	4b24      	ldr	r3, [pc, #144]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 80089bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089be:	4b24      	ldr	r3, [pc, #144]	@ (8008a50 <RCCEx_PLL2_Config+0x160>)
 80089c0:	4013      	ands	r3, r2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	69d2      	ldr	r2, [r2, #28]
 80089c6:	00d2      	lsls	r2, r2, #3
 80089c8:	4920      	ldr	r1, [pc, #128]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80089ce:	4b1f      	ldr	r3, [pc, #124]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 80089d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d2:	4a1e      	ldr	r2, [pc, #120]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 80089d4:	f043 0310 	orr.w	r3, r3, #16
 80089d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d106      	bne.n	80089ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80089e0:	4b1a      	ldr	r3, [pc, #104]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 80089e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e4:	4a19      	ldr	r2, [pc, #100]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 80089e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089ec:	e00f      	b.n	8008a0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d106      	bne.n	8008a02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80089f4:	4b15      	ldr	r3, [pc, #84]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 80089f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f8:	4a14      	ldr	r2, [pc, #80]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 80089fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a00:	e005      	b.n	8008a0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a02:	4b12      	ldr	r3, [pc, #72]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a06:	4a11      	ldr	r2, [pc, #68]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008a08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a0e      	ldr	r2, [pc, #56]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008a14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a1a:	f7f8 ff5f 	bl	80018dc <HAL_GetTick>
 8008a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a20:	e008      	b.n	8008a34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a22:	f7f8 ff5b 	bl	80018dc <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d901      	bls.n	8008a34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e006      	b.n	8008a42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a34:	4b05      	ldr	r3, [pc, #20]	@ (8008a4c <RCCEx_PLL2_Config+0x15c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d0f0      	beq.n	8008a22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	58024400 	.word	0x58024400
 8008a50:	ffff0007 	.word	0xffff0007

08008a54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a62:	4b53      	ldr	r3, [pc, #332]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a66:	f003 0303 	and.w	r3, r3, #3
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d101      	bne.n	8008a72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e099      	b.n	8008ba6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a72:	4b4f      	ldr	r3, [pc, #316]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a4e      	ldr	r2, [pc, #312]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008a78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a7e:	f7f8 ff2d 	bl	80018dc <HAL_GetTick>
 8008a82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a84:	e008      	b.n	8008a98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a86:	f7f8 ff29 	bl	80018dc <HAL_GetTick>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d901      	bls.n	8008a98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a94:	2303      	movs	r3, #3
 8008a96:	e086      	b.n	8008ba6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a98:	4b45      	ldr	r3, [pc, #276]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1f0      	bne.n	8008a86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008aa4:	4b42      	ldr	r3, [pc, #264]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	051b      	lsls	r3, r3, #20
 8008ab2:	493f      	ldr	r1, [pc, #252]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	025b      	lsls	r3, r3, #9
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	431a      	orrs	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	041b      	lsls	r3, r3, #16
 8008ad6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	061b      	lsls	r3, r3, #24
 8008ae4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ae8:	4931      	ldr	r1, [pc, #196]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008aee:	4b30      	ldr	r3, [pc, #192]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	492d      	ldr	r1, [pc, #180]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b00:	4b2b      	ldr	r3, [pc, #172]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	4928      	ldr	r1, [pc, #160]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b12:	4b27      	ldr	r3, [pc, #156]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b16:	4a26      	ldr	r2, [pc, #152]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b1e:	4b24      	ldr	r3, [pc, #144]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b22:	4b24      	ldr	r3, [pc, #144]	@ (8008bb4 <RCCEx_PLL3_Config+0x160>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	69d2      	ldr	r2, [r2, #28]
 8008b2a:	00d2      	lsls	r2, r2, #3
 8008b2c:	4920      	ldr	r1, [pc, #128]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b32:	4b1f      	ldr	r3, [pc, #124]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b36:	4a1e      	ldr	r2, [pc, #120]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d106      	bne.n	8008b52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b44:	4b1a      	ldr	r3, [pc, #104]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b48:	4a19      	ldr	r2, [pc, #100]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b50:	e00f      	b.n	8008b72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d106      	bne.n	8008b66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b58:	4b15      	ldr	r3, [pc, #84]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5c:	4a14      	ldr	r2, [pc, #80]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008b62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b64:	e005      	b.n	8008b72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b66:	4b12      	ldr	r3, [pc, #72]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6a:	4a11      	ldr	r2, [pc, #68]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b72:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a0e      	ldr	r2, [pc, #56]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b7e:	f7f8 fead 	bl	80018dc <HAL_GetTick>
 8008b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b84:	e008      	b.n	8008b98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b86:	f7f8 fea9 	bl	80018dc <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d901      	bls.n	8008b98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e006      	b.n	8008ba6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b98:	4b05      	ldr	r3, [pc, #20]	@ (8008bb0 <RCCEx_PLL3_Config+0x15c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0f0      	beq.n	8008b86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	58024400 	.word	0x58024400
 8008bb4:	ffff0007 	.word	0xffff0007

08008bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e049      	b.n	8008c5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7f8 fcce 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f000 f8ae 	bl	8008d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d001      	beq.n	8008c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e054      	b.n	8008d2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f042 0201 	orr.w	r2, r2, #1
 8008c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a26      	ldr	r2, [pc, #152]	@ (8008d38 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d022      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008caa:	d01d      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a22      	ldr	r2, [pc, #136]	@ (8008d3c <HAL_TIM_Base_Start_IT+0xd4>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d018      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a21      	ldr	r2, [pc, #132]	@ (8008d40 <HAL_TIM_Base_Start_IT+0xd8>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d013      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8008d44 <HAL_TIM_Base_Start_IT+0xdc>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00e      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a1e      	ldr	r2, [pc, #120]	@ (8008d48 <HAL_TIM_Base_Start_IT+0xe0>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d009      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d4c <HAL_TIM_Base_Start_IT+0xe4>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d004      	beq.n	8008ce8 <HAL_TIM_Base_Start_IT+0x80>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8008d50 <HAL_TIM_Base_Start_IT+0xe8>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d115      	bne.n	8008d14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	4b19      	ldr	r3, [pc, #100]	@ (8008d54 <HAL_TIM_Base_Start_IT+0xec>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b06      	cmp	r3, #6
 8008cf8:	d015      	beq.n	8008d26 <HAL_TIM_Base_Start_IT+0xbe>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d00:	d011      	beq.n	8008d26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f042 0201 	orr.w	r2, r2, #1
 8008d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d12:	e008      	b.n	8008d26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f042 0201 	orr.w	r2, r2, #1
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	e000      	b.n	8008d28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	40010000 	.word	0x40010000
 8008d3c:	40000400 	.word	0x40000400
 8008d40:	40000800 	.word	0x40000800
 8008d44:	40000c00 	.word	0x40000c00
 8008d48:	40010400 	.word	0x40010400
 8008d4c:	40001800 	.word	0x40001800
 8008d50:	40014000 	.word	0x40014000
 8008d54:	00010007 	.word	0x00010007

08008d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a46      	ldr	r2, [pc, #280]	@ (8008e84 <TIM_Base_SetConfig+0x12c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d013      	beq.n	8008d98 <TIM_Base_SetConfig+0x40>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d76:	d00f      	beq.n	8008d98 <TIM_Base_SetConfig+0x40>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a43      	ldr	r2, [pc, #268]	@ (8008e88 <TIM_Base_SetConfig+0x130>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d00b      	beq.n	8008d98 <TIM_Base_SetConfig+0x40>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a42      	ldr	r2, [pc, #264]	@ (8008e8c <TIM_Base_SetConfig+0x134>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d007      	beq.n	8008d98 <TIM_Base_SetConfig+0x40>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a41      	ldr	r2, [pc, #260]	@ (8008e90 <TIM_Base_SetConfig+0x138>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d003      	beq.n	8008d98 <TIM_Base_SetConfig+0x40>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a40      	ldr	r2, [pc, #256]	@ (8008e94 <TIM_Base_SetConfig+0x13c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d108      	bne.n	8008daa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a35      	ldr	r2, [pc, #212]	@ (8008e84 <TIM_Base_SetConfig+0x12c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d01f      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008db8:	d01b      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a32      	ldr	r2, [pc, #200]	@ (8008e88 <TIM_Base_SetConfig+0x130>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d017      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a31      	ldr	r2, [pc, #196]	@ (8008e8c <TIM_Base_SetConfig+0x134>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d013      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a30      	ldr	r2, [pc, #192]	@ (8008e90 <TIM_Base_SetConfig+0x138>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d00f      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a2f      	ldr	r2, [pc, #188]	@ (8008e94 <TIM_Base_SetConfig+0x13c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d00b      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8008e98 <TIM_Base_SetConfig+0x140>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d007      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a2d      	ldr	r2, [pc, #180]	@ (8008e9c <TIM_Base_SetConfig+0x144>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d003      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a2c      	ldr	r2, [pc, #176]	@ (8008ea0 <TIM_Base_SetConfig+0x148>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d108      	bne.n	8008e04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a16      	ldr	r2, [pc, #88]	@ (8008e84 <TIM_Base_SetConfig+0x12c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d00f      	beq.n	8008e50 <TIM_Base_SetConfig+0xf8>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a18      	ldr	r2, [pc, #96]	@ (8008e94 <TIM_Base_SetConfig+0x13c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00b      	beq.n	8008e50 <TIM_Base_SetConfig+0xf8>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a17      	ldr	r2, [pc, #92]	@ (8008e98 <TIM_Base_SetConfig+0x140>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d007      	beq.n	8008e50 <TIM_Base_SetConfig+0xf8>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a16      	ldr	r2, [pc, #88]	@ (8008e9c <TIM_Base_SetConfig+0x144>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d003      	beq.n	8008e50 <TIM_Base_SetConfig+0xf8>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a15      	ldr	r2, [pc, #84]	@ (8008ea0 <TIM_Base_SetConfig+0x148>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d103      	bne.n	8008e58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	691a      	ldr	r2, [r3, #16]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d105      	bne.n	8008e76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	f023 0201 	bic.w	r2, r3, #1
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	611a      	str	r2, [r3, #16]
  }
}
 8008e76:	bf00      	nop
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	40010000 	.word	0x40010000
 8008e88:	40000400 	.word	0x40000400
 8008e8c:	40000800 	.word	0x40000800
 8008e90:	40000c00 	.word	0x40000c00
 8008e94:	40010400 	.word	0x40010400
 8008e98:	40014000 	.word	0x40014000
 8008e9c:	40014400 	.word	0x40014400
 8008ea0:	40014800 	.word	0x40014800

08008ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d101      	bne.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	e06d      	b.n	8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a30      	ldr	r2, [pc, #192]	@ (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d004      	beq.n	8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a2f      	ldr	r2, [pc, #188]	@ (8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d108      	bne.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008ef6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a20      	ldr	r2, [pc, #128]	@ (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d022      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f2e:	d01d      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a1d      	ldr	r2, [pc, #116]	@ (8008fac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d018      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d013      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a1a      	ldr	r2, [pc, #104]	@ (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d00e      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a15      	ldr	r2, [pc, #84]	@ (8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d009      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a16      	ldr	r2, [pc, #88]	@ (8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d004      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a15      	ldr	r2, [pc, #84]	@ (8008fbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d10c      	bne.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	40010000 	.word	0x40010000
 8008fa8:	40010400 	.word	0x40010400
 8008fac:	40000400 	.word	0x40000400
 8008fb0:	40000800 	.word	0x40000800
 8008fb4:	40000c00 	.word	0x40000c00
 8008fb8:	40001800 	.word	0x40001800
 8008fbc:	40014000 	.word	0x40014000

08008fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e042      	b.n	8009058 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d106      	bne.n	8008fea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7f8 fb39 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2224      	movs	r2, #36	@ 0x24
 8008fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f022 0201 	bic.w	r2, r2, #1
 8009000:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fee6 	bl	8009ddc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f97b 	bl	800930c <UART_SetConfig>
 8009016:	4603      	mov	r3, r0
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e01b      	b.n	8009058 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800902e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689a      	ldr	r2, [r3, #8]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800903e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0201 	orr.w	r2, r2, #1
 800904e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 ff65 	bl	8009f20 <UART_CheckIdleState>
 8009056:	4603      	mov	r3, r0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b08a      	sub	sp, #40	@ 0x28
 8009064:	af02      	add	r7, sp, #8
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	4613      	mov	r3, r2
 800906e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009076:	2b20      	cmp	r3, #32
 8009078:	d17b      	bne.n	8009172 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <HAL_UART_Transmit+0x26>
 8009080:	88fb      	ldrh	r3, [r7, #6]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e074      	b.n	8009174 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2221      	movs	r2, #33	@ 0x21
 8009096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800909a:	f7f8 fc1f 	bl	80018dc <HAL_GetTick>
 800909e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	88fa      	ldrh	r2, [r7, #6]
 80090a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	88fa      	ldrh	r2, [r7, #6]
 80090ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090b8:	d108      	bne.n	80090cc <HAL_UART_Transmit+0x6c>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d104      	bne.n	80090cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80090c2:	2300      	movs	r3, #0
 80090c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	61bb      	str	r3, [r7, #24]
 80090ca:	e003      	b.n	80090d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090d0:	2300      	movs	r3, #0
 80090d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80090d4:	e030      	b.n	8009138 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2200      	movs	r2, #0
 80090de:	2180      	movs	r1, #128	@ 0x80
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 ffc7 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d005      	beq.n	80090f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2220      	movs	r2, #32
 80090f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e03d      	b.n	8009174 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10b      	bne.n	8009116 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	461a      	mov	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800910c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	3302      	adds	r3, #2
 8009112:	61bb      	str	r3, [r7, #24]
 8009114:	e007      	b.n	8009126 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	781a      	ldrb	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	3301      	adds	r3, #1
 8009124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800912c:	b29b      	uxth	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	b29a      	uxth	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800913e:	b29b      	uxth	r3, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1c8      	bne.n	80090d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2200      	movs	r2, #0
 800914c:	2140      	movs	r1, #64	@ 0x40
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 ff90 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2220      	movs	r2, #32
 800915e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e006      	b.n	8009174 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	e000      	b.n	8009174 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009172:	2302      	movs	r3, #2
  }
}
 8009174:	4618      	mov	r0, r3
 8009176:	3720      	adds	r7, #32
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	@ 0x28
 8009180:	af02      	add	r7, sp, #8
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	4613      	mov	r3, r2
 800918a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009192:	2b20      	cmp	r3, #32
 8009194:	f040 80b5 	bne.w	8009302 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <HAL_UART_Receive+0x28>
 800919e:	88fb      	ldrh	r3, [r7, #6]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e0ad      	b.n	8009304 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2222      	movs	r2, #34	@ 0x22
 80091b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091be:	f7f8 fb8d 	bl	80018dc <HAL_GetTick>
 80091c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	88fa      	ldrh	r2, [r7, #6]
 80091c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	88fa      	ldrh	r2, [r7, #6]
 80091d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091dc:	d10e      	bne.n	80091fc <HAL_UART_Receive+0x80>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d105      	bne.n	80091f2 <HAL_UART_Receive+0x76>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80091ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091f0:	e02d      	b.n	800924e <HAL_UART_Receive+0xd2>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	22ff      	movs	r2, #255	@ 0xff
 80091f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091fa:	e028      	b.n	800924e <HAL_UART_Receive+0xd2>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10d      	bne.n	8009220 <HAL_UART_Receive+0xa4>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d104      	bne.n	8009216 <HAL_UART_Receive+0x9a>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	22ff      	movs	r2, #255	@ 0xff
 8009210:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009214:	e01b      	b.n	800924e <HAL_UART_Receive+0xd2>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	227f      	movs	r2, #127	@ 0x7f
 800921a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800921e:	e016      	b.n	800924e <HAL_UART_Receive+0xd2>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009228:	d10d      	bne.n	8009246 <HAL_UART_Receive+0xca>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d104      	bne.n	800923c <HAL_UART_Receive+0xc0>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	227f      	movs	r2, #127	@ 0x7f
 8009236:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800923a:	e008      	b.n	800924e <HAL_UART_Receive+0xd2>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	223f      	movs	r2, #63	@ 0x3f
 8009240:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009244:	e003      	b.n	800924e <HAL_UART_Receive+0xd2>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009254:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800925e:	d108      	bne.n	8009272 <HAL_UART_Receive+0xf6>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d104      	bne.n	8009272 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009268:	2300      	movs	r3, #0
 800926a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	e003      	b.n	800927a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009276:	2300      	movs	r3, #0
 8009278:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800927a:	e036      	b.n	80092ea <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2200      	movs	r2, #0
 8009284:	2120      	movs	r1, #32
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 fef4 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2220      	movs	r2, #32
 8009296:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e032      	b.n	8009304 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10c      	bne.n	80092be <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	8a7b      	ldrh	r3, [r7, #18]
 80092ae:	4013      	ands	r3, r2
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	3302      	adds	r3, #2
 80092ba:	61bb      	str	r3, [r7, #24]
 80092bc:	e00c      	b.n	80092d8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	8a7b      	ldrh	r3, [r7, #18]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	4013      	ands	r3, r2
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	3301      	adds	r3, #1
 80092d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092de:	b29b      	uxth	r3, r3
 80092e0:	3b01      	subs	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1c2      	bne.n	800927c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	e000      	b.n	8009304 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8009302:	2302      	movs	r3, #2
  }
}
 8009304:	4618      	mov	r0, r3
 8009306:	3720      	adds	r7, #32
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800930c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009310:	b092      	sub	sp, #72	@ 0x48
 8009312:	af00      	add	r7, sp, #0
 8009314:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	689a      	ldr	r2, [r3, #8]
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	431a      	orrs	r2, r3
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	431a      	orrs	r2, r3
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	4313      	orrs	r3, r2
 8009332:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4bbe      	ldr	r3, [pc, #760]	@ (8009634 <UART_SetConfig+0x328>)
 800933c:	4013      	ands	r3, r2
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	6812      	ldr	r2, [r2, #0]
 8009342:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009344:	430b      	orrs	r3, r1
 8009346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4ab3      	ldr	r2, [pc, #716]	@ (8009638 <UART_SetConfig+0x32c>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d004      	beq.n	8009378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009374:	4313      	orrs	r3, r2
 8009376:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689a      	ldr	r2, [r3, #8]
 800937e:	4baf      	ldr	r3, [pc, #700]	@ (800963c <UART_SetConfig+0x330>)
 8009380:	4013      	ands	r3, r2
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009388:	430b      	orrs	r3, r1
 800938a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009392:	f023 010f 	bic.w	r1, r3, #15
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4aa6      	ldr	r2, [pc, #664]	@ (8009640 <UART_SetConfig+0x334>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d177      	bne.n	800949c <UART_SetConfig+0x190>
 80093ac:	4ba5      	ldr	r3, [pc, #660]	@ (8009644 <UART_SetConfig+0x338>)
 80093ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093b4:	2b28      	cmp	r3, #40	@ 0x28
 80093b6:	d86d      	bhi.n	8009494 <UART_SetConfig+0x188>
 80093b8:	a201      	add	r2, pc, #4	@ (adr r2, 80093c0 <UART_SetConfig+0xb4>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	08009465 	.word	0x08009465
 80093c4:	08009495 	.word	0x08009495
 80093c8:	08009495 	.word	0x08009495
 80093cc:	08009495 	.word	0x08009495
 80093d0:	08009495 	.word	0x08009495
 80093d4:	08009495 	.word	0x08009495
 80093d8:	08009495 	.word	0x08009495
 80093dc:	08009495 	.word	0x08009495
 80093e0:	0800946d 	.word	0x0800946d
 80093e4:	08009495 	.word	0x08009495
 80093e8:	08009495 	.word	0x08009495
 80093ec:	08009495 	.word	0x08009495
 80093f0:	08009495 	.word	0x08009495
 80093f4:	08009495 	.word	0x08009495
 80093f8:	08009495 	.word	0x08009495
 80093fc:	08009495 	.word	0x08009495
 8009400:	08009475 	.word	0x08009475
 8009404:	08009495 	.word	0x08009495
 8009408:	08009495 	.word	0x08009495
 800940c:	08009495 	.word	0x08009495
 8009410:	08009495 	.word	0x08009495
 8009414:	08009495 	.word	0x08009495
 8009418:	08009495 	.word	0x08009495
 800941c:	08009495 	.word	0x08009495
 8009420:	0800947d 	.word	0x0800947d
 8009424:	08009495 	.word	0x08009495
 8009428:	08009495 	.word	0x08009495
 800942c:	08009495 	.word	0x08009495
 8009430:	08009495 	.word	0x08009495
 8009434:	08009495 	.word	0x08009495
 8009438:	08009495 	.word	0x08009495
 800943c:	08009495 	.word	0x08009495
 8009440:	08009485 	.word	0x08009485
 8009444:	08009495 	.word	0x08009495
 8009448:	08009495 	.word	0x08009495
 800944c:	08009495 	.word	0x08009495
 8009450:	08009495 	.word	0x08009495
 8009454:	08009495 	.word	0x08009495
 8009458:	08009495 	.word	0x08009495
 800945c:	08009495 	.word	0x08009495
 8009460:	0800948d 	.word	0x0800948d
 8009464:	2301      	movs	r3, #1
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e222      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800946c:	2304      	movs	r3, #4
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e21e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009474:	2308      	movs	r3, #8
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e21a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800947c:	2310      	movs	r3, #16
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e216      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009484:	2320      	movs	r3, #32
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e212      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800948c:	2340      	movs	r3, #64	@ 0x40
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e20e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009494:	2380      	movs	r3, #128	@ 0x80
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e20a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a69      	ldr	r2, [pc, #420]	@ (8009648 <UART_SetConfig+0x33c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d130      	bne.n	8009508 <UART_SetConfig+0x1fc>
 80094a6:	4b67      	ldr	r3, [pc, #412]	@ (8009644 <UART_SetConfig+0x338>)
 80094a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	2b05      	cmp	r3, #5
 80094b0:	d826      	bhi.n	8009500 <UART_SetConfig+0x1f4>
 80094b2:	a201      	add	r2, pc, #4	@ (adr r2, 80094b8 <UART_SetConfig+0x1ac>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	080094d1 	.word	0x080094d1
 80094bc:	080094d9 	.word	0x080094d9
 80094c0:	080094e1 	.word	0x080094e1
 80094c4:	080094e9 	.word	0x080094e9
 80094c8:	080094f1 	.word	0x080094f1
 80094cc:	080094f9 	.word	0x080094f9
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e1ec      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80094d8:	2304      	movs	r3, #4
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e1e8      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80094e0:	2308      	movs	r3, #8
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e1e4      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80094e8:	2310      	movs	r3, #16
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e1e0      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e1dc      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80094f8:	2340      	movs	r3, #64	@ 0x40
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e1d8      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009500:	2380      	movs	r3, #128	@ 0x80
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e1d4      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a4f      	ldr	r2, [pc, #316]	@ (800964c <UART_SetConfig+0x340>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d130      	bne.n	8009574 <UART_SetConfig+0x268>
 8009512:	4b4c      	ldr	r3, [pc, #304]	@ (8009644 <UART_SetConfig+0x338>)
 8009514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b05      	cmp	r3, #5
 800951c:	d826      	bhi.n	800956c <UART_SetConfig+0x260>
 800951e:	a201      	add	r2, pc, #4	@ (adr r2, 8009524 <UART_SetConfig+0x218>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	0800953d 	.word	0x0800953d
 8009528:	08009545 	.word	0x08009545
 800952c:	0800954d 	.word	0x0800954d
 8009530:	08009555 	.word	0x08009555
 8009534:	0800955d 	.word	0x0800955d
 8009538:	08009565 	.word	0x08009565
 800953c:	2300      	movs	r3, #0
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e1b6      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e1b2      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e1ae      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e1aa      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800955c:	2320      	movs	r3, #32
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e1a6      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009564:	2340      	movs	r3, #64	@ 0x40
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e1a2      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800956c:	2380      	movs	r3, #128	@ 0x80
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e19e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a35      	ldr	r2, [pc, #212]	@ (8009650 <UART_SetConfig+0x344>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d130      	bne.n	80095e0 <UART_SetConfig+0x2d4>
 800957e:	4b31      	ldr	r3, [pc, #196]	@ (8009644 <UART_SetConfig+0x338>)
 8009580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b05      	cmp	r3, #5
 8009588:	d826      	bhi.n	80095d8 <UART_SetConfig+0x2cc>
 800958a:	a201      	add	r2, pc, #4	@ (adr r2, 8009590 <UART_SetConfig+0x284>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095a9 	.word	0x080095a9
 8009594:	080095b1 	.word	0x080095b1
 8009598:	080095b9 	.word	0x080095b9
 800959c:	080095c1 	.word	0x080095c1
 80095a0:	080095c9 	.word	0x080095c9
 80095a4:	080095d1 	.word	0x080095d1
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e180      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095b0:	2304      	movs	r3, #4
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e17c      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095b8:	2308      	movs	r3, #8
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095be:	e178      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095c0:	2310      	movs	r3, #16
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c6:	e174      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095c8:	2320      	movs	r3, #32
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ce:	e170      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095d0:	2340      	movs	r3, #64	@ 0x40
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d6:	e16c      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095d8:	2380      	movs	r3, #128	@ 0x80
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095de:	e168      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a1b      	ldr	r2, [pc, #108]	@ (8009654 <UART_SetConfig+0x348>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d142      	bne.n	8009670 <UART_SetConfig+0x364>
 80095ea:	4b16      	ldr	r3, [pc, #88]	@ (8009644 <UART_SetConfig+0x338>)
 80095ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	d838      	bhi.n	8009668 <UART_SetConfig+0x35c>
 80095f6:	a201      	add	r2, pc, #4	@ (adr r2, 80095fc <UART_SetConfig+0x2f0>)
 80095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fc:	08009615 	.word	0x08009615
 8009600:	0800961d 	.word	0x0800961d
 8009604:	08009625 	.word	0x08009625
 8009608:	0800962d 	.word	0x0800962d
 800960c:	08009659 	.word	0x08009659
 8009610:	08009661 	.word	0x08009661
 8009614:	2300      	movs	r3, #0
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e14a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800961c:	2304      	movs	r3, #4
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e146      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009624:	2308      	movs	r3, #8
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e142      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800962c:	2310      	movs	r3, #16
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009632:	e13e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009634:	cfff69f3 	.word	0xcfff69f3
 8009638:	58000c00 	.word	0x58000c00
 800963c:	11fff4ff 	.word	0x11fff4ff
 8009640:	40011000 	.word	0x40011000
 8009644:	58024400 	.word	0x58024400
 8009648:	40004400 	.word	0x40004400
 800964c:	40004800 	.word	0x40004800
 8009650:	40004c00 	.word	0x40004c00
 8009654:	40005000 	.word	0x40005000
 8009658:	2320      	movs	r3, #32
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965e:	e128      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009660:	2340      	movs	r3, #64	@ 0x40
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e124      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009668:	2380      	movs	r3, #128	@ 0x80
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e120      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4acb      	ldr	r2, [pc, #812]	@ (80099a4 <UART_SetConfig+0x698>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d176      	bne.n	8009768 <UART_SetConfig+0x45c>
 800967a:	4bcb      	ldr	r3, [pc, #812]	@ (80099a8 <UART_SetConfig+0x69c>)
 800967c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800967e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009682:	2b28      	cmp	r3, #40	@ 0x28
 8009684:	d86c      	bhi.n	8009760 <UART_SetConfig+0x454>
 8009686:	a201      	add	r2, pc, #4	@ (adr r2, 800968c <UART_SetConfig+0x380>)
 8009688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968c:	08009731 	.word	0x08009731
 8009690:	08009761 	.word	0x08009761
 8009694:	08009761 	.word	0x08009761
 8009698:	08009761 	.word	0x08009761
 800969c:	08009761 	.word	0x08009761
 80096a0:	08009761 	.word	0x08009761
 80096a4:	08009761 	.word	0x08009761
 80096a8:	08009761 	.word	0x08009761
 80096ac:	08009739 	.word	0x08009739
 80096b0:	08009761 	.word	0x08009761
 80096b4:	08009761 	.word	0x08009761
 80096b8:	08009761 	.word	0x08009761
 80096bc:	08009761 	.word	0x08009761
 80096c0:	08009761 	.word	0x08009761
 80096c4:	08009761 	.word	0x08009761
 80096c8:	08009761 	.word	0x08009761
 80096cc:	08009741 	.word	0x08009741
 80096d0:	08009761 	.word	0x08009761
 80096d4:	08009761 	.word	0x08009761
 80096d8:	08009761 	.word	0x08009761
 80096dc:	08009761 	.word	0x08009761
 80096e0:	08009761 	.word	0x08009761
 80096e4:	08009761 	.word	0x08009761
 80096e8:	08009761 	.word	0x08009761
 80096ec:	08009749 	.word	0x08009749
 80096f0:	08009761 	.word	0x08009761
 80096f4:	08009761 	.word	0x08009761
 80096f8:	08009761 	.word	0x08009761
 80096fc:	08009761 	.word	0x08009761
 8009700:	08009761 	.word	0x08009761
 8009704:	08009761 	.word	0x08009761
 8009708:	08009761 	.word	0x08009761
 800970c:	08009751 	.word	0x08009751
 8009710:	08009761 	.word	0x08009761
 8009714:	08009761 	.word	0x08009761
 8009718:	08009761 	.word	0x08009761
 800971c:	08009761 	.word	0x08009761
 8009720:	08009761 	.word	0x08009761
 8009724:	08009761 	.word	0x08009761
 8009728:	08009761 	.word	0x08009761
 800972c:	08009759 	.word	0x08009759
 8009730:	2301      	movs	r3, #1
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e0bc      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009738:	2304      	movs	r3, #4
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973e:	e0b8      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009740:	2308      	movs	r3, #8
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009746:	e0b4      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009748:	2310      	movs	r3, #16
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e0b0      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009750:	2320      	movs	r3, #32
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e0ac      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009758:	2340      	movs	r3, #64	@ 0x40
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e0a8      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009760:	2380      	movs	r3, #128	@ 0x80
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e0a4      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a8f      	ldr	r2, [pc, #572]	@ (80099ac <UART_SetConfig+0x6a0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d130      	bne.n	80097d4 <UART_SetConfig+0x4c8>
 8009772:	4b8d      	ldr	r3, [pc, #564]	@ (80099a8 <UART_SetConfig+0x69c>)
 8009774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b05      	cmp	r3, #5
 800977c:	d826      	bhi.n	80097cc <UART_SetConfig+0x4c0>
 800977e:	a201      	add	r2, pc, #4	@ (adr r2, 8009784 <UART_SetConfig+0x478>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	0800979d 	.word	0x0800979d
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097ad 	.word	0x080097ad
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097bd 	.word	0x080097bd
 8009798:	080097c5 	.word	0x080097c5
 800979c:	2300      	movs	r3, #0
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e086      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e082      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e07e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e07a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097bc:	2320      	movs	r3, #32
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e076      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097c4:	2340      	movs	r3, #64	@ 0x40
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e072      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097cc:	2380      	movs	r3, #128	@ 0x80
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e06e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a75      	ldr	r2, [pc, #468]	@ (80099b0 <UART_SetConfig+0x6a4>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d130      	bne.n	8009840 <UART_SetConfig+0x534>
 80097de:	4b72      	ldr	r3, [pc, #456]	@ (80099a8 <UART_SetConfig+0x69c>)
 80097e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b05      	cmp	r3, #5
 80097e8:	d826      	bhi.n	8009838 <UART_SetConfig+0x52c>
 80097ea:	a201      	add	r2, pc, #4	@ (adr r2, 80097f0 <UART_SetConfig+0x4e4>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009809 	.word	0x08009809
 80097f4:	08009811 	.word	0x08009811
 80097f8:	08009819 	.word	0x08009819
 80097fc:	08009821 	.word	0x08009821
 8009800:	08009829 	.word	0x08009829
 8009804:	08009831 	.word	0x08009831
 8009808:	2300      	movs	r3, #0
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e050      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009810:	2304      	movs	r3, #4
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e04c      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009818:	2308      	movs	r3, #8
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e048      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009820:	2310      	movs	r3, #16
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e044      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009828:	2320      	movs	r3, #32
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e040      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009830:	2340      	movs	r3, #64	@ 0x40
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e03c      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009838:	2380      	movs	r3, #128	@ 0x80
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e038      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a5b      	ldr	r2, [pc, #364]	@ (80099b4 <UART_SetConfig+0x6a8>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d130      	bne.n	80098ac <UART_SetConfig+0x5a0>
 800984a:	4b57      	ldr	r3, [pc, #348]	@ (80099a8 <UART_SetConfig+0x69c>)
 800984c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b05      	cmp	r3, #5
 8009854:	d826      	bhi.n	80098a4 <UART_SetConfig+0x598>
 8009856:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <UART_SetConfig+0x550>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	08009875 	.word	0x08009875
 8009860:	0800987d 	.word	0x0800987d
 8009864:	08009885 	.word	0x08009885
 8009868:	0800988d 	.word	0x0800988d
 800986c:	08009895 	.word	0x08009895
 8009870:	0800989d 	.word	0x0800989d
 8009874:	2302      	movs	r3, #2
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987a:	e01a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800987c:	2304      	movs	r3, #4
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009882:	e016      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009884:	2308      	movs	r3, #8
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988a:	e012      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800988c:	2310      	movs	r3, #16
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009892:	e00e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009894:	2320      	movs	r3, #32
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989a:	e00a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800989c:	2340      	movs	r3, #64	@ 0x40
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a2:	e006      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80098a4:	2380      	movs	r3, #128	@ 0x80
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e002      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80098ac:	2380      	movs	r3, #128	@ 0x80
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a3f      	ldr	r2, [pc, #252]	@ (80099b4 <UART_SetConfig+0x6a8>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	f040 80f8 	bne.w	8009aae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	dc46      	bgt.n	8009954 <UART_SetConfig+0x648>
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	f2c0 8082 	blt.w	80099d0 <UART_SetConfig+0x6c4>
 80098cc:	3b02      	subs	r3, #2
 80098ce:	2b1e      	cmp	r3, #30
 80098d0:	d87e      	bhi.n	80099d0 <UART_SetConfig+0x6c4>
 80098d2:	a201      	add	r2, pc, #4	@ (adr r2, 80098d8 <UART_SetConfig+0x5cc>)
 80098d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d8:	0800995b 	.word	0x0800995b
 80098dc:	080099d1 	.word	0x080099d1
 80098e0:	08009963 	.word	0x08009963
 80098e4:	080099d1 	.word	0x080099d1
 80098e8:	080099d1 	.word	0x080099d1
 80098ec:	080099d1 	.word	0x080099d1
 80098f0:	08009973 	.word	0x08009973
 80098f4:	080099d1 	.word	0x080099d1
 80098f8:	080099d1 	.word	0x080099d1
 80098fc:	080099d1 	.word	0x080099d1
 8009900:	080099d1 	.word	0x080099d1
 8009904:	080099d1 	.word	0x080099d1
 8009908:	080099d1 	.word	0x080099d1
 800990c:	080099d1 	.word	0x080099d1
 8009910:	08009983 	.word	0x08009983
 8009914:	080099d1 	.word	0x080099d1
 8009918:	080099d1 	.word	0x080099d1
 800991c:	080099d1 	.word	0x080099d1
 8009920:	080099d1 	.word	0x080099d1
 8009924:	080099d1 	.word	0x080099d1
 8009928:	080099d1 	.word	0x080099d1
 800992c:	080099d1 	.word	0x080099d1
 8009930:	080099d1 	.word	0x080099d1
 8009934:	080099d1 	.word	0x080099d1
 8009938:	080099d1 	.word	0x080099d1
 800993c:	080099d1 	.word	0x080099d1
 8009940:	080099d1 	.word	0x080099d1
 8009944:	080099d1 	.word	0x080099d1
 8009948:	080099d1 	.word	0x080099d1
 800994c:	080099d1 	.word	0x080099d1
 8009950:	080099c3 	.word	0x080099c3
 8009954:	2b40      	cmp	r3, #64	@ 0x40
 8009956:	d037      	beq.n	80099c8 <UART_SetConfig+0x6bc>
 8009958:	e03a      	b.n	80099d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800995a:	f7fe fbb9 	bl	80080d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800995e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009960:	e03c      	b.n	80099dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fbc8 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800996c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009970:	e034      	b.n	80099dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009972:	f107 0318 	add.w	r3, r7, #24
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe fd14 	bl	80083a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009980:	e02c      	b.n	80099dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009982:	4b09      	ldr	r3, [pc, #36]	@ (80099a8 <UART_SetConfig+0x69c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0320 	and.w	r3, r3, #32
 800998a:	2b00      	cmp	r3, #0
 800998c:	d016      	beq.n	80099bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800998e:	4b06      	ldr	r3, [pc, #24]	@ (80099a8 <UART_SetConfig+0x69c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	08db      	lsrs	r3, r3, #3
 8009994:	f003 0303 	and.w	r3, r3, #3
 8009998:	4a07      	ldr	r2, [pc, #28]	@ (80099b8 <UART_SetConfig+0x6ac>)
 800999a:	fa22 f303 	lsr.w	r3, r2, r3
 800999e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099a0:	e01c      	b.n	80099dc <UART_SetConfig+0x6d0>
 80099a2:	bf00      	nop
 80099a4:	40011400 	.word	0x40011400
 80099a8:	58024400 	.word	0x58024400
 80099ac:	40007800 	.word	0x40007800
 80099b0:	40007c00 	.word	0x40007c00
 80099b4:	58000c00 	.word	0x58000c00
 80099b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80099bc:	4b9d      	ldr	r3, [pc, #628]	@ (8009c34 <UART_SetConfig+0x928>)
 80099be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099c0:	e00c      	b.n	80099dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099c2:	4b9d      	ldr	r3, [pc, #628]	@ (8009c38 <UART_SetConfig+0x92c>)
 80099c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099c6:	e009      	b.n	80099dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ce:	e005      	b.n	80099dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80099da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 81de 	beq.w	8009da0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e8:	4a94      	ldr	r2, [pc, #592]	@ (8009c3c <UART_SetConfig+0x930>)
 80099ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ee:	461a      	mov	r2, r3
 80099f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80099f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	4613      	mov	r3, r2
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	4413      	add	r3, r2
 8009a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d305      	bcc.n	8009a14 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d903      	bls.n	8009a1c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a1a:	e1c1      	b.n	8009da0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a1e:	2200      	movs	r2, #0
 8009a20:	60bb      	str	r3, [r7, #8]
 8009a22:	60fa      	str	r2, [r7, #12]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a28:	4a84      	ldr	r2, [pc, #528]	@ (8009c3c <UART_SetConfig+0x930>)
 8009a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	2200      	movs	r2, #0
 8009a32:	603b      	str	r3, [r7, #0]
 8009a34:	607a      	str	r2, [r7, #4]
 8009a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a3e:	f7f6 fc9f 	bl	8000380 <__aeabi_uldivmod>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4610      	mov	r0, r2
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f04f 0200 	mov.w	r2, #0
 8009a4e:	f04f 0300 	mov.w	r3, #0
 8009a52:	020b      	lsls	r3, r1, #8
 8009a54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a58:	0202      	lsls	r2, r0, #8
 8009a5a:	6979      	ldr	r1, [r7, #20]
 8009a5c:	6849      	ldr	r1, [r1, #4]
 8009a5e:	0849      	lsrs	r1, r1, #1
 8009a60:	2000      	movs	r0, #0
 8009a62:	460c      	mov	r4, r1
 8009a64:	4605      	mov	r5, r0
 8009a66:	eb12 0804 	adds.w	r8, r2, r4
 8009a6a:	eb43 0905 	adc.w	r9, r3, r5
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	469a      	mov	sl, r3
 8009a76:	4693      	mov	fp, r2
 8009a78:	4652      	mov	r2, sl
 8009a7a:	465b      	mov	r3, fp
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	4649      	mov	r1, r9
 8009a80:	f7f6 fc7e 	bl	8000380 <__aeabi_uldivmod>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	4613      	mov	r3, r2
 8009a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a92:	d308      	bcc.n	8009aa6 <UART_SetConfig+0x79a>
 8009a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a9a:	d204      	bcs.n	8009aa6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009aa2:	60da      	str	r2, [r3, #12]
 8009aa4:	e17c      	b.n	8009da0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009aac:	e178      	b.n	8009da0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ab6:	f040 80c5 	bne.w	8009c44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009aba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	dc48      	bgt.n	8009b54 <UART_SetConfig+0x848>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	db7b      	blt.n	8009bbe <UART_SetConfig+0x8b2>
 8009ac6:	2b20      	cmp	r3, #32
 8009ac8:	d879      	bhi.n	8009bbe <UART_SetConfig+0x8b2>
 8009aca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <UART_SetConfig+0x7c4>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009b5b 	.word	0x08009b5b
 8009ad4:	08009b63 	.word	0x08009b63
 8009ad8:	08009bbf 	.word	0x08009bbf
 8009adc:	08009bbf 	.word	0x08009bbf
 8009ae0:	08009b6b 	.word	0x08009b6b
 8009ae4:	08009bbf 	.word	0x08009bbf
 8009ae8:	08009bbf 	.word	0x08009bbf
 8009aec:	08009bbf 	.word	0x08009bbf
 8009af0:	08009b7b 	.word	0x08009b7b
 8009af4:	08009bbf 	.word	0x08009bbf
 8009af8:	08009bbf 	.word	0x08009bbf
 8009afc:	08009bbf 	.word	0x08009bbf
 8009b00:	08009bbf 	.word	0x08009bbf
 8009b04:	08009bbf 	.word	0x08009bbf
 8009b08:	08009bbf 	.word	0x08009bbf
 8009b0c:	08009bbf 	.word	0x08009bbf
 8009b10:	08009b8b 	.word	0x08009b8b
 8009b14:	08009bbf 	.word	0x08009bbf
 8009b18:	08009bbf 	.word	0x08009bbf
 8009b1c:	08009bbf 	.word	0x08009bbf
 8009b20:	08009bbf 	.word	0x08009bbf
 8009b24:	08009bbf 	.word	0x08009bbf
 8009b28:	08009bbf 	.word	0x08009bbf
 8009b2c:	08009bbf 	.word	0x08009bbf
 8009b30:	08009bbf 	.word	0x08009bbf
 8009b34:	08009bbf 	.word	0x08009bbf
 8009b38:	08009bbf 	.word	0x08009bbf
 8009b3c:	08009bbf 	.word	0x08009bbf
 8009b40:	08009bbf 	.word	0x08009bbf
 8009b44:	08009bbf 	.word	0x08009bbf
 8009b48:	08009bbf 	.word	0x08009bbf
 8009b4c:	08009bbf 	.word	0x08009bbf
 8009b50:	08009bb1 	.word	0x08009bb1
 8009b54:	2b40      	cmp	r3, #64	@ 0x40
 8009b56:	d02e      	beq.n	8009bb6 <UART_SetConfig+0x8aa>
 8009b58:	e031      	b.n	8009bbe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b5a:	f7fc fb03 	bl	8006164 <HAL_RCC_GetPCLK1Freq>
 8009b5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b60:	e033      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b62:	f7fc fb15 	bl	8006190 <HAL_RCC_GetPCLK2Freq>
 8009b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b68:	e02f      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fe fac4 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b78:	e027      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b7a:	f107 0318 	add.w	r3, r7, #24
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe fc10 	bl	80083a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b88:	e01f      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8009c40 <UART_SetConfig+0x934>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0320 	and.w	r3, r3, #32
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d009      	beq.n	8009baa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b96:	4b2a      	ldr	r3, [pc, #168]	@ (8009c40 <UART_SetConfig+0x934>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	08db      	lsrs	r3, r3, #3
 8009b9c:	f003 0303 	and.w	r3, r3, #3
 8009ba0:	4a24      	ldr	r2, [pc, #144]	@ (8009c34 <UART_SetConfig+0x928>)
 8009ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ba8:	e00f      	b.n	8009bca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009baa:	4b22      	ldr	r3, [pc, #136]	@ (8009c34 <UART_SetConfig+0x928>)
 8009bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bae:	e00c      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bb0:	4b21      	ldr	r3, [pc, #132]	@ (8009c38 <UART_SetConfig+0x92c>)
 8009bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bb4:	e009      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bbc:	e005      	b.n	8009bca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009bc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 80e7 	beq.w	8009da0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd6:	4a19      	ldr	r2, [pc, #100]	@ (8009c3c <UART_SetConfig+0x930>)
 8009bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009be4:	005a      	lsls	r2, r3, #1
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	085b      	lsrs	r3, r3, #1
 8009bec:	441a      	add	r2, r3
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfa:	2b0f      	cmp	r3, #15
 8009bfc:	d916      	bls.n	8009c2c <UART_SetConfig+0x920>
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c04:	d212      	bcs.n	8009c2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	f023 030f 	bic.w	r3, r3, #15
 8009c0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c12:	085b      	lsrs	r3, r3, #1
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009c28:	60da      	str	r2, [r3, #12]
 8009c2a:	e0b9      	b.n	8009da0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c32:	e0b5      	b.n	8009da0 <UART_SetConfig+0xa94>
 8009c34:	03d09000 	.word	0x03d09000
 8009c38:	003d0900 	.word	0x003d0900
 8009c3c:	0800e148 	.word	0x0800e148
 8009c40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c48:	2b20      	cmp	r3, #32
 8009c4a:	dc49      	bgt.n	8009ce0 <UART_SetConfig+0x9d4>
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	db7c      	blt.n	8009d4a <UART_SetConfig+0xa3e>
 8009c50:	2b20      	cmp	r3, #32
 8009c52:	d87a      	bhi.n	8009d4a <UART_SetConfig+0xa3e>
 8009c54:	a201      	add	r2, pc, #4	@ (adr r2, 8009c5c <UART_SetConfig+0x950>)
 8009c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5a:	bf00      	nop
 8009c5c:	08009ce7 	.word	0x08009ce7
 8009c60:	08009cef 	.word	0x08009cef
 8009c64:	08009d4b 	.word	0x08009d4b
 8009c68:	08009d4b 	.word	0x08009d4b
 8009c6c:	08009cf7 	.word	0x08009cf7
 8009c70:	08009d4b 	.word	0x08009d4b
 8009c74:	08009d4b 	.word	0x08009d4b
 8009c78:	08009d4b 	.word	0x08009d4b
 8009c7c:	08009d07 	.word	0x08009d07
 8009c80:	08009d4b 	.word	0x08009d4b
 8009c84:	08009d4b 	.word	0x08009d4b
 8009c88:	08009d4b 	.word	0x08009d4b
 8009c8c:	08009d4b 	.word	0x08009d4b
 8009c90:	08009d4b 	.word	0x08009d4b
 8009c94:	08009d4b 	.word	0x08009d4b
 8009c98:	08009d4b 	.word	0x08009d4b
 8009c9c:	08009d17 	.word	0x08009d17
 8009ca0:	08009d4b 	.word	0x08009d4b
 8009ca4:	08009d4b 	.word	0x08009d4b
 8009ca8:	08009d4b 	.word	0x08009d4b
 8009cac:	08009d4b 	.word	0x08009d4b
 8009cb0:	08009d4b 	.word	0x08009d4b
 8009cb4:	08009d4b 	.word	0x08009d4b
 8009cb8:	08009d4b 	.word	0x08009d4b
 8009cbc:	08009d4b 	.word	0x08009d4b
 8009cc0:	08009d4b 	.word	0x08009d4b
 8009cc4:	08009d4b 	.word	0x08009d4b
 8009cc8:	08009d4b 	.word	0x08009d4b
 8009ccc:	08009d4b 	.word	0x08009d4b
 8009cd0:	08009d4b 	.word	0x08009d4b
 8009cd4:	08009d4b 	.word	0x08009d4b
 8009cd8:	08009d4b 	.word	0x08009d4b
 8009cdc:	08009d3d 	.word	0x08009d3d
 8009ce0:	2b40      	cmp	r3, #64	@ 0x40
 8009ce2:	d02e      	beq.n	8009d42 <UART_SetConfig+0xa36>
 8009ce4:	e031      	b.n	8009d4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ce6:	f7fc fa3d 	bl	8006164 <HAL_RCC_GetPCLK1Freq>
 8009cea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cec:	e033      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cee:	f7fc fa4f 	bl	8006190 <HAL_RCC_GetPCLK2Freq>
 8009cf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cf4:	e02f      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe f9fe 	bl	80080fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d04:	e027      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d06:	f107 0318 	add.w	r3, r7, #24
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe fb4a 	bl	80083a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d14:	e01f      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d16:	4b2d      	ldr	r3, [pc, #180]	@ (8009dcc <UART_SetConfig+0xac0>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d009      	beq.n	8009d36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d22:	4b2a      	ldr	r3, [pc, #168]	@ (8009dcc <UART_SetConfig+0xac0>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	08db      	lsrs	r3, r3, #3
 8009d28:	f003 0303 	and.w	r3, r3, #3
 8009d2c:	4a28      	ldr	r2, [pc, #160]	@ (8009dd0 <UART_SetConfig+0xac4>)
 8009d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d34:	e00f      	b.n	8009d56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009d36:	4b26      	ldr	r3, [pc, #152]	@ (8009dd0 <UART_SetConfig+0xac4>)
 8009d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d3a:	e00c      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d3c:	4b25      	ldr	r3, [pc, #148]	@ (8009dd4 <UART_SetConfig+0xac8>)
 8009d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d40:	e009      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d48:	e005      	b.n	8009d56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d54:	bf00      	nop
    }

    if (pclk != 0U)
 8009d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d021      	beq.n	8009da0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d60:	4a1d      	ldr	r2, [pc, #116]	@ (8009dd8 <UART_SetConfig+0xacc>)
 8009d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d66:	461a      	mov	r2, r3
 8009d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	085b      	lsrs	r3, r3, #1
 8009d74:	441a      	add	r2, r3
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d82:	2b0f      	cmp	r3, #15
 8009d84:	d909      	bls.n	8009d9a <UART_SetConfig+0xa8e>
 8009d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d8c:	d205      	bcs.n	8009d9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60da      	str	r2, [r3, #12]
 8009d98:	e002      	b.n	8009da0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2200      	movs	r2, #0
 8009db4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2200      	movs	r2, #0
 8009dba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009dbc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3748      	adds	r7, #72	@ 0x48
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dca:	bf00      	nop
 8009dcc:	58024400 	.word	0x58024400
 8009dd0:	03d09000 	.word	0x03d09000
 8009dd4:	003d0900 	.word	0x003d0900
 8009dd8:	0800e148 	.word	0x0800e148

08009ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de8:	f003 0308 	and.w	r3, r3, #8
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00a      	beq.n	8009e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00a      	beq.n	8009e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2c:	f003 0302 	and.w	r3, r3, #2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00a      	beq.n	8009e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e4e:	f003 0304 	and.w	r3, r3, #4
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00a      	beq.n	8009e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e70:	f003 0310 	and.w	r3, r3, #16
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00a      	beq.n	8009e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e92:	f003 0320 	and.w	r3, r3, #32
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00a      	beq.n	8009eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	430a      	orrs	r2, r1
 8009eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d01a      	beq.n	8009ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ed6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009eda:	d10a      	bne.n	8009ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00a      	beq.n	8009f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	430a      	orrs	r2, r1
 8009f12:	605a      	str	r2, [r3, #4]
  }
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b098      	sub	sp, #96	@ 0x60
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f30:	f7f7 fcd4 	bl	80018dc <HAL_GetTick>
 8009f34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0308 	and.w	r3, r3, #8
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d12f      	bne.n	8009fa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f88e 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d022      	beq.n	8009fa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f66:	e853 3f00 	ldrex	r3, [r3]
 8009f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f72:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f84:	e841 2300 	strex	r3, r2, [r1]
 8009f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1e6      	bne.n	8009f5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e063      	b.n	800a06c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0304 	and.w	r3, r3, #4
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d149      	bne.n	800a046 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f857 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d03c      	beq.n	800a046 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fea:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e6      	bne.n	8009fcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3308      	adds	r3, #8
 800a004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	e853 3f00 	ldrex	r3, [r3]
 800a00c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f023 0301 	bic.w	r3, r3, #1
 800a014:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3308      	adds	r3, #8
 800a01c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a01e:	61fa      	str	r2, [r7, #28]
 800a020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	69b9      	ldr	r1, [r7, #24]
 800a024:	69fa      	ldr	r2, [r7, #28]
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	617b      	str	r3, [r7, #20]
   return(result);
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e5      	bne.n	8009ffe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2220      	movs	r2, #32
 800a036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e012      	b.n	800a06c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2220      	movs	r2, #32
 800a04a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2220      	movs	r2, #32
 800a052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3758      	adds	r7, #88	@ 0x58
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	4613      	mov	r3, r2
 800a082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a084:	e04f      	b.n	800a126 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08c:	d04b      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a08e:	f7f7 fc25 	bl	80018dc <HAL_GetTick>
 800a092:	4602      	mov	r2, r0
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d302      	bcc.n	800a0a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e04e      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 0304 	and.w	r3, r3, #4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d037      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b80      	cmp	r3, #128	@ 0x80
 800a0ba:	d034      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2b40      	cmp	r3, #64	@ 0x40
 800a0c0:	d031      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	f003 0308 	and.w	r3, r3, #8
 800a0cc:	2b08      	cmp	r3, #8
 800a0ce:	d110      	bne.n	800a0f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2208      	movs	r2, #8
 800a0d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 f839 	bl	800a150 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2208      	movs	r2, #8
 800a0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e029      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a100:	d111      	bne.n	800a126 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a10a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f81f 	bl	800a150 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2220      	movs	r2, #32
 800a116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e00f      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69da      	ldr	r2, [r3, #28]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	4013      	ands	r3, r2
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	429a      	cmp	r2, r3
 800a134:	bf0c      	ite	eq
 800a136:	2301      	moveq	r3, #1
 800a138:	2300      	movne	r3, #0
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	461a      	mov	r2, r3
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	429a      	cmp	r2, r3
 800a142:	d0a0      	beq.n	800a086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a150:	b480      	push	{r7}
 800a152:	b095      	sub	sp, #84	@ 0x54
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a160:	e853 3f00 	ldrex	r3, [r3]
 800a164:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a16c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a176:	643b      	str	r3, [r7, #64]	@ 0x40
 800a178:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a17c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e6      	bne.n	800a158 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	3308      	adds	r3, #8
 800a190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	e853 3f00 	ldrex	r3, [r3]
 800a198:	61fb      	str	r3, [r7, #28]
   return(result);
 800a19a:	69fa      	ldr	r2, [r7, #28]
 800a19c:	4b1e      	ldr	r3, [pc, #120]	@ (800a218 <UART_EndRxTransfer+0xc8>)
 800a19e:	4013      	ands	r3, r2
 800a1a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1b2:	e841 2300 	strex	r3, r2, [r1]
 800a1b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1e5      	bne.n	800a18a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d118      	bne.n	800a1f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	e853 3f00 	ldrex	r3, [r3]
 800a1d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f023 0310 	bic.w	r3, r3, #16
 800a1da:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1e4:	61bb      	str	r3, [r7, #24]
 800a1e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e8:	6979      	ldr	r1, [r7, #20]
 800a1ea:	69ba      	ldr	r2, [r7, #24]
 800a1ec:	e841 2300 	strex	r3, r2, [r1]
 800a1f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e6      	bne.n	800a1c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a20c:	bf00      	nop
 800a20e:	3754      	adds	r7, #84	@ 0x54
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	effffffe 	.word	0xeffffffe

0800a21c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d101      	bne.n	800a232 <HAL_UARTEx_DisableFifoMode+0x16>
 800a22e:	2302      	movs	r3, #2
 800a230:	e027      	b.n	800a282 <HAL_UARTEx_DisableFifoMode+0x66>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2224      	movs	r2, #36	@ 0x24
 800a23e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f022 0201 	bic.w	r2, r2, #1
 800a258:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a260:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2220      	movs	r2, #32
 800a274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b084      	sub	sp, #16
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d101      	bne.n	800a2a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	e02d      	b.n	800a302 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2224      	movs	r2, #36	@ 0x24
 800a2b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 0201 	bic.w	r2, r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f850 	bl	800a388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b084      	sub	sp, #16
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d101      	bne.n	800a322 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a31e:	2302      	movs	r3, #2
 800a320:	e02d      	b.n	800a37e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2224      	movs	r2, #36	@ 0x24
 800a32e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 0201 	bic.w	r2, r2, #1
 800a348:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f812 	bl	800a388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2220      	movs	r2, #32
 800a370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
	...

0800a388 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a394:	2b00      	cmp	r3, #0
 800a396:	d108      	bne.n	800a3aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3a8:	e031      	b.n	800a40e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3aa:	2310      	movs	r3, #16
 800a3ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3ae:	2310      	movs	r3, #16
 800a3b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	0e5b      	lsrs	r3, r3, #25
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	f003 0307 	and.w	r3, r3, #7
 800a3c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	0f5b      	lsrs	r3, r3, #29
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	f003 0307 	and.w	r3, r3, #7
 800a3d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	7b3a      	ldrb	r2, [r7, #12]
 800a3d6:	4911      	ldr	r1, [pc, #68]	@ (800a41c <UARTEx_SetNbDataToProcess+0x94>)
 800a3d8:	5c8a      	ldrb	r2, [r1, r2]
 800a3da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3de:	7b3a      	ldrb	r2, [r7, #12]
 800a3e0:	490f      	ldr	r1, [pc, #60]	@ (800a420 <UARTEx_SetNbDataToProcess+0x98>)
 800a3e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
 800a3f2:	7b7a      	ldrb	r2, [r7, #13]
 800a3f4:	4909      	ldr	r1, [pc, #36]	@ (800a41c <UARTEx_SetNbDataToProcess+0x94>)
 800a3f6:	5c8a      	ldrb	r2, [r1, r2]
 800a3f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3fc:	7b7a      	ldrb	r2, [r7, #13]
 800a3fe:	4908      	ldr	r1, [pc, #32]	@ (800a420 <UARTEx_SetNbDataToProcess+0x98>)
 800a400:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a402:	fb93 f3f2 	sdiv	r3, r3, r2
 800a406:	b29a      	uxth	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a40e:	bf00      	nop
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	0800e160 	.word	0x0800e160
 800a420:	0800e168 	.word	0x0800e168

0800a424 <__NVIC_SetPriority>:
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	4603      	mov	r3, r0
 800a42c:	6039      	str	r1, [r7, #0]
 800a42e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a434:	2b00      	cmp	r3, #0
 800a436:	db0a      	blt.n	800a44e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	b2da      	uxtb	r2, r3
 800a43c:	490c      	ldr	r1, [pc, #48]	@ (800a470 <__NVIC_SetPriority+0x4c>)
 800a43e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a442:	0112      	lsls	r2, r2, #4
 800a444:	b2d2      	uxtb	r2, r2
 800a446:	440b      	add	r3, r1
 800a448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a44c:	e00a      	b.n	800a464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	b2da      	uxtb	r2, r3
 800a452:	4908      	ldr	r1, [pc, #32]	@ (800a474 <__NVIC_SetPriority+0x50>)
 800a454:	88fb      	ldrh	r3, [r7, #6]
 800a456:	f003 030f 	and.w	r3, r3, #15
 800a45a:	3b04      	subs	r3, #4
 800a45c:	0112      	lsls	r2, r2, #4
 800a45e:	b2d2      	uxtb	r2, r2
 800a460:	440b      	add	r3, r1
 800a462:	761a      	strb	r2, [r3, #24]
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	e000e100 	.word	0xe000e100
 800a474:	e000ed00 	.word	0xe000ed00

0800a478 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a47c:	2100      	movs	r1, #0
 800a47e:	f06f 0004 	mvn.w	r0, #4
 800a482:	f7ff ffcf 	bl	800a424 <__NVIC_SetPriority>
#endif
}
 800a486:	bf00      	nop
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a492:	f3ef 8305 	mrs	r3, IPSR
 800a496:	603b      	str	r3, [r7, #0]
  return(result);
 800a498:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d003      	beq.n	800a4a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a49e:	f06f 0305 	mvn.w	r3, #5
 800a4a2:	607b      	str	r3, [r7, #4]
 800a4a4:	e00c      	b.n	800a4c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a4a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a4d0 <osKernelInitialize+0x44>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d105      	bne.n	800a4ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a4ae:	4b08      	ldr	r3, [pc, #32]	@ (800a4d0 <osKernelInitialize+0x44>)
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	607b      	str	r3, [r7, #4]
 800a4b8:	e002      	b.n	800a4c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a4be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a4c0:	687b      	ldr	r3, [r7, #4]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	240003f0 	.word	0x240003f0

0800a4d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4da:	f3ef 8305 	mrs	r3, IPSR
 800a4de:	603b      	str	r3, [r7, #0]
  return(result);
 800a4e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d003      	beq.n	800a4ee <osKernelStart+0x1a>
    stat = osErrorISR;
 800a4e6:	f06f 0305 	mvn.w	r3, #5
 800a4ea:	607b      	str	r3, [r7, #4]
 800a4ec:	e010      	b.n	800a510 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a4ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a51c <osKernelStart+0x48>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d109      	bne.n	800a50a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a4f6:	f7ff ffbf 	bl	800a478 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a4fa:	4b08      	ldr	r3, [pc, #32]	@ (800a51c <osKernelStart+0x48>)
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a500:	f001 fcba 	bl	800be78 <vTaskStartScheduler>
      stat = osOK;
 800a504:	2300      	movs	r3, #0
 800a506:	607b      	str	r3, [r7, #4]
 800a508:	e002      	b.n	800a510 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a50a:	f04f 33ff 	mov.w	r3, #4294967295
 800a50e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a510:	687b      	ldr	r3, [r7, #4]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	240003f0 	.word	0x240003f0

0800a520 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a520:	b580      	push	{r7, lr}
 800a522:	b08e      	sub	sp, #56	@ 0x38
 800a524:	af04      	add	r7, sp, #16
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a52c:	2300      	movs	r3, #0
 800a52e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a530:	f3ef 8305 	mrs	r3, IPSR
 800a534:	617b      	str	r3, [r7, #20]
  return(result);
 800a536:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d17e      	bne.n	800a63a <osThreadNew+0x11a>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d07b      	beq.n	800a63a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a542:	2380      	movs	r3, #128	@ 0x80
 800a544:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a546:	2318      	movs	r3, #24
 800a548:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a54e:	f04f 33ff 	mov.w	r3, #4294967295
 800a552:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d045      	beq.n	800a5e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d002      	beq.n	800a568 <osThreadNew+0x48>
        name = attr->name;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d002      	beq.n	800a576 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d008      	beq.n	800a58e <osThreadNew+0x6e>
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	2b38      	cmp	r3, #56	@ 0x38
 800a580:	d805      	bhi.n	800a58e <osThreadNew+0x6e>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <osThreadNew+0x72>
        return (NULL);
 800a58e:	2300      	movs	r3, #0
 800a590:	e054      	b.n	800a63c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d003      	beq.n	800a5a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	089b      	lsrs	r3, r3, #2
 800a5a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00e      	beq.n	800a5c8 <osThreadNew+0xa8>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	2b5b      	cmp	r3, #91	@ 0x5b
 800a5b0:	d90a      	bls.n	800a5c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d006      	beq.n	800a5c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <osThreadNew+0xa8>
        mem = 1;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	61bb      	str	r3, [r7, #24]
 800a5c6:	e010      	b.n	800a5ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10c      	bne.n	800a5ea <osThreadNew+0xca>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d108      	bne.n	800a5ea <osThreadNew+0xca>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d104      	bne.n	800a5ea <osThreadNew+0xca>
          mem = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	61bb      	str	r3, [r7, #24]
 800a5e4:	e001      	b.n	800a5ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d110      	bne.n	800a612 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5f8:	9202      	str	r2, [sp, #8]
 800a5fa:	9301      	str	r3, [sp, #4]
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	6a3a      	ldr	r2, [r7, #32]
 800a604:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f001 fa5a 	bl	800bac0 <xTaskCreateStatic>
 800a60c:	4603      	mov	r3, r0
 800a60e:	613b      	str	r3, [r7, #16]
 800a610:	e013      	b.n	800a63a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d110      	bne.n	800a63a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	f107 0310 	add.w	r3, r7, #16
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f001 faa8 	bl	800bb80 <xTaskCreate>
 800a630:	4603      	mov	r3, r0
 800a632:	2b01      	cmp	r3, #1
 800a634:	d001      	beq.n	800a63a <osThreadNew+0x11a>
            hTask = NULL;
 800a636:	2300      	movs	r3, #0
 800a638:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a63a:	693b      	ldr	r3, [r7, #16]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3728      	adds	r7, #40	@ 0x28
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a64c:	f3ef 8305 	mrs	r3, IPSR
 800a650:	60bb      	str	r3, [r7, #8]
  return(result);
 800a652:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <osDelay+0x1c>
    stat = osErrorISR;
 800a658:	f06f 0305 	mvn.w	r3, #5
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	e007      	b.n	800a670 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a660:	2300      	movs	r3, #0
 800a662:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 fbce 	bl	800be0c <vTaskDelay>
    }
  }

  return (stat);
 800a670:	68fb      	ldr	r3, [r7, #12]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4a07      	ldr	r2, [pc, #28]	@ (800a6a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a68c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	4a06      	ldr	r2, [pc, #24]	@ (800a6ac <vApplicationGetIdleTaskMemory+0x30>)
 800a692:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2280      	movs	r2, #128	@ 0x80
 800a698:	601a      	str	r2, [r3, #0]
}
 800a69a:	bf00      	nop
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	240003f4 	.word	0x240003f4
 800a6ac:	24000450 	.word	0x24000450

0800a6b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4a07      	ldr	r2, [pc, #28]	@ (800a6dc <vApplicationGetTimerTaskMemory+0x2c>)
 800a6c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	4a06      	ldr	r2, [pc, #24]	@ (800a6e0 <vApplicationGetTimerTaskMemory+0x30>)
 800a6c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a6ce:	601a      	str	r2, [r3, #0]
}
 800a6d0:	bf00      	nop
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	24000650 	.word	0x24000650
 800a6e0:	240006ac 	.word	0x240006ac

0800a6e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08a      	sub	sp, #40	@ 0x28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6f0:	f001 fc2a 	bl	800bf48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6f4:	4b5c      	ldr	r3, [pc, #368]	@ (800a868 <pvPortMalloc+0x184>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6fc:	f000 f924 	bl	800a948 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a700:	4b5a      	ldr	r3, [pc, #360]	@ (800a86c <pvPortMalloc+0x188>)
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4013      	ands	r3, r2
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f040 8095 	bne.w	800a838 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d01e      	beq.n	800a752 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a714:	2208      	movs	r2, #8
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4413      	add	r3, r2
 800a71a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f003 0307 	and.w	r3, r3, #7
 800a722:	2b00      	cmp	r3, #0
 800a724:	d015      	beq.n	800a752 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f023 0307 	bic.w	r3, r3, #7
 800a72c:	3308      	adds	r3, #8
 800a72e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f003 0307 	and.w	r3, r3, #7
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00b      	beq.n	800a752 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a74c:	bf00      	nop
 800a74e:	bf00      	nop
 800a750:	e7fd      	b.n	800a74e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d06f      	beq.n	800a838 <pvPortMalloc+0x154>
 800a758:	4b45      	ldr	r3, [pc, #276]	@ (800a870 <pvPortMalloc+0x18c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d86a      	bhi.n	800a838 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a762:	4b44      	ldr	r3, [pc, #272]	@ (800a874 <pvPortMalloc+0x190>)
 800a764:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a766:	4b43      	ldr	r3, [pc, #268]	@ (800a874 <pvPortMalloc+0x190>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a76c:	e004      	b.n	800a778 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a770:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d903      	bls.n	800a78a <pvPortMalloc+0xa6>
 800a782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1f1      	bne.n	800a76e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a78a:	4b37      	ldr	r3, [pc, #220]	@ (800a868 <pvPortMalloc+0x184>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a790:	429a      	cmp	r2, r3
 800a792:	d051      	beq.n	800a838 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a794:	6a3b      	ldr	r3, [r7, #32]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2208      	movs	r2, #8
 800a79a:	4413      	add	r3, r2
 800a79c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a8:	685a      	ldr	r2, [r3, #4]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	1ad2      	subs	r2, r2, r3
 800a7ae:	2308      	movs	r3, #8
 800a7b0:	005b      	lsls	r3, r3, #1
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d920      	bls.n	800a7f8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	f003 0307 	and.w	r3, r3, #7
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00b      	beq.n	800a7e0 <pvPortMalloc+0xfc>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	613b      	str	r3, [r7, #16]
}
 800a7da:	bf00      	nop
 800a7dc:	bf00      	nop
 800a7de:	e7fd      	b.n	800a7dc <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	1ad2      	subs	r2, r2, r3
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7f2:	69b8      	ldr	r0, [r7, #24]
 800a7f4:	f000 f90a 	bl	800aa0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a870 <pvPortMalloc+0x18c>)
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	4a1b      	ldr	r2, [pc, #108]	@ (800a870 <pvPortMalloc+0x18c>)
 800a804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a806:	4b1a      	ldr	r3, [pc, #104]	@ (800a870 <pvPortMalloc+0x18c>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	4b1b      	ldr	r3, [pc, #108]	@ (800a878 <pvPortMalloc+0x194>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d203      	bcs.n	800a81a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a812:	4b17      	ldr	r3, [pc, #92]	@ (800a870 <pvPortMalloc+0x18c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a18      	ldr	r2, [pc, #96]	@ (800a878 <pvPortMalloc+0x194>)
 800a818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	4b13      	ldr	r3, [pc, #76]	@ (800a86c <pvPortMalloc+0x188>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	431a      	orrs	r2, r3
 800a824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a82e:	4b13      	ldr	r3, [pc, #76]	@ (800a87c <pvPortMalloc+0x198>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	3301      	adds	r3, #1
 800a834:	4a11      	ldr	r2, [pc, #68]	@ (800a87c <pvPortMalloc+0x198>)
 800a836:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a838:	f001 fb94 	bl	800bf64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	f003 0307 	and.w	r3, r3, #7
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00b      	beq.n	800a85e <pvPortMalloc+0x17a>
	__asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	60fb      	str	r3, [r7, #12]
}
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
 800a85c:	e7fd      	b.n	800a85a <pvPortMalloc+0x176>
	return pvReturn;
 800a85e:	69fb      	ldr	r3, [r7, #28]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3728      	adds	r7, #40	@ 0x28
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	240046b4 	.word	0x240046b4
 800a86c:	240046c8 	.word	0x240046c8
 800a870:	240046b8 	.word	0x240046b8
 800a874:	240046ac 	.word	0x240046ac
 800a878:	240046bc 	.word	0x240046bc
 800a87c:	240046c0 	.word	0x240046c0

0800a880 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d04f      	beq.n	800a932 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a892:	2308      	movs	r3, #8
 800a894:	425b      	negs	r3, r3
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	4413      	add	r3, r2
 800a89a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	4b25      	ldr	r3, [pc, #148]	@ (800a93c <vPortFree+0xbc>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10b      	bne.n	800a8c6 <vPortFree+0x46>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	60fb      	str	r3, [r7, #12]
}
 800a8c0:	bf00      	nop
 800a8c2:	bf00      	nop
 800a8c4:	e7fd      	b.n	800a8c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00b      	beq.n	800a8e6 <vPortFree+0x66>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	60bb      	str	r3, [r7, #8]
}
 800a8e0:	bf00      	nop
 800a8e2:	bf00      	nop
 800a8e4:	e7fd      	b.n	800a8e2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	4b14      	ldr	r3, [pc, #80]	@ (800a93c <vPortFree+0xbc>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d01e      	beq.n	800a932 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d11a      	bne.n	800a932 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	4b0e      	ldr	r3, [pc, #56]	@ (800a93c <vPortFree+0xbc>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	43db      	mvns	r3, r3
 800a906:	401a      	ands	r2, r3
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a90c:	f001 fb1c 	bl	800bf48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	685a      	ldr	r2, [r3, #4]
 800a914:	4b0a      	ldr	r3, [pc, #40]	@ (800a940 <vPortFree+0xc0>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4413      	add	r3, r2
 800a91a:	4a09      	ldr	r2, [pc, #36]	@ (800a940 <vPortFree+0xc0>)
 800a91c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a91e:	6938      	ldr	r0, [r7, #16]
 800a920:	f000 f874 	bl	800aa0c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a924:	4b07      	ldr	r3, [pc, #28]	@ (800a944 <vPortFree+0xc4>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	3301      	adds	r3, #1
 800a92a:	4a06      	ldr	r2, [pc, #24]	@ (800a944 <vPortFree+0xc4>)
 800a92c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a92e:	f001 fb19 	bl	800bf64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a932:	bf00      	nop
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	240046c8 	.word	0x240046c8
 800a940:	240046b8 	.word	0x240046b8
 800a944:	240046c4 	.word	0x240046c4

0800a948 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a94e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a952:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a954:	4b27      	ldr	r3, [pc, #156]	@ (800a9f4 <prvHeapInit+0xac>)
 800a956:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f003 0307 	and.w	r3, r3, #7
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00c      	beq.n	800a97c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3307      	adds	r3, #7
 800a966:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f023 0307 	bic.w	r3, r3, #7
 800a96e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	4a1f      	ldr	r2, [pc, #124]	@ (800a9f4 <prvHeapInit+0xac>)
 800a978:	4413      	add	r3, r2
 800a97a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a980:	4a1d      	ldr	r2, [pc, #116]	@ (800a9f8 <prvHeapInit+0xb0>)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a986:	4b1c      	ldr	r3, [pc, #112]	@ (800a9f8 <prvHeapInit+0xb0>)
 800a988:	2200      	movs	r2, #0
 800a98a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	4413      	add	r3, r2
 800a992:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a994:	2208      	movs	r2, #8
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	1a9b      	subs	r3, r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f023 0307 	bic.w	r3, r3, #7
 800a9a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4a15      	ldr	r2, [pc, #84]	@ (800a9fc <prvHeapInit+0xb4>)
 800a9a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9aa:	4b14      	ldr	r3, [pc, #80]	@ (800a9fc <prvHeapInit+0xb4>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9b2:	4b12      	ldr	r3, [pc, #72]	@ (800a9fc <prvHeapInit+0xb4>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	1ad2      	subs	r2, r2, r3
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a9fc <prvHeapInit+0xb4>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	4a0a      	ldr	r2, [pc, #40]	@ (800aa00 <prvHeapInit+0xb8>)
 800a9d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	4a09      	ldr	r2, [pc, #36]	@ (800aa04 <prvHeapInit+0xbc>)
 800a9de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9e0:	4b09      	ldr	r3, [pc, #36]	@ (800aa08 <prvHeapInit+0xc0>)
 800a9e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a9e6:	601a      	str	r2, [r3, #0]
}
 800a9e8:	bf00      	nop
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	24000aac 	.word	0x24000aac
 800a9f8:	240046ac 	.word	0x240046ac
 800a9fc:	240046b4 	.word	0x240046b4
 800aa00:	240046bc 	.word	0x240046bc
 800aa04:	240046b8 	.word	0x240046b8
 800aa08:	240046c8 	.word	0x240046c8

0800aa0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa14:	4b28      	ldr	r3, [pc, #160]	@ (800aab8 <prvInsertBlockIntoFreeList+0xac>)
 800aa16:	60fb      	str	r3, [r7, #12]
 800aa18:	e002      	b.n	800aa20 <prvInsertBlockIntoFreeList+0x14>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	60fb      	str	r3, [r7, #12]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d8f7      	bhi.n	800aa1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	4413      	add	r3, r2
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d108      	bne.n	800aa4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	685a      	ldr	r2, [r3, #4]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	441a      	add	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	441a      	add	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d118      	bne.n	800aa94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	4b15      	ldr	r3, [pc, #84]	@ (800aabc <prvInsertBlockIntoFreeList+0xb0>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d00d      	beq.n	800aa8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	441a      	add	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	e008      	b.n	800aa9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa8a:	4b0c      	ldr	r3, [pc, #48]	@ (800aabc <prvInsertBlockIntoFreeList+0xb0>)
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	e003      	b.n	800aa9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d002      	beq.n	800aaaa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaaa:	bf00      	nop
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	240046ac 	.word	0x240046ac
 800aabc:	240046b4 	.word	0x240046b4

0800aac0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f103 0208 	add.w	r2, r3, #8
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f04f 32ff 	mov.w	r2, #4294967295
 800aad8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f103 0208 	add.w	r2, r3, #8
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f103 0208 	add.w	r2, r3, #8
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab0e:	bf00      	nop
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b085      	sub	sp, #20
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	689a      	ldr	r2, [r3, #8]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	1c5a      	adds	r2, r3, #1
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	601a      	str	r2, [r3, #0]
}
 800ab56:	bf00      	nop
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab62:	b480      	push	{r7}
 800ab64:	b085      	sub	sp, #20
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab78:	d103      	bne.n	800ab82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	e00c      	b.n	800ab9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	3308      	adds	r3, #8
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	e002      	b.n	800ab90 <vListInsert+0x2e>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d2f6      	bcs.n	800ab8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	601a      	str	r2, [r3, #0]
}
 800abc8:	bf00      	nop
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	6892      	ldr	r2, [r2, #8]
 800abea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	6852      	ldr	r2, [r2, #4]
 800abf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d103      	bne.n	800ac08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	689a      	ldr	r2, [r3, #8]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	1e5a      	subs	r2, r3, #1
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	3b04      	subs	r3, #4
 800ac38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ac40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	3b04      	subs	r3, #4
 800ac46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f023 0201 	bic.w	r2, r3, #1
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3b04      	subs	r3, #4
 800ac56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac58:	4a0c      	ldr	r2, [pc, #48]	@ (800ac8c <pxPortInitialiseStack+0x64>)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3b14      	subs	r3, #20
 800ac62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	3b04      	subs	r3, #4
 800ac6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f06f 0202 	mvn.w	r2, #2
 800ac76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	3b20      	subs	r3, #32
 800ac7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3714      	adds	r7, #20
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr
 800ac8c:	0800ac91 	.word	0x0800ac91

0800ac90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac9a:	4b13      	ldr	r3, [pc, #76]	@ (800ace8 <prvTaskExitError+0x58>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca2:	d00b      	beq.n	800acbc <prvTaskExitError+0x2c>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	60fb      	str	r3, [r7, #12]
}
 800acb6:	bf00      	nop
 800acb8:	bf00      	nop
 800acba:	e7fd      	b.n	800acb8 <prvTaskExitError+0x28>
	__asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	60bb      	str	r3, [r7, #8]
}
 800acce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800acd0:	bf00      	nop
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d0fc      	beq.n	800acd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800acd8:	bf00      	nop
 800acda:	bf00      	nop
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	24000010 	.word	0x24000010
 800acec:	00000000 	.word	0x00000000

0800acf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800acf0:	4b07      	ldr	r3, [pc, #28]	@ (800ad10 <pxCurrentTCBConst2>)
 800acf2:	6819      	ldr	r1, [r3, #0]
 800acf4:	6808      	ldr	r0, [r1, #0]
 800acf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfa:	f380 8809 	msr	PSP, r0
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f04f 0000 	mov.w	r0, #0
 800ad06:	f380 8811 	msr	BASEPRI, r0
 800ad0a:	4770      	bx	lr
 800ad0c:	f3af 8000 	nop.w

0800ad10 <pxCurrentTCBConst2>:
 800ad10:	24004714 	.word	0x24004714
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad14:	bf00      	nop
 800ad16:	bf00      	nop

0800ad18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad18:	4808      	ldr	r0, [pc, #32]	@ (800ad3c <prvPortStartFirstTask+0x24>)
 800ad1a:	6800      	ldr	r0, [r0, #0]
 800ad1c:	6800      	ldr	r0, [r0, #0]
 800ad1e:	f380 8808 	msr	MSP, r0
 800ad22:	f04f 0000 	mov.w	r0, #0
 800ad26:	f380 8814 	msr	CONTROL, r0
 800ad2a:	b662      	cpsie	i
 800ad2c:	b661      	cpsie	f
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	df00      	svc	0
 800ad38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad3a:	bf00      	nop
 800ad3c:	e000ed08 	.word	0xe000ed08

0800ad40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad46:	4b47      	ldr	r3, [pc, #284]	@ (800ae64 <xPortStartScheduler+0x124>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a47      	ldr	r2, [pc, #284]	@ (800ae68 <xPortStartScheduler+0x128>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d10b      	bne.n	800ad68 <xPortStartScheduler+0x28>
	__asm volatile
 800ad50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	613b      	str	r3, [r7, #16]
}
 800ad62:	bf00      	nop
 800ad64:	bf00      	nop
 800ad66:	e7fd      	b.n	800ad64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad68:	4b3e      	ldr	r3, [pc, #248]	@ (800ae64 <xPortStartScheduler+0x124>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a3f      	ldr	r2, [pc, #252]	@ (800ae6c <xPortStartScheduler+0x12c>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d10b      	bne.n	800ad8a <xPortStartScheduler+0x4a>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	60fb      	str	r3, [r7, #12]
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop
 800ad88:	e7fd      	b.n	800ad86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad8a:	4b39      	ldr	r3, [pc, #228]	@ (800ae70 <xPortStartScheduler+0x130>)
 800ad8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	22ff      	movs	r2, #255	@ 0xff
 800ad9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ada4:	78fb      	ldrb	r3, [r7, #3]
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800adac:	b2da      	uxtb	r2, r3
 800adae:	4b31      	ldr	r3, [pc, #196]	@ (800ae74 <xPortStartScheduler+0x134>)
 800adb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adb2:	4b31      	ldr	r3, [pc, #196]	@ (800ae78 <xPortStartScheduler+0x138>)
 800adb4:	2207      	movs	r2, #7
 800adb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adb8:	e009      	b.n	800adce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800adba:	4b2f      	ldr	r3, [pc, #188]	@ (800ae78 <xPortStartScheduler+0x138>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	4a2d      	ldr	r2, [pc, #180]	@ (800ae78 <xPortStartScheduler+0x138>)
 800adc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800adc4:	78fb      	ldrb	r3, [r7, #3]
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	005b      	lsls	r3, r3, #1
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adce:	78fb      	ldrb	r3, [r7, #3]
 800add0:	b2db      	uxtb	r3, r3
 800add2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800add6:	2b80      	cmp	r3, #128	@ 0x80
 800add8:	d0ef      	beq.n	800adba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800adda:	4b27      	ldr	r3, [pc, #156]	@ (800ae78 <xPortStartScheduler+0x138>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f1c3 0307 	rsb	r3, r3, #7
 800ade2:	2b04      	cmp	r3, #4
 800ade4:	d00b      	beq.n	800adfe <xPortStartScheduler+0xbe>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	60bb      	str	r3, [r7, #8]
}
 800adf8:	bf00      	nop
 800adfa:	bf00      	nop
 800adfc:	e7fd      	b.n	800adfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800adfe:	4b1e      	ldr	r3, [pc, #120]	@ (800ae78 <xPortStartScheduler+0x138>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	021b      	lsls	r3, r3, #8
 800ae04:	4a1c      	ldr	r2, [pc, #112]	@ (800ae78 <xPortStartScheduler+0x138>)
 800ae06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae08:	4b1b      	ldr	r3, [pc, #108]	@ (800ae78 <xPortStartScheduler+0x138>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ae10:	4a19      	ldr	r2, [pc, #100]	@ (800ae78 <xPortStartScheduler+0x138>)
 800ae12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae1c:	4b17      	ldr	r3, [pc, #92]	@ (800ae7c <xPortStartScheduler+0x13c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a16      	ldr	r2, [pc, #88]	@ (800ae7c <xPortStartScheduler+0x13c>)
 800ae22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ae26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae28:	4b14      	ldr	r3, [pc, #80]	@ (800ae7c <xPortStartScheduler+0x13c>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a13      	ldr	r2, [pc, #76]	@ (800ae7c <xPortStartScheduler+0x13c>)
 800ae2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ae32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae34:	f000 f8da 	bl	800afec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae38:	4b11      	ldr	r3, [pc, #68]	@ (800ae80 <xPortStartScheduler+0x140>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae3e:	f000 f8f9 	bl	800b034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae42:	4b10      	ldr	r3, [pc, #64]	@ (800ae84 <xPortStartScheduler+0x144>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a0f      	ldr	r2, [pc, #60]	@ (800ae84 <xPortStartScheduler+0x144>)
 800ae48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ae4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae4e:	f7ff ff63 	bl	800ad18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae52:	f001 f9ef 	bl	800c234 <vTaskSwitchContext>
	prvTaskExitError();
 800ae56:	f7ff ff1b 	bl	800ac90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3718      	adds	r7, #24
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	e000ed00 	.word	0xe000ed00
 800ae68:	410fc271 	.word	0x410fc271
 800ae6c:	410fc270 	.word	0x410fc270
 800ae70:	e000e400 	.word	0xe000e400
 800ae74:	240046cc 	.word	0x240046cc
 800ae78:	240046d0 	.word	0x240046d0
 800ae7c:	e000ed20 	.word	0xe000ed20
 800ae80:	24000010 	.word	0x24000010
 800ae84:	e000ef34 	.word	0xe000ef34

0800ae88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	607b      	str	r3, [r7, #4]
}
 800aea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aea2:	4b10      	ldr	r3, [pc, #64]	@ (800aee4 <vPortEnterCritical+0x5c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3301      	adds	r3, #1
 800aea8:	4a0e      	ldr	r2, [pc, #56]	@ (800aee4 <vPortEnterCritical+0x5c>)
 800aeaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aeac:	4b0d      	ldr	r3, [pc, #52]	@ (800aee4 <vPortEnterCritical+0x5c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d110      	bne.n	800aed6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aeb4:	4b0c      	ldr	r3, [pc, #48]	@ (800aee8 <vPortEnterCritical+0x60>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00b      	beq.n	800aed6 <vPortEnterCritical+0x4e>
	__asm volatile
 800aebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	603b      	str	r3, [r7, #0]
}
 800aed0:	bf00      	nop
 800aed2:	bf00      	nop
 800aed4:	e7fd      	b.n	800aed2 <vPortEnterCritical+0x4a>
	}
}
 800aed6:	bf00      	nop
 800aed8:	370c      	adds	r7, #12
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	24000010 	.word	0x24000010
 800aee8:	e000ed04 	.word	0xe000ed04

0800aeec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aef2:	4b12      	ldr	r3, [pc, #72]	@ (800af3c <vPortExitCritical+0x50>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10b      	bne.n	800af12 <vPortExitCritical+0x26>
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	607b      	str	r3, [r7, #4]
}
 800af0c:	bf00      	nop
 800af0e:	bf00      	nop
 800af10:	e7fd      	b.n	800af0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af12:	4b0a      	ldr	r3, [pc, #40]	@ (800af3c <vPortExitCritical+0x50>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	3b01      	subs	r3, #1
 800af18:	4a08      	ldr	r2, [pc, #32]	@ (800af3c <vPortExitCritical+0x50>)
 800af1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af1c:	4b07      	ldr	r3, [pc, #28]	@ (800af3c <vPortExitCritical+0x50>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d105      	bne.n	800af30 <vPortExitCritical+0x44>
 800af24:	2300      	movs	r3, #0
 800af26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	24000010 	.word	0x24000010

0800af40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af40:	f3ef 8009 	mrs	r0, PSP
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	4b15      	ldr	r3, [pc, #84]	@ (800afa0 <pxCurrentTCBConst>)
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	f01e 0f10 	tst.w	lr, #16
 800af50:	bf08      	it	eq
 800af52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5a:	6010      	str	r0, [r2, #0]
 800af5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800af64:	f380 8811 	msr	BASEPRI, r0
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f001 f960 	bl	800c234 <vTaskSwitchContext>
 800af74:	f04f 0000 	mov.w	r0, #0
 800af78:	f380 8811 	msr	BASEPRI, r0
 800af7c:	bc09      	pop	{r0, r3}
 800af7e:	6819      	ldr	r1, [r3, #0]
 800af80:	6808      	ldr	r0, [r1, #0]
 800af82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af86:	f01e 0f10 	tst.w	lr, #16
 800af8a:	bf08      	it	eq
 800af8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af90:	f380 8809 	msr	PSP, r0
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	f3af 8000 	nop.w

0800afa0 <pxCurrentTCBConst>:
 800afa0:	24004714 	.word	0x24004714
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afa4:	bf00      	nop
 800afa6:	bf00      	nop

0800afa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	607b      	str	r3, [r7, #4]
}
 800afc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afc2:	f001 f87d 	bl	800c0c0 <xTaskIncrementTick>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d003      	beq.n	800afd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afcc:	4b06      	ldr	r3, [pc, #24]	@ (800afe8 <xPortSysTickHandler+0x40>)
 800afce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	2300      	movs	r3, #0
 800afd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	f383 8811 	msr	BASEPRI, r3
}
 800afde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800afe0:	bf00      	nop
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	e000ed04 	.word	0xe000ed04

0800afec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800afec:	b480      	push	{r7}
 800afee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aff0:	4b0b      	ldr	r3, [pc, #44]	@ (800b020 <vPortSetupTimerInterrupt+0x34>)
 800aff2:	2200      	movs	r2, #0
 800aff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aff6:	4b0b      	ldr	r3, [pc, #44]	@ (800b024 <vPortSetupTimerInterrupt+0x38>)
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800affc:	4b0a      	ldr	r3, [pc, #40]	@ (800b028 <vPortSetupTimerInterrupt+0x3c>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a0a      	ldr	r2, [pc, #40]	@ (800b02c <vPortSetupTimerInterrupt+0x40>)
 800b002:	fba2 2303 	umull	r2, r3, r2, r3
 800b006:	099b      	lsrs	r3, r3, #6
 800b008:	4a09      	ldr	r2, [pc, #36]	@ (800b030 <vPortSetupTimerInterrupt+0x44>)
 800b00a:	3b01      	subs	r3, #1
 800b00c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b00e:	4b04      	ldr	r3, [pc, #16]	@ (800b020 <vPortSetupTimerInterrupt+0x34>)
 800b010:	2207      	movs	r2, #7
 800b012:	601a      	str	r2, [r3, #0]
}
 800b014:	bf00      	nop
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	e000e010 	.word	0xe000e010
 800b024:	e000e018 	.word	0xe000e018
 800b028:	24000000 	.word	0x24000000
 800b02c:	10624dd3 	.word	0x10624dd3
 800b030:	e000e014 	.word	0xe000e014

0800b034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b034:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b044 <vPortEnableVFP+0x10>
 800b038:	6801      	ldr	r1, [r0, #0]
 800b03a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b03e:	6001      	str	r1, [r0, #0]
 800b040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b042:	bf00      	nop
 800b044:	e000ed88 	.word	0xe000ed88

0800b048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b04e:	f3ef 8305 	mrs	r3, IPSR
 800b052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b0f      	cmp	r3, #15
 800b058:	d915      	bls.n	800b086 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b05a:	4a18      	ldr	r2, [pc, #96]	@ (800b0bc <vPortValidateInterruptPriority+0x74>)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4413      	add	r3, r2
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b064:	4b16      	ldr	r3, [pc, #88]	@ (800b0c0 <vPortValidateInterruptPriority+0x78>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	7afa      	ldrb	r2, [r7, #11]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d20b      	bcs.n	800b086 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	607b      	str	r3, [r7, #4]
}
 800b080:	bf00      	nop
 800b082:	bf00      	nop
 800b084:	e7fd      	b.n	800b082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b086:	4b0f      	ldr	r3, [pc, #60]	@ (800b0c4 <vPortValidateInterruptPriority+0x7c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b08e:	4b0e      	ldr	r3, [pc, #56]	@ (800b0c8 <vPortValidateInterruptPriority+0x80>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	429a      	cmp	r2, r3
 800b094:	d90b      	bls.n	800b0ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	603b      	str	r3, [r7, #0]
}
 800b0a8:	bf00      	nop
 800b0aa:	bf00      	nop
 800b0ac:	e7fd      	b.n	800b0aa <vPortValidateInterruptPriority+0x62>
	}
 800b0ae:	bf00      	nop
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	e000e3f0 	.word	0xe000e3f0
 800b0c0:	240046cc 	.word	0x240046cc
 800b0c4:	e000ed0c 	.word	0xe000ed0c
 800b0c8:	240046d0 	.word	0x240046d0

0800b0cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10b      	bne.n	800b0f8 <xQueueGenericReset+0x2c>
	__asm volatile
 800b0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e4:	f383 8811 	msr	BASEPRI, r3
 800b0e8:	f3bf 8f6f 	isb	sy
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	60bb      	str	r3, [r7, #8]
}
 800b0f2:	bf00      	nop
 800b0f4:	bf00      	nop
 800b0f6:	e7fd      	b.n	800b0f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b0f8:	f7ff fec6 	bl	800ae88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b104:	68f9      	ldr	r1, [r7, #12]
 800b106:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b108:	fb01 f303 	mul.w	r3, r1, r3
 800b10c:	441a      	add	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b128:	3b01      	subs	r3, #1
 800b12a:	68f9      	ldr	r1, [r7, #12]
 800b12c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b12e:	fb01 f303 	mul.w	r3, r1, r3
 800b132:	441a      	add	r2, r3
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	22ff      	movs	r2, #255	@ 0xff
 800b13c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	22ff      	movs	r2, #255	@ 0xff
 800b144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d114      	bne.n	800b178 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d01a      	beq.n	800b18c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3310      	adds	r3, #16
 800b15a:	4618      	mov	r0, r3
 800b15c:	f001 f91a 	bl	800c394 <xTaskRemoveFromEventList>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d012      	beq.n	800b18c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b166:	4b0d      	ldr	r3, [pc, #52]	@ (800b19c <xQueueGenericReset+0xd0>)
 800b168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	e009      	b.n	800b18c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	3310      	adds	r3, #16
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7ff fc9f 	bl	800aac0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3324      	adds	r3, #36	@ 0x24
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff fc9a 	bl	800aac0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b18c:	f7ff feae 	bl	800aeec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b190:	2301      	movs	r3, #1
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	e000ed04 	.word	0xe000ed04

0800b1a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08e      	sub	sp, #56	@ 0x38
 800b1a4:	af02      	add	r7, sp, #8
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10b      	bne.n	800b1cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b8:	f383 8811 	msr	BASEPRI, r3
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	f3bf 8f4f 	dsb	sy
 800b1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b1c6:	bf00      	nop
 800b1c8:	bf00      	nop
 800b1ca:	e7fd      	b.n	800b1c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10b      	bne.n	800b1ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1e4:	bf00      	nop
 800b1e6:	bf00      	nop
 800b1e8:	e7fd      	b.n	800b1e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <xQueueGenericCreateStatic+0x56>
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <xQueueGenericCreateStatic+0x5a>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e000      	b.n	800b1fc <xQueueGenericCreateStatic+0x5c>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10b      	bne.n	800b218 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	623b      	str	r3, [r7, #32]
}
 800b212:	bf00      	nop
 800b214:	bf00      	nop
 800b216:	e7fd      	b.n	800b214 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d102      	bne.n	800b224 <xQueueGenericCreateStatic+0x84>
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <xQueueGenericCreateStatic+0x88>
 800b224:	2301      	movs	r3, #1
 800b226:	e000      	b.n	800b22a <xQueueGenericCreateStatic+0x8a>
 800b228:	2300      	movs	r3, #0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10b      	bne.n	800b246 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	61fb      	str	r3, [r7, #28]
}
 800b240:	bf00      	nop
 800b242:	bf00      	nop
 800b244:	e7fd      	b.n	800b242 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b246:	2350      	movs	r3, #80	@ 0x50
 800b248:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2b50      	cmp	r3, #80	@ 0x50
 800b24e:	d00b      	beq.n	800b268 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	61bb      	str	r3, [r7, #24]
}
 800b262:	bf00      	nop
 800b264:	bf00      	nop
 800b266:	e7fd      	b.n	800b264 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b268:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00d      	beq.n	800b290 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b27c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	4613      	mov	r3, r2
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	68b9      	ldr	r1, [r7, #8]
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f000 f805 	bl	800b29a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b292:	4618      	mov	r0, r3
 800b294:	3730      	adds	r7, #48	@ 0x30
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	60b9      	str	r1, [r7, #8]
 800b2a4:	607a      	str	r2, [r7, #4]
 800b2a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d103      	bne.n	800b2b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	69ba      	ldr	r2, [r7, #24]
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	e002      	b.n	800b2bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	69b8      	ldr	r0, [r7, #24]
 800b2cc:	f7ff fefe 	bl	800b0cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	78fa      	ldrb	r2, [r7, #3]
 800b2d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b2d8:	bf00      	nop
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b08e      	sub	sp, #56	@ 0x38
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10b      	bne.n	800b314 <xQueueGenericSend+0x34>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b30e:	bf00      	nop
 800b310:	bf00      	nop
 800b312:	e7fd      	b.n	800b310 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d103      	bne.n	800b322 <xQueueGenericSend+0x42>
 800b31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <xQueueGenericSend+0x46>
 800b322:	2301      	movs	r3, #1
 800b324:	e000      	b.n	800b328 <xQueueGenericSend+0x48>
 800b326:	2300      	movs	r3, #0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10b      	bne.n	800b344 <xQueueGenericSend+0x64>
	__asm volatile
 800b32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b33e:	bf00      	nop
 800b340:	bf00      	nop
 800b342:	e7fd      	b.n	800b340 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	2b02      	cmp	r3, #2
 800b348:	d103      	bne.n	800b352 <xQueueGenericSend+0x72>
 800b34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d101      	bne.n	800b356 <xQueueGenericSend+0x76>
 800b352:	2301      	movs	r3, #1
 800b354:	e000      	b.n	800b358 <xQueueGenericSend+0x78>
 800b356:	2300      	movs	r3, #0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10b      	bne.n	800b374 <xQueueGenericSend+0x94>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	623b      	str	r3, [r7, #32]
}
 800b36e:	bf00      	nop
 800b370:	bf00      	nop
 800b372:	e7fd      	b.n	800b370 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b374:	f001 f9ce 	bl	800c714 <xTaskGetSchedulerState>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d102      	bne.n	800b384 <xQueueGenericSend+0xa4>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <xQueueGenericSend+0xa8>
 800b384:	2301      	movs	r3, #1
 800b386:	e000      	b.n	800b38a <xQueueGenericSend+0xaa>
 800b388:	2300      	movs	r3, #0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10b      	bne.n	800b3a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	61fb      	str	r3, [r7, #28]
}
 800b3a0:	bf00      	nop
 800b3a2:	bf00      	nop
 800b3a4:	e7fd      	b.n	800b3a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3a6:	f7ff fd6f 	bl	800ae88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d302      	bcc.n	800b3bc <xQueueGenericSend+0xdc>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b02      	cmp	r3, #2
 800b3ba:	d129      	bne.n	800b410 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b3bc:	683a      	ldr	r2, [r7, #0]
 800b3be:	68b9      	ldr	r1, [r7, #8]
 800b3c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b3c2:	f000 fa0f 	bl	800b7e4 <prvCopyDataToQueue>
 800b3c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d010      	beq.n	800b3f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d2:	3324      	adds	r3, #36	@ 0x24
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 ffdd 	bl	800c394 <xTaskRemoveFromEventList>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d013      	beq.n	800b408 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b3e0:	4b3f      	ldr	r3, [pc, #252]	@ (800b4e0 <xQueueGenericSend+0x200>)
 800b3e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3e6:	601a      	str	r2, [r3, #0]
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	e00a      	b.n	800b408 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d007      	beq.n	800b408 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b3f8:	4b39      	ldr	r3, [pc, #228]	@ (800b4e0 <xQueueGenericSend+0x200>)
 800b3fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b408:	f7ff fd70 	bl	800aeec <vPortExitCritical>
				return pdPASS;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e063      	b.n	800b4d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d103      	bne.n	800b41e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b416:	f7ff fd69 	bl	800aeec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	e05c      	b.n	800b4d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b420:	2b00      	cmp	r3, #0
 800b422:	d106      	bne.n	800b432 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b424:	f107 0314 	add.w	r3, r7, #20
 800b428:	4618      	mov	r0, r3
 800b42a:	f001 f817 	bl	800c45c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b42e:	2301      	movs	r3, #1
 800b430:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b432:	f7ff fd5b 	bl	800aeec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b436:	f000 fd87 	bl	800bf48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b43a:	f7ff fd25 	bl	800ae88 <vPortEnterCritical>
 800b43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b444:	b25b      	sxtb	r3, r3
 800b446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44a:	d103      	bne.n	800b454 <xQueueGenericSend+0x174>
 800b44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b456:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b45a:	b25b      	sxtb	r3, r3
 800b45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b460:	d103      	bne.n	800b46a <xQueueGenericSend+0x18a>
 800b462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b464:	2200      	movs	r2, #0
 800b466:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b46a:	f7ff fd3f 	bl	800aeec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b46e:	1d3a      	adds	r2, r7, #4
 800b470:	f107 0314 	add.w	r3, r7, #20
 800b474:	4611      	mov	r1, r2
 800b476:	4618      	mov	r0, r3
 800b478:	f001 f806 	bl	800c488 <xTaskCheckForTimeOut>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d124      	bne.n	800b4cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b482:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b484:	f000 faa6 	bl	800b9d4 <prvIsQueueFull>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d018      	beq.n	800b4c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b490:	3310      	adds	r3, #16
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	4611      	mov	r1, r2
 800b496:	4618      	mov	r0, r3
 800b498:	f000 ff2a 	bl	800c2f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b49c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b49e:	f000 fa31 	bl	800b904 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b4a2:	f000 fd5f 	bl	800bf64 <xTaskResumeAll>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f47f af7c 	bne.w	800b3a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b4ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b4e0 <xQueueGenericSend+0x200>)
 800b4b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4b4:	601a      	str	r2, [r3, #0]
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	e772      	b.n	800b3a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b4c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4c2:	f000 fa1f 	bl	800b904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4c6:	f000 fd4d 	bl	800bf64 <xTaskResumeAll>
 800b4ca:	e76c      	b.n	800b3a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b4cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4ce:	f000 fa19 	bl	800b904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4d2:	f000 fd47 	bl	800bf64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b4d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3738      	adds	r7, #56	@ 0x38
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	e000ed04 	.word	0xe000ed04

0800b4e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b090      	sub	sp, #64	@ 0x40
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
 800b4f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10b      	bne.n	800b514 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b50e:	bf00      	nop
 800b510:	bf00      	nop
 800b512:	e7fd      	b.n	800b510 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d103      	bne.n	800b522 <xQueueGenericSendFromISR+0x3e>
 800b51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <xQueueGenericSendFromISR+0x42>
 800b522:	2301      	movs	r3, #1
 800b524:	e000      	b.n	800b528 <xQueueGenericSendFromISR+0x44>
 800b526:	2300      	movs	r3, #0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10b      	bne.n	800b544 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b53e:	bf00      	nop
 800b540:	bf00      	nop
 800b542:	e7fd      	b.n	800b540 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	2b02      	cmp	r3, #2
 800b548:	d103      	bne.n	800b552 <xQueueGenericSendFromISR+0x6e>
 800b54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d101      	bne.n	800b556 <xQueueGenericSendFromISR+0x72>
 800b552:	2301      	movs	r3, #1
 800b554:	e000      	b.n	800b558 <xQueueGenericSendFromISR+0x74>
 800b556:	2300      	movs	r3, #0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10b      	bne.n	800b574 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b560:	f383 8811 	msr	BASEPRI, r3
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	623b      	str	r3, [r7, #32]
}
 800b56e:	bf00      	nop
 800b570:	bf00      	nop
 800b572:	e7fd      	b.n	800b570 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b574:	f7ff fd68 	bl	800b048 <vPortValidateInterruptPriority>
	__asm volatile
 800b578:	f3ef 8211 	mrs	r2, BASEPRI
 800b57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	61fa      	str	r2, [r7, #28]
 800b58e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b590:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b592:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d302      	bcc.n	800b5a6 <xQueueGenericSendFromISR+0xc2>
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d12f      	bne.n	800b606 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b5ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	68b9      	ldr	r1, [r7, #8]
 800b5ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b5bc:	f000 f912 	bl	800b7e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b5c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c8:	d112      	bne.n	800b5f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d016      	beq.n	800b600 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d4:	3324      	adds	r3, #36	@ 0x24
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f000 fedc 	bl	800c394 <xTaskRemoveFromEventList>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00e      	beq.n	800b600 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00b      	beq.n	800b600 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	601a      	str	r2, [r3, #0]
 800b5ee:	e007      	b.n	800b600 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	b25a      	sxtb	r2, r3
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b600:	2301      	movs	r3, #1
 800b602:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b604:	e001      	b.n	800b60a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b606:	2300      	movs	r3, #0
 800b608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b60c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	f383 8811 	msr	BASEPRI, r3
}
 800b614:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3740      	adds	r7, #64	@ 0x40
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08c      	sub	sp, #48	@ 0x30
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10b      	bne.n	800b652 <xQueueReceive+0x32>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	623b      	str	r3, [r7, #32]
}
 800b64c:	bf00      	nop
 800b64e:	bf00      	nop
 800b650:	e7fd      	b.n	800b64e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d103      	bne.n	800b660 <xQueueReceive+0x40>
 800b658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <xQueueReceive+0x44>
 800b660:	2301      	movs	r3, #1
 800b662:	e000      	b.n	800b666 <xQueueReceive+0x46>
 800b664:	2300      	movs	r3, #0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10b      	bne.n	800b682 <xQueueReceive+0x62>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	61fb      	str	r3, [r7, #28]
}
 800b67c:	bf00      	nop
 800b67e:	bf00      	nop
 800b680:	e7fd      	b.n	800b67e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b682:	f001 f847 	bl	800c714 <xTaskGetSchedulerState>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d102      	bne.n	800b692 <xQueueReceive+0x72>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d101      	bne.n	800b696 <xQueueReceive+0x76>
 800b692:	2301      	movs	r3, #1
 800b694:	e000      	b.n	800b698 <xQueueReceive+0x78>
 800b696:	2300      	movs	r3, #0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10b      	bne.n	800b6b4 <xQueueReceive+0x94>
	__asm volatile
 800b69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	61bb      	str	r3, [r7, #24]
}
 800b6ae:	bf00      	nop
 800b6b0:	bf00      	nop
 800b6b2:	e7fd      	b.n	800b6b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6b4:	f7ff fbe8 	bl	800ae88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d01f      	beq.n	800b704 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6c4:	68b9      	ldr	r1, [r7, #8]
 800b6c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6c8:	f000 f8f6 	bl	800b8b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ce:	1e5a      	subs	r2, r3, #1
 800b6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00f      	beq.n	800b6fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6de:	3310      	adds	r3, #16
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 fe57 	bl	800c394 <xTaskRemoveFromEventList>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d007      	beq.n	800b6fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6ec:	4b3c      	ldr	r3, [pc, #240]	@ (800b7e0 <xQueueReceive+0x1c0>)
 800b6ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6fc:	f7ff fbf6 	bl	800aeec <vPortExitCritical>
				return pdPASS;
 800b700:	2301      	movs	r3, #1
 800b702:	e069      	b.n	800b7d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d103      	bne.n	800b712 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b70a:	f7ff fbef 	bl	800aeec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b70e:	2300      	movs	r3, #0
 800b710:	e062      	b.n	800b7d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b714:	2b00      	cmp	r3, #0
 800b716:	d106      	bne.n	800b726 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b718:	f107 0310 	add.w	r3, r7, #16
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 fe9d 	bl	800c45c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b722:	2301      	movs	r3, #1
 800b724:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b726:	f7ff fbe1 	bl	800aeec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b72a:	f000 fc0d 	bl	800bf48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b72e:	f7ff fbab 	bl	800ae88 <vPortEnterCritical>
 800b732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b734:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b738:	b25b      	sxtb	r3, r3
 800b73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73e:	d103      	bne.n	800b748 <xQueueReceive+0x128>
 800b740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b742:	2200      	movs	r2, #0
 800b744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b74a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b74e:	b25b      	sxtb	r3, r3
 800b750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b754:	d103      	bne.n	800b75e <xQueueReceive+0x13e>
 800b756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b75e:	f7ff fbc5 	bl	800aeec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b762:	1d3a      	adds	r2, r7, #4
 800b764:	f107 0310 	add.w	r3, r7, #16
 800b768:	4611      	mov	r1, r2
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 fe8c 	bl	800c488 <xTaskCheckForTimeOut>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d123      	bne.n	800b7be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b778:	f000 f916 	bl	800b9a8 <prvIsQueueEmpty>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d017      	beq.n	800b7b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b784:	3324      	adds	r3, #36	@ 0x24
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	4611      	mov	r1, r2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fdb0 	bl	800c2f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b790:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b792:	f000 f8b7 	bl	800b904 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b796:	f000 fbe5 	bl	800bf64 <xTaskResumeAll>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d189      	bne.n	800b6b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b7a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e0 <xQueueReceive+0x1c0>)
 800b7a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	e780      	b.n	800b6b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b7b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7b4:	f000 f8a6 	bl	800b904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7b8:	f000 fbd4 	bl	800bf64 <xTaskResumeAll>
 800b7bc:	e77a      	b.n	800b6b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b7be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7c0:	f000 f8a0 	bl	800b904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7c4:	f000 fbce 	bl	800bf64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7ca:	f000 f8ed 	bl	800b9a8 <prvIsQueueEmpty>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f43f af6f 	beq.w	800b6b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3730      	adds	r7, #48	@ 0x30
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	e000ed04 	.word	0xe000ed04

0800b7e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10d      	bne.n	800b81e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d14d      	bne.n	800b8a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 ff9e 	bl	800c750 <xTaskPriorityDisinherit>
 800b814:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	609a      	str	r2, [r3, #8]
 800b81c:	e043      	b.n	800b8a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d119      	bne.n	800b858 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6858      	ldr	r0, [r3, #4]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b82c:	461a      	mov	r2, r3
 800b82e:	68b9      	ldr	r1, [r7, #8]
 800b830:	f001 fe49 	bl	800d4c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	685a      	ldr	r2, [r3, #4]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b83c:	441a      	add	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d32b      	bcc.n	800b8a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	605a      	str	r2, [r3, #4]
 800b856:	e026      	b.n	800b8a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	68d8      	ldr	r0, [r3, #12]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b860:	461a      	mov	r2, r3
 800b862:	68b9      	ldr	r1, [r7, #8]
 800b864:	f001 fe2f 	bl	800d4c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	68da      	ldr	r2, [r3, #12]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b870:	425b      	negs	r3, r3
 800b872:	441a      	add	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	68da      	ldr	r2, [r3, #12]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	429a      	cmp	r2, r3
 800b882:	d207      	bcs.n	800b894 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	689a      	ldr	r2, [r3, #8]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b88c:	425b      	negs	r3, r3
 800b88e:	441a      	add	r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b02      	cmp	r3, #2
 800b898:	d105      	bne.n	800b8a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b8ae:	697b      	ldr	r3, [r7, #20]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3718      	adds	r7, #24
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d018      	beq.n	800b8fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68da      	ldr	r2, [r3, #12]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8d2:	441a      	add	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68da      	ldr	r2, [r3, #12]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d303      	bcc.n	800b8ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68d9      	ldr	r1, [r3, #12]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	6838      	ldr	r0, [r7, #0]
 800b8f8:	f001 fde5 	bl	800d4c6 <memcpy>
	}
}
 800b8fc:	bf00      	nop
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b90c:	f7ff fabc 	bl	800ae88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b916:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b918:	e011      	b.n	800b93e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d012      	beq.n	800b948 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	3324      	adds	r3, #36	@ 0x24
 800b926:	4618      	mov	r0, r3
 800b928:	f000 fd34 	bl	800c394 <xTaskRemoveFromEventList>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d001      	beq.n	800b936 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b932:	f000 fe0d 	bl	800c550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b936:	7bfb      	ldrb	r3, [r7, #15]
 800b938:	3b01      	subs	r3, #1
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b93e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b942:	2b00      	cmp	r3, #0
 800b944:	dce9      	bgt.n	800b91a <prvUnlockQueue+0x16>
 800b946:	e000      	b.n	800b94a <prvUnlockQueue+0x46>
					break;
 800b948:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	22ff      	movs	r2, #255	@ 0xff
 800b94e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b952:	f7ff facb 	bl	800aeec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b956:	f7ff fa97 	bl	800ae88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b960:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b962:	e011      	b.n	800b988 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d012      	beq.n	800b992 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	3310      	adds	r3, #16
 800b970:	4618      	mov	r0, r3
 800b972:	f000 fd0f 	bl	800c394 <xTaskRemoveFromEventList>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b97c:	f000 fde8 	bl	800c550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b980:	7bbb      	ldrb	r3, [r7, #14]
 800b982:	3b01      	subs	r3, #1
 800b984:	b2db      	uxtb	r3, r3
 800b986:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	dce9      	bgt.n	800b964 <prvUnlockQueue+0x60>
 800b990:	e000      	b.n	800b994 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b992:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	22ff      	movs	r2, #255	@ 0xff
 800b998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b99c:	f7ff faa6 	bl	800aeec <vPortExitCritical>
}
 800b9a0:	bf00      	nop
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9b0:	f7ff fa6a 	bl	800ae88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d102      	bne.n	800b9c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	60fb      	str	r3, [r7, #12]
 800b9c0:	e001      	b.n	800b9c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b9c6:	f7ff fa91 	bl	800aeec <vPortExitCritical>

	return xReturn;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9dc:	f7ff fa54 	bl	800ae88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d102      	bne.n	800b9f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	e001      	b.n	800b9f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b9f6:	f7ff fa79 	bl	800aeec <vPortExitCritical>

	return xReturn;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba0e:	2300      	movs	r3, #0
 800ba10:	60fb      	str	r3, [r7, #12]
 800ba12:	e014      	b.n	800ba3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ba14:	4a0f      	ldr	r2, [pc, #60]	@ (800ba54 <vQueueAddToRegistry+0x50>)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10b      	bne.n	800ba38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ba20:	490c      	ldr	r1, [pc, #48]	@ (800ba54 <vQueueAddToRegistry+0x50>)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba2a:	4a0a      	ldr	r2, [pc, #40]	@ (800ba54 <vQueueAddToRegistry+0x50>)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	00db      	lsls	r3, r3, #3
 800ba30:	4413      	add	r3, r2
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba36:	e006      	b.n	800ba46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2b07      	cmp	r3, #7
 800ba42:	d9e7      	bls.n	800ba14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba44:	bf00      	nop
 800ba46:	bf00      	nop
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	240046d4 	.word	0x240046d4

0800ba58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ba68:	f7ff fa0e 	bl	800ae88 <vPortEnterCritical>
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba72:	b25b      	sxtb	r3, r3
 800ba74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba78:	d103      	bne.n	800ba82 <vQueueWaitForMessageRestricted+0x2a>
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba88:	b25b      	sxtb	r3, r3
 800ba8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8e:	d103      	bne.n	800ba98 <vQueueWaitForMessageRestricted+0x40>
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba98:	f7ff fa28 	bl	800aeec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d106      	bne.n	800bab2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	3324      	adds	r3, #36	@ 0x24
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	68b9      	ldr	r1, [r7, #8]
 800baac:	4618      	mov	r0, r3
 800baae:	f000 fc45 	bl	800c33c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bab2:	6978      	ldr	r0, [r7, #20]
 800bab4:	f7ff ff26 	bl	800b904 <prvUnlockQueue>
	}
 800bab8:	bf00      	nop
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b08e      	sub	sp, #56	@ 0x38
 800bac4:	af04      	add	r7, sp, #16
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10b      	bne.n	800baec <xTaskCreateStatic+0x2c>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	623b      	str	r3, [r7, #32]
}
 800bae6:	bf00      	nop
 800bae8:	bf00      	nop
 800baea:	e7fd      	b.n	800bae8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800baec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10b      	bne.n	800bb0a <xTaskCreateStatic+0x4a>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	61fb      	str	r3, [r7, #28]
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop
 800bb08:	e7fd      	b.n	800bb06 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb0a:	235c      	movs	r3, #92	@ 0x5c
 800bb0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	2b5c      	cmp	r3, #92	@ 0x5c
 800bb12:	d00b      	beq.n	800bb2c <xTaskCreateStatic+0x6c>
	__asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb18:	f383 8811 	msr	BASEPRI, r3
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	61bb      	str	r3, [r7, #24]
}
 800bb26:	bf00      	nop
 800bb28:	bf00      	nop
 800bb2a:	e7fd      	b.n	800bb28 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d01e      	beq.n	800bb72 <xTaskCreateStatic+0xb2>
 800bb34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d01b      	beq.n	800bb72 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb42:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb46:	2202      	movs	r2, #2
 800bb48:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	9303      	str	r3, [sp, #12]
 800bb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb52:	9302      	str	r3, [sp, #8]
 800bb54:	f107 0314 	add.w	r3, r7, #20
 800bb58:	9301      	str	r3, [sp, #4]
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	68b9      	ldr	r1, [r7, #8]
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 f850 	bl	800bc0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb6c:	f000 f8de 	bl	800bd2c <prvAddNewTaskToReadyList>
 800bb70:	e001      	b.n	800bb76 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bb76:	697b      	ldr	r3, [r7, #20]
	}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3728      	adds	r7, #40	@ 0x28
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b08c      	sub	sp, #48	@ 0x30
 800bb84:	af04      	add	r7, sp, #16
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	603b      	str	r3, [r7, #0]
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bb90:	88fb      	ldrh	r3, [r7, #6]
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe fda5 	bl	800a6e4 <pvPortMalloc>
 800bb9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00e      	beq.n	800bbc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bba2:	205c      	movs	r0, #92	@ 0x5c
 800bba4:	f7fe fd9e 	bl	800a6e4 <pvPortMalloc>
 800bba8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d003      	beq.n	800bbb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	631a      	str	r2, [r3, #48]	@ 0x30
 800bbb6:	e005      	b.n	800bbc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bbb8:	6978      	ldr	r0, [r7, #20]
 800bbba:	f7fe fe61 	bl	800a880 <vPortFree>
 800bbbe:	e001      	b.n	800bbc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d017      	beq.n	800bbfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bbd2:	88fa      	ldrh	r2, [r7, #6]
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	9303      	str	r3, [sp, #12]
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	9302      	str	r3, [sp, #8]
 800bbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbde:	9301      	str	r3, [sp, #4]
 800bbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	68b9      	ldr	r1, [r7, #8]
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 f80e 	bl	800bc0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbee:	69f8      	ldr	r0, [r7, #28]
 800bbf0:	f000 f89c 	bl	800bd2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	61bb      	str	r3, [r7, #24]
 800bbf8:	e002      	b.n	800bc00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bbfa:	f04f 33ff 	mov.w	r3, #4294967295
 800bbfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc00:	69bb      	ldr	r3, [r7, #24]
	}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3720      	adds	r7, #32
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b088      	sub	sp, #32
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	60f8      	str	r0, [r7, #12]
 800bc12:	60b9      	str	r1, [r7, #8]
 800bc14:	607a      	str	r2, [r7, #4]
 800bc16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	461a      	mov	r2, r3
 800bc22:	21a5      	movs	r1, #165	@ 0xa5
 800bc24:	f001 fbd3 	bl	800d3ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800bc32:	440b      	add	r3, r1
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	f023 0307 	bic.w	r3, r3, #7
 800bc40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	f003 0307 	and.w	r3, r3, #7
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00b      	beq.n	800bc64 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	617b      	str	r3, [r7, #20]
}
 800bc5e:	bf00      	nop
 800bc60:	bf00      	nop
 800bc62:	e7fd      	b.n	800bc60 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d01f      	beq.n	800bcaa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	61fb      	str	r3, [r7, #28]
 800bc6e:	e012      	b.n	800bc96 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	4413      	add	r3, r2
 800bc76:	7819      	ldrb	r1, [r3, #0]
 800bc78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	3334      	adds	r3, #52	@ 0x34
 800bc80:	460a      	mov	r2, r1
 800bc82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	4413      	add	r3, r2
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d006      	beq.n	800bc9e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	3301      	adds	r3, #1
 800bc94:	61fb      	str	r3, [r7, #28]
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	2b0f      	cmp	r3, #15
 800bc9a:	d9e9      	bls.n	800bc70 <prvInitialiseNewTask+0x66>
 800bc9c:	e000      	b.n	800bca0 <prvInitialiseNewTask+0x96>
			{
				break;
 800bc9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bca8:	e003      	b.n	800bcb2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bcb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcb4:	2b37      	cmp	r3, #55	@ 0x37
 800bcb6:	d901      	bls.n	800bcbc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bcb8:	2337      	movs	r3, #55	@ 0x37
 800bcba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcc0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcc6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcca:	2200      	movs	r2, #0
 800bccc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe ff14 	bl	800ab00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcda:	3318      	adds	r3, #24
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fe ff0f 	bl	800ab00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bce6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcf6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	68f9      	ldr	r1, [r7, #12]
 800bd0a:	69b8      	ldr	r0, [r7, #24]
 800bd0c:	f7fe ff8c 	bl	800ac28 <pxPortInitialiseStack>
 800bd10:	4602      	mov	r2, r0
 800bd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d002      	beq.n	800bd22 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd22:	bf00      	nop
 800bd24:	3720      	adds	r7, #32
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
	...

0800bd2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bd34:	f7ff f8a8 	bl	800ae88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bd38:	4b2d      	ldr	r3, [pc, #180]	@ (800bdf0 <prvAddNewTaskToReadyList+0xc4>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	4a2c      	ldr	r2, [pc, #176]	@ (800bdf0 <prvAddNewTaskToReadyList+0xc4>)
 800bd40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bd42:	4b2c      	ldr	r3, [pc, #176]	@ (800bdf4 <prvAddNewTaskToReadyList+0xc8>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d109      	bne.n	800bd5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bd4a:	4a2a      	ldr	r2, [pc, #168]	@ (800bdf4 <prvAddNewTaskToReadyList+0xc8>)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bd50:	4b27      	ldr	r3, [pc, #156]	@ (800bdf0 <prvAddNewTaskToReadyList+0xc4>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d110      	bne.n	800bd7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bd58:	f000 fc1e 	bl	800c598 <prvInitialiseTaskLists>
 800bd5c:	e00d      	b.n	800bd7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bd5e:	4b26      	ldr	r3, [pc, #152]	@ (800bdf8 <prvAddNewTaskToReadyList+0xcc>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d109      	bne.n	800bd7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bd66:	4b23      	ldr	r3, [pc, #140]	@ (800bdf4 <prvAddNewTaskToReadyList+0xc8>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d802      	bhi.n	800bd7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bd74:	4a1f      	ldr	r2, [pc, #124]	@ (800bdf4 <prvAddNewTaskToReadyList+0xc8>)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bd7a:	4b20      	ldr	r3, [pc, #128]	@ (800bdfc <prvAddNewTaskToReadyList+0xd0>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	4a1e      	ldr	r2, [pc, #120]	@ (800bdfc <prvAddNewTaskToReadyList+0xd0>)
 800bd82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bd84:	4b1d      	ldr	r3, [pc, #116]	@ (800bdfc <prvAddNewTaskToReadyList+0xd0>)
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd90:	4b1b      	ldr	r3, [pc, #108]	@ (800be00 <prvAddNewTaskToReadyList+0xd4>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d903      	bls.n	800bda0 <prvAddNewTaskToReadyList+0x74>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd9c:	4a18      	ldr	r2, [pc, #96]	@ (800be00 <prvAddNewTaskToReadyList+0xd4>)
 800bd9e:	6013      	str	r3, [r2, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bda4:	4613      	mov	r3, r2
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	4413      	add	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4a15      	ldr	r2, [pc, #84]	@ (800be04 <prvAddNewTaskToReadyList+0xd8>)
 800bdae:	441a      	add	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	f7fe feaf 	bl	800ab1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bdbc:	f7ff f896 	bl	800aeec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bdc0:	4b0d      	ldr	r3, [pc, #52]	@ (800bdf8 <prvAddNewTaskToReadyList+0xcc>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00e      	beq.n	800bde6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bdc8:	4b0a      	ldr	r3, [pc, #40]	@ (800bdf4 <prvAddNewTaskToReadyList+0xc8>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d207      	bcs.n	800bde6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bdd6:	4b0c      	ldr	r3, [pc, #48]	@ (800be08 <prvAddNewTaskToReadyList+0xdc>)
 800bdd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	f3bf 8f4f 	dsb	sy
 800bde2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bde6:	bf00      	nop
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	24004be8 	.word	0x24004be8
 800bdf4:	24004714 	.word	0x24004714
 800bdf8:	24004bf4 	.word	0x24004bf4
 800bdfc:	24004c04 	.word	0x24004c04
 800be00:	24004bf0 	.word	0x24004bf0
 800be04:	24004718 	.word	0x24004718
 800be08:	e000ed04 	.word	0xe000ed04

0800be0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be14:	2300      	movs	r3, #0
 800be16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d018      	beq.n	800be50 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be1e:	4b14      	ldr	r3, [pc, #80]	@ (800be70 <vTaskDelay+0x64>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00b      	beq.n	800be3e <vTaskDelay+0x32>
	__asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	60bb      	str	r3, [r7, #8]
}
 800be38:	bf00      	nop
 800be3a:	bf00      	nop
 800be3c:	e7fd      	b.n	800be3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800be3e:	f000 f883 	bl	800bf48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800be42:	2100      	movs	r1, #0
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fcf3 	bl	800c830 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800be4a:	f000 f88b 	bl	800bf64 <xTaskResumeAll>
 800be4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d107      	bne.n	800be66 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800be56:	4b07      	ldr	r3, [pc, #28]	@ (800be74 <vTaskDelay+0x68>)
 800be58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be66:	bf00      	nop
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	24004c10 	.word	0x24004c10
 800be74:	e000ed04 	.word	0xe000ed04

0800be78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b08a      	sub	sp, #40	@ 0x28
 800be7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be7e:	2300      	movs	r3, #0
 800be80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800be82:	2300      	movs	r3, #0
 800be84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800be86:	463a      	mov	r2, r7
 800be88:	1d39      	adds	r1, r7, #4
 800be8a:	f107 0308 	add.w	r3, r7, #8
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fe fbf4 	bl	800a67c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	9202      	str	r2, [sp, #8]
 800be9c:	9301      	str	r3, [sp, #4]
 800be9e:	2300      	movs	r3, #0
 800bea0:	9300      	str	r3, [sp, #0]
 800bea2:	2300      	movs	r3, #0
 800bea4:	460a      	mov	r2, r1
 800bea6:	4922      	ldr	r1, [pc, #136]	@ (800bf30 <vTaskStartScheduler+0xb8>)
 800bea8:	4822      	ldr	r0, [pc, #136]	@ (800bf34 <vTaskStartScheduler+0xbc>)
 800beaa:	f7ff fe09 	bl	800bac0 <xTaskCreateStatic>
 800beae:	4603      	mov	r3, r0
 800beb0:	4a21      	ldr	r2, [pc, #132]	@ (800bf38 <vTaskStartScheduler+0xc0>)
 800beb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800beb4:	4b20      	ldr	r3, [pc, #128]	@ (800bf38 <vTaskStartScheduler+0xc0>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bebc:	2301      	movs	r3, #1
 800bebe:	617b      	str	r3, [r7, #20]
 800bec0:	e001      	b.n	800bec6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bec2:	2300      	movs	r3, #0
 800bec4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d102      	bne.n	800bed2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800becc:	f000 fd04 	bl	800c8d8 <xTimerCreateTimerTask>
 800bed0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d116      	bne.n	800bf06 <vTaskStartScheduler+0x8e>
	__asm volatile
 800bed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bedc:	f383 8811 	msr	BASEPRI, r3
 800bee0:	f3bf 8f6f 	isb	sy
 800bee4:	f3bf 8f4f 	dsb	sy
 800bee8:	613b      	str	r3, [r7, #16]
}
 800beea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800beec:	4b13      	ldr	r3, [pc, #76]	@ (800bf3c <vTaskStartScheduler+0xc4>)
 800beee:	f04f 32ff 	mov.w	r2, #4294967295
 800bef2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bef4:	4b12      	ldr	r3, [pc, #72]	@ (800bf40 <vTaskStartScheduler+0xc8>)
 800bef6:	2201      	movs	r2, #1
 800bef8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800befa:	4b12      	ldr	r3, [pc, #72]	@ (800bf44 <vTaskStartScheduler+0xcc>)
 800befc:	2200      	movs	r2, #0
 800befe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf00:	f7fe ff1e 	bl	800ad40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf04:	e00f      	b.n	800bf26 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0c:	d10b      	bne.n	800bf26 <vTaskStartScheduler+0xae>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	60fb      	str	r3, [r7, #12]
}
 800bf20:	bf00      	nop
 800bf22:	bf00      	nop
 800bf24:	e7fd      	b.n	800bf22 <vTaskStartScheduler+0xaa>
}
 800bf26:	bf00      	nop
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	0800e09c 	.word	0x0800e09c
 800bf34:	0800c569 	.word	0x0800c569
 800bf38:	24004c0c 	.word	0x24004c0c
 800bf3c:	24004c08 	.word	0x24004c08
 800bf40:	24004bf4 	.word	0x24004bf4
 800bf44:	24004bec 	.word	0x24004bec

0800bf48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bf4c:	4b04      	ldr	r3, [pc, #16]	@ (800bf60 <vTaskSuspendAll+0x18>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	3301      	adds	r3, #1
 800bf52:	4a03      	ldr	r2, [pc, #12]	@ (800bf60 <vTaskSuspendAll+0x18>)
 800bf54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bf56:	bf00      	nop
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	24004c10 	.word	0x24004c10

0800bf64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf72:	4b42      	ldr	r3, [pc, #264]	@ (800c07c <xTaskResumeAll+0x118>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10b      	bne.n	800bf92 <xTaskResumeAll+0x2e>
	__asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	603b      	str	r3, [r7, #0]
}
 800bf8c:	bf00      	nop
 800bf8e:	bf00      	nop
 800bf90:	e7fd      	b.n	800bf8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf92:	f7fe ff79 	bl	800ae88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf96:	4b39      	ldr	r3, [pc, #228]	@ (800c07c <xTaskResumeAll+0x118>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	4a37      	ldr	r2, [pc, #220]	@ (800c07c <xTaskResumeAll+0x118>)
 800bf9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfa0:	4b36      	ldr	r3, [pc, #216]	@ (800c07c <xTaskResumeAll+0x118>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d162      	bne.n	800c06e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bfa8:	4b35      	ldr	r3, [pc, #212]	@ (800c080 <xTaskResumeAll+0x11c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d05e      	beq.n	800c06e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfb0:	e02f      	b.n	800c012 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfb2:	4b34      	ldr	r3, [pc, #208]	@ (800c084 <xTaskResumeAll+0x120>)
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3318      	adds	r3, #24
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fe fe08 	bl	800abd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fe fe03 	bl	800abd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfd2:	4b2d      	ldr	r3, [pc, #180]	@ (800c088 <xTaskResumeAll+0x124>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d903      	bls.n	800bfe2 <xTaskResumeAll+0x7e>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfde:	4a2a      	ldr	r2, [pc, #168]	@ (800c088 <xTaskResumeAll+0x124>)
 800bfe0:	6013      	str	r3, [r2, #0]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4a27      	ldr	r2, [pc, #156]	@ (800c08c <xTaskResumeAll+0x128>)
 800bff0:	441a      	add	r2, r3
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	3304      	adds	r3, #4
 800bff6:	4619      	mov	r1, r3
 800bff8:	4610      	mov	r0, r2
 800bffa:	f7fe fd8e 	bl	800ab1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c002:	4b23      	ldr	r3, [pc, #140]	@ (800c090 <xTaskResumeAll+0x12c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c008:	429a      	cmp	r2, r3
 800c00a:	d302      	bcc.n	800c012 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c00c:	4b21      	ldr	r3, [pc, #132]	@ (800c094 <xTaskResumeAll+0x130>)
 800c00e:	2201      	movs	r2, #1
 800c010:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c012:	4b1c      	ldr	r3, [pc, #112]	@ (800c084 <xTaskResumeAll+0x120>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1cb      	bne.n	800bfb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d001      	beq.n	800c024 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c020:	f000 fb58 	bl	800c6d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c024:	4b1c      	ldr	r3, [pc, #112]	@ (800c098 <xTaskResumeAll+0x134>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d010      	beq.n	800c052 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c030:	f000 f846 	bl	800c0c0 <xTaskIncrementTick>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d002      	beq.n	800c040 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c03a:	4b16      	ldr	r3, [pc, #88]	@ (800c094 <xTaskResumeAll+0x130>)
 800c03c:	2201      	movs	r2, #1
 800c03e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3b01      	subs	r3, #1
 800c044:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1f1      	bne.n	800c030 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c04c:	4b12      	ldr	r3, [pc, #72]	@ (800c098 <xTaskResumeAll+0x134>)
 800c04e:	2200      	movs	r2, #0
 800c050:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c052:	4b10      	ldr	r3, [pc, #64]	@ (800c094 <xTaskResumeAll+0x130>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d009      	beq.n	800c06e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c05a:	2301      	movs	r3, #1
 800c05c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c05e:	4b0f      	ldr	r3, [pc, #60]	@ (800c09c <xTaskResumeAll+0x138>)
 800c060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c064:	601a      	str	r2, [r3, #0]
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c06e:	f7fe ff3d 	bl	800aeec <vPortExitCritical>

	return xAlreadyYielded;
 800c072:	68bb      	ldr	r3, [r7, #8]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	24004c10 	.word	0x24004c10
 800c080:	24004be8 	.word	0x24004be8
 800c084:	24004ba8 	.word	0x24004ba8
 800c088:	24004bf0 	.word	0x24004bf0
 800c08c:	24004718 	.word	0x24004718
 800c090:	24004714 	.word	0x24004714
 800c094:	24004bfc 	.word	0x24004bfc
 800c098:	24004bf8 	.word	0x24004bf8
 800c09c:	e000ed04 	.word	0xe000ed04

0800c0a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c0a6:	4b05      	ldr	r3, [pc, #20]	@ (800c0bc <xTaskGetTickCount+0x1c>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c0ac:	687b      	ldr	r3, [r7, #4]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	24004bec 	.word	0x24004bec

0800c0c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0ca:	4b4f      	ldr	r3, [pc, #316]	@ (800c208 <xTaskIncrementTick+0x148>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f040 8090 	bne.w	800c1f4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0d4:	4b4d      	ldr	r3, [pc, #308]	@ (800c20c <xTaskIncrementTick+0x14c>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0dc:	4a4b      	ldr	r2, [pc, #300]	@ (800c20c <xTaskIncrementTick+0x14c>)
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d121      	bne.n	800c12c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c0e8:	4b49      	ldr	r3, [pc, #292]	@ (800c210 <xTaskIncrementTick+0x150>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00b      	beq.n	800c10a <xTaskIncrementTick+0x4a>
	__asm volatile
 800c0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	603b      	str	r3, [r7, #0]
}
 800c104:	bf00      	nop
 800c106:	bf00      	nop
 800c108:	e7fd      	b.n	800c106 <xTaskIncrementTick+0x46>
 800c10a:	4b41      	ldr	r3, [pc, #260]	@ (800c210 <xTaskIncrementTick+0x150>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	60fb      	str	r3, [r7, #12]
 800c110:	4b40      	ldr	r3, [pc, #256]	@ (800c214 <xTaskIncrementTick+0x154>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a3e      	ldr	r2, [pc, #248]	@ (800c210 <xTaskIncrementTick+0x150>)
 800c116:	6013      	str	r3, [r2, #0]
 800c118:	4a3e      	ldr	r2, [pc, #248]	@ (800c214 <xTaskIncrementTick+0x154>)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6013      	str	r3, [r2, #0]
 800c11e:	4b3e      	ldr	r3, [pc, #248]	@ (800c218 <xTaskIncrementTick+0x158>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3301      	adds	r3, #1
 800c124:	4a3c      	ldr	r2, [pc, #240]	@ (800c218 <xTaskIncrementTick+0x158>)
 800c126:	6013      	str	r3, [r2, #0]
 800c128:	f000 fad4 	bl	800c6d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c12c:	4b3b      	ldr	r3, [pc, #236]	@ (800c21c <xTaskIncrementTick+0x15c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	429a      	cmp	r2, r3
 800c134:	d349      	bcc.n	800c1ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c136:	4b36      	ldr	r3, [pc, #216]	@ (800c210 <xTaskIncrementTick+0x150>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d104      	bne.n	800c14a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c140:	4b36      	ldr	r3, [pc, #216]	@ (800c21c <xTaskIncrementTick+0x15c>)
 800c142:	f04f 32ff 	mov.w	r2, #4294967295
 800c146:	601a      	str	r2, [r3, #0]
					break;
 800c148:	e03f      	b.n	800c1ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c14a:	4b31      	ldr	r3, [pc, #196]	@ (800c210 <xTaskIncrementTick+0x150>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d203      	bcs.n	800c16a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c162:	4a2e      	ldr	r2, [pc, #184]	@ (800c21c <xTaskIncrementTick+0x15c>)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c168:	e02f      	b.n	800c1ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	3304      	adds	r3, #4
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe fd30 	bl	800abd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d004      	beq.n	800c186 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	3318      	adds	r3, #24
 800c180:	4618      	mov	r0, r3
 800c182:	f7fe fd27 	bl	800abd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c18a:	4b25      	ldr	r3, [pc, #148]	@ (800c220 <xTaskIncrementTick+0x160>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d903      	bls.n	800c19a <xTaskIncrementTick+0xda>
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c196:	4a22      	ldr	r2, [pc, #136]	@ (800c220 <xTaskIncrementTick+0x160>)
 800c198:	6013      	str	r3, [r2, #0]
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c19e:	4613      	mov	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4413      	add	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4a1f      	ldr	r2, [pc, #124]	@ (800c224 <xTaskIncrementTick+0x164>)
 800c1a8:	441a      	add	r2, r3
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	f7fe fcb2 	bl	800ab1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ba:	4b1b      	ldr	r3, [pc, #108]	@ (800c228 <xTaskIncrementTick+0x168>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d3b8      	bcc.n	800c136 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1c8:	e7b5      	b.n	800c136 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1ca:	4b17      	ldr	r3, [pc, #92]	@ (800c228 <xTaskIncrementTick+0x168>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1d0:	4914      	ldr	r1, [pc, #80]	@ (800c224 <xTaskIncrementTick+0x164>)
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4413      	add	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	440b      	add	r3, r1
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d901      	bls.n	800c1e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c1e6:	4b11      	ldr	r3, [pc, #68]	@ (800c22c <xTaskIncrementTick+0x16c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d007      	beq.n	800c1fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	617b      	str	r3, [r7, #20]
 800c1f2:	e004      	b.n	800c1fe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c1f4:	4b0e      	ldr	r3, [pc, #56]	@ (800c230 <xTaskIncrementTick+0x170>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	4a0d      	ldr	r2, [pc, #52]	@ (800c230 <xTaskIncrementTick+0x170>)
 800c1fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c1fe:	697b      	ldr	r3, [r7, #20]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3718      	adds	r7, #24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	24004c10 	.word	0x24004c10
 800c20c:	24004bec 	.word	0x24004bec
 800c210:	24004ba0 	.word	0x24004ba0
 800c214:	24004ba4 	.word	0x24004ba4
 800c218:	24004c00 	.word	0x24004c00
 800c21c:	24004c08 	.word	0x24004c08
 800c220:	24004bf0 	.word	0x24004bf0
 800c224:	24004718 	.word	0x24004718
 800c228:	24004714 	.word	0x24004714
 800c22c:	24004bfc 	.word	0x24004bfc
 800c230:	24004bf8 	.word	0x24004bf8

0800c234 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c23a:	4b28      	ldr	r3, [pc, #160]	@ (800c2dc <vTaskSwitchContext+0xa8>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c242:	4b27      	ldr	r3, [pc, #156]	@ (800c2e0 <vTaskSwitchContext+0xac>)
 800c244:	2201      	movs	r2, #1
 800c246:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c248:	e042      	b.n	800c2d0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800c24a:	4b25      	ldr	r3, [pc, #148]	@ (800c2e0 <vTaskSwitchContext+0xac>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c250:	4b24      	ldr	r3, [pc, #144]	@ (800c2e4 <vTaskSwitchContext+0xb0>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	e011      	b.n	800c27c <vTaskSwitchContext+0x48>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10b      	bne.n	800c276 <vTaskSwitchContext+0x42>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	607b      	str	r3, [r7, #4]
}
 800c270:	bf00      	nop
 800c272:	bf00      	nop
 800c274:	e7fd      	b.n	800c272 <vTaskSwitchContext+0x3e>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3b01      	subs	r3, #1
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	491a      	ldr	r1, [pc, #104]	@ (800c2e8 <vTaskSwitchContext+0xb4>)
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	4613      	mov	r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	440b      	add	r3, r1
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d0e3      	beq.n	800c258 <vTaskSwitchContext+0x24>
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	4613      	mov	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4413      	add	r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4a13      	ldr	r2, [pc, #76]	@ (800c2e8 <vTaskSwitchContext+0xb4>)
 800c29c:	4413      	add	r3, r2
 800c29e:	60bb      	str	r3, [r7, #8]
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	685a      	ldr	r2, [r3, #4]
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	605a      	str	r2, [r3, #4]
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	685a      	ldr	r2, [r3, #4]
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	3308      	adds	r3, #8
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d104      	bne.n	800c2c0 <vTaskSwitchContext+0x8c>
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	685a      	ldr	r2, [r3, #4]
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	605a      	str	r2, [r3, #4]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	4a09      	ldr	r2, [pc, #36]	@ (800c2ec <vTaskSwitchContext+0xb8>)
 800c2c8:	6013      	str	r3, [r2, #0]
 800c2ca:	4a06      	ldr	r2, [pc, #24]	@ (800c2e4 <vTaskSwitchContext+0xb0>)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6013      	str	r3, [r2, #0]
}
 800c2d0:	bf00      	nop
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr
 800c2dc:	24004c10 	.word	0x24004c10
 800c2e0:	24004bfc 	.word	0x24004bfc
 800c2e4:	24004bf0 	.word	0x24004bf0
 800c2e8:	24004718 	.word	0x24004718
 800c2ec:	24004714 	.word	0x24004714

0800c2f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10b      	bne.n	800c318 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	60fb      	str	r3, [r7, #12]
}
 800c312:	bf00      	nop
 800c314:	bf00      	nop
 800c316:	e7fd      	b.n	800c314 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c318:	4b07      	ldr	r3, [pc, #28]	@ (800c338 <vTaskPlaceOnEventList+0x48>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3318      	adds	r3, #24
 800c31e:	4619      	mov	r1, r3
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7fe fc1e 	bl	800ab62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c326:	2101      	movs	r1, #1
 800c328:	6838      	ldr	r0, [r7, #0]
 800c32a:	f000 fa81 	bl	800c830 <prvAddCurrentTaskToDelayedList>
}
 800c32e:	bf00      	nop
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	24004714 	.word	0x24004714

0800c33c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b086      	sub	sp, #24
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10b      	bne.n	800c366 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	617b      	str	r3, [r7, #20]
}
 800c360:	bf00      	nop
 800c362:	bf00      	nop
 800c364:	e7fd      	b.n	800c362 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c366:	4b0a      	ldr	r3, [pc, #40]	@ (800c390 <vTaskPlaceOnEventListRestricted+0x54>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3318      	adds	r3, #24
 800c36c:	4619      	mov	r1, r3
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f7fe fbd3 	bl	800ab1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c37a:	f04f 33ff 	mov.w	r3, #4294967295
 800c37e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c380:	6879      	ldr	r1, [r7, #4]
 800c382:	68b8      	ldr	r0, [r7, #8]
 800c384:	f000 fa54 	bl	800c830 <prvAddCurrentTaskToDelayedList>
	}
 800c388:	bf00      	nop
 800c38a:	3718      	adds	r7, #24
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	24004714 	.word	0x24004714

0800c394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10b      	bne.n	800c3c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	60fb      	str	r3, [r7, #12]
}
 800c3bc:	bf00      	nop
 800c3be:	bf00      	nop
 800c3c0:	e7fd      	b.n	800c3be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	3318      	adds	r3, #24
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fe fc04 	bl	800abd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3cc:	4b1d      	ldr	r3, [pc, #116]	@ (800c444 <xTaskRemoveFromEventList+0xb0>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d11d      	bne.n	800c410 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fe fbfb 	bl	800abd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3e2:	4b19      	ldr	r3, [pc, #100]	@ (800c448 <xTaskRemoveFromEventList+0xb4>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d903      	bls.n	800c3f2 <xTaskRemoveFromEventList+0x5e>
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ee:	4a16      	ldr	r2, [pc, #88]	@ (800c448 <xTaskRemoveFromEventList+0xb4>)
 800c3f0:	6013      	str	r3, [r2, #0]
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	4a13      	ldr	r2, [pc, #76]	@ (800c44c <xTaskRemoveFromEventList+0xb8>)
 800c400:	441a      	add	r2, r3
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	3304      	adds	r3, #4
 800c406:	4619      	mov	r1, r3
 800c408:	4610      	mov	r0, r2
 800c40a:	f7fe fb86 	bl	800ab1a <vListInsertEnd>
 800c40e:	e005      	b.n	800c41c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	3318      	adds	r3, #24
 800c414:	4619      	mov	r1, r3
 800c416:	480e      	ldr	r0, [pc, #56]	@ (800c450 <xTaskRemoveFromEventList+0xbc>)
 800c418:	f7fe fb7f 	bl	800ab1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c420:	4b0c      	ldr	r3, [pc, #48]	@ (800c454 <xTaskRemoveFromEventList+0xc0>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c426:	429a      	cmp	r2, r3
 800c428:	d905      	bls.n	800c436 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c42a:	2301      	movs	r3, #1
 800c42c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c42e:	4b0a      	ldr	r3, [pc, #40]	@ (800c458 <xTaskRemoveFromEventList+0xc4>)
 800c430:	2201      	movs	r2, #1
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	e001      	b.n	800c43a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c436:	2300      	movs	r3, #0
 800c438:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c43a:	697b      	ldr	r3, [r7, #20]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	24004c10 	.word	0x24004c10
 800c448:	24004bf0 	.word	0x24004bf0
 800c44c:	24004718 	.word	0x24004718
 800c450:	24004ba8 	.word	0x24004ba8
 800c454:	24004714 	.word	0x24004714
 800c458:	24004bfc 	.word	0x24004bfc

0800c45c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c464:	4b06      	ldr	r3, [pc, #24]	@ (800c480 <vTaskInternalSetTimeOutState+0x24>)
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c46c:	4b05      	ldr	r3, [pc, #20]	@ (800c484 <vTaskInternalSetTimeOutState+0x28>)
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	605a      	str	r2, [r3, #4]
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	24004c00 	.word	0x24004c00
 800c484:	24004bec 	.word	0x24004bec

0800c488 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d10b      	bne.n	800c4b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	613b      	str	r3, [r7, #16]
}
 800c4aa:	bf00      	nop
 800c4ac:	bf00      	nop
 800c4ae:	e7fd      	b.n	800c4ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10b      	bne.n	800c4ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	60fb      	str	r3, [r7, #12]
}
 800c4c8:	bf00      	nop
 800c4ca:	bf00      	nop
 800c4cc:	e7fd      	b.n	800c4ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c4ce:	f7fe fcdb 	bl	800ae88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c4d2:	4b1d      	ldr	r3, [pc, #116]	@ (800c548 <xTaskCheckForTimeOut+0xc0>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	69ba      	ldr	r2, [r7, #24]
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ea:	d102      	bne.n	800c4f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	61fb      	str	r3, [r7, #28]
 800c4f0:	e023      	b.n	800c53a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	4b15      	ldr	r3, [pc, #84]	@ (800c54c <xTaskCheckForTimeOut+0xc4>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d007      	beq.n	800c50e <xTaskCheckForTimeOut+0x86>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	69ba      	ldr	r2, [r7, #24]
 800c504:	429a      	cmp	r2, r3
 800c506:	d302      	bcc.n	800c50e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c508:	2301      	movs	r3, #1
 800c50a:	61fb      	str	r3, [r7, #28]
 800c50c:	e015      	b.n	800c53a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	429a      	cmp	r2, r3
 800c516:	d20b      	bcs.n	800c530 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	1ad2      	subs	r2, r2, r3
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7ff ff99 	bl	800c45c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c52a:	2300      	movs	r3, #0
 800c52c:	61fb      	str	r3, [r7, #28]
 800c52e:	e004      	b.n	800c53a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	2200      	movs	r2, #0
 800c534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c536:	2301      	movs	r3, #1
 800c538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c53a:	f7fe fcd7 	bl	800aeec <vPortExitCritical>

	return xReturn;
 800c53e:	69fb      	ldr	r3, [r7, #28]
}
 800c540:	4618      	mov	r0, r3
 800c542:	3720      	adds	r7, #32
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	24004bec 	.word	0x24004bec
 800c54c:	24004c00 	.word	0x24004c00

0800c550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c550:	b480      	push	{r7}
 800c552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c554:	4b03      	ldr	r3, [pc, #12]	@ (800c564 <vTaskMissedYield+0x14>)
 800c556:	2201      	movs	r2, #1
 800c558:	601a      	str	r2, [r3, #0]
}
 800c55a:	bf00      	nop
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr
 800c564:	24004bfc 	.word	0x24004bfc

0800c568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c570:	f000 f852 	bl	800c618 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c574:	4b06      	ldr	r3, [pc, #24]	@ (800c590 <prvIdleTask+0x28>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d9f9      	bls.n	800c570 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c57c:	4b05      	ldr	r3, [pc, #20]	@ (800c594 <prvIdleTask+0x2c>)
 800c57e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c58c:	e7f0      	b.n	800c570 <prvIdleTask+0x8>
 800c58e:	bf00      	nop
 800c590:	24004718 	.word	0x24004718
 800c594:	e000ed04 	.word	0xe000ed04

0800c598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c59e:	2300      	movs	r3, #0
 800c5a0:	607b      	str	r3, [r7, #4]
 800c5a2:	e00c      	b.n	800c5be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	4413      	add	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4a12      	ldr	r2, [pc, #72]	@ (800c5f8 <prvInitialiseTaskLists+0x60>)
 800c5b0:	4413      	add	r3, r2
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fe fa84 	bl	800aac0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	607b      	str	r3, [r7, #4]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b37      	cmp	r3, #55	@ 0x37
 800c5c2:	d9ef      	bls.n	800c5a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5c4:	480d      	ldr	r0, [pc, #52]	@ (800c5fc <prvInitialiseTaskLists+0x64>)
 800c5c6:	f7fe fa7b 	bl	800aac0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5ca:	480d      	ldr	r0, [pc, #52]	@ (800c600 <prvInitialiseTaskLists+0x68>)
 800c5cc:	f7fe fa78 	bl	800aac0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5d0:	480c      	ldr	r0, [pc, #48]	@ (800c604 <prvInitialiseTaskLists+0x6c>)
 800c5d2:	f7fe fa75 	bl	800aac0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c5d6:	480c      	ldr	r0, [pc, #48]	@ (800c608 <prvInitialiseTaskLists+0x70>)
 800c5d8:	f7fe fa72 	bl	800aac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c5dc:	480b      	ldr	r0, [pc, #44]	@ (800c60c <prvInitialiseTaskLists+0x74>)
 800c5de:	f7fe fa6f 	bl	800aac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c5e2:	4b0b      	ldr	r3, [pc, #44]	@ (800c610 <prvInitialiseTaskLists+0x78>)
 800c5e4:	4a05      	ldr	r2, [pc, #20]	@ (800c5fc <prvInitialiseTaskLists+0x64>)
 800c5e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c5e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c614 <prvInitialiseTaskLists+0x7c>)
 800c5ea:	4a05      	ldr	r2, [pc, #20]	@ (800c600 <prvInitialiseTaskLists+0x68>)
 800c5ec:	601a      	str	r2, [r3, #0]
}
 800c5ee:	bf00      	nop
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	24004718 	.word	0x24004718
 800c5fc:	24004b78 	.word	0x24004b78
 800c600:	24004b8c 	.word	0x24004b8c
 800c604:	24004ba8 	.word	0x24004ba8
 800c608:	24004bbc 	.word	0x24004bbc
 800c60c:	24004bd4 	.word	0x24004bd4
 800c610:	24004ba0 	.word	0x24004ba0
 800c614:	24004ba4 	.word	0x24004ba4

0800c618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c61e:	e019      	b.n	800c654 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c620:	f7fe fc32 	bl	800ae88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c624:	4b10      	ldr	r3, [pc, #64]	@ (800c668 <prvCheckTasksWaitingTermination+0x50>)
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3304      	adds	r3, #4
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe facf 	bl	800abd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c636:	4b0d      	ldr	r3, [pc, #52]	@ (800c66c <prvCheckTasksWaitingTermination+0x54>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	3b01      	subs	r3, #1
 800c63c:	4a0b      	ldr	r2, [pc, #44]	@ (800c66c <prvCheckTasksWaitingTermination+0x54>)
 800c63e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c640:	4b0b      	ldr	r3, [pc, #44]	@ (800c670 <prvCheckTasksWaitingTermination+0x58>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	3b01      	subs	r3, #1
 800c646:	4a0a      	ldr	r2, [pc, #40]	@ (800c670 <prvCheckTasksWaitingTermination+0x58>)
 800c648:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c64a:	f7fe fc4f 	bl	800aeec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f810 	bl	800c674 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c654:	4b06      	ldr	r3, [pc, #24]	@ (800c670 <prvCheckTasksWaitingTermination+0x58>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1e1      	bne.n	800c620 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c65c:	bf00      	nop
 800c65e:	bf00      	nop
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	24004bbc 	.word	0x24004bbc
 800c66c:	24004be8 	.word	0x24004be8
 800c670:	24004bd0 	.word	0x24004bd0

0800c674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c682:	2b00      	cmp	r3, #0
 800c684:	d108      	bne.n	800c698 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fe f8f8 	bl	800a880 <vPortFree>
				vPortFree( pxTCB );
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7fe f8f5 	bl	800a880 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c696:	e019      	b.n	800c6cc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d103      	bne.n	800c6aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7fe f8ec 	bl	800a880 <vPortFree>
	}
 800c6a8:	e010      	b.n	800c6cc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d00b      	beq.n	800c6cc <prvDeleteTCB+0x58>
	__asm volatile
 800c6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b8:	f383 8811 	msr	BASEPRI, r3
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	60fb      	str	r3, [r7, #12]
}
 800c6c6:	bf00      	nop
 800c6c8:	bf00      	nop
 800c6ca:	e7fd      	b.n	800c6c8 <prvDeleteTCB+0x54>
	}
 800c6cc:	bf00      	nop
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6da:	4b0c      	ldr	r3, [pc, #48]	@ (800c70c <prvResetNextTaskUnblockTime+0x38>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d104      	bne.n	800c6ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c6e4:	4b0a      	ldr	r3, [pc, #40]	@ (800c710 <prvResetNextTaskUnblockTime+0x3c>)
 800c6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c6ec:	e008      	b.n	800c700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ee:	4b07      	ldr	r3, [pc, #28]	@ (800c70c <prvResetNextTaskUnblockTime+0x38>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	4a04      	ldr	r2, [pc, #16]	@ (800c710 <prvResetNextTaskUnblockTime+0x3c>)
 800c6fe:	6013      	str	r3, [r2, #0]
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	24004ba0 	.word	0x24004ba0
 800c710:	24004c08 	.word	0x24004c08

0800c714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c71a:	4b0b      	ldr	r3, [pc, #44]	@ (800c748 <xTaskGetSchedulerState+0x34>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d102      	bne.n	800c728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c722:	2301      	movs	r3, #1
 800c724:	607b      	str	r3, [r7, #4]
 800c726:	e008      	b.n	800c73a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c728:	4b08      	ldr	r3, [pc, #32]	@ (800c74c <xTaskGetSchedulerState+0x38>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d102      	bne.n	800c736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c730:	2302      	movs	r3, #2
 800c732:	607b      	str	r3, [r7, #4]
 800c734:	e001      	b.n	800c73a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c736:	2300      	movs	r3, #0
 800c738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c73a:	687b      	ldr	r3, [r7, #4]
	}
 800c73c:	4618      	mov	r0, r3
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr
 800c748:	24004bf4 	.word	0x24004bf4
 800c74c:	24004c10 	.word	0x24004c10

0800c750 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c750:	b580      	push	{r7, lr}
 800c752:	b086      	sub	sp, #24
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c75c:	2300      	movs	r3, #0
 800c75e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d058      	beq.n	800c818 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c766:	4b2f      	ldr	r3, [pc, #188]	@ (800c824 <xTaskPriorityDisinherit+0xd4>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d00b      	beq.n	800c788 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	60fb      	str	r3, [r7, #12]
}
 800c782:	bf00      	nop
 800c784:	bf00      	nop
 800c786:	e7fd      	b.n	800c784 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10b      	bne.n	800c7a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	60bb      	str	r3, [r7, #8]
}
 800c7a2:	bf00      	nop
 800c7a4:	bf00      	nop
 800c7a6:	e7fd      	b.n	800c7a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7ac:	1e5a      	subs	r2, r3, #1
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d02c      	beq.n	800c818 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d128      	bne.n	800c818 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fe fa02 	bl	800abd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c828 <xTaskPriorityDisinherit+0xd8>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d903      	bls.n	800c7f8 <xTaskPriorityDisinherit+0xa8>
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f4:	4a0c      	ldr	r2, [pc, #48]	@ (800c828 <xTaskPriorityDisinherit+0xd8>)
 800c7f6:	6013      	str	r3, [r2, #0]
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	4413      	add	r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	4a09      	ldr	r2, [pc, #36]	@ (800c82c <xTaskPriorityDisinherit+0xdc>)
 800c806:	441a      	add	r2, r3
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	3304      	adds	r3, #4
 800c80c:	4619      	mov	r1, r3
 800c80e:	4610      	mov	r0, r2
 800c810:	f7fe f983 	bl	800ab1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c814:	2301      	movs	r3, #1
 800c816:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c818:	697b      	ldr	r3, [r7, #20]
	}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3718      	adds	r7, #24
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	24004714 	.word	0x24004714
 800c828:	24004bf0 	.word	0x24004bf0
 800c82c:	24004718 	.word	0x24004718

0800c830 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c83a:	4b21      	ldr	r3, [pc, #132]	@ (800c8c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c840:	4b20      	ldr	r3, [pc, #128]	@ (800c8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	3304      	adds	r3, #4
 800c846:	4618      	mov	r0, r3
 800c848:	f7fe f9c4 	bl	800abd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c852:	d10a      	bne.n	800c86a <prvAddCurrentTaskToDelayedList+0x3a>
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d007      	beq.n	800c86a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c85a:	4b1a      	ldr	r3, [pc, #104]	@ (800c8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	3304      	adds	r3, #4
 800c860:	4619      	mov	r1, r3
 800c862:	4819      	ldr	r0, [pc, #100]	@ (800c8c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c864:	f7fe f959 	bl	800ab1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c868:	e026      	b.n	800c8b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4413      	add	r3, r2
 800c870:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c872:	4b14      	ldr	r3, [pc, #80]	@ (800c8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d209      	bcs.n	800c896 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c882:	4b12      	ldr	r3, [pc, #72]	@ (800c8cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	4b0f      	ldr	r3, [pc, #60]	@ (800c8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	3304      	adds	r3, #4
 800c88c:	4619      	mov	r1, r3
 800c88e:	4610      	mov	r0, r2
 800c890:	f7fe f967 	bl	800ab62 <vListInsert>
}
 800c894:	e010      	b.n	800c8b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c896:	4b0e      	ldr	r3, [pc, #56]	@ (800c8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	4b0a      	ldr	r3, [pc, #40]	@ (800c8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3304      	adds	r3, #4
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	4610      	mov	r0, r2
 800c8a4:	f7fe f95d 	bl	800ab62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c8a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d202      	bcs.n	800c8b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c8b2:	4a08      	ldr	r2, [pc, #32]	@ (800c8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	6013      	str	r3, [r2, #0]
}
 800c8b8:	bf00      	nop
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	24004bec 	.word	0x24004bec
 800c8c4:	24004714 	.word	0x24004714
 800c8c8:	24004bd4 	.word	0x24004bd4
 800c8cc:	24004ba4 	.word	0x24004ba4
 800c8d0:	24004ba0 	.word	0x24004ba0
 800c8d4:	24004c08 	.word	0x24004c08

0800c8d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b08a      	sub	sp, #40	@ 0x28
 800c8dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c8e2:	f000 fb13 	bl	800cf0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c8e6:	4b1d      	ldr	r3, [pc, #116]	@ (800c95c <xTimerCreateTimerTask+0x84>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d021      	beq.n	800c932 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c8f6:	1d3a      	adds	r2, r7, #4
 800c8f8:	f107 0108 	add.w	r1, r7, #8
 800c8fc:	f107 030c 	add.w	r3, r7, #12
 800c900:	4618      	mov	r0, r3
 800c902:	f7fd fed5 	bl	800a6b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c906:	6879      	ldr	r1, [r7, #4]
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	9202      	str	r2, [sp, #8]
 800c90e:	9301      	str	r3, [sp, #4]
 800c910:	2302      	movs	r3, #2
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	2300      	movs	r3, #0
 800c916:	460a      	mov	r2, r1
 800c918:	4911      	ldr	r1, [pc, #68]	@ (800c960 <xTimerCreateTimerTask+0x88>)
 800c91a:	4812      	ldr	r0, [pc, #72]	@ (800c964 <xTimerCreateTimerTask+0x8c>)
 800c91c:	f7ff f8d0 	bl	800bac0 <xTaskCreateStatic>
 800c920:	4603      	mov	r3, r0
 800c922:	4a11      	ldr	r2, [pc, #68]	@ (800c968 <xTimerCreateTimerTask+0x90>)
 800c924:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c926:	4b10      	ldr	r3, [pc, #64]	@ (800c968 <xTimerCreateTimerTask+0x90>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d001      	beq.n	800c932 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c92e:	2301      	movs	r3, #1
 800c930:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10b      	bne.n	800c950 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c93c:	f383 8811 	msr	BASEPRI, r3
 800c940:	f3bf 8f6f 	isb	sy
 800c944:	f3bf 8f4f 	dsb	sy
 800c948:	613b      	str	r3, [r7, #16]
}
 800c94a:	bf00      	nop
 800c94c:	bf00      	nop
 800c94e:	e7fd      	b.n	800c94c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c950:	697b      	ldr	r3, [r7, #20]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3718      	adds	r7, #24
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	24004c44 	.word	0x24004c44
 800c960:	0800e0a4 	.word	0x0800e0a4
 800c964:	0800caa5 	.word	0x0800caa5
 800c968:	24004c48 	.word	0x24004c48

0800c96c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b08a      	sub	sp, #40	@ 0x28
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10b      	bne.n	800c99c <xTimerGenericCommand+0x30>
	__asm volatile
 800c984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c988:	f383 8811 	msr	BASEPRI, r3
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	623b      	str	r3, [r7, #32]
}
 800c996:	bf00      	nop
 800c998:	bf00      	nop
 800c99a:	e7fd      	b.n	800c998 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c99c:	4b19      	ldr	r3, [pc, #100]	@ (800ca04 <xTimerGenericCommand+0x98>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d02a      	beq.n	800c9fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	2b05      	cmp	r3, #5
 800c9b4:	dc18      	bgt.n	800c9e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c9b6:	f7ff fead 	bl	800c714 <xTaskGetSchedulerState>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d109      	bne.n	800c9d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c9c0:	4b10      	ldr	r3, [pc, #64]	@ (800ca04 <xTimerGenericCommand+0x98>)
 800c9c2:	6818      	ldr	r0, [r3, #0]
 800c9c4:	f107 0110 	add.w	r1, r7, #16
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9cc:	f7fe fc88 	bl	800b2e0 <xQueueGenericSend>
 800c9d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c9d2:	e012      	b.n	800c9fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c9d4:	4b0b      	ldr	r3, [pc, #44]	@ (800ca04 <xTimerGenericCommand+0x98>)
 800c9d6:	6818      	ldr	r0, [r3, #0]
 800c9d8:	f107 0110 	add.w	r1, r7, #16
 800c9dc:	2300      	movs	r3, #0
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f7fe fc7e 	bl	800b2e0 <xQueueGenericSend>
 800c9e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c9e6:	e008      	b.n	800c9fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c9e8:	4b06      	ldr	r3, [pc, #24]	@ (800ca04 <xTimerGenericCommand+0x98>)
 800c9ea:	6818      	ldr	r0, [r3, #0]
 800c9ec:	f107 0110 	add.w	r1, r7, #16
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	f7fe fd76 	bl	800b4e4 <xQueueGenericSendFromISR>
 800c9f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3728      	adds	r7, #40	@ 0x28
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	24004c44 	.word	0x24004c44

0800ca08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b088      	sub	sp, #32
 800ca0c:	af02      	add	r7, sp, #8
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca12:	4b23      	ldr	r3, [pc, #140]	@ (800caa0 <prvProcessExpiredTimer+0x98>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	3304      	adds	r3, #4
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fe f8d7 	bl	800abd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca2c:	f003 0304 	and.w	r3, r3, #4
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d023      	beq.n	800ca7c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	699a      	ldr	r2, [r3, #24]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	18d1      	adds	r1, r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	6978      	ldr	r0, [r7, #20]
 800ca42:	f000 f8d5 	bl	800cbf0 <prvInsertTimerInActiveList>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d020      	beq.n	800ca8e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	2300      	movs	r3, #0
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	2100      	movs	r1, #0
 800ca56:	6978      	ldr	r0, [r7, #20]
 800ca58:	f7ff ff88 	bl	800c96c <xTimerGenericCommand>
 800ca5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d114      	bne.n	800ca8e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	60fb      	str	r3, [r7, #12]
}
 800ca76:	bf00      	nop
 800ca78:	bf00      	nop
 800ca7a:	e7fd      	b.n	800ca78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca82:	f023 0301 	bic.w	r3, r3, #1
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	6a1b      	ldr	r3, [r3, #32]
 800ca92:	6978      	ldr	r0, [r7, #20]
 800ca94:	4798      	blx	r3
}
 800ca96:	bf00      	nop
 800ca98:	3718      	adds	r7, #24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	24004c3c 	.word	0x24004c3c

0800caa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800caac:	f107 0308 	add.w	r3, r7, #8
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 f859 	bl	800cb68 <prvGetNextExpireTime>
 800cab6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	4619      	mov	r1, r3
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	f000 f805 	bl	800cacc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cac2:	f000 f8d7 	bl	800cc74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cac6:	bf00      	nop
 800cac8:	e7f0      	b.n	800caac <prvTimerTask+0x8>
	...

0800cacc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cad6:	f7ff fa37 	bl	800bf48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cada:	f107 0308 	add.w	r3, r7, #8
 800cade:	4618      	mov	r0, r3
 800cae0:	f000 f866 	bl	800cbb0 <prvSampleTimeNow>
 800cae4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d130      	bne.n	800cb4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10a      	bne.n	800cb08 <prvProcessTimerOrBlockTask+0x3c>
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d806      	bhi.n	800cb08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cafa:	f7ff fa33 	bl	800bf64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cafe:	68f9      	ldr	r1, [r7, #12]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7ff ff81 	bl	800ca08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cb06:	e024      	b.n	800cb52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d008      	beq.n	800cb20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb0e:	4b13      	ldr	r3, [pc, #76]	@ (800cb5c <prvProcessTimerOrBlockTask+0x90>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d101      	bne.n	800cb1c <prvProcessTimerOrBlockTask+0x50>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e000      	b.n	800cb1e <prvProcessTimerOrBlockTask+0x52>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cb20:	4b0f      	ldr	r3, [pc, #60]	@ (800cb60 <prvProcessTimerOrBlockTask+0x94>)
 800cb22:	6818      	ldr	r0, [r3, #0]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	683a      	ldr	r2, [r7, #0]
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f7fe ff93 	bl	800ba58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cb32:	f7ff fa17 	bl	800bf64 <xTaskResumeAll>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10a      	bne.n	800cb52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cb3c:	4b09      	ldr	r3, [pc, #36]	@ (800cb64 <prvProcessTimerOrBlockTask+0x98>)
 800cb3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	f3bf 8f6f 	isb	sy
}
 800cb4c:	e001      	b.n	800cb52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cb4e:	f7ff fa09 	bl	800bf64 <xTaskResumeAll>
}
 800cb52:	bf00      	nop
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	24004c40 	.word	0x24004c40
 800cb60:	24004c44 	.word	0x24004c44
 800cb64:	e000ed04 	.word	0xe000ed04

0800cb68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cb70:	4b0e      	ldr	r3, [pc, #56]	@ (800cbac <prvGetNextExpireTime+0x44>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <prvGetNextExpireTime+0x16>
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	e000      	b.n	800cb80 <prvGetNextExpireTime+0x18>
 800cb7e:	2200      	movs	r2, #0
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d105      	bne.n	800cb98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb8c:	4b07      	ldr	r3, [pc, #28]	@ (800cbac <prvGetNextExpireTime+0x44>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	60fb      	str	r3, [r7, #12]
 800cb96:	e001      	b.n	800cb9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	24004c3c 	.word	0x24004c3c

0800cbb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cbb8:	f7ff fa72 	bl	800c0a0 <xTaskGetTickCount>
 800cbbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cbbe:	4b0b      	ldr	r3, [pc, #44]	@ (800cbec <prvSampleTimeNow+0x3c>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d205      	bcs.n	800cbd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cbc8:	f000 f93a 	bl	800ce40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	601a      	str	r2, [r3, #0]
 800cbd2:	e002      	b.n	800cbda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cbda:	4a04      	ldr	r2, [pc, #16]	@ (800cbec <prvSampleTimeNow+0x3c>)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	24004c4c 	.word	0x24004c4c

0800cbf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	68ba      	ldr	r2, [r7, #8]
 800cc06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d812      	bhi.n	800cc3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	1ad2      	subs	r2, r2, r3
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	699b      	ldr	r3, [r3, #24]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d302      	bcc.n	800cc2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cc24:	2301      	movs	r3, #1
 800cc26:	617b      	str	r3, [r7, #20]
 800cc28:	e01b      	b.n	800cc62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cc2a:	4b10      	ldr	r3, [pc, #64]	@ (800cc6c <prvInsertTimerInActiveList+0x7c>)
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	3304      	adds	r3, #4
 800cc32:	4619      	mov	r1, r3
 800cc34:	4610      	mov	r0, r2
 800cc36:	f7fd ff94 	bl	800ab62 <vListInsert>
 800cc3a:	e012      	b.n	800cc62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d206      	bcs.n	800cc52 <prvInsertTimerInActiveList+0x62>
 800cc44:	68ba      	ldr	r2, [r7, #8]
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d302      	bcc.n	800cc52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	617b      	str	r3, [r7, #20]
 800cc50:	e007      	b.n	800cc62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc52:	4b07      	ldr	r3, [pc, #28]	@ (800cc70 <prvInsertTimerInActiveList+0x80>)
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	3304      	adds	r3, #4
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	f7fd ff80 	bl	800ab62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cc62:	697b      	ldr	r3, [r7, #20]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3718      	adds	r7, #24
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	24004c40 	.word	0x24004c40
 800cc70:	24004c3c 	.word	0x24004c3c

0800cc74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b08e      	sub	sp, #56	@ 0x38
 800cc78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc7a:	e0ce      	b.n	800ce1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	da19      	bge.n	800ccb6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cc82:	1d3b      	adds	r3, r7, #4
 800cc84:	3304      	adds	r3, #4
 800cc86:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10b      	bne.n	800cca6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc92:	f383 8811 	msr	BASEPRI, r3
 800cc96:	f3bf 8f6f 	isb	sy
 800cc9a:	f3bf 8f4f 	dsb	sy
 800cc9e:	61fb      	str	r3, [r7, #28]
}
 800cca0:	bf00      	nop
 800cca2:	bf00      	nop
 800cca4:	e7fd      	b.n	800cca2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccac:	6850      	ldr	r0, [r2, #4]
 800ccae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccb0:	6892      	ldr	r2, [r2, #8]
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f2c0 80ae 	blt.w	800ce1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ccc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d004      	beq.n	800ccd4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cccc:	3304      	adds	r3, #4
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fd ff80 	bl	800abd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ccd4:	463b      	mov	r3, r7
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff ff6a 	bl	800cbb0 <prvSampleTimeNow>
 800ccdc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b09      	cmp	r3, #9
 800cce2:	f200 8097 	bhi.w	800ce14 <prvProcessReceivedCommands+0x1a0>
 800cce6:	a201      	add	r2, pc, #4	@ (adr r2, 800ccec <prvProcessReceivedCommands+0x78>)
 800cce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccec:	0800cd15 	.word	0x0800cd15
 800ccf0:	0800cd15 	.word	0x0800cd15
 800ccf4:	0800cd15 	.word	0x0800cd15
 800ccf8:	0800cd8b 	.word	0x0800cd8b
 800ccfc:	0800cd9f 	.word	0x0800cd9f
 800cd00:	0800cdeb 	.word	0x0800cdeb
 800cd04:	0800cd15 	.word	0x0800cd15
 800cd08:	0800cd15 	.word	0x0800cd15
 800cd0c:	0800cd8b 	.word	0x0800cd8b
 800cd10:	0800cd9f 	.word	0x0800cd9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd1a:	f043 0301 	orr.w	r3, r3, #1
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd2a:	699b      	ldr	r3, [r3, #24]
 800cd2c:	18d1      	adds	r1, r2, r3
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd34:	f7ff ff5c 	bl	800cbf0 <prvInsertTimerInActiveList>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d06c      	beq.n	800ce18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd40:	6a1b      	ldr	r3, [r3, #32]
 800cd42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd4c:	f003 0304 	and.w	r3, r3, #4
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d061      	beq.n	800ce18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	441a      	add	r2, r3
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	2300      	movs	r3, #0
 800cd62:	2100      	movs	r1, #0
 800cd64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd66:	f7ff fe01 	bl	800c96c <xTimerGenericCommand>
 800cd6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cd6c:	6a3b      	ldr	r3, [r7, #32]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d152      	bne.n	800ce18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	61bb      	str	r3, [r7, #24]
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop
 800cd88:	e7fd      	b.n	800cd86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd90:	f023 0301 	bic.w	r3, r3, #1
 800cd94:	b2da      	uxtb	r2, r3
 800cd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cd9c:	e03d      	b.n	800ce1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cda4:	f043 0301 	orr.w	r3, r3, #1
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb8:	699b      	ldr	r3, [r3, #24]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d10b      	bne.n	800cdd6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc2:	f383 8811 	msr	BASEPRI, r3
 800cdc6:	f3bf 8f6f 	isb	sy
 800cdca:	f3bf 8f4f 	dsb	sy
 800cdce:	617b      	str	r3, [r7, #20]
}
 800cdd0:	bf00      	nop
 800cdd2:	bf00      	nop
 800cdd4:	e7fd      	b.n	800cdd2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd8:	699a      	ldr	r2, [r3, #24]
 800cdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cddc:	18d1      	adds	r1, r2, r3
 800cdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cde2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cde4:	f7ff ff04 	bl	800cbf0 <prvInsertTimerInActiveList>
					break;
 800cde8:	e017      	b.n	800ce1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cdf0:	f003 0302 	and.w	r3, r3, #2
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d103      	bne.n	800ce00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cdf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdfa:	f7fd fd41 	bl	800a880 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cdfe:	e00c      	b.n	800ce1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce06:	f023 0301 	bic.w	r3, r3, #1
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ce12:	e002      	b.n	800ce1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ce14:	bf00      	nop
 800ce16:	e000      	b.n	800ce1a <prvProcessReceivedCommands+0x1a6>
					break;
 800ce18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce1a:	4b08      	ldr	r3, [pc, #32]	@ (800ce3c <prvProcessReceivedCommands+0x1c8>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	1d39      	adds	r1, r7, #4
 800ce20:	2200      	movs	r2, #0
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fe fbfc 	bl	800b620 <xQueueReceive>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f47f af26 	bne.w	800cc7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ce30:	bf00      	nop
 800ce32:	bf00      	nop
 800ce34:	3730      	adds	r7, #48	@ 0x30
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	24004c44 	.word	0x24004c44

0800ce40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b088      	sub	sp, #32
 800ce44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce46:	e049      	b.n	800cedc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce48:	4b2e      	ldr	r3, [pc, #184]	@ (800cf04 <prvSwitchTimerLists+0xc4>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce52:	4b2c      	ldr	r3, [pc, #176]	@ (800cf04 <prvSwitchTimerLists+0xc4>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fd feb7 	bl	800abd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce74:	f003 0304 	and.w	r3, r3, #4
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d02f      	beq.n	800cedc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	693a      	ldr	r2, [r7, #16]
 800ce82:	4413      	add	r3, r2
 800ce84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d90e      	bls.n	800ceac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce9a:	4b1a      	ldr	r3, [pc, #104]	@ (800cf04 <prvSwitchTimerLists+0xc4>)
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	3304      	adds	r3, #4
 800cea2:	4619      	mov	r1, r3
 800cea4:	4610      	mov	r0, r2
 800cea6:	f7fd fe5c 	bl	800ab62 <vListInsert>
 800ceaa:	e017      	b.n	800cedc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ceac:	2300      	movs	r3, #0
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f7ff fd58 	bl	800c96c <xTimerGenericCommand>
 800cebc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10b      	bne.n	800cedc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	603b      	str	r3, [r7, #0]
}
 800ced6:	bf00      	nop
 800ced8:	bf00      	nop
 800ceda:	e7fd      	b.n	800ced8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cedc:	4b09      	ldr	r3, [pc, #36]	@ (800cf04 <prvSwitchTimerLists+0xc4>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1b0      	bne.n	800ce48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cee6:	4b07      	ldr	r3, [pc, #28]	@ (800cf04 <prvSwitchTimerLists+0xc4>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ceec:	4b06      	ldr	r3, [pc, #24]	@ (800cf08 <prvSwitchTimerLists+0xc8>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a04      	ldr	r2, [pc, #16]	@ (800cf04 <prvSwitchTimerLists+0xc4>)
 800cef2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cef4:	4a04      	ldr	r2, [pc, #16]	@ (800cf08 <prvSwitchTimerLists+0xc8>)
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	6013      	str	r3, [r2, #0]
}
 800cefa:	bf00      	nop
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	24004c3c 	.word	0x24004c3c
 800cf08:	24004c40 	.word	0x24004c40

0800cf0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cf12:	f7fd ffb9 	bl	800ae88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cf16:	4b15      	ldr	r3, [pc, #84]	@ (800cf6c <prvCheckForValidListAndQueue+0x60>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d120      	bne.n	800cf60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cf1e:	4814      	ldr	r0, [pc, #80]	@ (800cf70 <prvCheckForValidListAndQueue+0x64>)
 800cf20:	f7fd fdce 	bl	800aac0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cf24:	4813      	ldr	r0, [pc, #76]	@ (800cf74 <prvCheckForValidListAndQueue+0x68>)
 800cf26:	f7fd fdcb 	bl	800aac0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cf2a:	4b13      	ldr	r3, [pc, #76]	@ (800cf78 <prvCheckForValidListAndQueue+0x6c>)
 800cf2c:	4a10      	ldr	r2, [pc, #64]	@ (800cf70 <prvCheckForValidListAndQueue+0x64>)
 800cf2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cf30:	4b12      	ldr	r3, [pc, #72]	@ (800cf7c <prvCheckForValidListAndQueue+0x70>)
 800cf32:	4a10      	ldr	r2, [pc, #64]	@ (800cf74 <prvCheckForValidListAndQueue+0x68>)
 800cf34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cf36:	2300      	movs	r3, #0
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	4b11      	ldr	r3, [pc, #68]	@ (800cf80 <prvCheckForValidListAndQueue+0x74>)
 800cf3c:	4a11      	ldr	r2, [pc, #68]	@ (800cf84 <prvCheckForValidListAndQueue+0x78>)
 800cf3e:	2110      	movs	r1, #16
 800cf40:	200a      	movs	r0, #10
 800cf42:	f7fe f92d 	bl	800b1a0 <xQueueGenericCreateStatic>
 800cf46:	4603      	mov	r3, r0
 800cf48:	4a08      	ldr	r2, [pc, #32]	@ (800cf6c <prvCheckForValidListAndQueue+0x60>)
 800cf4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cf4c:	4b07      	ldr	r3, [pc, #28]	@ (800cf6c <prvCheckForValidListAndQueue+0x60>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d005      	beq.n	800cf60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cf54:	4b05      	ldr	r3, [pc, #20]	@ (800cf6c <prvCheckForValidListAndQueue+0x60>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	490b      	ldr	r1, [pc, #44]	@ (800cf88 <prvCheckForValidListAndQueue+0x7c>)
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe fd52 	bl	800ba04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf60:	f7fd ffc4 	bl	800aeec <vPortExitCritical>
}
 800cf64:	bf00      	nop
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	24004c44 	.word	0x24004c44
 800cf70:	24004c14 	.word	0x24004c14
 800cf74:	24004c28 	.word	0x24004c28
 800cf78:	24004c3c 	.word	0x24004c3c
 800cf7c:	24004c40 	.word	0x24004c40
 800cf80:	24004cf0 	.word	0x24004cf0
 800cf84:	24004c50 	.word	0x24004c50
 800cf88:	0800e0ac 	.word	0x0800e0ac

0800cf8c <__NVIC_SetPriorityGrouping>:
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f003 0307 	and.w	r3, r3, #7
 800cf9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cf9c:	4b0b      	ldr	r3, [pc, #44]	@ (800cfcc <__NVIC_SetPriorityGrouping+0x40>)
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800cfb4:	4b06      	ldr	r3, [pc, #24]	@ (800cfd0 <__NVIC_SetPriorityGrouping+0x44>)
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cfba:	4a04      	ldr	r2, [pc, #16]	@ (800cfcc <__NVIC_SetPriorityGrouping+0x40>)
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	60d3      	str	r3, [r2, #12]
}
 800cfc0:	bf00      	nop
 800cfc2:	3714      	adds	r7, #20
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	e000ed00 	.word	0xe000ed00
 800cfd0:	05fa0000 	.word	0x05fa0000

0800cfd4 <cppMain>:
	*/
}



void cppMain() {
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
	// Enable `//printf()` using USART
	RetargetInit(&huart4);
 800cfda:	480c      	ldr	r0, [pc, #48]	@ (800d00c <cppMain+0x38>)
 800cfdc:	f7f4 f94e 	bl	800127c <RetargetInit>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfe0:	f3ef 8310 	mrs	r3, PRIMASK
 800cfe4:	603b      	str	r3, [r7, #0]
  return(result);
 800cfe6:	683b      	ldr	r3, [r7, #0]

	uint32_t primask = __get_PRIMASK();
 800cfe8:	607b      	str	r3, [r7, #4]
	if(primask){
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d003      	beq.n	800cff8 <cppMain+0x24>
		printf("disabled");
 800cff0:	4807      	ldr	r0, [pc, #28]	@ (800d010 <cppMain+0x3c>)
 800cff2:	f000 f8e3 	bl	800d1bc <iprintf>
 800cff6:	e002      	b.n	800cffe <cppMain+0x2a>
	}else{
		printf("enabled");
 800cff8:	4806      	ldr	r0, [pc, #24]	@ (800d014 <cppMain+0x40>)
 800cffa:	f000 f8df 	bl	800d1bc <iprintf>
	}

	RtosInit();
 800cffe:	f000 f80b 	bl	800d018 <_Z8RtosInitv>

	for(;;) {
//		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
//		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
//		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
		HAL_Delay(1000);
 800d002:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d006:	f7f4 fc75 	bl	80018f4 <HAL_Delay>
 800d00a:	e7fa      	b.n	800d002 <cppMain+0x2e>
 800d00c:	24000358 	.word	0x24000358
 800d010:	0800e0f8 	.word	0x0800e0f8
 800d014:	0800e104 	.word	0x0800e104

0800d018 <_Z8RtosInitv>:

	}
}


void RtosInit() {
 800d018:	b580      	push	{r7, lr}
 800d01a:	af00      	add	r7, sp, #0

	NVIC_SetPriorityGrouping( 0 );	// For allowing hardware (not RTOS/software) interrupts while the Kernel is running
 800d01c:	2000      	movs	r0, #0
 800d01e:	f7ff ffb5 	bl	800cf8c <__NVIC_SetPriorityGrouping>
	osKernelInitialize(); 			// Initialize scheduler
 800d022:	f7fd fa33 	bl	800a48c <osKernelInitialize>
	queue_mutex->Create();
	relay_queue_mutex->Create();
	data_mutex->Create();
	*/
	// Hardware Timers
	HAL_TIM_Base_Start_IT(&htim7);
 800d026:	4803      	ldr	r0, [pc, #12]	@ (800d034 <_Z8RtosInitv+0x1c>)
 800d028:	f7fb fe1e 	bl	8008c68 <HAL_TIM_Base_Start_IT>

	osKernelStart(); 				// Start scheduler
 800d02c:	f7fd fa52 	bl	800a4d4 <osKernelStart>
}
 800d030:	bf00      	nop
 800d032:	bd80      	pop	{r7, pc}
 800d034:	2400030c 	.word	0x2400030c

0800d038 <std>:
 800d038:	2300      	movs	r3, #0
 800d03a:	b510      	push	{r4, lr}
 800d03c:	4604      	mov	r4, r0
 800d03e:	e9c0 3300 	strd	r3, r3, [r0]
 800d042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d046:	6083      	str	r3, [r0, #8]
 800d048:	8181      	strh	r1, [r0, #12]
 800d04a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d04c:	81c2      	strh	r2, [r0, #14]
 800d04e:	6183      	str	r3, [r0, #24]
 800d050:	4619      	mov	r1, r3
 800d052:	2208      	movs	r2, #8
 800d054:	305c      	adds	r0, #92	@ 0x5c
 800d056:	f000 f9ba 	bl	800d3ce <memset>
 800d05a:	4b0d      	ldr	r3, [pc, #52]	@ (800d090 <std+0x58>)
 800d05c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d05e:	4b0d      	ldr	r3, [pc, #52]	@ (800d094 <std+0x5c>)
 800d060:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d062:	4b0d      	ldr	r3, [pc, #52]	@ (800d098 <std+0x60>)
 800d064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d066:	4b0d      	ldr	r3, [pc, #52]	@ (800d09c <std+0x64>)
 800d068:	6323      	str	r3, [r4, #48]	@ 0x30
 800d06a:	4b0d      	ldr	r3, [pc, #52]	@ (800d0a0 <std+0x68>)
 800d06c:	6224      	str	r4, [r4, #32]
 800d06e:	429c      	cmp	r4, r3
 800d070:	d006      	beq.n	800d080 <std+0x48>
 800d072:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d076:	4294      	cmp	r4, r2
 800d078:	d002      	beq.n	800d080 <std+0x48>
 800d07a:	33d0      	adds	r3, #208	@ 0xd0
 800d07c:	429c      	cmp	r4, r3
 800d07e:	d105      	bne.n	800d08c <std+0x54>
 800d080:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d088:	f000 ba1a 	b.w	800d4c0 <__retarget_lock_init_recursive>
 800d08c:	bd10      	pop	{r4, pc}
 800d08e:	bf00      	nop
 800d090:	0800d349 	.word	0x0800d349
 800d094:	0800d36b 	.word	0x0800d36b
 800d098:	0800d3a3 	.word	0x0800d3a3
 800d09c:	0800d3c7 	.word	0x0800d3c7
 800d0a0:	24004d40 	.word	0x24004d40

0800d0a4 <stdio_exit_handler>:
 800d0a4:	4a02      	ldr	r2, [pc, #8]	@ (800d0b0 <stdio_exit_handler+0xc>)
 800d0a6:	4903      	ldr	r1, [pc, #12]	@ (800d0b4 <stdio_exit_handler+0x10>)
 800d0a8:	4803      	ldr	r0, [pc, #12]	@ (800d0b8 <stdio_exit_handler+0x14>)
 800d0aa:	f000 b869 	b.w	800d180 <_fwalk_sglue>
 800d0ae:	bf00      	nop
 800d0b0:	24000014 	.word	0x24000014
 800d0b4:	0800dd8d 	.word	0x0800dd8d
 800d0b8:	24000024 	.word	0x24000024

0800d0bc <cleanup_stdio>:
 800d0bc:	6841      	ldr	r1, [r0, #4]
 800d0be:	4b0c      	ldr	r3, [pc, #48]	@ (800d0f0 <cleanup_stdio+0x34>)
 800d0c0:	4299      	cmp	r1, r3
 800d0c2:	b510      	push	{r4, lr}
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	d001      	beq.n	800d0cc <cleanup_stdio+0x10>
 800d0c8:	f000 fe60 	bl	800dd8c <_fflush_r>
 800d0cc:	68a1      	ldr	r1, [r4, #8]
 800d0ce:	4b09      	ldr	r3, [pc, #36]	@ (800d0f4 <cleanup_stdio+0x38>)
 800d0d0:	4299      	cmp	r1, r3
 800d0d2:	d002      	beq.n	800d0da <cleanup_stdio+0x1e>
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	f000 fe59 	bl	800dd8c <_fflush_r>
 800d0da:	68e1      	ldr	r1, [r4, #12]
 800d0dc:	4b06      	ldr	r3, [pc, #24]	@ (800d0f8 <cleanup_stdio+0x3c>)
 800d0de:	4299      	cmp	r1, r3
 800d0e0:	d004      	beq.n	800d0ec <cleanup_stdio+0x30>
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0e8:	f000 be50 	b.w	800dd8c <_fflush_r>
 800d0ec:	bd10      	pop	{r4, pc}
 800d0ee:	bf00      	nop
 800d0f0:	24004d40 	.word	0x24004d40
 800d0f4:	24004da8 	.word	0x24004da8
 800d0f8:	24004e10 	.word	0x24004e10

0800d0fc <global_stdio_init.part.0>:
 800d0fc:	b510      	push	{r4, lr}
 800d0fe:	4b0b      	ldr	r3, [pc, #44]	@ (800d12c <global_stdio_init.part.0+0x30>)
 800d100:	4c0b      	ldr	r4, [pc, #44]	@ (800d130 <global_stdio_init.part.0+0x34>)
 800d102:	4a0c      	ldr	r2, [pc, #48]	@ (800d134 <global_stdio_init.part.0+0x38>)
 800d104:	601a      	str	r2, [r3, #0]
 800d106:	4620      	mov	r0, r4
 800d108:	2200      	movs	r2, #0
 800d10a:	2104      	movs	r1, #4
 800d10c:	f7ff ff94 	bl	800d038 <std>
 800d110:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d114:	2201      	movs	r2, #1
 800d116:	2109      	movs	r1, #9
 800d118:	f7ff ff8e 	bl	800d038 <std>
 800d11c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d120:	2202      	movs	r2, #2
 800d122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d126:	2112      	movs	r1, #18
 800d128:	f7ff bf86 	b.w	800d038 <std>
 800d12c:	24004e78 	.word	0x24004e78
 800d130:	24004d40 	.word	0x24004d40
 800d134:	0800d0a5 	.word	0x0800d0a5

0800d138 <__sfp_lock_acquire>:
 800d138:	4801      	ldr	r0, [pc, #4]	@ (800d140 <__sfp_lock_acquire+0x8>)
 800d13a:	f000 b9c2 	b.w	800d4c2 <__retarget_lock_acquire_recursive>
 800d13e:	bf00      	nop
 800d140:	24004e81 	.word	0x24004e81

0800d144 <__sfp_lock_release>:
 800d144:	4801      	ldr	r0, [pc, #4]	@ (800d14c <__sfp_lock_release+0x8>)
 800d146:	f000 b9bd 	b.w	800d4c4 <__retarget_lock_release_recursive>
 800d14a:	bf00      	nop
 800d14c:	24004e81 	.word	0x24004e81

0800d150 <__sinit>:
 800d150:	b510      	push	{r4, lr}
 800d152:	4604      	mov	r4, r0
 800d154:	f7ff fff0 	bl	800d138 <__sfp_lock_acquire>
 800d158:	6a23      	ldr	r3, [r4, #32]
 800d15a:	b11b      	cbz	r3, 800d164 <__sinit+0x14>
 800d15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d160:	f7ff bff0 	b.w	800d144 <__sfp_lock_release>
 800d164:	4b04      	ldr	r3, [pc, #16]	@ (800d178 <__sinit+0x28>)
 800d166:	6223      	str	r3, [r4, #32]
 800d168:	4b04      	ldr	r3, [pc, #16]	@ (800d17c <__sinit+0x2c>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d1f5      	bne.n	800d15c <__sinit+0xc>
 800d170:	f7ff ffc4 	bl	800d0fc <global_stdio_init.part.0>
 800d174:	e7f2      	b.n	800d15c <__sinit+0xc>
 800d176:	bf00      	nop
 800d178:	0800d0bd 	.word	0x0800d0bd
 800d17c:	24004e78 	.word	0x24004e78

0800d180 <_fwalk_sglue>:
 800d180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d184:	4607      	mov	r7, r0
 800d186:	4688      	mov	r8, r1
 800d188:	4614      	mov	r4, r2
 800d18a:	2600      	movs	r6, #0
 800d18c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d190:	f1b9 0901 	subs.w	r9, r9, #1
 800d194:	d505      	bpl.n	800d1a2 <_fwalk_sglue+0x22>
 800d196:	6824      	ldr	r4, [r4, #0]
 800d198:	2c00      	cmp	r4, #0
 800d19a:	d1f7      	bne.n	800d18c <_fwalk_sglue+0xc>
 800d19c:	4630      	mov	r0, r6
 800d19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1a2:	89ab      	ldrh	r3, [r5, #12]
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d907      	bls.n	800d1b8 <_fwalk_sglue+0x38>
 800d1a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	d003      	beq.n	800d1b8 <_fwalk_sglue+0x38>
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	4638      	mov	r0, r7
 800d1b4:	47c0      	blx	r8
 800d1b6:	4306      	orrs	r6, r0
 800d1b8:	3568      	adds	r5, #104	@ 0x68
 800d1ba:	e7e9      	b.n	800d190 <_fwalk_sglue+0x10>

0800d1bc <iprintf>:
 800d1bc:	b40f      	push	{r0, r1, r2, r3}
 800d1be:	b507      	push	{r0, r1, r2, lr}
 800d1c0:	4906      	ldr	r1, [pc, #24]	@ (800d1dc <iprintf+0x20>)
 800d1c2:	ab04      	add	r3, sp, #16
 800d1c4:	6808      	ldr	r0, [r1, #0]
 800d1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ca:	6881      	ldr	r1, [r0, #8]
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	f000 fab3 	bl	800d738 <_vfiprintf_r>
 800d1d2:	b003      	add	sp, #12
 800d1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1d8:	b004      	add	sp, #16
 800d1da:	4770      	bx	lr
 800d1dc:	24000020 	.word	0x24000020

0800d1e0 <setvbuf>:
 800d1e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1e4:	461d      	mov	r5, r3
 800d1e6:	4b57      	ldr	r3, [pc, #348]	@ (800d344 <setvbuf+0x164>)
 800d1e8:	681f      	ldr	r7, [r3, #0]
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	460e      	mov	r6, r1
 800d1ee:	4690      	mov	r8, r2
 800d1f0:	b127      	cbz	r7, 800d1fc <setvbuf+0x1c>
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	b913      	cbnz	r3, 800d1fc <setvbuf+0x1c>
 800d1f6:	4638      	mov	r0, r7
 800d1f8:	f7ff ffaa 	bl	800d150 <__sinit>
 800d1fc:	f1b8 0f02 	cmp.w	r8, #2
 800d200:	d006      	beq.n	800d210 <setvbuf+0x30>
 800d202:	f1b8 0f01 	cmp.w	r8, #1
 800d206:	f200 809a 	bhi.w	800d33e <setvbuf+0x15e>
 800d20a:	2d00      	cmp	r5, #0
 800d20c:	f2c0 8097 	blt.w	800d33e <setvbuf+0x15e>
 800d210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d212:	07d9      	lsls	r1, r3, #31
 800d214:	d405      	bmi.n	800d222 <setvbuf+0x42>
 800d216:	89a3      	ldrh	r3, [r4, #12]
 800d218:	059a      	lsls	r2, r3, #22
 800d21a:	d402      	bmi.n	800d222 <setvbuf+0x42>
 800d21c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d21e:	f000 f950 	bl	800d4c2 <__retarget_lock_acquire_recursive>
 800d222:	4621      	mov	r1, r4
 800d224:	4638      	mov	r0, r7
 800d226:	f000 fdb1 	bl	800dd8c <_fflush_r>
 800d22a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d22c:	b141      	cbz	r1, 800d240 <setvbuf+0x60>
 800d22e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d232:	4299      	cmp	r1, r3
 800d234:	d002      	beq.n	800d23c <setvbuf+0x5c>
 800d236:	4638      	mov	r0, r7
 800d238:	f000 f954 	bl	800d4e4 <_free_r>
 800d23c:	2300      	movs	r3, #0
 800d23e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d240:	2300      	movs	r3, #0
 800d242:	61a3      	str	r3, [r4, #24]
 800d244:	6063      	str	r3, [r4, #4]
 800d246:	89a3      	ldrh	r3, [r4, #12]
 800d248:	061b      	lsls	r3, r3, #24
 800d24a:	d503      	bpl.n	800d254 <setvbuf+0x74>
 800d24c:	6921      	ldr	r1, [r4, #16]
 800d24e:	4638      	mov	r0, r7
 800d250:	f000 f948 	bl	800d4e4 <_free_r>
 800d254:	89a3      	ldrh	r3, [r4, #12]
 800d256:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800d25a:	f023 0303 	bic.w	r3, r3, #3
 800d25e:	f1b8 0f02 	cmp.w	r8, #2
 800d262:	81a3      	strh	r3, [r4, #12]
 800d264:	d061      	beq.n	800d32a <setvbuf+0x14a>
 800d266:	ab01      	add	r3, sp, #4
 800d268:	466a      	mov	r2, sp
 800d26a:	4621      	mov	r1, r4
 800d26c:	4638      	mov	r0, r7
 800d26e:	f000 fdb5 	bl	800dddc <__swhatbuf_r>
 800d272:	89a3      	ldrh	r3, [r4, #12]
 800d274:	4318      	orrs	r0, r3
 800d276:	81a0      	strh	r0, [r4, #12]
 800d278:	bb2d      	cbnz	r5, 800d2c6 <setvbuf+0xe6>
 800d27a:	9d00      	ldr	r5, [sp, #0]
 800d27c:	4628      	mov	r0, r5
 800d27e:	f000 f97b 	bl	800d578 <malloc>
 800d282:	4606      	mov	r6, r0
 800d284:	2800      	cmp	r0, #0
 800d286:	d152      	bne.n	800d32e <setvbuf+0x14e>
 800d288:	f8dd 9000 	ldr.w	r9, [sp]
 800d28c:	45a9      	cmp	r9, r5
 800d28e:	d140      	bne.n	800d312 <setvbuf+0x132>
 800d290:	f04f 35ff 	mov.w	r5, #4294967295
 800d294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d298:	f043 0202 	orr.w	r2, r3, #2
 800d29c:	81a2      	strh	r2, [r4, #12]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	60a2      	str	r2, [r4, #8]
 800d2a2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800d2a6:	6022      	str	r2, [r4, #0]
 800d2a8:	6122      	str	r2, [r4, #16]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	6162      	str	r2, [r4, #20]
 800d2ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2b0:	07d6      	lsls	r6, r2, #31
 800d2b2:	d404      	bmi.n	800d2be <setvbuf+0xde>
 800d2b4:	0598      	lsls	r0, r3, #22
 800d2b6:	d402      	bmi.n	800d2be <setvbuf+0xde>
 800d2b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2ba:	f000 f903 	bl	800d4c4 <__retarget_lock_release_recursive>
 800d2be:	4628      	mov	r0, r5
 800d2c0:	b003      	add	sp, #12
 800d2c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2c6:	2e00      	cmp	r6, #0
 800d2c8:	d0d8      	beq.n	800d27c <setvbuf+0x9c>
 800d2ca:	6a3b      	ldr	r3, [r7, #32]
 800d2cc:	b913      	cbnz	r3, 800d2d4 <setvbuf+0xf4>
 800d2ce:	4638      	mov	r0, r7
 800d2d0:	f7ff ff3e 	bl	800d150 <__sinit>
 800d2d4:	f1b8 0f01 	cmp.w	r8, #1
 800d2d8:	bf08      	it	eq
 800d2da:	89a3      	ldrheq	r3, [r4, #12]
 800d2dc:	6026      	str	r6, [r4, #0]
 800d2de:	bf04      	itt	eq
 800d2e0:	f043 0301 	orreq.w	r3, r3, #1
 800d2e4:	81a3      	strheq	r3, [r4, #12]
 800d2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ea:	f013 0208 	ands.w	r2, r3, #8
 800d2ee:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d2f2:	d01e      	beq.n	800d332 <setvbuf+0x152>
 800d2f4:	07d9      	lsls	r1, r3, #31
 800d2f6:	bf41      	itttt	mi
 800d2f8:	2200      	movmi	r2, #0
 800d2fa:	426d      	negmi	r5, r5
 800d2fc:	60a2      	strmi	r2, [r4, #8]
 800d2fe:	61a5      	strmi	r5, [r4, #24]
 800d300:	bf58      	it	pl
 800d302:	60a5      	strpl	r5, [r4, #8]
 800d304:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d306:	07d2      	lsls	r2, r2, #31
 800d308:	d401      	bmi.n	800d30e <setvbuf+0x12e>
 800d30a:	059b      	lsls	r3, r3, #22
 800d30c:	d513      	bpl.n	800d336 <setvbuf+0x156>
 800d30e:	2500      	movs	r5, #0
 800d310:	e7d5      	b.n	800d2be <setvbuf+0xde>
 800d312:	4648      	mov	r0, r9
 800d314:	f000 f930 	bl	800d578 <malloc>
 800d318:	4606      	mov	r6, r0
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d0b8      	beq.n	800d290 <setvbuf+0xb0>
 800d31e:	89a3      	ldrh	r3, [r4, #12]
 800d320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d324:	81a3      	strh	r3, [r4, #12]
 800d326:	464d      	mov	r5, r9
 800d328:	e7cf      	b.n	800d2ca <setvbuf+0xea>
 800d32a:	2500      	movs	r5, #0
 800d32c:	e7b2      	b.n	800d294 <setvbuf+0xb4>
 800d32e:	46a9      	mov	r9, r5
 800d330:	e7f5      	b.n	800d31e <setvbuf+0x13e>
 800d332:	60a2      	str	r2, [r4, #8]
 800d334:	e7e6      	b.n	800d304 <setvbuf+0x124>
 800d336:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d338:	f000 f8c4 	bl	800d4c4 <__retarget_lock_release_recursive>
 800d33c:	e7e7      	b.n	800d30e <setvbuf+0x12e>
 800d33e:	f04f 35ff 	mov.w	r5, #4294967295
 800d342:	e7bc      	b.n	800d2be <setvbuf+0xde>
 800d344:	24000020 	.word	0x24000020

0800d348 <__sread>:
 800d348:	b510      	push	{r4, lr}
 800d34a:	460c      	mov	r4, r1
 800d34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d350:	f000 f868 	bl	800d424 <_read_r>
 800d354:	2800      	cmp	r0, #0
 800d356:	bfab      	itete	ge
 800d358:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d35a:	89a3      	ldrhlt	r3, [r4, #12]
 800d35c:	181b      	addge	r3, r3, r0
 800d35e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d362:	bfac      	ite	ge
 800d364:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d366:	81a3      	strhlt	r3, [r4, #12]
 800d368:	bd10      	pop	{r4, pc}

0800d36a <__swrite>:
 800d36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d36e:	461f      	mov	r7, r3
 800d370:	898b      	ldrh	r3, [r1, #12]
 800d372:	05db      	lsls	r3, r3, #23
 800d374:	4605      	mov	r5, r0
 800d376:	460c      	mov	r4, r1
 800d378:	4616      	mov	r6, r2
 800d37a:	d505      	bpl.n	800d388 <__swrite+0x1e>
 800d37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d380:	2302      	movs	r3, #2
 800d382:	2200      	movs	r2, #0
 800d384:	f000 f83c 	bl	800d400 <_lseek_r>
 800d388:	89a3      	ldrh	r3, [r4, #12]
 800d38a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d38e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d392:	81a3      	strh	r3, [r4, #12]
 800d394:	4632      	mov	r2, r6
 800d396:	463b      	mov	r3, r7
 800d398:	4628      	mov	r0, r5
 800d39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d39e:	f000 b853 	b.w	800d448 <_write_r>

0800d3a2 <__sseek>:
 800d3a2:	b510      	push	{r4, lr}
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3aa:	f000 f829 	bl	800d400 <_lseek_r>
 800d3ae:	1c43      	adds	r3, r0, #1
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	bf15      	itete	ne
 800d3b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d3b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d3ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d3be:	81a3      	strheq	r3, [r4, #12]
 800d3c0:	bf18      	it	ne
 800d3c2:	81a3      	strhne	r3, [r4, #12]
 800d3c4:	bd10      	pop	{r4, pc}

0800d3c6 <__sclose>:
 800d3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ca:	f000 b809 	b.w	800d3e0 <_close_r>

0800d3ce <memset>:
 800d3ce:	4402      	add	r2, r0
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d100      	bne.n	800d3d8 <memset+0xa>
 800d3d6:	4770      	bx	lr
 800d3d8:	f803 1b01 	strb.w	r1, [r3], #1
 800d3dc:	e7f9      	b.n	800d3d2 <memset+0x4>
	...

0800d3e0 <_close_r>:
 800d3e0:	b538      	push	{r3, r4, r5, lr}
 800d3e2:	4d06      	ldr	r5, [pc, #24]	@ (800d3fc <_close_r+0x1c>)
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	4608      	mov	r0, r1
 800d3ea:	602b      	str	r3, [r5, #0]
 800d3ec:	f7f3 ffa0 	bl	8001330 <_close>
 800d3f0:	1c43      	adds	r3, r0, #1
 800d3f2:	d102      	bne.n	800d3fa <_close_r+0x1a>
 800d3f4:	682b      	ldr	r3, [r5, #0]
 800d3f6:	b103      	cbz	r3, 800d3fa <_close_r+0x1a>
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
 800d3fc:	24004e7c 	.word	0x24004e7c

0800d400 <_lseek_r>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	4d07      	ldr	r5, [pc, #28]	@ (800d420 <_lseek_r+0x20>)
 800d404:	4604      	mov	r4, r0
 800d406:	4608      	mov	r0, r1
 800d408:	4611      	mov	r1, r2
 800d40a:	2200      	movs	r2, #0
 800d40c:	602a      	str	r2, [r5, #0]
 800d40e:	461a      	mov	r2, r3
 800d410:	f7f3 ffa5 	bl	800135e <_lseek>
 800d414:	1c43      	adds	r3, r0, #1
 800d416:	d102      	bne.n	800d41e <_lseek_r+0x1e>
 800d418:	682b      	ldr	r3, [r5, #0]
 800d41a:	b103      	cbz	r3, 800d41e <_lseek_r+0x1e>
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	24004e7c 	.word	0x24004e7c

0800d424 <_read_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	4d07      	ldr	r5, [pc, #28]	@ (800d444 <_read_r+0x20>)
 800d428:	4604      	mov	r4, r0
 800d42a:	4608      	mov	r0, r1
 800d42c:	4611      	mov	r1, r2
 800d42e:	2200      	movs	r2, #0
 800d430:	602a      	str	r2, [r5, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	f7f3 ffa4 	bl	8001380 <_read>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d102      	bne.n	800d442 <_read_r+0x1e>
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	b103      	cbz	r3, 800d442 <_read_r+0x1e>
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	24004e7c 	.word	0x24004e7c

0800d448 <_write_r>:
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	4d07      	ldr	r5, [pc, #28]	@ (800d468 <_write_r+0x20>)
 800d44c:	4604      	mov	r4, r0
 800d44e:	4608      	mov	r0, r1
 800d450:	4611      	mov	r1, r2
 800d452:	2200      	movs	r2, #0
 800d454:	602a      	str	r2, [r5, #0]
 800d456:	461a      	mov	r2, r3
 800d458:	f7f3 ff3e 	bl	80012d8 <_write>
 800d45c:	1c43      	adds	r3, r0, #1
 800d45e:	d102      	bne.n	800d466 <_write_r+0x1e>
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	b103      	cbz	r3, 800d466 <_write_r+0x1e>
 800d464:	6023      	str	r3, [r4, #0]
 800d466:	bd38      	pop	{r3, r4, r5, pc}
 800d468:	24004e7c 	.word	0x24004e7c

0800d46c <__errno>:
 800d46c:	4b01      	ldr	r3, [pc, #4]	@ (800d474 <__errno+0x8>)
 800d46e:	6818      	ldr	r0, [r3, #0]
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	24000020 	.word	0x24000020

0800d478 <__libc_init_array>:
 800d478:	b570      	push	{r4, r5, r6, lr}
 800d47a:	4d0d      	ldr	r5, [pc, #52]	@ (800d4b0 <__libc_init_array+0x38>)
 800d47c:	4c0d      	ldr	r4, [pc, #52]	@ (800d4b4 <__libc_init_array+0x3c>)
 800d47e:	1b64      	subs	r4, r4, r5
 800d480:	10a4      	asrs	r4, r4, #2
 800d482:	2600      	movs	r6, #0
 800d484:	42a6      	cmp	r6, r4
 800d486:	d109      	bne.n	800d49c <__libc_init_array+0x24>
 800d488:	4d0b      	ldr	r5, [pc, #44]	@ (800d4b8 <__libc_init_array+0x40>)
 800d48a:	4c0c      	ldr	r4, [pc, #48]	@ (800d4bc <__libc_init_array+0x44>)
 800d48c:	f000 fdce 	bl	800e02c <_init>
 800d490:	1b64      	subs	r4, r4, r5
 800d492:	10a4      	asrs	r4, r4, #2
 800d494:	2600      	movs	r6, #0
 800d496:	42a6      	cmp	r6, r4
 800d498:	d105      	bne.n	800d4a6 <__libc_init_array+0x2e>
 800d49a:	bd70      	pop	{r4, r5, r6, pc}
 800d49c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4a0:	4798      	blx	r3
 800d4a2:	3601      	adds	r6, #1
 800d4a4:	e7ee      	b.n	800d484 <__libc_init_array+0xc>
 800d4a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4aa:	4798      	blx	r3
 800d4ac:	3601      	adds	r6, #1
 800d4ae:	e7f2      	b.n	800d496 <__libc_init_array+0x1e>
 800d4b0:	0800e1ac 	.word	0x0800e1ac
 800d4b4:	0800e1ac 	.word	0x0800e1ac
 800d4b8:	0800e1ac 	.word	0x0800e1ac
 800d4bc:	0800e1b0 	.word	0x0800e1b0

0800d4c0 <__retarget_lock_init_recursive>:
 800d4c0:	4770      	bx	lr

0800d4c2 <__retarget_lock_acquire_recursive>:
 800d4c2:	4770      	bx	lr

0800d4c4 <__retarget_lock_release_recursive>:
 800d4c4:	4770      	bx	lr

0800d4c6 <memcpy>:
 800d4c6:	440a      	add	r2, r1
 800d4c8:	4291      	cmp	r1, r2
 800d4ca:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4ce:	d100      	bne.n	800d4d2 <memcpy+0xc>
 800d4d0:	4770      	bx	lr
 800d4d2:	b510      	push	{r4, lr}
 800d4d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4dc:	4291      	cmp	r1, r2
 800d4de:	d1f9      	bne.n	800d4d4 <memcpy+0xe>
 800d4e0:	bd10      	pop	{r4, pc}
	...

0800d4e4 <_free_r>:
 800d4e4:	b538      	push	{r3, r4, r5, lr}
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	2900      	cmp	r1, #0
 800d4ea:	d041      	beq.n	800d570 <_free_r+0x8c>
 800d4ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4f0:	1f0c      	subs	r4, r1, #4
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	bfb8      	it	lt
 800d4f6:	18e4      	addlt	r4, r4, r3
 800d4f8:	f000 f8e8 	bl	800d6cc <__malloc_lock>
 800d4fc:	4a1d      	ldr	r2, [pc, #116]	@ (800d574 <_free_r+0x90>)
 800d4fe:	6813      	ldr	r3, [r2, #0]
 800d500:	b933      	cbnz	r3, 800d510 <_free_r+0x2c>
 800d502:	6063      	str	r3, [r4, #4]
 800d504:	6014      	str	r4, [r2, #0]
 800d506:	4628      	mov	r0, r5
 800d508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d50c:	f000 b8e4 	b.w	800d6d8 <__malloc_unlock>
 800d510:	42a3      	cmp	r3, r4
 800d512:	d908      	bls.n	800d526 <_free_r+0x42>
 800d514:	6820      	ldr	r0, [r4, #0]
 800d516:	1821      	adds	r1, r4, r0
 800d518:	428b      	cmp	r3, r1
 800d51a:	bf01      	itttt	eq
 800d51c:	6819      	ldreq	r1, [r3, #0]
 800d51e:	685b      	ldreq	r3, [r3, #4]
 800d520:	1809      	addeq	r1, r1, r0
 800d522:	6021      	streq	r1, [r4, #0]
 800d524:	e7ed      	b.n	800d502 <_free_r+0x1e>
 800d526:	461a      	mov	r2, r3
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	b10b      	cbz	r3, 800d530 <_free_r+0x4c>
 800d52c:	42a3      	cmp	r3, r4
 800d52e:	d9fa      	bls.n	800d526 <_free_r+0x42>
 800d530:	6811      	ldr	r1, [r2, #0]
 800d532:	1850      	adds	r0, r2, r1
 800d534:	42a0      	cmp	r0, r4
 800d536:	d10b      	bne.n	800d550 <_free_r+0x6c>
 800d538:	6820      	ldr	r0, [r4, #0]
 800d53a:	4401      	add	r1, r0
 800d53c:	1850      	adds	r0, r2, r1
 800d53e:	4283      	cmp	r3, r0
 800d540:	6011      	str	r1, [r2, #0]
 800d542:	d1e0      	bne.n	800d506 <_free_r+0x22>
 800d544:	6818      	ldr	r0, [r3, #0]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	6053      	str	r3, [r2, #4]
 800d54a:	4408      	add	r0, r1
 800d54c:	6010      	str	r0, [r2, #0]
 800d54e:	e7da      	b.n	800d506 <_free_r+0x22>
 800d550:	d902      	bls.n	800d558 <_free_r+0x74>
 800d552:	230c      	movs	r3, #12
 800d554:	602b      	str	r3, [r5, #0]
 800d556:	e7d6      	b.n	800d506 <_free_r+0x22>
 800d558:	6820      	ldr	r0, [r4, #0]
 800d55a:	1821      	adds	r1, r4, r0
 800d55c:	428b      	cmp	r3, r1
 800d55e:	bf04      	itt	eq
 800d560:	6819      	ldreq	r1, [r3, #0]
 800d562:	685b      	ldreq	r3, [r3, #4]
 800d564:	6063      	str	r3, [r4, #4]
 800d566:	bf04      	itt	eq
 800d568:	1809      	addeq	r1, r1, r0
 800d56a:	6021      	streq	r1, [r4, #0]
 800d56c:	6054      	str	r4, [r2, #4]
 800d56e:	e7ca      	b.n	800d506 <_free_r+0x22>
 800d570:	bd38      	pop	{r3, r4, r5, pc}
 800d572:	bf00      	nop
 800d574:	24004e88 	.word	0x24004e88

0800d578 <malloc>:
 800d578:	4b02      	ldr	r3, [pc, #8]	@ (800d584 <malloc+0xc>)
 800d57a:	4601      	mov	r1, r0
 800d57c:	6818      	ldr	r0, [r3, #0]
 800d57e:	f000 b825 	b.w	800d5cc <_malloc_r>
 800d582:	bf00      	nop
 800d584:	24000020 	.word	0x24000020

0800d588 <sbrk_aligned>:
 800d588:	b570      	push	{r4, r5, r6, lr}
 800d58a:	4e0f      	ldr	r6, [pc, #60]	@ (800d5c8 <sbrk_aligned+0x40>)
 800d58c:	460c      	mov	r4, r1
 800d58e:	6831      	ldr	r1, [r6, #0]
 800d590:	4605      	mov	r5, r0
 800d592:	b911      	cbnz	r1, 800d59a <sbrk_aligned+0x12>
 800d594:	f000 fd3a 	bl	800e00c <_sbrk_r>
 800d598:	6030      	str	r0, [r6, #0]
 800d59a:	4621      	mov	r1, r4
 800d59c:	4628      	mov	r0, r5
 800d59e:	f000 fd35 	bl	800e00c <_sbrk_r>
 800d5a2:	1c43      	adds	r3, r0, #1
 800d5a4:	d103      	bne.n	800d5ae <sbrk_aligned+0x26>
 800d5a6:	f04f 34ff 	mov.w	r4, #4294967295
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	bd70      	pop	{r4, r5, r6, pc}
 800d5ae:	1cc4      	adds	r4, r0, #3
 800d5b0:	f024 0403 	bic.w	r4, r4, #3
 800d5b4:	42a0      	cmp	r0, r4
 800d5b6:	d0f8      	beq.n	800d5aa <sbrk_aligned+0x22>
 800d5b8:	1a21      	subs	r1, r4, r0
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	f000 fd26 	bl	800e00c <_sbrk_r>
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	d1f2      	bne.n	800d5aa <sbrk_aligned+0x22>
 800d5c4:	e7ef      	b.n	800d5a6 <sbrk_aligned+0x1e>
 800d5c6:	bf00      	nop
 800d5c8:	24004e84 	.word	0x24004e84

0800d5cc <_malloc_r>:
 800d5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5d0:	1ccd      	adds	r5, r1, #3
 800d5d2:	f025 0503 	bic.w	r5, r5, #3
 800d5d6:	3508      	adds	r5, #8
 800d5d8:	2d0c      	cmp	r5, #12
 800d5da:	bf38      	it	cc
 800d5dc:	250c      	movcc	r5, #12
 800d5de:	2d00      	cmp	r5, #0
 800d5e0:	4606      	mov	r6, r0
 800d5e2:	db01      	blt.n	800d5e8 <_malloc_r+0x1c>
 800d5e4:	42a9      	cmp	r1, r5
 800d5e6:	d904      	bls.n	800d5f2 <_malloc_r+0x26>
 800d5e8:	230c      	movs	r3, #12
 800d5ea:	6033      	str	r3, [r6, #0]
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6c8 <_malloc_r+0xfc>
 800d5f6:	f000 f869 	bl	800d6cc <__malloc_lock>
 800d5fa:	f8d8 3000 	ldr.w	r3, [r8]
 800d5fe:	461c      	mov	r4, r3
 800d600:	bb44      	cbnz	r4, 800d654 <_malloc_r+0x88>
 800d602:	4629      	mov	r1, r5
 800d604:	4630      	mov	r0, r6
 800d606:	f7ff ffbf 	bl	800d588 <sbrk_aligned>
 800d60a:	1c43      	adds	r3, r0, #1
 800d60c:	4604      	mov	r4, r0
 800d60e:	d158      	bne.n	800d6c2 <_malloc_r+0xf6>
 800d610:	f8d8 4000 	ldr.w	r4, [r8]
 800d614:	4627      	mov	r7, r4
 800d616:	2f00      	cmp	r7, #0
 800d618:	d143      	bne.n	800d6a2 <_malloc_r+0xd6>
 800d61a:	2c00      	cmp	r4, #0
 800d61c:	d04b      	beq.n	800d6b6 <_malloc_r+0xea>
 800d61e:	6823      	ldr	r3, [r4, #0]
 800d620:	4639      	mov	r1, r7
 800d622:	4630      	mov	r0, r6
 800d624:	eb04 0903 	add.w	r9, r4, r3
 800d628:	f000 fcf0 	bl	800e00c <_sbrk_r>
 800d62c:	4581      	cmp	r9, r0
 800d62e:	d142      	bne.n	800d6b6 <_malloc_r+0xea>
 800d630:	6821      	ldr	r1, [r4, #0]
 800d632:	1a6d      	subs	r5, r5, r1
 800d634:	4629      	mov	r1, r5
 800d636:	4630      	mov	r0, r6
 800d638:	f7ff ffa6 	bl	800d588 <sbrk_aligned>
 800d63c:	3001      	adds	r0, #1
 800d63e:	d03a      	beq.n	800d6b6 <_malloc_r+0xea>
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	442b      	add	r3, r5
 800d644:	6023      	str	r3, [r4, #0]
 800d646:	f8d8 3000 	ldr.w	r3, [r8]
 800d64a:	685a      	ldr	r2, [r3, #4]
 800d64c:	bb62      	cbnz	r2, 800d6a8 <_malloc_r+0xdc>
 800d64e:	f8c8 7000 	str.w	r7, [r8]
 800d652:	e00f      	b.n	800d674 <_malloc_r+0xa8>
 800d654:	6822      	ldr	r2, [r4, #0]
 800d656:	1b52      	subs	r2, r2, r5
 800d658:	d420      	bmi.n	800d69c <_malloc_r+0xd0>
 800d65a:	2a0b      	cmp	r2, #11
 800d65c:	d917      	bls.n	800d68e <_malloc_r+0xc2>
 800d65e:	1961      	adds	r1, r4, r5
 800d660:	42a3      	cmp	r3, r4
 800d662:	6025      	str	r5, [r4, #0]
 800d664:	bf18      	it	ne
 800d666:	6059      	strne	r1, [r3, #4]
 800d668:	6863      	ldr	r3, [r4, #4]
 800d66a:	bf08      	it	eq
 800d66c:	f8c8 1000 	streq.w	r1, [r8]
 800d670:	5162      	str	r2, [r4, r5]
 800d672:	604b      	str	r3, [r1, #4]
 800d674:	4630      	mov	r0, r6
 800d676:	f000 f82f 	bl	800d6d8 <__malloc_unlock>
 800d67a:	f104 000b 	add.w	r0, r4, #11
 800d67e:	1d23      	adds	r3, r4, #4
 800d680:	f020 0007 	bic.w	r0, r0, #7
 800d684:	1ac2      	subs	r2, r0, r3
 800d686:	bf1c      	itt	ne
 800d688:	1a1b      	subne	r3, r3, r0
 800d68a:	50a3      	strne	r3, [r4, r2]
 800d68c:	e7af      	b.n	800d5ee <_malloc_r+0x22>
 800d68e:	6862      	ldr	r2, [r4, #4]
 800d690:	42a3      	cmp	r3, r4
 800d692:	bf0c      	ite	eq
 800d694:	f8c8 2000 	streq.w	r2, [r8]
 800d698:	605a      	strne	r2, [r3, #4]
 800d69a:	e7eb      	b.n	800d674 <_malloc_r+0xa8>
 800d69c:	4623      	mov	r3, r4
 800d69e:	6864      	ldr	r4, [r4, #4]
 800d6a0:	e7ae      	b.n	800d600 <_malloc_r+0x34>
 800d6a2:	463c      	mov	r4, r7
 800d6a4:	687f      	ldr	r7, [r7, #4]
 800d6a6:	e7b6      	b.n	800d616 <_malloc_r+0x4a>
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	42a3      	cmp	r3, r4
 800d6ae:	d1fb      	bne.n	800d6a8 <_malloc_r+0xdc>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	6053      	str	r3, [r2, #4]
 800d6b4:	e7de      	b.n	800d674 <_malloc_r+0xa8>
 800d6b6:	230c      	movs	r3, #12
 800d6b8:	6033      	str	r3, [r6, #0]
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f000 f80c 	bl	800d6d8 <__malloc_unlock>
 800d6c0:	e794      	b.n	800d5ec <_malloc_r+0x20>
 800d6c2:	6005      	str	r5, [r0, #0]
 800d6c4:	e7d6      	b.n	800d674 <_malloc_r+0xa8>
 800d6c6:	bf00      	nop
 800d6c8:	24004e88 	.word	0x24004e88

0800d6cc <__malloc_lock>:
 800d6cc:	4801      	ldr	r0, [pc, #4]	@ (800d6d4 <__malloc_lock+0x8>)
 800d6ce:	f7ff bef8 	b.w	800d4c2 <__retarget_lock_acquire_recursive>
 800d6d2:	bf00      	nop
 800d6d4:	24004e80 	.word	0x24004e80

0800d6d8 <__malloc_unlock>:
 800d6d8:	4801      	ldr	r0, [pc, #4]	@ (800d6e0 <__malloc_unlock+0x8>)
 800d6da:	f7ff bef3 	b.w	800d4c4 <__retarget_lock_release_recursive>
 800d6de:	bf00      	nop
 800d6e0:	24004e80 	.word	0x24004e80

0800d6e4 <__sfputc_r>:
 800d6e4:	6893      	ldr	r3, [r2, #8]
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	b410      	push	{r4}
 800d6ec:	6093      	str	r3, [r2, #8]
 800d6ee:	da08      	bge.n	800d702 <__sfputc_r+0x1e>
 800d6f0:	6994      	ldr	r4, [r2, #24]
 800d6f2:	42a3      	cmp	r3, r4
 800d6f4:	db01      	blt.n	800d6fa <__sfputc_r+0x16>
 800d6f6:	290a      	cmp	r1, #10
 800d6f8:	d103      	bne.n	800d702 <__sfputc_r+0x1e>
 800d6fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6fe:	f000 bbcf 	b.w	800dea0 <__swbuf_r>
 800d702:	6813      	ldr	r3, [r2, #0]
 800d704:	1c58      	adds	r0, r3, #1
 800d706:	6010      	str	r0, [r2, #0]
 800d708:	7019      	strb	r1, [r3, #0]
 800d70a:	4608      	mov	r0, r1
 800d70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <__sfputs_r>:
 800d712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d714:	4606      	mov	r6, r0
 800d716:	460f      	mov	r7, r1
 800d718:	4614      	mov	r4, r2
 800d71a:	18d5      	adds	r5, r2, r3
 800d71c:	42ac      	cmp	r4, r5
 800d71e:	d101      	bne.n	800d724 <__sfputs_r+0x12>
 800d720:	2000      	movs	r0, #0
 800d722:	e007      	b.n	800d734 <__sfputs_r+0x22>
 800d724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d728:	463a      	mov	r2, r7
 800d72a:	4630      	mov	r0, r6
 800d72c:	f7ff ffda 	bl	800d6e4 <__sfputc_r>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d1f3      	bne.n	800d71c <__sfputs_r+0xa>
 800d734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d738 <_vfiprintf_r>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	460d      	mov	r5, r1
 800d73e:	b09d      	sub	sp, #116	@ 0x74
 800d740:	4614      	mov	r4, r2
 800d742:	4698      	mov	r8, r3
 800d744:	4606      	mov	r6, r0
 800d746:	b118      	cbz	r0, 800d750 <_vfiprintf_r+0x18>
 800d748:	6a03      	ldr	r3, [r0, #32]
 800d74a:	b90b      	cbnz	r3, 800d750 <_vfiprintf_r+0x18>
 800d74c:	f7ff fd00 	bl	800d150 <__sinit>
 800d750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d752:	07d9      	lsls	r1, r3, #31
 800d754:	d405      	bmi.n	800d762 <_vfiprintf_r+0x2a>
 800d756:	89ab      	ldrh	r3, [r5, #12]
 800d758:	059a      	lsls	r2, r3, #22
 800d75a:	d402      	bmi.n	800d762 <_vfiprintf_r+0x2a>
 800d75c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d75e:	f7ff feb0 	bl	800d4c2 <__retarget_lock_acquire_recursive>
 800d762:	89ab      	ldrh	r3, [r5, #12]
 800d764:	071b      	lsls	r3, r3, #28
 800d766:	d501      	bpl.n	800d76c <_vfiprintf_r+0x34>
 800d768:	692b      	ldr	r3, [r5, #16]
 800d76a:	b99b      	cbnz	r3, 800d794 <_vfiprintf_r+0x5c>
 800d76c:	4629      	mov	r1, r5
 800d76e:	4630      	mov	r0, r6
 800d770:	f000 fbd4 	bl	800df1c <__swsetup_r>
 800d774:	b170      	cbz	r0, 800d794 <_vfiprintf_r+0x5c>
 800d776:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d778:	07dc      	lsls	r4, r3, #31
 800d77a:	d504      	bpl.n	800d786 <_vfiprintf_r+0x4e>
 800d77c:	f04f 30ff 	mov.w	r0, #4294967295
 800d780:	b01d      	add	sp, #116	@ 0x74
 800d782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d786:	89ab      	ldrh	r3, [r5, #12]
 800d788:	0598      	lsls	r0, r3, #22
 800d78a:	d4f7      	bmi.n	800d77c <_vfiprintf_r+0x44>
 800d78c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d78e:	f7ff fe99 	bl	800d4c4 <__retarget_lock_release_recursive>
 800d792:	e7f3      	b.n	800d77c <_vfiprintf_r+0x44>
 800d794:	2300      	movs	r3, #0
 800d796:	9309      	str	r3, [sp, #36]	@ 0x24
 800d798:	2320      	movs	r3, #32
 800d79a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d79e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7a2:	2330      	movs	r3, #48	@ 0x30
 800d7a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d954 <_vfiprintf_r+0x21c>
 800d7a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7ac:	f04f 0901 	mov.w	r9, #1
 800d7b0:	4623      	mov	r3, r4
 800d7b2:	469a      	mov	sl, r3
 800d7b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7b8:	b10a      	cbz	r2, 800d7be <_vfiprintf_r+0x86>
 800d7ba:	2a25      	cmp	r2, #37	@ 0x25
 800d7bc:	d1f9      	bne.n	800d7b2 <_vfiprintf_r+0x7a>
 800d7be:	ebba 0b04 	subs.w	fp, sl, r4
 800d7c2:	d00b      	beq.n	800d7dc <_vfiprintf_r+0xa4>
 800d7c4:	465b      	mov	r3, fp
 800d7c6:	4622      	mov	r2, r4
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	f7ff ffa1 	bl	800d712 <__sfputs_r>
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	f000 80a7 	beq.w	800d924 <_vfiprintf_r+0x1ec>
 800d7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7d8:	445a      	add	r2, fp
 800d7da:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f000 809f 	beq.w	800d924 <_vfiprintf_r+0x1ec>
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7f0:	f10a 0a01 	add.w	sl, sl, #1
 800d7f4:	9304      	str	r3, [sp, #16]
 800d7f6:	9307      	str	r3, [sp, #28]
 800d7f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7fe:	4654      	mov	r4, sl
 800d800:	2205      	movs	r2, #5
 800d802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d806:	4853      	ldr	r0, [pc, #332]	@ (800d954 <_vfiprintf_r+0x21c>)
 800d808:	f7f2 fd6a 	bl	80002e0 <memchr>
 800d80c:	9a04      	ldr	r2, [sp, #16]
 800d80e:	b9d8      	cbnz	r0, 800d848 <_vfiprintf_r+0x110>
 800d810:	06d1      	lsls	r1, r2, #27
 800d812:	bf44      	itt	mi
 800d814:	2320      	movmi	r3, #32
 800d816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d81a:	0713      	lsls	r3, r2, #28
 800d81c:	bf44      	itt	mi
 800d81e:	232b      	movmi	r3, #43	@ 0x2b
 800d820:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d824:	f89a 3000 	ldrb.w	r3, [sl]
 800d828:	2b2a      	cmp	r3, #42	@ 0x2a
 800d82a:	d015      	beq.n	800d858 <_vfiprintf_r+0x120>
 800d82c:	9a07      	ldr	r2, [sp, #28]
 800d82e:	4654      	mov	r4, sl
 800d830:	2000      	movs	r0, #0
 800d832:	f04f 0c0a 	mov.w	ip, #10
 800d836:	4621      	mov	r1, r4
 800d838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d83c:	3b30      	subs	r3, #48	@ 0x30
 800d83e:	2b09      	cmp	r3, #9
 800d840:	d94b      	bls.n	800d8da <_vfiprintf_r+0x1a2>
 800d842:	b1b0      	cbz	r0, 800d872 <_vfiprintf_r+0x13a>
 800d844:	9207      	str	r2, [sp, #28]
 800d846:	e014      	b.n	800d872 <_vfiprintf_r+0x13a>
 800d848:	eba0 0308 	sub.w	r3, r0, r8
 800d84c:	fa09 f303 	lsl.w	r3, r9, r3
 800d850:	4313      	orrs	r3, r2
 800d852:	9304      	str	r3, [sp, #16]
 800d854:	46a2      	mov	sl, r4
 800d856:	e7d2      	b.n	800d7fe <_vfiprintf_r+0xc6>
 800d858:	9b03      	ldr	r3, [sp, #12]
 800d85a:	1d19      	adds	r1, r3, #4
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	9103      	str	r1, [sp, #12]
 800d860:	2b00      	cmp	r3, #0
 800d862:	bfbb      	ittet	lt
 800d864:	425b      	neglt	r3, r3
 800d866:	f042 0202 	orrlt.w	r2, r2, #2
 800d86a:	9307      	strge	r3, [sp, #28]
 800d86c:	9307      	strlt	r3, [sp, #28]
 800d86e:	bfb8      	it	lt
 800d870:	9204      	strlt	r2, [sp, #16]
 800d872:	7823      	ldrb	r3, [r4, #0]
 800d874:	2b2e      	cmp	r3, #46	@ 0x2e
 800d876:	d10a      	bne.n	800d88e <_vfiprintf_r+0x156>
 800d878:	7863      	ldrb	r3, [r4, #1]
 800d87a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d87c:	d132      	bne.n	800d8e4 <_vfiprintf_r+0x1ac>
 800d87e:	9b03      	ldr	r3, [sp, #12]
 800d880:	1d1a      	adds	r2, r3, #4
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	9203      	str	r2, [sp, #12]
 800d886:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d88a:	3402      	adds	r4, #2
 800d88c:	9305      	str	r3, [sp, #20]
 800d88e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d964 <_vfiprintf_r+0x22c>
 800d892:	7821      	ldrb	r1, [r4, #0]
 800d894:	2203      	movs	r2, #3
 800d896:	4650      	mov	r0, sl
 800d898:	f7f2 fd22 	bl	80002e0 <memchr>
 800d89c:	b138      	cbz	r0, 800d8ae <_vfiprintf_r+0x176>
 800d89e:	9b04      	ldr	r3, [sp, #16]
 800d8a0:	eba0 000a 	sub.w	r0, r0, sl
 800d8a4:	2240      	movs	r2, #64	@ 0x40
 800d8a6:	4082      	lsls	r2, r0
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	3401      	adds	r4, #1
 800d8ac:	9304      	str	r3, [sp, #16]
 800d8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8b2:	4829      	ldr	r0, [pc, #164]	@ (800d958 <_vfiprintf_r+0x220>)
 800d8b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8b8:	2206      	movs	r2, #6
 800d8ba:	f7f2 fd11 	bl	80002e0 <memchr>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d03f      	beq.n	800d942 <_vfiprintf_r+0x20a>
 800d8c2:	4b26      	ldr	r3, [pc, #152]	@ (800d95c <_vfiprintf_r+0x224>)
 800d8c4:	bb1b      	cbnz	r3, 800d90e <_vfiprintf_r+0x1d6>
 800d8c6:	9b03      	ldr	r3, [sp, #12]
 800d8c8:	3307      	adds	r3, #7
 800d8ca:	f023 0307 	bic.w	r3, r3, #7
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	9303      	str	r3, [sp, #12]
 800d8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8d4:	443b      	add	r3, r7
 800d8d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8d8:	e76a      	b.n	800d7b0 <_vfiprintf_r+0x78>
 800d8da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8de:	460c      	mov	r4, r1
 800d8e0:	2001      	movs	r0, #1
 800d8e2:	e7a8      	b.n	800d836 <_vfiprintf_r+0xfe>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	3401      	adds	r4, #1
 800d8e8:	9305      	str	r3, [sp, #20]
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	f04f 0c0a 	mov.w	ip, #10
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8f6:	3a30      	subs	r2, #48	@ 0x30
 800d8f8:	2a09      	cmp	r2, #9
 800d8fa:	d903      	bls.n	800d904 <_vfiprintf_r+0x1cc>
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d0c6      	beq.n	800d88e <_vfiprintf_r+0x156>
 800d900:	9105      	str	r1, [sp, #20]
 800d902:	e7c4      	b.n	800d88e <_vfiprintf_r+0x156>
 800d904:	fb0c 2101 	mla	r1, ip, r1, r2
 800d908:	4604      	mov	r4, r0
 800d90a:	2301      	movs	r3, #1
 800d90c:	e7f0      	b.n	800d8f0 <_vfiprintf_r+0x1b8>
 800d90e:	ab03      	add	r3, sp, #12
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	462a      	mov	r2, r5
 800d914:	4b12      	ldr	r3, [pc, #72]	@ (800d960 <_vfiprintf_r+0x228>)
 800d916:	a904      	add	r1, sp, #16
 800d918:	4630      	mov	r0, r6
 800d91a:	f3af 8000 	nop.w
 800d91e:	4607      	mov	r7, r0
 800d920:	1c78      	adds	r0, r7, #1
 800d922:	d1d6      	bne.n	800d8d2 <_vfiprintf_r+0x19a>
 800d924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d926:	07d9      	lsls	r1, r3, #31
 800d928:	d405      	bmi.n	800d936 <_vfiprintf_r+0x1fe>
 800d92a:	89ab      	ldrh	r3, [r5, #12]
 800d92c:	059a      	lsls	r2, r3, #22
 800d92e:	d402      	bmi.n	800d936 <_vfiprintf_r+0x1fe>
 800d930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d932:	f7ff fdc7 	bl	800d4c4 <__retarget_lock_release_recursive>
 800d936:	89ab      	ldrh	r3, [r5, #12]
 800d938:	065b      	lsls	r3, r3, #25
 800d93a:	f53f af1f 	bmi.w	800d77c <_vfiprintf_r+0x44>
 800d93e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d940:	e71e      	b.n	800d780 <_vfiprintf_r+0x48>
 800d942:	ab03      	add	r3, sp, #12
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	462a      	mov	r2, r5
 800d948:	4b05      	ldr	r3, [pc, #20]	@ (800d960 <_vfiprintf_r+0x228>)
 800d94a:	a904      	add	r1, sp, #16
 800d94c:	4630      	mov	r0, r6
 800d94e:	f000 f879 	bl	800da44 <_printf_i>
 800d952:	e7e4      	b.n	800d91e <_vfiprintf_r+0x1e6>
 800d954:	0800e170 	.word	0x0800e170
 800d958:	0800e17a 	.word	0x0800e17a
 800d95c:	00000000 	.word	0x00000000
 800d960:	0800d713 	.word	0x0800d713
 800d964:	0800e176 	.word	0x0800e176

0800d968 <_printf_common>:
 800d968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d96c:	4616      	mov	r6, r2
 800d96e:	4698      	mov	r8, r3
 800d970:	688a      	ldr	r2, [r1, #8]
 800d972:	690b      	ldr	r3, [r1, #16]
 800d974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d978:	4293      	cmp	r3, r2
 800d97a:	bfb8      	it	lt
 800d97c:	4613      	movlt	r3, r2
 800d97e:	6033      	str	r3, [r6, #0]
 800d980:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d984:	4607      	mov	r7, r0
 800d986:	460c      	mov	r4, r1
 800d988:	b10a      	cbz	r2, 800d98e <_printf_common+0x26>
 800d98a:	3301      	adds	r3, #1
 800d98c:	6033      	str	r3, [r6, #0]
 800d98e:	6823      	ldr	r3, [r4, #0]
 800d990:	0699      	lsls	r1, r3, #26
 800d992:	bf42      	ittt	mi
 800d994:	6833      	ldrmi	r3, [r6, #0]
 800d996:	3302      	addmi	r3, #2
 800d998:	6033      	strmi	r3, [r6, #0]
 800d99a:	6825      	ldr	r5, [r4, #0]
 800d99c:	f015 0506 	ands.w	r5, r5, #6
 800d9a0:	d106      	bne.n	800d9b0 <_printf_common+0x48>
 800d9a2:	f104 0a19 	add.w	sl, r4, #25
 800d9a6:	68e3      	ldr	r3, [r4, #12]
 800d9a8:	6832      	ldr	r2, [r6, #0]
 800d9aa:	1a9b      	subs	r3, r3, r2
 800d9ac:	42ab      	cmp	r3, r5
 800d9ae:	dc26      	bgt.n	800d9fe <_printf_common+0x96>
 800d9b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9b4:	6822      	ldr	r2, [r4, #0]
 800d9b6:	3b00      	subs	r3, #0
 800d9b8:	bf18      	it	ne
 800d9ba:	2301      	movne	r3, #1
 800d9bc:	0692      	lsls	r2, r2, #26
 800d9be:	d42b      	bmi.n	800da18 <_printf_common+0xb0>
 800d9c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9c4:	4641      	mov	r1, r8
 800d9c6:	4638      	mov	r0, r7
 800d9c8:	47c8      	blx	r9
 800d9ca:	3001      	adds	r0, #1
 800d9cc:	d01e      	beq.n	800da0c <_printf_common+0xa4>
 800d9ce:	6823      	ldr	r3, [r4, #0]
 800d9d0:	6922      	ldr	r2, [r4, #16]
 800d9d2:	f003 0306 	and.w	r3, r3, #6
 800d9d6:	2b04      	cmp	r3, #4
 800d9d8:	bf02      	ittt	eq
 800d9da:	68e5      	ldreq	r5, [r4, #12]
 800d9dc:	6833      	ldreq	r3, [r6, #0]
 800d9de:	1aed      	subeq	r5, r5, r3
 800d9e0:	68a3      	ldr	r3, [r4, #8]
 800d9e2:	bf0c      	ite	eq
 800d9e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9e8:	2500      	movne	r5, #0
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	bfc4      	itt	gt
 800d9ee:	1a9b      	subgt	r3, r3, r2
 800d9f0:	18ed      	addgt	r5, r5, r3
 800d9f2:	2600      	movs	r6, #0
 800d9f4:	341a      	adds	r4, #26
 800d9f6:	42b5      	cmp	r5, r6
 800d9f8:	d11a      	bne.n	800da30 <_printf_common+0xc8>
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	e008      	b.n	800da10 <_printf_common+0xa8>
 800d9fe:	2301      	movs	r3, #1
 800da00:	4652      	mov	r2, sl
 800da02:	4641      	mov	r1, r8
 800da04:	4638      	mov	r0, r7
 800da06:	47c8      	blx	r9
 800da08:	3001      	adds	r0, #1
 800da0a:	d103      	bne.n	800da14 <_printf_common+0xac>
 800da0c:	f04f 30ff 	mov.w	r0, #4294967295
 800da10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da14:	3501      	adds	r5, #1
 800da16:	e7c6      	b.n	800d9a6 <_printf_common+0x3e>
 800da18:	18e1      	adds	r1, r4, r3
 800da1a:	1c5a      	adds	r2, r3, #1
 800da1c:	2030      	movs	r0, #48	@ 0x30
 800da1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da22:	4422      	add	r2, r4
 800da24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da2c:	3302      	adds	r3, #2
 800da2e:	e7c7      	b.n	800d9c0 <_printf_common+0x58>
 800da30:	2301      	movs	r3, #1
 800da32:	4622      	mov	r2, r4
 800da34:	4641      	mov	r1, r8
 800da36:	4638      	mov	r0, r7
 800da38:	47c8      	blx	r9
 800da3a:	3001      	adds	r0, #1
 800da3c:	d0e6      	beq.n	800da0c <_printf_common+0xa4>
 800da3e:	3601      	adds	r6, #1
 800da40:	e7d9      	b.n	800d9f6 <_printf_common+0x8e>
	...

0800da44 <_printf_i>:
 800da44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da48:	7e0f      	ldrb	r7, [r1, #24]
 800da4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da4c:	2f78      	cmp	r7, #120	@ 0x78
 800da4e:	4691      	mov	r9, r2
 800da50:	4680      	mov	r8, r0
 800da52:	460c      	mov	r4, r1
 800da54:	469a      	mov	sl, r3
 800da56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da5a:	d807      	bhi.n	800da6c <_printf_i+0x28>
 800da5c:	2f62      	cmp	r7, #98	@ 0x62
 800da5e:	d80a      	bhi.n	800da76 <_printf_i+0x32>
 800da60:	2f00      	cmp	r7, #0
 800da62:	f000 80d2 	beq.w	800dc0a <_printf_i+0x1c6>
 800da66:	2f58      	cmp	r7, #88	@ 0x58
 800da68:	f000 80b9 	beq.w	800dbde <_printf_i+0x19a>
 800da6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da74:	e03a      	b.n	800daec <_printf_i+0xa8>
 800da76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da7a:	2b15      	cmp	r3, #21
 800da7c:	d8f6      	bhi.n	800da6c <_printf_i+0x28>
 800da7e:	a101      	add	r1, pc, #4	@ (adr r1, 800da84 <_printf_i+0x40>)
 800da80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da84:	0800dadd 	.word	0x0800dadd
 800da88:	0800daf1 	.word	0x0800daf1
 800da8c:	0800da6d 	.word	0x0800da6d
 800da90:	0800da6d 	.word	0x0800da6d
 800da94:	0800da6d 	.word	0x0800da6d
 800da98:	0800da6d 	.word	0x0800da6d
 800da9c:	0800daf1 	.word	0x0800daf1
 800daa0:	0800da6d 	.word	0x0800da6d
 800daa4:	0800da6d 	.word	0x0800da6d
 800daa8:	0800da6d 	.word	0x0800da6d
 800daac:	0800da6d 	.word	0x0800da6d
 800dab0:	0800dbf1 	.word	0x0800dbf1
 800dab4:	0800db1b 	.word	0x0800db1b
 800dab8:	0800dbab 	.word	0x0800dbab
 800dabc:	0800da6d 	.word	0x0800da6d
 800dac0:	0800da6d 	.word	0x0800da6d
 800dac4:	0800dc13 	.word	0x0800dc13
 800dac8:	0800da6d 	.word	0x0800da6d
 800dacc:	0800db1b 	.word	0x0800db1b
 800dad0:	0800da6d 	.word	0x0800da6d
 800dad4:	0800da6d 	.word	0x0800da6d
 800dad8:	0800dbb3 	.word	0x0800dbb3
 800dadc:	6833      	ldr	r3, [r6, #0]
 800dade:	1d1a      	adds	r2, r3, #4
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	6032      	str	r2, [r6, #0]
 800dae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dae8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800daec:	2301      	movs	r3, #1
 800daee:	e09d      	b.n	800dc2c <_printf_i+0x1e8>
 800daf0:	6833      	ldr	r3, [r6, #0]
 800daf2:	6820      	ldr	r0, [r4, #0]
 800daf4:	1d19      	adds	r1, r3, #4
 800daf6:	6031      	str	r1, [r6, #0]
 800daf8:	0606      	lsls	r6, r0, #24
 800dafa:	d501      	bpl.n	800db00 <_printf_i+0xbc>
 800dafc:	681d      	ldr	r5, [r3, #0]
 800dafe:	e003      	b.n	800db08 <_printf_i+0xc4>
 800db00:	0645      	lsls	r5, r0, #25
 800db02:	d5fb      	bpl.n	800dafc <_printf_i+0xb8>
 800db04:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db08:	2d00      	cmp	r5, #0
 800db0a:	da03      	bge.n	800db14 <_printf_i+0xd0>
 800db0c:	232d      	movs	r3, #45	@ 0x2d
 800db0e:	426d      	negs	r5, r5
 800db10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db14:	4859      	ldr	r0, [pc, #356]	@ (800dc7c <_printf_i+0x238>)
 800db16:	230a      	movs	r3, #10
 800db18:	e011      	b.n	800db3e <_printf_i+0xfa>
 800db1a:	6821      	ldr	r1, [r4, #0]
 800db1c:	6833      	ldr	r3, [r6, #0]
 800db1e:	0608      	lsls	r0, r1, #24
 800db20:	f853 5b04 	ldr.w	r5, [r3], #4
 800db24:	d402      	bmi.n	800db2c <_printf_i+0xe8>
 800db26:	0649      	lsls	r1, r1, #25
 800db28:	bf48      	it	mi
 800db2a:	b2ad      	uxthmi	r5, r5
 800db2c:	2f6f      	cmp	r7, #111	@ 0x6f
 800db2e:	4853      	ldr	r0, [pc, #332]	@ (800dc7c <_printf_i+0x238>)
 800db30:	6033      	str	r3, [r6, #0]
 800db32:	bf14      	ite	ne
 800db34:	230a      	movne	r3, #10
 800db36:	2308      	moveq	r3, #8
 800db38:	2100      	movs	r1, #0
 800db3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db3e:	6866      	ldr	r6, [r4, #4]
 800db40:	60a6      	str	r6, [r4, #8]
 800db42:	2e00      	cmp	r6, #0
 800db44:	bfa2      	ittt	ge
 800db46:	6821      	ldrge	r1, [r4, #0]
 800db48:	f021 0104 	bicge.w	r1, r1, #4
 800db4c:	6021      	strge	r1, [r4, #0]
 800db4e:	b90d      	cbnz	r5, 800db54 <_printf_i+0x110>
 800db50:	2e00      	cmp	r6, #0
 800db52:	d04b      	beq.n	800dbec <_printf_i+0x1a8>
 800db54:	4616      	mov	r6, r2
 800db56:	fbb5 f1f3 	udiv	r1, r5, r3
 800db5a:	fb03 5711 	mls	r7, r3, r1, r5
 800db5e:	5dc7      	ldrb	r7, [r0, r7]
 800db60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db64:	462f      	mov	r7, r5
 800db66:	42bb      	cmp	r3, r7
 800db68:	460d      	mov	r5, r1
 800db6a:	d9f4      	bls.n	800db56 <_printf_i+0x112>
 800db6c:	2b08      	cmp	r3, #8
 800db6e:	d10b      	bne.n	800db88 <_printf_i+0x144>
 800db70:	6823      	ldr	r3, [r4, #0]
 800db72:	07df      	lsls	r7, r3, #31
 800db74:	d508      	bpl.n	800db88 <_printf_i+0x144>
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	6861      	ldr	r1, [r4, #4]
 800db7a:	4299      	cmp	r1, r3
 800db7c:	bfde      	ittt	le
 800db7e:	2330      	movle	r3, #48	@ 0x30
 800db80:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db84:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db88:	1b92      	subs	r2, r2, r6
 800db8a:	6122      	str	r2, [r4, #16]
 800db8c:	f8cd a000 	str.w	sl, [sp]
 800db90:	464b      	mov	r3, r9
 800db92:	aa03      	add	r2, sp, #12
 800db94:	4621      	mov	r1, r4
 800db96:	4640      	mov	r0, r8
 800db98:	f7ff fee6 	bl	800d968 <_printf_common>
 800db9c:	3001      	adds	r0, #1
 800db9e:	d14a      	bne.n	800dc36 <_printf_i+0x1f2>
 800dba0:	f04f 30ff 	mov.w	r0, #4294967295
 800dba4:	b004      	add	sp, #16
 800dba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbaa:	6823      	ldr	r3, [r4, #0]
 800dbac:	f043 0320 	orr.w	r3, r3, #32
 800dbb0:	6023      	str	r3, [r4, #0]
 800dbb2:	4833      	ldr	r0, [pc, #204]	@ (800dc80 <_printf_i+0x23c>)
 800dbb4:	2778      	movs	r7, #120	@ 0x78
 800dbb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbba:	6823      	ldr	r3, [r4, #0]
 800dbbc:	6831      	ldr	r1, [r6, #0]
 800dbbe:	061f      	lsls	r7, r3, #24
 800dbc0:	f851 5b04 	ldr.w	r5, [r1], #4
 800dbc4:	d402      	bmi.n	800dbcc <_printf_i+0x188>
 800dbc6:	065f      	lsls	r7, r3, #25
 800dbc8:	bf48      	it	mi
 800dbca:	b2ad      	uxthmi	r5, r5
 800dbcc:	6031      	str	r1, [r6, #0]
 800dbce:	07d9      	lsls	r1, r3, #31
 800dbd0:	bf44      	itt	mi
 800dbd2:	f043 0320 	orrmi.w	r3, r3, #32
 800dbd6:	6023      	strmi	r3, [r4, #0]
 800dbd8:	b11d      	cbz	r5, 800dbe2 <_printf_i+0x19e>
 800dbda:	2310      	movs	r3, #16
 800dbdc:	e7ac      	b.n	800db38 <_printf_i+0xf4>
 800dbde:	4827      	ldr	r0, [pc, #156]	@ (800dc7c <_printf_i+0x238>)
 800dbe0:	e7e9      	b.n	800dbb6 <_printf_i+0x172>
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	f023 0320 	bic.w	r3, r3, #32
 800dbe8:	6023      	str	r3, [r4, #0]
 800dbea:	e7f6      	b.n	800dbda <_printf_i+0x196>
 800dbec:	4616      	mov	r6, r2
 800dbee:	e7bd      	b.n	800db6c <_printf_i+0x128>
 800dbf0:	6833      	ldr	r3, [r6, #0]
 800dbf2:	6825      	ldr	r5, [r4, #0]
 800dbf4:	6961      	ldr	r1, [r4, #20]
 800dbf6:	1d18      	adds	r0, r3, #4
 800dbf8:	6030      	str	r0, [r6, #0]
 800dbfa:	062e      	lsls	r6, r5, #24
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	d501      	bpl.n	800dc04 <_printf_i+0x1c0>
 800dc00:	6019      	str	r1, [r3, #0]
 800dc02:	e002      	b.n	800dc0a <_printf_i+0x1c6>
 800dc04:	0668      	lsls	r0, r5, #25
 800dc06:	d5fb      	bpl.n	800dc00 <_printf_i+0x1bc>
 800dc08:	8019      	strh	r1, [r3, #0]
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	6123      	str	r3, [r4, #16]
 800dc0e:	4616      	mov	r6, r2
 800dc10:	e7bc      	b.n	800db8c <_printf_i+0x148>
 800dc12:	6833      	ldr	r3, [r6, #0]
 800dc14:	1d1a      	adds	r2, r3, #4
 800dc16:	6032      	str	r2, [r6, #0]
 800dc18:	681e      	ldr	r6, [r3, #0]
 800dc1a:	6862      	ldr	r2, [r4, #4]
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	4630      	mov	r0, r6
 800dc20:	f7f2 fb5e 	bl	80002e0 <memchr>
 800dc24:	b108      	cbz	r0, 800dc2a <_printf_i+0x1e6>
 800dc26:	1b80      	subs	r0, r0, r6
 800dc28:	6060      	str	r0, [r4, #4]
 800dc2a:	6863      	ldr	r3, [r4, #4]
 800dc2c:	6123      	str	r3, [r4, #16]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc34:	e7aa      	b.n	800db8c <_printf_i+0x148>
 800dc36:	6923      	ldr	r3, [r4, #16]
 800dc38:	4632      	mov	r2, r6
 800dc3a:	4649      	mov	r1, r9
 800dc3c:	4640      	mov	r0, r8
 800dc3e:	47d0      	blx	sl
 800dc40:	3001      	adds	r0, #1
 800dc42:	d0ad      	beq.n	800dba0 <_printf_i+0x15c>
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	079b      	lsls	r3, r3, #30
 800dc48:	d413      	bmi.n	800dc72 <_printf_i+0x22e>
 800dc4a:	68e0      	ldr	r0, [r4, #12]
 800dc4c:	9b03      	ldr	r3, [sp, #12]
 800dc4e:	4298      	cmp	r0, r3
 800dc50:	bfb8      	it	lt
 800dc52:	4618      	movlt	r0, r3
 800dc54:	e7a6      	b.n	800dba4 <_printf_i+0x160>
 800dc56:	2301      	movs	r3, #1
 800dc58:	4632      	mov	r2, r6
 800dc5a:	4649      	mov	r1, r9
 800dc5c:	4640      	mov	r0, r8
 800dc5e:	47d0      	blx	sl
 800dc60:	3001      	adds	r0, #1
 800dc62:	d09d      	beq.n	800dba0 <_printf_i+0x15c>
 800dc64:	3501      	adds	r5, #1
 800dc66:	68e3      	ldr	r3, [r4, #12]
 800dc68:	9903      	ldr	r1, [sp, #12]
 800dc6a:	1a5b      	subs	r3, r3, r1
 800dc6c:	42ab      	cmp	r3, r5
 800dc6e:	dcf2      	bgt.n	800dc56 <_printf_i+0x212>
 800dc70:	e7eb      	b.n	800dc4a <_printf_i+0x206>
 800dc72:	2500      	movs	r5, #0
 800dc74:	f104 0619 	add.w	r6, r4, #25
 800dc78:	e7f5      	b.n	800dc66 <_printf_i+0x222>
 800dc7a:	bf00      	nop
 800dc7c:	0800e181 	.word	0x0800e181
 800dc80:	0800e192 	.word	0x0800e192

0800dc84 <__sflush_r>:
 800dc84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc8c:	0716      	lsls	r6, r2, #28
 800dc8e:	4605      	mov	r5, r0
 800dc90:	460c      	mov	r4, r1
 800dc92:	d454      	bmi.n	800dd3e <__sflush_r+0xba>
 800dc94:	684b      	ldr	r3, [r1, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	dc02      	bgt.n	800dca0 <__sflush_r+0x1c>
 800dc9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	dd48      	ble.n	800dd32 <__sflush_r+0xae>
 800dca0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dca2:	2e00      	cmp	r6, #0
 800dca4:	d045      	beq.n	800dd32 <__sflush_r+0xae>
 800dca6:	2300      	movs	r3, #0
 800dca8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dcac:	682f      	ldr	r7, [r5, #0]
 800dcae:	6a21      	ldr	r1, [r4, #32]
 800dcb0:	602b      	str	r3, [r5, #0]
 800dcb2:	d030      	beq.n	800dd16 <__sflush_r+0x92>
 800dcb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dcb6:	89a3      	ldrh	r3, [r4, #12]
 800dcb8:	0759      	lsls	r1, r3, #29
 800dcba:	d505      	bpl.n	800dcc8 <__sflush_r+0x44>
 800dcbc:	6863      	ldr	r3, [r4, #4]
 800dcbe:	1ad2      	subs	r2, r2, r3
 800dcc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dcc2:	b10b      	cbz	r3, 800dcc8 <__sflush_r+0x44>
 800dcc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dcc6:	1ad2      	subs	r2, r2, r3
 800dcc8:	2300      	movs	r3, #0
 800dcca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dccc:	6a21      	ldr	r1, [r4, #32]
 800dcce:	4628      	mov	r0, r5
 800dcd0:	47b0      	blx	r6
 800dcd2:	1c43      	adds	r3, r0, #1
 800dcd4:	89a3      	ldrh	r3, [r4, #12]
 800dcd6:	d106      	bne.n	800dce6 <__sflush_r+0x62>
 800dcd8:	6829      	ldr	r1, [r5, #0]
 800dcda:	291d      	cmp	r1, #29
 800dcdc:	d82b      	bhi.n	800dd36 <__sflush_r+0xb2>
 800dcde:	4a2a      	ldr	r2, [pc, #168]	@ (800dd88 <__sflush_r+0x104>)
 800dce0:	410a      	asrs	r2, r1
 800dce2:	07d6      	lsls	r6, r2, #31
 800dce4:	d427      	bmi.n	800dd36 <__sflush_r+0xb2>
 800dce6:	2200      	movs	r2, #0
 800dce8:	6062      	str	r2, [r4, #4]
 800dcea:	04d9      	lsls	r1, r3, #19
 800dcec:	6922      	ldr	r2, [r4, #16]
 800dcee:	6022      	str	r2, [r4, #0]
 800dcf0:	d504      	bpl.n	800dcfc <__sflush_r+0x78>
 800dcf2:	1c42      	adds	r2, r0, #1
 800dcf4:	d101      	bne.n	800dcfa <__sflush_r+0x76>
 800dcf6:	682b      	ldr	r3, [r5, #0]
 800dcf8:	b903      	cbnz	r3, 800dcfc <__sflush_r+0x78>
 800dcfa:	6560      	str	r0, [r4, #84]	@ 0x54
 800dcfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcfe:	602f      	str	r7, [r5, #0]
 800dd00:	b1b9      	cbz	r1, 800dd32 <__sflush_r+0xae>
 800dd02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd06:	4299      	cmp	r1, r3
 800dd08:	d002      	beq.n	800dd10 <__sflush_r+0x8c>
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	f7ff fbea 	bl	800d4e4 <_free_r>
 800dd10:	2300      	movs	r3, #0
 800dd12:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd14:	e00d      	b.n	800dd32 <__sflush_r+0xae>
 800dd16:	2301      	movs	r3, #1
 800dd18:	4628      	mov	r0, r5
 800dd1a:	47b0      	blx	r6
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	1c50      	adds	r0, r2, #1
 800dd20:	d1c9      	bne.n	800dcb6 <__sflush_r+0x32>
 800dd22:	682b      	ldr	r3, [r5, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d0c6      	beq.n	800dcb6 <__sflush_r+0x32>
 800dd28:	2b1d      	cmp	r3, #29
 800dd2a:	d001      	beq.n	800dd30 <__sflush_r+0xac>
 800dd2c:	2b16      	cmp	r3, #22
 800dd2e:	d11e      	bne.n	800dd6e <__sflush_r+0xea>
 800dd30:	602f      	str	r7, [r5, #0]
 800dd32:	2000      	movs	r0, #0
 800dd34:	e022      	b.n	800dd7c <__sflush_r+0xf8>
 800dd36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd3a:	b21b      	sxth	r3, r3
 800dd3c:	e01b      	b.n	800dd76 <__sflush_r+0xf2>
 800dd3e:	690f      	ldr	r7, [r1, #16]
 800dd40:	2f00      	cmp	r7, #0
 800dd42:	d0f6      	beq.n	800dd32 <__sflush_r+0xae>
 800dd44:	0793      	lsls	r3, r2, #30
 800dd46:	680e      	ldr	r6, [r1, #0]
 800dd48:	bf08      	it	eq
 800dd4a:	694b      	ldreq	r3, [r1, #20]
 800dd4c:	600f      	str	r7, [r1, #0]
 800dd4e:	bf18      	it	ne
 800dd50:	2300      	movne	r3, #0
 800dd52:	eba6 0807 	sub.w	r8, r6, r7
 800dd56:	608b      	str	r3, [r1, #8]
 800dd58:	f1b8 0f00 	cmp.w	r8, #0
 800dd5c:	dde9      	ble.n	800dd32 <__sflush_r+0xae>
 800dd5e:	6a21      	ldr	r1, [r4, #32]
 800dd60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dd62:	4643      	mov	r3, r8
 800dd64:	463a      	mov	r2, r7
 800dd66:	4628      	mov	r0, r5
 800dd68:	47b0      	blx	r6
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	dc08      	bgt.n	800dd80 <__sflush_r+0xfc>
 800dd6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd76:	81a3      	strh	r3, [r4, #12]
 800dd78:	f04f 30ff 	mov.w	r0, #4294967295
 800dd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd80:	4407      	add	r7, r0
 800dd82:	eba8 0800 	sub.w	r8, r8, r0
 800dd86:	e7e7      	b.n	800dd58 <__sflush_r+0xd4>
 800dd88:	dfbffffe 	.word	0xdfbffffe

0800dd8c <_fflush_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	690b      	ldr	r3, [r1, #16]
 800dd90:	4605      	mov	r5, r0
 800dd92:	460c      	mov	r4, r1
 800dd94:	b913      	cbnz	r3, 800dd9c <_fflush_r+0x10>
 800dd96:	2500      	movs	r5, #0
 800dd98:	4628      	mov	r0, r5
 800dd9a:	bd38      	pop	{r3, r4, r5, pc}
 800dd9c:	b118      	cbz	r0, 800dda6 <_fflush_r+0x1a>
 800dd9e:	6a03      	ldr	r3, [r0, #32]
 800dda0:	b90b      	cbnz	r3, 800dda6 <_fflush_r+0x1a>
 800dda2:	f7ff f9d5 	bl	800d150 <__sinit>
 800dda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d0f3      	beq.n	800dd96 <_fflush_r+0xa>
 800ddae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ddb0:	07d0      	lsls	r0, r2, #31
 800ddb2:	d404      	bmi.n	800ddbe <_fflush_r+0x32>
 800ddb4:	0599      	lsls	r1, r3, #22
 800ddb6:	d402      	bmi.n	800ddbe <_fflush_r+0x32>
 800ddb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddba:	f7ff fb82 	bl	800d4c2 <__retarget_lock_acquire_recursive>
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	f7ff ff5f 	bl	800dc84 <__sflush_r>
 800ddc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddc8:	07da      	lsls	r2, r3, #31
 800ddca:	4605      	mov	r5, r0
 800ddcc:	d4e4      	bmi.n	800dd98 <_fflush_r+0xc>
 800ddce:	89a3      	ldrh	r3, [r4, #12]
 800ddd0:	059b      	lsls	r3, r3, #22
 800ddd2:	d4e1      	bmi.n	800dd98 <_fflush_r+0xc>
 800ddd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddd6:	f7ff fb75 	bl	800d4c4 <__retarget_lock_release_recursive>
 800ddda:	e7dd      	b.n	800dd98 <_fflush_r+0xc>

0800dddc <__swhatbuf_r>:
 800dddc:	b570      	push	{r4, r5, r6, lr}
 800ddde:	460c      	mov	r4, r1
 800dde0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dde4:	2900      	cmp	r1, #0
 800dde6:	b096      	sub	sp, #88	@ 0x58
 800dde8:	4615      	mov	r5, r2
 800ddea:	461e      	mov	r6, r3
 800ddec:	da0d      	bge.n	800de0a <__swhatbuf_r+0x2e>
 800ddee:	89a3      	ldrh	r3, [r4, #12]
 800ddf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ddf4:	f04f 0100 	mov.w	r1, #0
 800ddf8:	bf14      	ite	ne
 800ddfa:	2340      	movne	r3, #64	@ 0x40
 800ddfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800de00:	2000      	movs	r0, #0
 800de02:	6031      	str	r1, [r6, #0]
 800de04:	602b      	str	r3, [r5, #0]
 800de06:	b016      	add	sp, #88	@ 0x58
 800de08:	bd70      	pop	{r4, r5, r6, pc}
 800de0a:	466a      	mov	r2, sp
 800de0c:	f000 f8dc 	bl	800dfc8 <_fstat_r>
 800de10:	2800      	cmp	r0, #0
 800de12:	dbec      	blt.n	800ddee <__swhatbuf_r+0x12>
 800de14:	9901      	ldr	r1, [sp, #4]
 800de16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de1e:	4259      	negs	r1, r3
 800de20:	4159      	adcs	r1, r3
 800de22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de26:	e7eb      	b.n	800de00 <__swhatbuf_r+0x24>

0800de28 <__smakebuf_r>:
 800de28:	898b      	ldrh	r3, [r1, #12]
 800de2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de2c:	079d      	lsls	r5, r3, #30
 800de2e:	4606      	mov	r6, r0
 800de30:	460c      	mov	r4, r1
 800de32:	d507      	bpl.n	800de44 <__smakebuf_r+0x1c>
 800de34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de38:	6023      	str	r3, [r4, #0]
 800de3a:	6123      	str	r3, [r4, #16]
 800de3c:	2301      	movs	r3, #1
 800de3e:	6163      	str	r3, [r4, #20]
 800de40:	b003      	add	sp, #12
 800de42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de44:	ab01      	add	r3, sp, #4
 800de46:	466a      	mov	r2, sp
 800de48:	f7ff ffc8 	bl	800dddc <__swhatbuf_r>
 800de4c:	9f00      	ldr	r7, [sp, #0]
 800de4e:	4605      	mov	r5, r0
 800de50:	4639      	mov	r1, r7
 800de52:	4630      	mov	r0, r6
 800de54:	f7ff fbba 	bl	800d5cc <_malloc_r>
 800de58:	b948      	cbnz	r0, 800de6e <__smakebuf_r+0x46>
 800de5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de5e:	059a      	lsls	r2, r3, #22
 800de60:	d4ee      	bmi.n	800de40 <__smakebuf_r+0x18>
 800de62:	f023 0303 	bic.w	r3, r3, #3
 800de66:	f043 0302 	orr.w	r3, r3, #2
 800de6a:	81a3      	strh	r3, [r4, #12]
 800de6c:	e7e2      	b.n	800de34 <__smakebuf_r+0xc>
 800de6e:	89a3      	ldrh	r3, [r4, #12]
 800de70:	6020      	str	r0, [r4, #0]
 800de72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de76:	81a3      	strh	r3, [r4, #12]
 800de78:	9b01      	ldr	r3, [sp, #4]
 800de7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de7e:	b15b      	cbz	r3, 800de98 <__smakebuf_r+0x70>
 800de80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de84:	4630      	mov	r0, r6
 800de86:	f000 f8b1 	bl	800dfec <_isatty_r>
 800de8a:	b128      	cbz	r0, 800de98 <__smakebuf_r+0x70>
 800de8c:	89a3      	ldrh	r3, [r4, #12]
 800de8e:	f023 0303 	bic.w	r3, r3, #3
 800de92:	f043 0301 	orr.w	r3, r3, #1
 800de96:	81a3      	strh	r3, [r4, #12]
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	431d      	orrs	r5, r3
 800de9c:	81a5      	strh	r5, [r4, #12]
 800de9e:	e7cf      	b.n	800de40 <__smakebuf_r+0x18>

0800dea0 <__swbuf_r>:
 800dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea2:	460e      	mov	r6, r1
 800dea4:	4614      	mov	r4, r2
 800dea6:	4605      	mov	r5, r0
 800dea8:	b118      	cbz	r0, 800deb2 <__swbuf_r+0x12>
 800deaa:	6a03      	ldr	r3, [r0, #32]
 800deac:	b90b      	cbnz	r3, 800deb2 <__swbuf_r+0x12>
 800deae:	f7ff f94f 	bl	800d150 <__sinit>
 800deb2:	69a3      	ldr	r3, [r4, #24]
 800deb4:	60a3      	str	r3, [r4, #8]
 800deb6:	89a3      	ldrh	r3, [r4, #12]
 800deb8:	071a      	lsls	r2, r3, #28
 800deba:	d501      	bpl.n	800dec0 <__swbuf_r+0x20>
 800debc:	6923      	ldr	r3, [r4, #16]
 800debe:	b943      	cbnz	r3, 800ded2 <__swbuf_r+0x32>
 800dec0:	4621      	mov	r1, r4
 800dec2:	4628      	mov	r0, r5
 800dec4:	f000 f82a 	bl	800df1c <__swsetup_r>
 800dec8:	b118      	cbz	r0, 800ded2 <__swbuf_r+0x32>
 800deca:	f04f 37ff 	mov.w	r7, #4294967295
 800dece:	4638      	mov	r0, r7
 800ded0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ded2:	6823      	ldr	r3, [r4, #0]
 800ded4:	6922      	ldr	r2, [r4, #16]
 800ded6:	1a98      	subs	r0, r3, r2
 800ded8:	6963      	ldr	r3, [r4, #20]
 800deda:	b2f6      	uxtb	r6, r6
 800dedc:	4283      	cmp	r3, r0
 800dede:	4637      	mov	r7, r6
 800dee0:	dc05      	bgt.n	800deee <__swbuf_r+0x4e>
 800dee2:	4621      	mov	r1, r4
 800dee4:	4628      	mov	r0, r5
 800dee6:	f7ff ff51 	bl	800dd8c <_fflush_r>
 800deea:	2800      	cmp	r0, #0
 800deec:	d1ed      	bne.n	800deca <__swbuf_r+0x2a>
 800deee:	68a3      	ldr	r3, [r4, #8]
 800def0:	3b01      	subs	r3, #1
 800def2:	60a3      	str	r3, [r4, #8]
 800def4:	6823      	ldr	r3, [r4, #0]
 800def6:	1c5a      	adds	r2, r3, #1
 800def8:	6022      	str	r2, [r4, #0]
 800defa:	701e      	strb	r6, [r3, #0]
 800defc:	6962      	ldr	r2, [r4, #20]
 800defe:	1c43      	adds	r3, r0, #1
 800df00:	429a      	cmp	r2, r3
 800df02:	d004      	beq.n	800df0e <__swbuf_r+0x6e>
 800df04:	89a3      	ldrh	r3, [r4, #12]
 800df06:	07db      	lsls	r3, r3, #31
 800df08:	d5e1      	bpl.n	800dece <__swbuf_r+0x2e>
 800df0a:	2e0a      	cmp	r6, #10
 800df0c:	d1df      	bne.n	800dece <__swbuf_r+0x2e>
 800df0e:	4621      	mov	r1, r4
 800df10:	4628      	mov	r0, r5
 800df12:	f7ff ff3b 	bl	800dd8c <_fflush_r>
 800df16:	2800      	cmp	r0, #0
 800df18:	d0d9      	beq.n	800dece <__swbuf_r+0x2e>
 800df1a:	e7d6      	b.n	800deca <__swbuf_r+0x2a>

0800df1c <__swsetup_r>:
 800df1c:	b538      	push	{r3, r4, r5, lr}
 800df1e:	4b29      	ldr	r3, [pc, #164]	@ (800dfc4 <__swsetup_r+0xa8>)
 800df20:	4605      	mov	r5, r0
 800df22:	6818      	ldr	r0, [r3, #0]
 800df24:	460c      	mov	r4, r1
 800df26:	b118      	cbz	r0, 800df30 <__swsetup_r+0x14>
 800df28:	6a03      	ldr	r3, [r0, #32]
 800df2a:	b90b      	cbnz	r3, 800df30 <__swsetup_r+0x14>
 800df2c:	f7ff f910 	bl	800d150 <__sinit>
 800df30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df34:	0719      	lsls	r1, r3, #28
 800df36:	d422      	bmi.n	800df7e <__swsetup_r+0x62>
 800df38:	06da      	lsls	r2, r3, #27
 800df3a:	d407      	bmi.n	800df4c <__swsetup_r+0x30>
 800df3c:	2209      	movs	r2, #9
 800df3e:	602a      	str	r2, [r5, #0]
 800df40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df44:	81a3      	strh	r3, [r4, #12]
 800df46:	f04f 30ff 	mov.w	r0, #4294967295
 800df4a:	e033      	b.n	800dfb4 <__swsetup_r+0x98>
 800df4c:	0758      	lsls	r0, r3, #29
 800df4e:	d512      	bpl.n	800df76 <__swsetup_r+0x5a>
 800df50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df52:	b141      	cbz	r1, 800df66 <__swsetup_r+0x4a>
 800df54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df58:	4299      	cmp	r1, r3
 800df5a:	d002      	beq.n	800df62 <__swsetup_r+0x46>
 800df5c:	4628      	mov	r0, r5
 800df5e:	f7ff fac1 	bl	800d4e4 <_free_r>
 800df62:	2300      	movs	r3, #0
 800df64:	6363      	str	r3, [r4, #52]	@ 0x34
 800df66:	89a3      	ldrh	r3, [r4, #12]
 800df68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800df6c:	81a3      	strh	r3, [r4, #12]
 800df6e:	2300      	movs	r3, #0
 800df70:	6063      	str	r3, [r4, #4]
 800df72:	6923      	ldr	r3, [r4, #16]
 800df74:	6023      	str	r3, [r4, #0]
 800df76:	89a3      	ldrh	r3, [r4, #12]
 800df78:	f043 0308 	orr.w	r3, r3, #8
 800df7c:	81a3      	strh	r3, [r4, #12]
 800df7e:	6923      	ldr	r3, [r4, #16]
 800df80:	b94b      	cbnz	r3, 800df96 <__swsetup_r+0x7a>
 800df82:	89a3      	ldrh	r3, [r4, #12]
 800df84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800df88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df8c:	d003      	beq.n	800df96 <__swsetup_r+0x7a>
 800df8e:	4621      	mov	r1, r4
 800df90:	4628      	mov	r0, r5
 800df92:	f7ff ff49 	bl	800de28 <__smakebuf_r>
 800df96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df9a:	f013 0201 	ands.w	r2, r3, #1
 800df9e:	d00a      	beq.n	800dfb6 <__swsetup_r+0x9a>
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	60a2      	str	r2, [r4, #8]
 800dfa4:	6962      	ldr	r2, [r4, #20]
 800dfa6:	4252      	negs	r2, r2
 800dfa8:	61a2      	str	r2, [r4, #24]
 800dfaa:	6922      	ldr	r2, [r4, #16]
 800dfac:	b942      	cbnz	r2, 800dfc0 <__swsetup_r+0xa4>
 800dfae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dfb2:	d1c5      	bne.n	800df40 <__swsetup_r+0x24>
 800dfb4:	bd38      	pop	{r3, r4, r5, pc}
 800dfb6:	0799      	lsls	r1, r3, #30
 800dfb8:	bf58      	it	pl
 800dfba:	6962      	ldrpl	r2, [r4, #20]
 800dfbc:	60a2      	str	r2, [r4, #8]
 800dfbe:	e7f4      	b.n	800dfaa <__swsetup_r+0x8e>
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	e7f7      	b.n	800dfb4 <__swsetup_r+0x98>
 800dfc4:	24000020 	.word	0x24000020

0800dfc8 <_fstat_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4d07      	ldr	r5, [pc, #28]	@ (800dfe8 <_fstat_r+0x20>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	602b      	str	r3, [r5, #0]
 800dfd6:	f7f3 f9fb 	bl	80013d0 <_fstat>
 800dfda:	1c43      	adds	r3, r0, #1
 800dfdc:	d102      	bne.n	800dfe4 <_fstat_r+0x1c>
 800dfde:	682b      	ldr	r3, [r5, #0]
 800dfe0:	b103      	cbz	r3, 800dfe4 <_fstat_r+0x1c>
 800dfe2:	6023      	str	r3, [r4, #0]
 800dfe4:	bd38      	pop	{r3, r4, r5, pc}
 800dfe6:	bf00      	nop
 800dfe8:	24004e7c 	.word	0x24004e7c

0800dfec <_isatty_r>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	4d06      	ldr	r5, [pc, #24]	@ (800e008 <_isatty_r+0x1c>)
 800dff0:	2300      	movs	r3, #0
 800dff2:	4604      	mov	r4, r0
 800dff4:	4608      	mov	r0, r1
 800dff6:	602b      	str	r3, [r5, #0]
 800dff8:	f7f3 f958 	bl	80012ac <_isatty>
 800dffc:	1c43      	adds	r3, r0, #1
 800dffe:	d102      	bne.n	800e006 <_isatty_r+0x1a>
 800e000:	682b      	ldr	r3, [r5, #0]
 800e002:	b103      	cbz	r3, 800e006 <_isatty_r+0x1a>
 800e004:	6023      	str	r3, [r4, #0]
 800e006:	bd38      	pop	{r3, r4, r5, pc}
 800e008:	24004e7c 	.word	0x24004e7c

0800e00c <_sbrk_r>:
 800e00c:	b538      	push	{r3, r4, r5, lr}
 800e00e:	4d06      	ldr	r5, [pc, #24]	@ (800e028 <_sbrk_r+0x1c>)
 800e010:	2300      	movs	r3, #0
 800e012:	4604      	mov	r4, r0
 800e014:	4608      	mov	r0, r1
 800e016:	602b      	str	r3, [r5, #0]
 800e018:	f7f3 fa46 	bl	80014a8 <_sbrk>
 800e01c:	1c43      	adds	r3, r0, #1
 800e01e:	d102      	bne.n	800e026 <_sbrk_r+0x1a>
 800e020:	682b      	ldr	r3, [r5, #0]
 800e022:	b103      	cbz	r3, 800e026 <_sbrk_r+0x1a>
 800e024:	6023      	str	r3, [r4, #0]
 800e026:	bd38      	pop	{r3, r4, r5, pc}
 800e028:	24004e7c 	.word	0x24004e7c

0800e02c <_init>:
 800e02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e02e:	bf00      	nop
 800e030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e032:	bc08      	pop	{r3}
 800e034:	469e      	mov	lr, r3
 800e036:	4770      	bx	lr

0800e038 <_fini>:
 800e038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03a:	bf00      	nop
 800e03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e03e:	bc08      	pop	{r3}
 800e040:	469e      	mov	lr, r3
 800e042:	4770      	bx	lr
