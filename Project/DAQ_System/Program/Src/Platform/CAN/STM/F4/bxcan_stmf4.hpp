/*
* BxCAN Peripheral
* Author:   William Lim
*           Cristian Cruz
*
* Email:    wll180000@utdallas.edu
*           cris14.alex@gmail.com
*
* (c) 2024 Dallas Formula Racing - Embedded Firmware Team
* Formula SAE International Collegiate Chapter
* GPL-3.0 License
*/

#ifndef STM_F4_BXCAN_STMF4_H
#define STM_F4_BXCAN_STMF4_H

// Standard Libraries
#include <vector>

// ST HAL Dependencies
#include "can.h"

// DFR Custom Dependencies
#include "../../Interfaces/ican.hpp"


namespace platform {

class BxCanStmF4 : public ICan {
public:
	/// @param hcan A reference to the handle of the CAN peripheral. This is
	/// generated by CubeMX and exposes functionality to the hardware.  
	BxCanStmF4(CAN_HandleTypeDef &hcan);

	virtual ~BxCanStmF4();

	/// Runs the CAN controller.
	virtual void Start() override;

	/// Activates notifications for the interrupt mode configured with `ConfigureReceiveCallback()`.
	virtual void EnableInterruptMode() override;

	/// De-activates notifications for the interrupt mode configured with `ConfigureReceiveCallback()`.
	virtual void DisableInterruptMode() override;

	/// Stores the CAN message's data payload.
	/// @param rx_buffer The byte array where the data is to be stored. 
	virtual void Receive(uint8_t rx_buffer[kMaxBytes]) override;

	/// Publishes data to the CAN bus.
	/// @param tx_buffer The byte array whose data is to be sent.
	virtual void Transmit(uint8_t tx_buffer[kMaxBytes]) override;

	/// @return Indicates whether a new message has arrived.
	virtual bool MessageArrivedFlag() override;

	/// Clears the `MessageArrivedFlag()`.
	virtual void ClearMessageArrivedFlag() override;

	/// @return The CAN ID of the latest message received.
	virtual uint32_t LatestCanId() override;

	/// A user-configurable interrupt mode for generating notifications
	/// when CAN messages are received. To be used with `ConfigureReceiveCallback()`.
	enum class ReceiveInterruptMode : uint8_t {
		kFifo0MessagePending,
		kFifo0Full,
		Fifo0Overrun,

		kFifo1MessagePending,
		kFifo1Full,
		Fifo1Overrun,
	};

	/// Configures hardware filters and message banks to receive messages
	/// with a specified range of CAN IDs.
	/// @param filder_id_high The higher bound of the valid ID range.
	/// @param filter_id_low The lower bound of the valid ID range.
	void ConfigureFilter(uint32_t filder_id_high, uint32_t filter_id_low);

	/// Sets the interrupt mode for received messages. After configuration,
	/// interrupts are to be controlled with `EnableInterruptMode()` and
	/// `DisableInterruptMode()`.
	/// @param mode Defines the situation in which an interrupt signal occurs.
	/// 			For options, see the ::ReceiveInterruptMode enum.
	void ConfigureReceiveCallback(ReceiveInterruptMode mode);

	/// The callback function for when a receive interrupt occurs.
	/// This must be added to ST's HAL callback function, which is to be
	/// overwritten with our own implementation.
	///
	/// This receives the byte array and ID from the CAN message, and sets
	/// the `MessageArrivedFlag()`.
	void ReceiveCallback();

private:

	uint8_t rx_buffer_[kMaxBytes] = { 0 };
	volatile bool message_arrived_ = false;
	volatile uint32_t can_id_ = 0;

	// ST's HAL library.
	CAN_HandleTypeDef& bx_can_; 			// BxCAN (Basic Extended) peripheral
	CAN_RxHeaderTypeDef rx_message_header_; // Receiving message info
	CAN_FilterTypeDef filter_;				// Filter bank configuration
	uint8_t filter_bank_num_;

	// Configurable options
	uint32_t rx_interrupt_mode_ = 0;
	uint8_t rx_fifo_ = 0;
};

}

#endif // STM_F4_BXCAN_STMF4_H
